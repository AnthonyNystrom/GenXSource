
//listing of all techniques and passes with embedded asm listings 

technique SphereRenderingBatchPhong
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldViewProjection                   c229     4
            //   g_mWorldView                             c233     3
            //   g_Light1Dir                              c236     1
            //   g_Light2Dir                              c237     1
            //   g_Light1Intensity                        c238     1
            //   g_Light2Intensity                        c239     1
            //   g_Light1Color                            c240     1
            //   g_Light2Color                            c241     1
            //   g_numActiveLight                         c242     1
            //   g_vecEye                                 c243     1
            //   g_intensityAmbient                       c244     1
            //   g_intensityDiffuse                       c245     1
            //
            
                vs_3_0
                def c246, 1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 160 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v2.x
                frc r0.y, r0.x
                mov r0.z, -r0.y
                add r0.x, r0.x, r0.z
                mov r0.w, -v2.x
                slt r0.w, v2.x, r0.w
                slt r0.y, r0.z, r0.y
                mul r0.y, r0.y, r0.w
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, c246.x
                mova a0.x, r0.x
                mov r0, c0[a0.x]  // ::vSpherePosition<0,1,2,3>
                mov r1.x, c75[a0.x].x  // ::bSelect<0>
                mov r1.yzw, c150[a0.x].xxyz  // ::vColor<0,1,2>
                mov r2, v0  // ::vRotatedPos<0,1,2,3>
            
            #line 194
                add r0, r0, r2  // ::vRotatedPos<0,1,2,3>
            
            #line 197
                dp4 r2.x, r0, c229  // ::Out<0>
                dp4 r2.y, r0, c230  // ::Out<1>
                dp4 r2.z, r0, c231  // ::Out<2>
                dp4 r2.w, r0, c232  // ::Out<3>
            
            #line 200
                dp3 r3.x, v1, c225  // ::Out<12>
                dp3 r3.y, v1, c226  // ::Out<13>
                dp3 r3.z, v1, c227  // ::Out<14>
                dp4 r4.x, r0, c225  // ::Out<8>
                dp4 r4.y, r0, c226  // ::Out<9>
                dp4 r4.z, r0, c227  // ::Out<10>
                dp4 r4.w, r0, c228  // ::Out<11>
                mov r5.xyz, -r4
                add r5.xyz, r5, c243  // ::Out<15,16,17>
                mov r6.y, c246.y
                add r3.w, r6.y, c242.x
                mov r5.w, -r3.w
                max r3.w, r3.w, r5.w
                mov r5.w, -r3.w
                sge r3.w, r5.w, r3.w
                mov r1.yzw, r1  // ::Out<4,5,6>
            
            #line 209
                mov r6.x, c238.x  // ::g_Light1Intensity<0>
                mul r6.xyz, r6.x, c240
                mul r6.xyz, r6, c245.x
                dp3 r5.w, r3, c236
                max r5.w, r5.w, c244.x
                mul r6.xyz, r5.w, r6
                mov r7.x, c239.x  // ::g_Light2Intensity<0>
                mul r7.xyz, r7.x, c241
                mul r7.xyz, r7, c245.x
                dp3 r5.w, r3, c237
                max r5.w, r5.w, c244.x
                mul r7.xyz, r5.w, r7
                add r6.xyz, r6, r7
                mul r6.xyz, r1.yzww, r6  // ::Out<4,5,6>
            
            #line 204
                mov r7.xyz, -r6
                add r1.yzw, r1, r7.xxyz
                mul r1.yzw, r1, r3.w
                add r1.yzw, r1, r6.xxyz  // ::Out<4,5,6>
            
            #line 211
                mov r1.x, r1.x  // ::Out<7>
                dp3 r6.x, v1, c233  // ::Normal<0>
                dp3 r6.y, v1, c234  // ::Normal<1>
                dp3 r6.z, v1, c235  // ::Normal<2>
                mul r6.xyz, r6, c246.z
                add r6.xyz, r6, c246.z  // ::Out<18,19,20>
                dp4 r7.x, r0, c233  // ::Out<21>
                dp4 r7.y, r0, c234  // ::Out<22>
                dp4 r7.z, r0, c235  // ::Out<23>
                mov o0, r2  // ::SphereRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r1.yzww  // ::SphereRenderingPhongVS<4,5,6>
                mov o1.w, r1.x  // ::SphereRenderingPhongVS<7>
                mov o2, r4  // ::SphereRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r3  // ::SphereRenderingPhongVS<12,13,14>
                mov o4.xyz, r5  // ::SphereRenderingPhongVS<15,16,17>
                mov o5.xyz, r6  // ::SphereRenderingPhongVS<18,19,20>
                mov o6.xyz, r7  // ::SphereRenderingPhongVS<21,22,23>
            
            // approximately 71 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_clipPlane0        c7       1
            //   g_clipPlane0Dir     c8       1
            //   g_clipPlane1        c9       1
            //   g_clipPlane1Dir     c10      1
            //   g_clipPlane2        c11      1
            //   g_clipPlane2Dir     c12      1
            //   g_fogParam          c13      1
            //   g_fogColor          c14      1
            //   g_intensitySpecular c15      1
            //   g_farClipPlane      c16      1
            //
            
                ps_3_0
                def c17, 1, 0, 0, 30
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord3 v4.xyz  // In<18,19,20>
                dcl_texcoord4 v5.xyz  // In<21,22,23>
            
            #line 225 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c7, r0
                mul r1.x, r1.x, c8.x  // ::result0<0>
                dp4 r1.y, c9, r0
                mul r1.y, r1.y, c10.x  // ::result1<0>
                dp4 r0.x, c11, r0
                mul r0.x, r0.x, c12.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 225
                mul r0, r0.x, c17.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
                mov r1.xy, c17
                add r0.y, r1.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c17.z, c17.x
                mul r0.y, r0.y, c17.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, v3.xxyz
                add r2.xyz, r1.yzww, c0
                dp3 r0.z, r2, r2
                rsq r0.z, r0.z
                mul r2.xyz, r0.z, r2  // ::H1<0,1,2>
                add r1.yzw, r1, c1.xxyz
                dp3 r0.z, r1.yzww, r1.yzww
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, r1  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 240
                mov r4.xyz, c4  // ::g_Light1Color<0,1,2>
                mul r4.xyz, r4, c2.x
                mul r4.xyz, r4, c15.x
                dp3 r0.z, r3, r2
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r2.xyz, r0.z, r4
                add r2.xyz, r2, v0
                mov r4.xyz, c5  // ::g_Light2Color<0,1,2>
                mul r4.xyz, r4, c3.x
                mul r4.xyz, r4, c15.x
                dp3 r0.z, r3, r1.yzww
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r1.yzw, r0.z, r4.xxyz
                add r1.yzw, r1, r2.xxyz  // ::finalColor<0,1,2>
            
            #line 244
                mov r2.xyz, v0  // ::finalColor<0,1,2>
            
            #line 229
                mov r0.yzw, -r0.y
                cmp r0.yzw, r0, r2.xxyz, r1  // ::finalColor<0,1,2>
            
            #line 247
                add r1.x, -r1.x, c13.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c17.x, c17.z
            
            #line 250
                dp3 r1.y, v5, v5
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c13.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c13.y
                add r1.z, r1.y, c17.y
                cmp r1.y, r1.z, r1.y, c17.z
                add r1.z, r1.y, -c17.x
                cmp r1.y, r1.z, c17.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c14
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c14.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 254
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c17.xxxz, v4.xyzx
                add oC1, r1, c17.yyyx  // OutNormal<0,1,2,3>
            
            #line 259
                rcp r1.x, c16.x
                rcp r1.y, c16.x
                rcp r1.z, c16.x
                mul oC2.xyz, r1, v5.z  // OutDepth<0,1,2>
                mov oC2.w, c17.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 91 instruction slots used
            };
    }
}

technique SphereRenderingBatchGouraud
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldViewProjection                   c229     4
            //   g_mWorldView                             c233     3
            //   g_Light1Dir                              c236     1
            //   g_Light2Dir                              c237     1
            //   g_Light1Intensity                        c238     1
            //   g_Light2Intensity                        c239     1
            //   g_Light1Color                            c240     1
            //   g_Light2Color                            c241     1
            //   g_numActiveLight                         c242     1
            //   g_vecEye                                 c243     1
            //   g_intensityAmbient                       c244     1
            //   g_intensityDiffuse                       c245     1
            //
            
                vs_3_0
                def c246, 1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 160 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v2.x
                frc r0.y, r0.x
                mov r0.z, -r0.y
                add r0.x, r0.x, r0.z
                mov r0.w, -v2.x
                slt r0.w, v2.x, r0.w
                slt r0.y, r0.z, r0.y
                mul r0.y, r0.y, r0.w
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, c246.x
                mova a0.x, r0.x
                mov r0, c0[a0.x]  // ::vSpherePosition<0,1,2,3>
                mov r1.x, c75[a0.x].x  // ::bSelect<0>
                mov r1.yzw, c150[a0.x].xxyz  // ::vColor<0,1,2>
                mov r2, v0  // ::vRotatedPos<0,1,2,3>
            
            #line 194
                add r0, r0, r2  // ::vRotatedPos<0,1,2,3>
            
            #line 197
                dp4 r2.x, r0, c229  // ::Out<0>
                dp4 r2.y, r0, c230  // ::Out<1>
                dp4 r2.z, r0, c231  // ::Out<2>
                dp4 r2.w, r0, c232  // ::Out<3>
            
            #line 200
                dp3 r3.x, v1, c225  // ::Out<12>
                dp3 r3.y, v1, c226  // ::Out<13>
                dp3 r3.z, v1, c227  // ::Out<14>
                dp4 r4.x, r0, c225  // ::Out<8>
                dp4 r4.y, r0, c226  // ::Out<9>
                dp4 r4.z, r0, c227  // ::Out<10>
                dp4 r4.w, r0, c228  // ::Out<11>
                mov r5.xyz, -r4
                add r5.xyz, r5, c243  // ::Out<15,16,17>
                mov r6.y, c246.y
                add r3.w, r6.y, c242.x
                mov r5.w, -r3.w
                max r3.w, r3.w, r5.w
                mov r5.w, -r3.w
                sge r3.w, r5.w, r3.w
                mov r1.yzw, r1  // ::Out<4,5,6>
            
            #line 209
                mov r6.x, c238.x  // ::g_Light1Intensity<0>
                mul r6.xyz, r6.x, c240
                mul r6.xyz, r6, c245.x
                dp3 r5.w, r3, c236
                max r5.w, r5.w, c244.x
                mul r6.xyz, r5.w, r6
                mov r7.x, c239.x  // ::g_Light2Intensity<0>
                mul r7.xyz, r7.x, c241
                mul r7.xyz, r7, c245.x
                dp3 r5.w, r3, c237
                max r5.w, r5.w, c244.x
                mul r7.xyz, r5.w, r7
                add r6.xyz, r6, r7
                mul r6.xyz, r1.yzww, r6  // ::Out<4,5,6>
            
            #line 204
                mov r7.xyz, -r6
                add r1.yzw, r1, r7.xxyz
                mul r1.yzw, r1, r3.w
                add r1.yzw, r1, r6.xxyz  // ::Out<4,5,6>
            
            #line 211
                mov r1.x, r1.x  // ::Out<7>
                dp3 r6.x, v1, c233  // ::Normal<0>
                dp3 r6.y, v1, c234  // ::Normal<1>
                dp3 r6.z, v1, c235  // ::Normal<2>
                mul r6.xyz, r6, c246.z
                add r6.xyz, r6, c246.z  // ::Out<18,19,20>
                dp4 r7.x, r0, c233  // ::Out<21>
                dp4 r7.y, r0, c234  // ::Out<22>
                dp4 r7.z, r0, c235  // ::Out<23>
                mov o0, r2  // ::SphereRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r1.yzww  // ::SphereRenderingPhongVS<4,5,6>
                mov o1.w, r1.x  // ::SphereRenderingPhongVS<7>
                mov o2, r4  // ::SphereRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r3  // ::SphereRenderingPhongVS<12,13,14>
                mov o4.xyz, r5  // ::SphereRenderingPhongVS<15,16,17>
                mov o5.xyz, r6  // ::SphereRenderingPhongVS<18,19,20>
                mov o6.xyz, r7  // ::SphereRenderingPhongVS<21,22,23>
            
            // approximately 71 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_fogParam      c6       1
            //   g_fogColor      c7       1
            //   g_farClipPlane  c8       1
            //
            
                ps_3_0
                def c9, 1, -1, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord3 v2.xyz  // In<18,19,20>
                dcl_texcoord4 v3.xyz  // In<21,22,23>
            
            #line 225 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 225
                mul r0, r0.x, c9.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 244
                mov r0.yzw, v0.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r1.y, c9.y
                add r1.x, r1.y, c6.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c9.x, c9.z
            
            #line 250
                dp3 r1.y, v3, v3
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c6.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c6.y
                add r1.z, r1.y, c9.w
                cmp r1.y, r1.z, r1.y, c9.z
                add r1.z, r1.y, c9.y
                cmp r1.y, r1.z, c9.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c7
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c7.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 254
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c9.xxxz, v2.xyzx
                add oC1, r1, c9.zzzx  // OutNormal<0,1,2,3>
            
            #line 259
                rcp r1.x, c8.x
                rcp r1.y, c8.x
                rcp r1.z, c8.x
                mul oC2.xyz, r1, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c9.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 45 instruction slots used
            };
    }
}

technique CylinderRenderingBatchPhong
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldViewProjection                   c229     4
            //   g_mWorldView                             c233     3
            //   g_Light1Dir                              c236     1
            //   g_Light2Dir                              c237     1
            //   g_Light1Intensity                        c238     1
            //   g_Light2Intensity                        c239     1
            //   g_Light1Color                            c240     1
            //   g_Light2Color                            c241     1
            //   g_numActiveLight                         c242     1
            //   g_vecEye                                 c243     1
            //   g_intensityAmbient                       c244     1
            //   g_intensityDiffuse                       c245     1
            //
            
                vs_3_0
                def c246, 1, 0.159154937, 0.5, 6.28318548
                def c247, -3.14159274, 0, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 160 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v2.x
                frc r0.y, r0.x
                mov r0.z, -r0.y
                add r0.x, r0.x, r0.z
                mov r0.w, -v2.x
                slt r0.w, v2.x, r0.w
                slt r0.y, r0.z, r0.y
                mul r0.y, r0.y, r0.w
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, c246.x
                mova a0.x, r0.x
                mov r0, c0[a0.x]  // ::vSpherePosition<0,1,2,3>
                mov r1.x, c75[a0.x].x  // ::bSelect<0>
                mov r1.yzw, c150[a0.x].xxyz  // ::vColor<0,1,2>
                mov r2.xw, v0  // ::vRotatedPos<0,3>
                mov r3.x, v1.x  // ::vRotatedNorm<0>
            
            #line 169
                mov r3.y, c75[a0.x].y  // ::rotationY<0>
                mov r3.z, c75[a0.x].z  // ::rotationX<0>
                mov r3.w, c75[a0.x].w  // ::scale<0>
            
            #line 174
                mul r3.w, r3.w, v0.z  // inPos<2>
            
            #line 177
                mul r3.z, r3.z, c246.y
                add r3.z, r3.z, c246.z
                frc r3.z, r3.z
                mul r3.z, r3.z, c246.w
                add r3.z, r3.z, c247.x
                sincos r4.xy, r3.z
                mul r3.z, r4.x, v0.y
                mul r4.z, r3.w, r4.y
                mov r4.z, -r4.z
                add r2.y, r3.z, r4.z  // ::vRotatedPos<1>
                mul r3.z, r4.y, v0.y
                mul r3.w, r3.w, r4.x
                add r3.z, r3.w, r3.z  // ::vRotatedPos<2>
                mov r3.w, r2.x  // inPos<0>
                mov r3.z, r3.z  // inPos<2>
                mul r3.y, r3.y, c246.y
                add r3.y, r3.y, c246.z
                frc r3.y, r3.y
                mul r3.y, r3.y, c246.w
                add r3.y, r3.y, c247.x
                sincos r5.xy, r3.y
                mul r3.y, r3.w, r5.x
                mul r4.z, r3.z, r5.y
                add r2.x, r3.y, r4.z  // ::vRotatedPos<0>
                mov r3.y, -r3.w
                mul r3.y, r5.y, r3.y
                mul r3.z, r3.z, r5.x
                add r2.z, r3.z, r3.y  // ::vRotatedPos<2>
            
            #line 185
                mul r3.y, r4.x, v1.y
                mul r3.z, r4.y, v1.z
                mov r3.z, -r3.z
                add r6.y, r3.z, r3.y  // ::vRotatedNorm<1>
                mul r3.y, r4.y, v1.y
                mul r3.z, r4.x, v1.z
                add r3.y, r3.z, r3.y  // ::vRotatedNorm<2>
                mov r3.x, r3.x  // inNorm<0>
                mov r3.y, r3.y  // inNorm<2>
                mul r3.z, r5.x, r3.x
                mul r3.w, r5.y, r3.y
                add r6.x, r3.w, r3.z  // ::vRotatedNorm<0>
                mov r3.x, -r3.x
                mul r3.x, r5.y, r3.x
                mul r3.y, r5.x, r3.y
                add r6.z, r3.y, r3.x  // ::vRotatedNorm<2>
            
            #line 194
                add r0, r0, r2  // ::vRotatedPos<0,1,2,3>
            
            #line 197
                dp4 r2.x, r0, c229  // ::Out<0>
                dp4 r2.y, r0, c230  // ::Out<1>
                dp4 r2.z, r0, c231  // ::Out<2>
                dp4 r2.w, r0, c232  // ::Out<3>
            
            #line 200
                dp3 r3.x, r6, c225  // ::Out<12>
                dp3 r3.y, r6, c226  // ::Out<13>
                dp3 r3.z, r6, c227  // ::Out<14>
                dp4 r4.x, r0, c225  // ::Out<8>
                dp4 r4.y, r0, c226  // ::Out<9>
                dp4 r4.z, r0, c227  // ::Out<10>
                dp4 r4.w, r0, c228  // ::Out<11>
                mov r5.xyz, -r4
                add r5.xyz, r5, c243  // ::Out<15,16,17>
                mov r7.y, c247.y
                add r3.w, r7.y, c242.x
                mov r5.w, -r3.w
                max r3.w, r3.w, r5.w
                mov r5.w, -r3.w
                sge r3.w, r5.w, r3.w
                mov r1.yzw, r1  // ::Out<4,5,6>
            
            #line 209
                mov r7.x, c238.x  // ::g_Light1Intensity<0>
                mul r7.xyz, r7.x, c240
                mul r7.xyz, r7, c245.x
                dp3 r5.w, r3, c236
                max r5.w, r5.w, c244.x
                mul r7.xyz, r5.w, r7
                mov r8.x, c239.x  // ::g_Light2Intensity<0>
                mul r8.xyz, r8.x, c241
                mul r8.xyz, r8, c245.x
                dp3 r5.w, r3, c237
                max r5.w, r5.w, c244.x
                mul r8.xyz, r5.w, r8
                add r7.xyz, r7, r8
                mul r7.xyz, r1.yzww, r7  // ::Out<4,5,6>
            
            #line 204
                mov r8.xyz, -r7
                add r1.yzw, r1, r8.xxyz
                mul r1.yzw, r1, r3.w
                add r1.yzw, r1, r7.xxyz  // ::Out<4,5,6>
            
            #line 211
                mov r1.x, r1.x  // ::Out<7>
                dp3 r7.x, r6, c233  // ::Normal<0>
                dp3 r7.y, r6, c234  // ::Normal<1>
                dp3 r7.z, r6, c235  // ::Normal<2>
                mul r6.xyz, r7, c246.z
                add r6.xyz, r6, c246.z  // ::Out<18,19,20>
                dp4 r7.x, r0, c233  // ::Out<21>
                dp4 r7.y, r0, c234  // ::Out<22>
                dp4 r7.z, r0, c235  // ::Out<23>
                mov o0, r2  // ::SphereRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r1.yzww  // ::SphereRenderingPhongVS<4,5,6>
                mov o1.w, r1.x  // ::SphereRenderingPhongVS<7>
                mov o2, r4  // ::SphereRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r3  // ::SphereRenderingPhongVS<12,13,14>
                mov o4.xyz, r5  // ::SphereRenderingPhongVS<15,16,17>
                mov o5.xyz, r6  // ::SphereRenderingPhongVS<18,19,20>
                mov o6.xyz, r7  // ::SphereRenderingPhongVS<21,22,23>
            
            // approximately 134 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_clipPlane0        c7       1
            //   g_clipPlane0Dir     c8       1
            //   g_clipPlane1        c9       1
            //   g_clipPlane1Dir     c10      1
            //   g_clipPlane2        c11      1
            //   g_clipPlane2Dir     c12      1
            //   g_fogParam          c13      1
            //   g_fogColor          c14      1
            //   g_intensitySpecular c15      1
            //   g_farClipPlane      c16      1
            //
            
                ps_3_0
                def c17, 1, 0, 0, 30
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord3 v4.xyz  // In<18,19,20>
                dcl_texcoord4 v5.xyz  // In<21,22,23>
            
            #line 225 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c7, r0
                mul r1.x, r1.x, c8.x  // ::result0<0>
                dp4 r1.y, c9, r0
                mul r1.y, r1.y, c10.x  // ::result1<0>
                dp4 r0.x, c11, r0
                mul r0.x, r0.x, c12.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 225
                mul r0, r0.x, c17.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
                mov r1.xy, c17
                add r0.y, r1.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c17.z, c17.x
                mul r0.y, r0.y, c17.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, v3.xxyz
                add r2.xyz, r1.yzww, c0
                dp3 r0.z, r2, r2
                rsq r0.z, r0.z
                mul r2.xyz, r0.z, r2  // ::H1<0,1,2>
                add r1.yzw, r1, c1.xxyz
                dp3 r0.z, r1.yzww, r1.yzww
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, r1  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 240
                mov r4.xyz, c4  // ::g_Light1Color<0,1,2>
                mul r4.xyz, r4, c2.x
                mul r4.xyz, r4, c15.x
                dp3 r0.z, r3, r2
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r2.xyz, r0.z, r4
                add r2.xyz, r2, v0
                mov r4.xyz, c5  // ::g_Light2Color<0,1,2>
                mul r4.xyz, r4, c3.x
                mul r4.xyz, r4, c15.x
                dp3 r0.z, r3, r1.yzww
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r1.yzw, r0.z, r4.xxyz
                add r1.yzw, r1, r2.xxyz  // ::finalColor<0,1,2>
            
            #line 244
                mov r2.xyz, v0  // ::finalColor<0,1,2>
            
            #line 229
                mov r0.yzw, -r0.y
                cmp r0.yzw, r0, r2.xxyz, r1  // ::finalColor<0,1,2>
            
            #line 247
                add r1.x, -r1.x, c13.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c17.x, c17.z
            
            #line 250
                dp3 r1.y, v5, v5
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c13.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c13.y
                add r1.z, r1.y, c17.y
                cmp r1.y, r1.z, r1.y, c17.z
                add r1.z, r1.y, -c17.x
                cmp r1.y, r1.z, c17.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c14
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c14.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 254
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c17.xxxz, v4.xyzx
                add oC1, r1, c17.yyyx  // OutNormal<0,1,2,3>
            
            #line 259
                rcp r1.x, c16.x
                rcp r1.y, c16.x
                rcp r1.z, c16.x
                mul oC2.xyz, r1, v5.z  // OutDepth<0,1,2>
                mov oC2.w, c17.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 91 instruction slots used
            };
    }
}

technique CylinderRenderingBatchGouraud
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldViewProjection                   c229     4
            //   g_mWorldView                             c233     3
            //   g_Light1Dir                              c236     1
            //   g_Light2Dir                              c237     1
            //   g_Light1Intensity                        c238     1
            //   g_Light2Intensity                        c239     1
            //   g_Light1Color                            c240     1
            //   g_Light2Color                            c241     1
            //   g_numActiveLight                         c242     1
            //   g_vecEye                                 c243     1
            //   g_intensityAmbient                       c244     1
            //   g_intensityDiffuse                       c245     1
            //
            
                vs_3_0
                def c246, 1, 0.159154937, 0.5, 6.28318548
                def c247, -3.14159274, 0, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 160 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v2.x
                frc r0.y, r0.x
                mov r0.z, -r0.y
                add r0.x, r0.x, r0.z
                mov r0.w, -v2.x
                slt r0.w, v2.x, r0.w
                slt r0.y, r0.z, r0.y
                mul r0.y, r0.y, r0.w
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, c246.x
                mova a0.x, r0.x
                mov r0, c0[a0.x]  // ::vSpherePosition<0,1,2,3>
                mov r1.x, c75[a0.x].x  // ::bSelect<0>
                mov r1.yzw, c150[a0.x].xxyz  // ::vColor<0,1,2>
                mov r2.xw, v0  // ::vRotatedPos<0,3>
                mov r3.x, v1.x  // ::vRotatedNorm<0>
            
            #line 169
                mov r3.y, c75[a0.x].y  // ::rotationY<0>
                mov r3.z, c75[a0.x].z  // ::rotationX<0>
                mov r3.w, c75[a0.x].w  // ::scale<0>
            
            #line 174
                mul r3.w, r3.w, v0.z  // inPos<2>
            
            #line 177
                mul r3.z, r3.z, c246.y
                add r3.z, r3.z, c246.z
                frc r3.z, r3.z
                mul r3.z, r3.z, c246.w
                add r3.z, r3.z, c247.x
                sincos r4.xy, r3.z
                mul r3.z, r4.x, v0.y
                mul r4.z, r3.w, r4.y
                mov r4.z, -r4.z
                add r2.y, r3.z, r4.z  // ::vRotatedPos<1>
                mul r3.z, r4.y, v0.y
                mul r3.w, r3.w, r4.x
                add r3.z, r3.w, r3.z  // ::vRotatedPos<2>
                mov r3.w, r2.x  // inPos<0>
                mov r3.z, r3.z  // inPos<2>
                mul r3.y, r3.y, c246.y
                add r3.y, r3.y, c246.z
                frc r3.y, r3.y
                mul r3.y, r3.y, c246.w
                add r3.y, r3.y, c247.x
                sincos r5.xy, r3.y
                mul r3.y, r3.w, r5.x
                mul r4.z, r3.z, r5.y
                add r2.x, r3.y, r4.z  // ::vRotatedPos<0>
                mov r3.y, -r3.w
                mul r3.y, r5.y, r3.y
                mul r3.z, r3.z, r5.x
                add r2.z, r3.z, r3.y  // ::vRotatedPos<2>
            
            #line 185
                mul r3.y, r4.x, v1.y
                mul r3.z, r4.y, v1.z
                mov r3.z, -r3.z
                add r6.y, r3.z, r3.y  // ::vRotatedNorm<1>
                mul r3.y, r4.y, v1.y
                mul r3.z, r4.x, v1.z
                add r3.y, r3.z, r3.y  // ::vRotatedNorm<2>
                mov r3.x, r3.x  // inNorm<0>
                mov r3.y, r3.y  // inNorm<2>
                mul r3.z, r5.x, r3.x
                mul r3.w, r5.y, r3.y
                add r6.x, r3.w, r3.z  // ::vRotatedNorm<0>
                mov r3.x, -r3.x
                mul r3.x, r5.y, r3.x
                mul r3.y, r5.x, r3.y
                add r6.z, r3.y, r3.x  // ::vRotatedNorm<2>
            
            #line 194
                add r0, r0, r2  // ::vRotatedPos<0,1,2,3>
            
            #line 197
                dp4 r2.x, r0, c229  // ::Out<0>
                dp4 r2.y, r0, c230  // ::Out<1>
                dp4 r2.z, r0, c231  // ::Out<2>
                dp4 r2.w, r0, c232  // ::Out<3>
            
            #line 200
                dp3 r3.x, r6, c225  // ::Out<12>
                dp3 r3.y, r6, c226  // ::Out<13>
                dp3 r3.z, r6, c227  // ::Out<14>
                dp4 r4.x, r0, c225  // ::Out<8>
                dp4 r4.y, r0, c226  // ::Out<9>
                dp4 r4.z, r0, c227  // ::Out<10>
                dp4 r4.w, r0, c228  // ::Out<11>
                mov r5.xyz, -r4
                add r5.xyz, r5, c243  // ::Out<15,16,17>
                mov r7.y, c247.y
                add r3.w, r7.y, c242.x
                mov r5.w, -r3.w
                max r3.w, r3.w, r5.w
                mov r5.w, -r3.w
                sge r3.w, r5.w, r3.w
                mov r1.yzw, r1  // ::Out<4,5,6>
            
            #line 209
                mov r7.x, c238.x  // ::g_Light1Intensity<0>
                mul r7.xyz, r7.x, c240
                mul r7.xyz, r7, c245.x
                dp3 r5.w, r3, c236
                max r5.w, r5.w, c244.x
                mul r7.xyz, r5.w, r7
                mov r8.x, c239.x  // ::g_Light2Intensity<0>
                mul r8.xyz, r8.x, c241
                mul r8.xyz, r8, c245.x
                dp3 r5.w, r3, c237
                max r5.w, r5.w, c244.x
                mul r8.xyz, r5.w, r8
                add r7.xyz, r7, r8
                mul r7.xyz, r1.yzww, r7  // ::Out<4,5,6>
            
            #line 204
                mov r8.xyz, -r7
                add r1.yzw, r1, r8.xxyz
                mul r1.yzw, r1, r3.w
                add r1.yzw, r1, r7.xxyz  // ::Out<4,5,6>
            
            #line 211
                mov r1.x, r1.x  // ::Out<7>
                dp3 r7.x, r6, c233  // ::Normal<0>
                dp3 r7.y, r6, c234  // ::Normal<1>
                dp3 r7.z, r6, c235  // ::Normal<2>
                mul r6.xyz, r7, c246.z
                add r6.xyz, r6, c246.z  // ::Out<18,19,20>
                dp4 r7.x, r0, c233  // ::Out<21>
                dp4 r7.y, r0, c234  // ::Out<22>
                dp4 r7.z, r0, c235  // ::Out<23>
                mov o0, r2  // ::SphereRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r1.yzww  // ::SphereRenderingPhongVS<4,5,6>
                mov o1.w, r1.x  // ::SphereRenderingPhongVS<7>
                mov o2, r4  // ::SphereRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r3  // ::SphereRenderingPhongVS<12,13,14>
                mov o4.xyz, r5  // ::SphereRenderingPhongVS<15,16,17>
                mov o5.xyz, r6  // ::SphereRenderingPhongVS<18,19,20>
                mov o6.xyz, r7  // ::SphereRenderingPhongVS<21,22,23>
            
            // approximately 134 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_fogParam      c6       1
            //   g_fogColor      c7       1
            //   g_farClipPlane  c8       1
            //
            
                ps_3_0
                def c9, 1, -1, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord3 v2.xyz  // In<18,19,20>
                dcl_texcoord4 v3.xyz  // In<21,22,23>
            
            #line 225 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 225
                mul r0, r0.x, c9.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 244
                mov r0.yzw, v0.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r1.y, c9.y
                add r1.x, r1.y, c6.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c9.x, c9.z
            
            #line 250
                dp3 r1.y, v3, v3
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c6.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c6.y
                add r1.z, r1.y, c9.w
                cmp r1.y, r1.z, r1.y, c9.z
                add r1.z, r1.y, c9.y
                cmp r1.y, r1.z, c9.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c7
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c7.xxyz  // ::finalColor<0,1,2>
            
            #line 247
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 254
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c9.xxxz, v2.xyzx
                add oC1, r1, c9.zzzx  // OutNormal<0,1,2,3>
            
            #line 259
                rcp r1.x, c8.x
                rcp r1.y, c8.x
                rcp r1.z, c8.x
                mul oC2.xyz, r1, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c9.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 45 instruction slots used
            };
    }
}

technique RibbonRenderingPhong
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_vecEye               c18      1
            //   g_intensityAmbient     c19      1
            //   g_intensityDiffuse     c20      1
            //
            
                vs_3_0
                def c21, 0, 0.5, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xy
                dcl_texcoord4 o6.xyz
                dcl_texcoord5 o7.xyz
            
            #line 338 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v3.w  // ::bSelect<0>
            
            #line 341
                dp4 r1.x, v0, c4  // ::Out<0>
                dp4 r1.y, v0, c5  // ::Out<1>
                dp4 r1.z, v0, c6  // ::Out<2>
                dp4 r1.w, v0, c7  // ::Out<3>
            
            #line 344
                dp3 r2.x, v1, c0  // ::Out<12>
                dp3 r2.y, v1, c1  // ::Out<13>
                dp3 r2.z, v1, c2  // ::Out<14>
                dp4 r3.x, v0, c0  // ::Out<8>
                dp4 r3.y, v0, c1  // ::Out<9>
                dp4 r3.z, v0, c2  // ::Out<10>
                dp4 r3.w, v0, c3  // ::Out<11>
                mov r0.yzw, -r3.xxyz
                add r0.yzw, r0, c18.xxyz  // ::Out<15,16,17>
                mov r4.x, c21.x
                add r2.w, r4.x, c17.x
                mov r4.x, -r2.w
                max r2.w, r2.w, r4.x
                mov r4.x, -r2.w
                sge r2.w, r4.x, r2.w
                mov r4.xyz, v3  // ::Out<4,5,6>
            
            #line 353
                mov r5.x, c13.x  // ::g_Light1Intensity<0>
                mul r5.xyz, r5.x, c15
                mul r5.xyz, r5, c20.x
                dp3 r4.w, r2, c11
                max r4.w, r4.w, c19.x
                mul r5.xyz, r4.w, r5
                mov r6.x, c14.x  // ::g_Light2Intensity<0>
                mul r6.xyz, r6.x, c16
                mul r6.xyz, r6, c20.x
                dp3 r4.w, r2, c12
                max r4.w, r4.w, c19.x
                mul r6.xyz, r4.w, r6
                add r5.xyz, r5, r6
                mul r5.xyz, r5, v3  // ::Out<4,5,6>
            
            #line 348
                mov r6.xyz, -r5
                add r4.xyz, r4, r6
                mul r4.xyz, r2.w, r4
                add r4.xyz, r4, r5  // ::Out<4,5,6>
            
            #line 355
                mov r0.x, r0.x  // ::Out<7>
                mov r5.xy, v2  // ::Out<18,19>
                dp3 r6.x, v1, c8  // ::Normal<0>
                dp3 r6.y, v1, c9  // ::Normal<1>
                dp3 r6.z, v1, c10  // ::Normal<2>
                mul r6.xyz, r6, c21.y
                add r6.xyz, r6, c21.y  // ::Out<20,21,22>
                dp4 r7.x, v0, c8  // ::Out<23>
                dp4 r7.y, v0, c9  // ::Out<24>
                dp4 r7.z, v0, c10  // ::Out<25>
                mov o0, r1  // ::RibbonRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r4  // ::RibbonRenderingPhongVS<4,5,6>
                mov o1.w, r0.x  // ::RibbonRenderingPhongVS<7>
                mov o2, r3  // ::RibbonRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r2  // ::RibbonRenderingPhongVS<12,13,14>
                mov o4.xyz, r0.yzww  // ::RibbonRenderingPhongVS<15,16,17>
                mov o6.xyz, r6  // ::RibbonRenderingPhongVS<20,21,22>
                mov o7.xyz, r7  // ::RibbonRenderingPhongVS<23,24,25>
                mov o5.xy, r5  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 58 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_clipPlane0        c7       1
            //   g_clipPlane0Dir     c8       1
            //   g_clipPlane1        c9       1
            //   g_clipPlane1Dir     c10      1
            //   g_clipPlane2        c11      1
            //   g_clipPlane2Dir     c12      1
            //   g_fogParam          c13      1
            //   g_fogColor          c14      1
            //   g_intensitySpecular c15      1
            //   g_farClipPlane      c16      1
            //   MeshTextureSampler  s0       1
            //
            
                ps_3_0
                def c17, 1, 0, 0, 30
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord3 v4.xy  // In<18,19>
                dcl_texcoord4 v5.xyz  // In<20,21,22>
                dcl_texcoord5 v6.xyz  // In<23,24,25>
                dcl_2d s0
            
            #line 372 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c7, r0
                mul r1.x, r1.x, c8.x  // ::result0<0>
                dp4 r1.y, c9, r0
                mul r1.y, r1.y, c10.x  // ::result1<0>
                dp4 r0.x, c11, r0
                mul r0.x, r0.x, c12.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 372
                mul r0, r0.x, c17.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 380
                texld r1, v4, s0
                mov r1.xyz, r1  // ::textureColor<0,1,2>
            
            #line 383
                mov r2.xy, c17
                add r0.y, r2.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c17.z, c17.x
                mul r0.y, r0.y, c17.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r2.yzw, r0.z, v3.xxyz
                add r3.xyz, r2.yzww, c0
                dp3 r0.z, r3, r3
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, r3  // ::H1<0,1,2>
                add r2.yzw, r2, c1.xxyz
                dp3 r0.z, r2.yzww, r2.yzww
                rsq r0.z, r0.z
                mul r2.yzw, r0.z, r2  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r4.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 394
                mul r1.xyz, r1, v0
                mov r5.xyz, c4  // ::g_Light1Color<0,1,2>
                mul r5.xyz, r5, c2.x
                mul r5.xyz, r5, c15.x
                dp3 r0.z, r4, r3
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r3.xyz, r0.z, r5
                add r3.xyz, r1, r3
                mov r5.xyz, c5  // ::g_Light2Color<0,1,2>
                mul r5.xyz, r5, c3.x
                mul r5.xyz, r5, c15.x
                dp3 r0.z, r4, r2.yzww
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r2.yzw, r0.z, r5.xxyz
                add r2.yzw, r2, r3.xxyz  // ::finalColor<0,1,2>
            
            #line 383
                mov r0.yzw, -r0.y
                cmp r0.yzw, r0, r1.xxyz, r2  // ::finalColor<0,1,2>
            
            #line 401
                add r1.x, -r2.x, c13.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c17.x, c17.z
                dp3 r1.y, v6, v6
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c13.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c13.y
                add r1.z, r1.y, c17.y
                cmp r1.y, r1.z, r1.y, c17.z
                add r1.z, r1.y, -c17.x
                cmp r1.y, r1.z, c17.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c14
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c14.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 407
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c17.xxxz, v5.xyzx
                add oC1, r1, c17.yyyx  // OutNormal<0,1,2,3>
            
            #line 412
                rcp r1.x, c16.x
                rcp r1.y, c16.x
                rcp r1.z, c16.x
                mul oC2.xyz, r1, v6.z  // OutDepth<0,1,2>
                mov oC2.w, c17.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 93 instruction slots used (1 texture, 92 arithmetic)
            };
    }
}

technique RibbonRenderingNoTexturePhong
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_vecEye               c18      1
            //   g_intensityAmbient     c19      1
            //   g_intensityDiffuse     c20      1
            //
            
                vs_3_0
                def c21, 0, 0.5, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xy
                dcl_texcoord4 o6.xyz
                dcl_texcoord5 o7.xyz
            
            #line 338 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v3.w  // ::bSelect<0>
            
            #line 341
                dp4 r1.x, v0, c4  // ::Out<0>
                dp4 r1.y, v0, c5  // ::Out<1>
                dp4 r1.z, v0, c6  // ::Out<2>
                dp4 r1.w, v0, c7  // ::Out<3>
            
            #line 344
                dp3 r2.x, v1, c0  // ::Out<12>
                dp3 r2.y, v1, c1  // ::Out<13>
                dp3 r2.z, v1, c2  // ::Out<14>
                dp4 r3.x, v0, c0  // ::Out<8>
                dp4 r3.y, v0, c1  // ::Out<9>
                dp4 r3.z, v0, c2  // ::Out<10>
                dp4 r3.w, v0, c3  // ::Out<11>
                mov r0.yzw, -r3.xxyz
                add r0.yzw, r0, c18.xxyz  // ::Out<15,16,17>
                mov r4.x, c21.x
                add r2.w, r4.x, c17.x
                mov r4.x, -r2.w
                max r2.w, r2.w, r4.x
                mov r4.x, -r2.w
                sge r2.w, r4.x, r2.w
                mov r4.xyz, v3  // ::Out<4,5,6>
            
            #line 353
                mov r5.x, c13.x  // ::g_Light1Intensity<0>
                mul r5.xyz, r5.x, c15
                mul r5.xyz, r5, c20.x
                dp3 r4.w, r2, c11
                max r4.w, r4.w, c19.x
                mul r5.xyz, r4.w, r5
                mov r6.x, c14.x  // ::g_Light2Intensity<0>
                mul r6.xyz, r6.x, c16
                mul r6.xyz, r6, c20.x
                dp3 r4.w, r2, c12
                max r4.w, r4.w, c19.x
                mul r6.xyz, r4.w, r6
                add r5.xyz, r5, r6
                mul r5.xyz, r5, v3  // ::Out<4,5,6>
            
            #line 348
                mov r6.xyz, -r5
                add r4.xyz, r4, r6
                mul r4.xyz, r2.w, r4
                add r4.xyz, r4, r5  // ::Out<4,5,6>
            
            #line 355
                mov r0.x, r0.x  // ::Out<7>
                mov r5.xy, v2  // ::Out<18,19>
                dp3 r6.x, v1, c8  // ::Normal<0>
                dp3 r6.y, v1, c9  // ::Normal<1>
                dp3 r6.z, v1, c10  // ::Normal<2>
                mul r6.xyz, r6, c21.y
                add r6.xyz, r6, c21.y  // ::Out<20,21,22>
                dp4 r7.x, v0, c8  // ::Out<23>
                dp4 r7.y, v0, c9  // ::Out<24>
                dp4 r7.z, v0, c10  // ::Out<25>
                mov o0, r1  // ::RibbonRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r4  // ::RibbonRenderingPhongVS<4,5,6>
                mov o1.w, r0.x  // ::RibbonRenderingPhongVS<7>
                mov o2, r3  // ::RibbonRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r2  // ::RibbonRenderingPhongVS<12,13,14>
                mov o4.xyz, r0.yzww  // ::RibbonRenderingPhongVS<15,16,17>
                mov o6.xyz, r6  // ::RibbonRenderingPhongVS<20,21,22>
                mov o7.xyz, r7  // ::RibbonRenderingPhongVS<23,24,25>
                mov o5.xy, r5  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 58 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_clipPlane0        c7       1
            //   g_clipPlane0Dir     c8       1
            //   g_clipPlane1        c9       1
            //   g_clipPlane1Dir     c10      1
            //   g_clipPlane2        c11      1
            //   g_clipPlane2Dir     c12      1
            //   g_fogParam          c13      1
            //   g_fogColor          c14      1
            //   g_intensitySpecular c15      1
            //   g_farClipPlane      c16      1
            //
            
                ps_3_0
                def c17, 1, 0, 0, 30
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord4 v4.xyz  // In<20,21,22>
                dcl_texcoord5 v5.xyz  // In<23,24,25>
            
            #line 372 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c7, r0
                mul r1.x, r1.x, c8.x  // ::result0<0>
                dp4 r1.y, c9, r0
                mul r1.y, r1.y, c10.x  // ::result1<0>
                dp4 r0.x, c11, r0
                mul r0.x, r0.x, c12.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 372
                mul r0, r0.x, c17.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 383
                mov r1.xy, c17
                add r0.y, r1.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c17.z, c17.x
                mul r0.y, r0.y, c17.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, v3.xxyz
                add r2.xyz, r1.yzww, c0
                dp3 r0.z, r2, r2
                rsq r0.z, r0.z
                mul r2.xyz, r0.z, r2  // ::H1<0,1,2>
                add r1.yzw, r1, c1.xxyz
                dp3 r0.z, r1.yzww, r1.yzww
                rsq r0.z, r0.z
                mul r1.yzw, r0.z, r1  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 394
                mul r4.xyz, c17.x, v0
                mov r5.xyz, c4  // ::g_Light1Color<0,1,2>
                mul r5.xyz, r5, c2.x
                mul r5.xyz, r5, c15.x
                dp3 r0.z, r3, r2
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r2.xyz, r0.z, r5
                add r2.xyz, r2, r4
                mov r5.xyz, c5  // ::g_Light2Color<0,1,2>
                mul r5.xyz, r5, c3.x
                mul r5.xyz, r5, c15.x
                dp3 r0.z, r3, r1.yzww
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r1.yzw, r0.z, r5.xxyz
                add r1.yzw, r1, r2.xxyz  // ::finalColor<0,1,2>
            
            #line 383
                mov r0.yzw, -r0.y
                cmp r0.yzw, r0, r4.xxyz, r1  // ::finalColor<0,1,2>
            
            #line 401
                add r1.x, -r1.x, c13.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c17.x, c17.z
                dp3 r1.y, v5, v5
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c13.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c13.y
                add r1.z, r1.y, c17.y
                cmp r1.y, r1.z, r1.y, c17.z
                add r1.z, r1.y, -c17.x
                cmp r1.y, r1.z, c17.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c14
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c14.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 407
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c17.xxxz, v4.xyzx
                add oC1, r1, c17.yyyx  // OutNormal<0,1,2,3>
            
            #line 412
                rcp r1.x, c16.x
                rcp r1.y, c16.x
                rcp r1.z, c16.x
                mul oC2.xyz, r1, v5.z  // OutDepth<0,1,2>
                mov oC2.w, c17.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 91 instruction slots used
            };
    }
}

technique RibbonRenderingGouraud
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_vecEye               c18      1
            //   g_intensityAmbient     c19      1
            //   g_intensityDiffuse     c20      1
            //
            
                vs_3_0
                def c21, 0, 0.5, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xy
                dcl_texcoord4 o6.xyz
                dcl_texcoord5 o7.xyz
            
            #line 338 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v3.w  // ::bSelect<0>
            
            #line 341
                dp4 r1.x, v0, c4  // ::Out<0>
                dp4 r1.y, v0, c5  // ::Out<1>
                dp4 r1.z, v0, c6  // ::Out<2>
                dp4 r1.w, v0, c7  // ::Out<3>
            
            #line 344
                dp3 r2.x, v1, c0  // ::Out<12>
                dp3 r2.y, v1, c1  // ::Out<13>
                dp3 r2.z, v1, c2  // ::Out<14>
                dp4 r3.x, v0, c0  // ::Out<8>
                dp4 r3.y, v0, c1  // ::Out<9>
                dp4 r3.z, v0, c2  // ::Out<10>
                dp4 r3.w, v0, c3  // ::Out<11>
                mov r0.yzw, -r3.xxyz
                add r0.yzw, r0, c18.xxyz  // ::Out<15,16,17>
                mov r4.x, c21.x
                add r2.w, r4.x, c17.x
                mov r4.x, -r2.w
                max r2.w, r2.w, r4.x
                mov r4.x, -r2.w
                sge r2.w, r4.x, r2.w
                mov r4.xyz, v3  // ::Out<4,5,6>
            
            #line 353
                mov r5.x, c13.x  // ::g_Light1Intensity<0>
                mul r5.xyz, r5.x, c15
                mul r5.xyz, r5, c20.x
                dp3 r4.w, r2, c11
                max r4.w, r4.w, c19.x
                mul r5.xyz, r4.w, r5
                mov r6.x, c14.x  // ::g_Light2Intensity<0>
                mul r6.xyz, r6.x, c16
                mul r6.xyz, r6, c20.x
                dp3 r4.w, r2, c12
                max r4.w, r4.w, c19.x
                mul r6.xyz, r4.w, r6
                add r5.xyz, r5, r6
                mul r5.xyz, r5, v3  // ::Out<4,5,6>
            
            #line 348
                mov r6.xyz, -r5
                add r4.xyz, r4, r6
                mul r4.xyz, r2.w, r4
                add r4.xyz, r4, r5  // ::Out<4,5,6>
            
            #line 355
                mov r0.x, r0.x  // ::Out<7>
                mov r5.xy, v2  // ::Out<18,19>
                dp3 r6.x, v1, c8  // ::Normal<0>
                dp3 r6.y, v1, c9  // ::Normal<1>
                dp3 r6.z, v1, c10  // ::Normal<2>
                mul r6.xyz, r6, c21.y
                add r6.xyz, r6, c21.y  // ::Out<20,21,22>
                dp4 r7.x, v0, c8  // ::Out<23>
                dp4 r7.y, v0, c9  // ::Out<24>
                dp4 r7.z, v0, c10  // ::Out<25>
                mov o0, r1  // ::RibbonRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r4  // ::RibbonRenderingPhongVS<4,5,6>
                mov o1.w, r0.x  // ::RibbonRenderingPhongVS<7>
                mov o2, r3  // ::RibbonRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r2  // ::RibbonRenderingPhongVS<12,13,14>
                mov o4.xyz, r0.yzww  // ::RibbonRenderingPhongVS<15,16,17>
                mov o6.xyz, r6  // ::RibbonRenderingPhongVS<20,21,22>
                mov o7.xyz, r7  // ::RibbonRenderingPhongVS<23,24,25>
                mov o5.xy, r5  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 58 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_clipPlane0       c0       1
            //   g_clipPlane0Dir    c1       1
            //   g_clipPlane1       c2       1
            //   g_clipPlane1Dir    c3       1
            //   g_clipPlane2       c4       1
            //   g_clipPlane2Dir    c5       1
            //   g_fogParam         c6       1
            //   g_fogColor         c7       1
            //   g_farClipPlane     c8       1
            //   MeshTextureSampler s0       1
            //
            
                ps_3_0
                def c9, 1, -1, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord3 v2.xy  // In<18,19>
                dcl_texcoord4 v3.xyz  // In<20,21,22>
                dcl_texcoord5 v4.xyz  // In<23,24,25>
                dcl_2d s0
            
            #line 372 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 372
                mul r0, r0.x, c9.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 380
                texld r1, v2, s0
                mov r1.xyz, r1  // ::textureColor<0,1,2>
            
            #line 398
                mul r0.yzw, r1.xxyz, v0.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r1.y, c9.y
                add r1.x, r1.y, c6.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c9.x, c9.z
                dp3 r1.y, v4, v4
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c6.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c6.y
                add r1.z, r1.y, c9.w
                cmp r1.y, r1.z, r1.y, c9.z
                add r1.z, r1.y, c9.y
                cmp r1.y, r1.z, c9.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c7
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c7.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 407
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c9.xxxz, v3.xyzx
                add oC1, r1, c9.zzzx  // OutNormal<0,1,2,3>
            
            #line 412
                rcp r1.x, c8.x
                rcp r1.y, c8.x
                rcp r1.z, c8.x
                mul oC2.xyz, r1, v4.z  // OutDepth<0,1,2>
                mov oC2.w, c9.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 47 instruction slots used (1 texture, 46 arithmetic)
            };
    }
}

technique RibbonRenderingNoTextureGouraud
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_vecEye               c18      1
            //   g_intensityAmbient     c19      1
            //   g_intensityDiffuse     c20      1
            //
            
                vs_3_0
                def c21, 0, 0.5, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xy
                dcl_texcoord4 o6.xyz
                dcl_texcoord5 o7.xyz
            
            #line 338 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.x, v3.w  // ::bSelect<0>
            
            #line 341
                dp4 r1.x, v0, c4  // ::Out<0>
                dp4 r1.y, v0, c5  // ::Out<1>
                dp4 r1.z, v0, c6  // ::Out<2>
                dp4 r1.w, v0, c7  // ::Out<3>
            
            #line 344
                dp3 r2.x, v1, c0  // ::Out<12>
                dp3 r2.y, v1, c1  // ::Out<13>
                dp3 r2.z, v1, c2  // ::Out<14>
                dp4 r3.x, v0, c0  // ::Out<8>
                dp4 r3.y, v0, c1  // ::Out<9>
                dp4 r3.z, v0, c2  // ::Out<10>
                dp4 r3.w, v0, c3  // ::Out<11>
                mov r0.yzw, -r3.xxyz
                add r0.yzw, r0, c18.xxyz  // ::Out<15,16,17>
                mov r4.x, c21.x
                add r2.w, r4.x, c17.x
                mov r4.x, -r2.w
                max r2.w, r2.w, r4.x
                mov r4.x, -r2.w
                sge r2.w, r4.x, r2.w
                mov r4.xyz, v3  // ::Out<4,5,6>
            
            #line 353
                mov r5.x, c13.x  // ::g_Light1Intensity<0>
                mul r5.xyz, r5.x, c15
                mul r5.xyz, r5, c20.x
                dp3 r4.w, r2, c11
                max r4.w, r4.w, c19.x
                mul r5.xyz, r4.w, r5
                mov r6.x, c14.x  // ::g_Light2Intensity<0>
                mul r6.xyz, r6.x, c16
                mul r6.xyz, r6, c20.x
                dp3 r4.w, r2, c12
                max r4.w, r4.w, c19.x
                mul r6.xyz, r4.w, r6
                add r5.xyz, r5, r6
                mul r5.xyz, r5, v3  // ::Out<4,5,6>
            
            #line 348
                mov r6.xyz, -r5
                add r4.xyz, r4, r6
                mul r4.xyz, r2.w, r4
                add r4.xyz, r4, r5  // ::Out<4,5,6>
            
            #line 355
                mov r0.x, r0.x  // ::Out<7>
                mov r5.xy, v2  // ::Out<18,19>
                dp3 r6.x, v1, c8  // ::Normal<0>
                dp3 r6.y, v1, c9  // ::Normal<1>
                dp3 r6.z, v1, c10  // ::Normal<2>
                mul r6.xyz, r6, c21.y
                add r6.xyz, r6, c21.y  // ::Out<20,21,22>
                dp4 r7.x, v0, c8  // ::Out<23>
                dp4 r7.y, v0, c9  // ::Out<24>
                dp4 r7.z, v0, c10  // ::Out<25>
                mov o0, r1  // ::RibbonRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r4  // ::RibbonRenderingPhongVS<4,5,6>
                mov o1.w, r0.x  // ::RibbonRenderingPhongVS<7>
                mov o2, r3  // ::RibbonRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r2  // ::RibbonRenderingPhongVS<12,13,14>
                mov o4.xyz, r0.yzww  // ::RibbonRenderingPhongVS<15,16,17>
                mov o6.xyz, r6  // ::RibbonRenderingPhongVS<20,21,22>
                mov o7.xyz, r7  // ::RibbonRenderingPhongVS<23,24,25>
                mov o5.xy, r5  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 58 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_fogParam      c6       1
            //   g_fogColor      c7       1
            //   g_farClipPlane  c8       1
            //
            
                ps_3_0
                def c9, 1, -1, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord4 v2.xyz  // In<20,21,22>
                dcl_texcoord5 v3.xyz  // In<23,24,25>
            
            #line 372 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 372
                mul r0, r0.x, c9.x
                texkill r0
                mov r0.x, v0.w  // ::fSelect<0>
            
            #line 398
                mul r0.yzw, c9.x, v0.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r1.y, c9.y
                add r1.x, r1.y, c6.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c9.x, c9.z
                dp3 r1.y, v3, v3
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c6.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c6.y
                add r1.z, r1.y, c9.w
                cmp r1.y, r1.z, r1.y, c9.z
                add r1.z, r1.y, c9.y
                cmp r1.y, r1.z, c9.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c7
                add r2.xyz, r0.yzww, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c7.xxyz  // ::finalColor<0,1,2>
            
            #line 401
                mov r2.xyz, -r1.x
                cmp r0.yzw, r2.xxyz, r0, r1  // ::finalColor<0,1,2>
            
            #line 407
                mov r0.x, r0.x  // ::finalColor<3>
                mul r1, c9.xxxz, v2.xyzx
                add oC1, r1, c9.zzzx  // OutNormal<0,1,2,3>
            
            #line 412
                rcp r1.x, c8.x
                rcp r1.y, c8.x
                rcp r1.z, c8.x
                mul oC2.xyz, r1, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c9.x  // OutDepth<3>
                mov oC0.xyz, r0.yzww  // OutColor<0,1,2>
                mov oC0.w, r0.x  // OutColor<3>
            
            // approximately 45 instruction slots used
            };
    }
}

technique WireframeRenderingPhongLineWidth
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_cameraPosInvWorld;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float g_wireframeLineWidth;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_cameraPosInvWorld    c11      1
            //   g_wireframeLineWidth   c12      1
            //   g_fogParam             c13      1
            //   g_fogColor             c14      1
            //
            
                vs_3_0
                def c15, -1, 1, -2, -3
                def c16, -4, 0, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // linePos2<0,1,2>
                dcl_texcoord1 v3  // lineIndex<0,1>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
            
            #line 484 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0.xyz, -v0.zxyw
                add r0.xyz, r0, v2.zxyw  // ::vecLine<2,0,1>
                mul r1.xyz, r0.zxyw, c11.zxyw
                mul r0.xyz, r0, c11.yzxw
                mov r0.xyz, -r0
                add r0.xyz, r0, r1  // ::finalPosVec<0,1,2>
                dp3 r0.w, r0, r0
                rsq r0.w, r0.w
                mul r0.xyz, r0.w, r0  // ::finalPosVec<0,1,2>
                add r0.w, c15.x, v3.x
                mov r1.x, -r0.w
                max r0.w, r0.w, r1.x
                mov r1.x, -r0.w
                sge r0.w, r1.x, r0.w
                mul r1.xyz, r0, c12.x
                add r2.xyz, r1, v0  // inPos<0,1,2>
                mov r2.w, c15.y  // inPos<3>
                add r1.w, c15.z, v3.x
                mov r3.x, -r1.w
                max r1.w, r1.w, r3.x
                mov r3.x, -r1.w
                sge r1.w, r3.x, r1.w
            
            #line 495
                mov r0.xyz, -r0
                mul r0.xyz, r0, c12.x
                add r3.xyz, r0, v0  // inPos<0,1,2>
                mov r3.w, c15.y  // inPos<3>
                add r4.x, c15.w, v3.x
                mov r4.y, -r4.x
                max r4.x, r4.y, r4.x
                mov r4.y, -r4.x
                sge r4.x, r4.y, r4.x
                add r5.xyz, r1, v2  // inPos<0,1,2>
                mov r5.w, c15.y  // inPos<3>
                add r1.x, c16.x, v3.x
                mov r1.y, -r1.x
                max r1.x, r1.y, r1.x
                mov r1.y, -r1.x
                sge r1.x, r1.y, r1.x
                add r6.xyz, r0, v2  // inPos<0,1,2>
                mov r6.w, c15.y  // inPos<3>
                mov r7, -v0
                add r6, r6, r7
                mul r6, r1.x, r6
                add r6, r6, v0  // inPos<0,1,2,3>
            
            #line 497
                mov r7, -r6
                add r5, r5, r7
                mul r4, r4.x, r5
                add r4, r4, r6  // inPos<0,1,2,3>
            
            #line 493
                mov r5, -r4
                add r3, r3, r5
                mul r1, r1.w, r3
                add r1, r1, r4  // inPos<0,1,2,3>
            
            #line 489
                mov r3, -r1
                add r2, r2, r3
                mul r0, r0.w, r2
                add r0, r0, r1  // inPos<0,1,2,3>
            
            #line 507
                dp4 r1.x, r0, c4  // ::Out<0>
                dp4 r1.y, r0, c5  // ::Out<1>
                dp4 r1.z, r0, c6  // ::Out<2>
                dp4 r1.w, r0, c7  // ::Out<3>
                dp4 r2.x, r0, c0  // ::Out<8>
                dp4 r2.y, r0, c1  // ::Out<9>
                dp4 r2.z, r0, c2  // ::Out<10>
                dp4 r2.w, r0, c3  // ::Out<11>
                mov r3.xyz, v1  // ::Out<4,5,6>
                mov r3.w, v3.y  // ::Out<7>
            
            #line 515
                dp4 r4.x, r0, c8  // ::Out<15>
                dp4 r4.y, r0, c9  // ::Out<16>
                dp4 r4.z, r0, c10  // ::Out<17>
                mov r0.x, c15.x
                add r0.x, r0.x, c13.x
                mov r0.y, -r0.x
                max r0.x, r0.y, r0.x
                mov r0.y, -r0.x
                sge r0.x, r0.y, r0.x
                dp3 r0.y, r4, r4
                rsq r0.y, r0.y
                rcp r0.y, r0.y
                mul r0.y, r0.y, c13.z
                mov r0.y, -r0.y
                add r0.y, r0.y, c13.y
                max r0.y, r0.y, c16.y
                min r0.y, r0.y, c15.y  // ::fogFLinear<0>
                mov r5.xyz, -c14
                add r5.xyz, r3, r5
                mul r0.yzw, r0.y, r5.xxyz
                add r0.yzw, r0, c14.xxyz  // ::Out<4,5,6>
            
            #line 517
                mov r5.xyz, -r3
                add r0.yzw, r0, r5.xxyz
                mul r0.xyz, r0.yzww, r0.x
                add r0.xyz, r0, r3  // ::Out<4,5,6>
            
            #line 523
                mov o0, r1  // ::WireframeRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r0  // ::WireframeRenderingPhongVS<4,5,6>
                mov o1.w, r3.w  // ::WireframeRenderingPhongVS<7>
                mov o2, r2  // ::WireframeRenderingPhongVS<8,9,10,11>
                mov o4.xyz, r4  // ::WireframeRenderingPhongVS<15,16,17>
            
            #line 472
                mov o3.xyz, c16.y  // ::WireframeRenderingPhongVS<12,13,14>
            
            // approximately 97 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_farClipPlane  c6       1
            //
            
                ps_3_0
                def c7, 1, 0, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.z  // In<17>
            
            #line 531 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 531
                mul r0, r0.x, c7.x
                texkill r0
            
            #line 534
                mul r0, c7.xxxy, v2.xyzx
                add oC1, r0, c7.yyyx  // OutNormal<0,1,2,3>
            
            #line 537
                rcp r0.x, c6.x
                rcp r0.y, c6.x
                rcp r0.z, c6.x
                mul oC2.xyz, r0, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c7.x  // OutDepth<3>
                mov oC0, v0  // OutColor<0,1,2,3>
            
            // approximately 19 instruction slots used
            };
    }
}

technique WireframeRenderingPhong
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_fogParam             c11      1
            //   g_fogColor             c12      1
            //
            
                vs_3_0
                def c13, -1, 0, 1, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord1 v2  // lineIndex<1>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
            
            #line 507 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Out<0>
                dp4 r0.y, v0, c5  // ::Out<1>
                dp4 r0.z, v0, c6  // ::Out<2>
                dp4 r0.w, v0, c7  // ::Out<3>
                dp4 r1.x, v0, c0  // ::Out<8>
                dp4 r1.y, v0, c1  // ::Out<9>
                dp4 r1.z, v0, c2  // ::Out<10>
                dp4 r1.w, v0, c3  // ::Out<11>
                mov r2.xyz, v1  // ::Out<4,5,6>
                mov r2.w, v2.y  // ::Out<7>
            
            #line 515
                dp4 r3.x, v0, c8  // ::Out<15>
                dp4 r3.y, v0, c9  // ::Out<16>
                dp4 r3.z, v0, c10  // ::Out<17>
                mov r4.x, c13.x
                add r3.w, r4.x, c11.x
                mov r4.x, -r3.w
                max r3.w, r3.w, r4.x
                mov r4.x, -r3.w
                sge r3.w, r4.x, r3.w
                dp3 r4.x, r3, r3
                rsq r4.x, r4.x
                rcp r4.x, r4.x
                mul r4.x, r4.x, c11.z
                mov r4.x, -r4.x
                add r4.x, r4.x, c11.y
                max r4.x, r4.x, c13.y
                min r4.x, r4.x, c13.z  // ::fogFLinear<0>
                mov r4.yzw, -c12.xxyz
                add r4.yzw, r2.xxyz, r4
                mul r4.xyz, r4.yzww, r4.x
                add r4.xyz, r4, c12  // ::Out<4,5,6>
            
            #line 517
                mov r5.xyz, -r2
                add r4.xyz, r4, r5
                mul r4.xyz, r3.w, r4
                add r2.xyz, r2, r4  // ::Out<4,5,6>
            
            #line 523
                mov o0, r0  // ::WireframeRenderingPhongVS<0,1,2,3>
                mov o1.xyz, r2  // ::WireframeRenderingPhongVS<4,5,6>
                mov o1.w, r2.w  // ::WireframeRenderingPhongVS<7>
                mov o2, r1  // ::WireframeRenderingPhongVS<8,9,10,11>
                mov o4.xyz, r3  // ::WireframeRenderingPhongVS<15,16,17>
            
            #line 472
                mov o3.xyz, c13.y  // ::WireframeRenderingPhongVS<12,13,14>
            
            // approximately 41 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_farClipPlane  c6       1
            //
            
                ps_3_0
                def c7, 1, 0, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.z  // In<17>
            
            #line 531 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 531
                mul r0, r0.x, c7.x
                texkill r0
            
            #line 534
                mul r0, c7.xxxy, v2.xyzx
                add oC1, r0, c7.yyyx  // OutNormal<0,1,2,3>
            
            #line 537
                rcp r0.x, c6.x
                rcp r0.y, c6.x
                rcp r0.z, c6.x
                mul oC2.xyz, r0, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c7.x  // OutDepth<3>
                mov oC0, v0  // OutColor<0,1,2,3>
            
            // approximately 19 instruction slots used
            };
    }
}

technique SurfaceRenderingNoAlphaPhong
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   float g_bBlendBackfaceColor;
            //   bool g_bIndicate;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_indicateDiffuseColor c18      1
            //   g_bIndicate            c19      1
            //   g_bBackfaceColor       c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //   g_intensityDiffuse     c25      1
            //
            
                vs_3_0
                def c26, -1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 592 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Out<0>
                dp4 r0.y, v0, c5  // ::Out<1>
                dp4 r0.z, v0, c6  // ::Out<2>
                dp4 r0.w, v0, c7  // ::Out<3>
                mov r1.xy, c26
                add r1.z, r1.x, c20.x
                mov r1.w, -r1.z
                max r1.z, r1.w, r1.z
                mov r1.w, -r1.z
                sge r1.z, r1.w, r1.z
                mov r2, -v2
                add r3, r2, c22
                mul r3, r3, c21.x
                add r3, r3, v2  // diffuseColor<0,1,2,3>
                mov r4.xyz, -v1
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r4  // inNorm<0,1,2>
            
            #line 594
                add r2, r2, r3
                add r3.xyz, r4, r5
                mul r2, r1.z, r2
                mul r3.xyz, r1.z, r3
                add r2, r2, v2  // diffuseColor<0,1,2,3>
                add r3.xyz, r3, v1  // inNorm<0,1,2>
            
            #line 601
                dp3 r4.x, r3, c0  // ::Out<12>
                dp3 r4.y, r3, c1  // ::Out<13>
                dp3 r4.z, r3, c2  // ::Out<14>
                dp4 r5.x, v0, c0  // ::Out<8>
                dp4 r5.y, v0, c1  // ::Out<9>
                dp4 r5.z, v0, c2  // ::Out<10>
                dp4 r5.w, v0, c3  // ::Out<11>
                mov r6.xyz, -r5
                add r6.xyz, r6, c23  // ::Out<15,16,17>
                add r1.x, r1.x, c19.x
                mov r1.z, -r1.x
                max r1.x, r1.z, r1.x
                mov r1.z, -r1.x
                sge r1.x, r1.z, r1.x
                mov r7, c18  // diffuseColor<0,1,2,3>
                mov r8, -r2
                add r7, r7, r8
                mul r7, r1.x, r7
                add r2, r2, r7  // diffuseColor<0,1,2,3>
            
            #line 608
                add r1.x, r1.y, c17.x
                mov r1.y, -r1.x
                max r1.x, r1.y, r1.x
                mov r1.y, -r1.x
                sge r1.x, r1.y, r1.x
                mov r2, r2  // ::Out<4,5,6,7>
            
            #line 614
                mov r7.x, c13.x  // ::g_Light1Intensity<0>
                mul r7, r7.x, c15
                mul r7, r7, c25.x
                dp3 r1.y, r4, c11
                max r1.y, r1.y, c24.x
                mul r7, r1.y, r7
                mov r8.x, c14.x  // ::g_Light2Intensity<0>
                mul r8, r8.x, c16
                mul r8, r8, c25.x
                dp3 r1.y, r4, c12
                max r1.y, r1.y, c24.x
                mul r8, r1.y, r8
                add r7, r7, r8
                mul r7, r2, r7  // ::Out<4,5,6,7>
            
            #line 608
                mov r8, -r7
                add r2, r2, r8
                mul r1, r1.x, r2
                add r1, r1, r7  // ::Out<4,5,6,7>
            
            #line 617
                dp3 r2.x, r3, c8  // ::Normal<0>
                dp3 r2.y, r3, c9  // ::Normal<1>
                dp3 r2.z, r3, c10  // ::Normal<2>
                mul r2.xyz, r2, c26.z
                add r2.xyz, r2, c26.z  // ::Out<18,19,20>
                dp4 r3.x, v0, c8  // ::Out<21>
                dp4 r3.y, v0, c9  // ::Out<22>
                dp4 r3.z, v0, c10  // ::Out<23>
                mov o0, r0  // ::SurfaceRenderingPhongVS<0,1,2,3>
                mov o1, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
                mov o2, r5  // ::SurfaceRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r4  // ::SurfaceRenderingPhongVS<12,13,14>
                mov o4.xyz, r6  // ::SurfaceRenderingPhongVS<15,16,17>
                mov o5.xyz, r2  // ::SurfaceRenderingPhongVS<18,19,20>
                mov o6.xyz, r3  // ::SurfaceRenderingPhongVS<21,22,23>
            
            // approximately 82 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_clipPlane0        c7       1
            //   g_clipPlane0Dir     c8       1
            //   g_clipPlane1        c9       1
            //   g_clipPlane1Dir     c10      1
            //   g_clipPlane2        c11      1
            //   g_clipPlane2Dir     c12      1
            //   g_fogParam          c13      1
            //   g_fogColor          c14      1
            //   g_intensitySpecular c15      1
            //   g_farClipPlane      c16      1
            //
            
                ps_3_0
                def c17, 1, 0, 0, 30
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord3 v4.xyz  // In<18,19,20>
                dcl_texcoord4 v5.xyz  // In<21,22,23>
            
            #line 630 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c7, r0
                mul r1.x, r1.x, c8.x  // ::result0<0>
                dp4 r1.y, c9, r0
                mul r1.y, r1.y, c10.x  // ::result1<0>
                dp4 r0.x, c11, r0
                mul r0.x, r0.x, c12.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 630
                mul r0, r0.x, c17.x
                texkill r0
            
            #line 633
                mov r0.xy, c17
                add r0.y, r0.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c17.z, c17.x
                mul r0.y, r0.y, c17.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r1.xyz, r0.z, v3
                add r2.xyz, r1, c0
                dp3 r0.z, r2, r2
                rsq r0.z, r0.z
                mul r2.xyz, r0.z, r2  // ::H1<0,1,2>
                add r1.xyz, r1, c1
                dp3 r0.z, r1, r1
                rsq r0.z, r0.z
                mul r1.xyz, r0.z, r1  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 644
                mov r4, c4  // ::g_Light1Color<0,1,2,3>
                mul r4, r4, c2.x
                mul r4, r4, c15.x
                dp3 r0.z, r3, r2
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r2, r0.z, r4
                add r2, r2, v0
                mov r4, c5  // ::g_Light2Color<0,1,2,3>
                mul r4, r4, c3.x
                mul r4, r4, c15.x
                dp3 r0.z, r3, r1
                mov r0.w, -r0.z
                add r0.w, r0.w, c17.z
                cmp r0.z, r0.w, c17.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c17.w
                exp r0.z, r0.z
                mul r1, r0.z, r4
                add r1, r1, r2  // ::finalColor<0,1,2,3>
            
            #line 648
                mov r2, v0  // ::finalColor<0,1,2,3>
            
            #line 633
                mov r3, -r0.y
                cmp r1, r3, r2, r1  // ::finalColor<0,1,2,3>
            
            #line 651
                add r0.x, -r0.x, c13.x
                abs r0.x, r0.x
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.x
                cmp r0.x, r0.x, c17.x, c17.z
            
            #line 654
                dp3 r0.y, v5, v5
                rsq r0.y, r0.y
                rcp r0.y, r0.y
                mul r0.y, r0.y, c13.z
                mov r0.y, -r0.y
                add r0.y, r0.y, c13.y
                add r0.z, r0.y, c17.y
                cmp r0.y, r0.z, r0.y, c17.z
                add r0.z, r0.y, -c17.x
                cmp r0.y, r0.z, c17.x, r0.y  // ::fogFLinear<0>
                mov r2.xyz, -c14
                add r2.xyz, r1, r2
                mul r0.yzw, r0.y, r2.xxyz
                add r0.yzw, r0, c14.xxyz  // ::finalColor<0,1,2>
            
            #line 651
                mov r2.xyz, -r0.x
                cmp r0.xyz, r2, r1, r0.yzww  // ::finalColor<0,1,2>
            
            #line 664
                mul r2, c17.xxxz, v4.xyzx
                add oC1, r2, c17.yyyx  // OutNormal<0,1,2,3>
            
            #line 667
                rcp r1.x, c16.x
                rcp r1.y, c16.x
                rcp r1.z, c16.x
                mul oC2.xyz, r1, v5.z  // OutDepth<0,1,2>
                mov oC2.w, c17.x  // OutDepth<3>
                mov oC0.xyz, r0  // OutColor<0,1,2>
                mov oC0.w, r1.w  // OutColor<3>
            
            // approximately 89 instruction slots used
            };
    }
}

technique SurfaceRenderingWithAlphaPhong
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   float g_bBlendBackfaceColor;
            //   bool g_bIndicate;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_indicateDiffuseColor c18      1
            //   g_bIndicate            c19      1
            //   g_bBackfaceColor       c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //   g_intensityDiffuse     c25      1
            //
            
                vs_3_0
                def c26, -1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 592 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Out<0>
                dp4 r0.y, v0, c5  // ::Out<1>
                dp4 r0.z, v0, c6  // ::Out<2>
                dp4 r0.w, v0, c7  // ::Out<3>
                mov r1.xy, c26
                add r1.z, r1.x, c20.x
                mov r1.w, -r1.z
                max r1.z, r1.w, r1.z
                mov r1.w, -r1.z
                sge r1.z, r1.w, r1.z
                mov r2, -v2
                add r3, r2, c22
                mul r3, r3, c21.x
                add r3, r3, v2  // diffuseColor<0,1,2,3>
                mov r4.xyz, -v1
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r4  // inNorm<0,1,2>
            
            #line 594
                add r2, r2, r3
                add r3.xyz, r4, r5
                mul r2, r1.z, r2
                mul r3.xyz, r1.z, r3
                add r2, r2, v2  // diffuseColor<0,1,2,3>
                add r3.xyz, r3, v1  // inNorm<0,1,2>
            
            #line 601
                dp3 r4.x, r3, c0  // ::Out<12>
                dp3 r4.y, r3, c1  // ::Out<13>
                dp3 r4.z, r3, c2  // ::Out<14>
                dp4 r5.x, v0, c0  // ::Out<8>
                dp4 r5.y, v0, c1  // ::Out<9>
                dp4 r5.z, v0, c2  // ::Out<10>
                dp4 r5.w, v0, c3  // ::Out<11>
                mov r6.xyz, -r5
                add r6.xyz, r6, c23  // ::Out<15,16,17>
                add r1.x, r1.x, c19.x
                mov r1.z, -r1.x
                max r1.x, r1.z, r1.x
                mov r1.z, -r1.x
                sge r1.x, r1.z, r1.x
                mov r7, c18  // diffuseColor<0,1,2,3>
                mov r8, -r2
                add r7, r7, r8
                mul r7, r1.x, r7
                add r2, r2, r7  // diffuseColor<0,1,2,3>
            
            #line 608
                add r1.x, r1.y, c17.x
                mov r1.y, -r1.x
                max r1.x, r1.y, r1.x
                mov r1.y, -r1.x
                sge r1.x, r1.y, r1.x
                mov r2, r2  // ::Out<4,5,6,7>
            
            #line 614
                mov r7.x, c13.x  // ::g_Light1Intensity<0>
                mul r7, r7.x, c15
                mul r7, r7, c25.x
                dp3 r1.y, r4, c11
                max r1.y, r1.y, c24.x
                mul r7, r1.y, r7
                mov r8.x, c14.x  // ::g_Light2Intensity<0>
                mul r8, r8.x, c16
                mul r8, r8, c25.x
                dp3 r1.y, r4, c12
                max r1.y, r1.y, c24.x
                mul r8, r1.y, r8
                add r7, r7, r8
                mul r7, r2, r7  // ::Out<4,5,6,7>
            
            #line 608
                mov r8, -r7
                add r2, r2, r8
                mul r1, r1.x, r2
                add r1, r1, r7  // ::Out<4,5,6,7>
            
            #line 617
                dp3 r2.x, r3, c8  // ::Normal<0>
                dp3 r2.y, r3, c9  // ::Normal<1>
                dp3 r2.z, r3, c10  // ::Normal<2>
                mul r2.xyz, r2, c26.z
                add r2.xyz, r2, c26.z  // ::Out<18,19,20>
                dp4 r3.x, v0, c8  // ::Out<21>
                dp4 r3.y, v0, c9  // ::Out<22>
                dp4 r3.z, v0, c10  // ::Out<23>
                mov o0, r0  // ::SurfaceRenderingPhongVS<0,1,2,3>
                mov o1, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
                mov o2, r5  // ::SurfaceRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r4  // ::SurfaceRenderingPhongVS<12,13,14>
                mov o4.xyz, r6  // ::SurfaceRenderingPhongVS<15,16,17>
                mov o5.xyz, r2  // ::SurfaceRenderingPhongVS<18,19,20>
                mov o6.xyz, r3  // ::SurfaceRenderingPhongVS<21,22,23>
            
            // approximately 82 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   float g_alpha;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float g_intensitySpecular;
            //   int g_numActiveLight;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Dir         c0       1
            //   g_Light2Dir         c1       1
            //   g_Light1Intensity   c2       1
            //   g_Light2Intensity   c3       1
            //   g_Light1Color       c4       1
            //   g_Light2Color       c5       1
            //   g_numActiveLight    c6       1
            //   g_alpha             c7       1
            //   g_clipPlane0        c8       1
            //   g_clipPlane0Dir     c9       1
            //   g_clipPlane1        c10      1
            //   g_clipPlane1Dir     c11      1
            //   g_clipPlane2        c12      1
            //   g_clipPlane2Dir     c13      1
            //   g_fogParam          c14      1
            //   g_fogColor          c15      1
            //   g_intensitySpecular c16      1
            //   g_farClipPlane      c17      1
            //
            
                ps_3_0
                def c18, 1, 0, 0, 30
                dcl_color v0.xyz  // In<4,5,6>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord1 v2.xyz  // In<12,13,14>
                dcl_texcoord2 v3.xyz  // In<15,16,17>
                dcl_texcoord3 v4.xyz  // In<18,19,20>
                dcl_texcoord4 v5.xyz  // In<21,22,23>
            
            #line 630 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c8, r0
                mul r1.x, r1.x, c9.x  // ::result0<0>
                dp4 r1.y, c10, r0
                mul r1.y, r1.y, c11.x  // ::result1<0>
                dp4 r0.x, c12, r0
                mul r0.x, r0.x, c13.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 630
                mul r0, r0.x, c18.x
                texkill r0
            
            #line 633
                mov r0.xy, c18
                add r0.y, r0.y, c6.x
                abs r0.y, r0.y
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c18.z, c18.x
                mul r0.y, r0.y, c18.x
                dp3 r0.z, v3, v3
                rsq r0.z, r0.z
                mul r1.xyz, r0.z, v3
                add r2.xyz, r1, c0
                dp3 r0.z, r2, r2
                rsq r0.z, r0.z
                mul r2.xyz, r0.z, r2  // ::H1<0,1,2>
                add r1.xyz, r1, c1
                dp3 r0.z, r1, r1
                rsq r0.z, r0.z
                mul r1.xyz, r0.z, r1  // ::H2<0,1,2>
                dp3 r0.z, v2, v2
                rsq r0.z, r0.z
                mul r3.xyz, r0.z, v2  // ::N<0,1,2>
            
            #line 644
                mov r4.xyz, c4  // ::g_Light1Color<0,1,2>
                mul r4.xyz, r4, c2.x
                mul r4.xyz, r4, c16.x
                dp3 r0.z, r3, r2
                mov r0.w, -r0.z
                add r0.w, r0.w, c18.z
                cmp r0.z, r0.w, c18.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c18.w
                exp r0.z, r0.z
                mul r2.xyz, r0.z, r4
                add r2.xyz, r2, v0
                mov r4.xyz, c5  // ::g_Light2Color<0,1,2>
                mul r4.xyz, r4, c3.x
                mul r4.xyz, r4, c16.x
                dp3 r0.z, r3, r1
                mov r0.w, -r0.z
                add r0.w, r0.w, c18.z
                cmp r0.z, r0.w, c18.z, r0.z
                log r0.z, r0.z
                mul r0.z, r0.z, c18.w
                exp r0.z, r0.z
                mul r1.xyz, r0.z, r4
                add r1.xyz, r1, r2  // ::finalColor<0,1,2>
            
            #line 648
                mov r2.xyz, v0  // ::finalColor<0,1,2>
            
            #line 633
                mov r0.yzw, -r0.y
                cmp r0.yzw, r0, r2.xxyz, r1.xxyz  // ::finalColor<0,1,2>
            
            #line 651
                add r0.x, -r0.x, c14.x
                abs r0.x, r0.x
                mov r0.x, -r0.x
                add r0.x, r0.x, r0.x
                cmp r0.x, r0.x, c18.x, c18.z
            
            #line 654
                dp3 r1.x, v5, v5
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                mul r1.x, r1.x, c14.z
                mov r1.x, -r1.x
                add r1.x, r1.x, c14.y
                add r1.y, r1.x, c18.y
                cmp r1.x, r1.y, r1.x, c18.z
                add r1.y, r1.x, -c18.x
                cmp r1.x, r1.y, c18.x, r1.x  // ::fogFLinear<0>
                mov r1.yzw, -c15.xxyz
                add r1.yzw, r0, r1
                mul r1.xyz, r1.yzww, r1.x
                add r1.xyz, r1, c15  // ::finalColor<0,1,2>
            
            #line 651
                mov r2.xyz, -r0.x
                cmp r0.xyz, r2, r0.yzww, r1  // ::finalColor<0,1,2>
            
            #line 661
                mov r0.w, c7.x  // ::finalColor<3>
            
            #line 664
                mul r1, c18.xxxz, v4.xyzx
                add oC1, r1, c18.yyyx  // OutNormal<0,1,2,3>
            
            #line 667
                rcp r1.x, c17.x
                rcp r1.y, c17.x
                rcp r1.z, c17.x
                mul oC2.xyz, r1, v5.z  // OutDepth<0,1,2>
                mov oC2.w, c18.x  // OutDepth<3>
                mov oC0.xyz, r0  // OutColor<0,1,2>
                mov oC0.w, r0.w  // OutColor<3>
            
            // approximately 90 instruction slots used
            };
    }
}

technique SurfaceRenderingNoAlphaGouraud
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   float g_bBlendBackfaceColor;
            //   bool g_bIndicate;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_indicateDiffuseColor c18      1
            //   g_bIndicate            c19      1
            //   g_bBackfaceColor       c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //   g_intensityDiffuse     c25      1
            //
            
                vs_3_0
                def c26, -1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 592 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Out<0>
                dp4 r0.y, v0, c5  // ::Out<1>
                dp4 r0.z, v0, c6  // ::Out<2>
                dp4 r0.w, v0, c7  // ::Out<3>
                mov r1.xy, c26
                add r1.z, r1.x, c20.x
                mov r1.w, -r1.z
                max r1.z, r1.w, r1.z
                mov r1.w, -r1.z
                sge r1.z, r1.w, r1.z
                mov r2, -v2
                add r3, r2, c22
                mul r3, r3, c21.x
                add r3, r3, v2  // diffuseColor<0,1,2,3>
                mov r4.xyz, -v1
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r4  // inNorm<0,1,2>
            
            #line 594
                add r2, r2, r3
                add r3.xyz, r4, r5
                mul r2, r1.z, r2
                mul r3.xyz, r1.z, r3
                add r2, r2, v2  // diffuseColor<0,1,2,3>
                add r3.xyz, r3, v1  // inNorm<0,1,2>
            
            #line 601
                dp3 r4.x, r3, c0  // ::Out<12>
                dp3 r4.y, r3, c1  // ::Out<13>
                dp3 r4.z, r3, c2  // ::Out<14>
                dp4 r5.x, v0, c0  // ::Out<8>
                dp4 r5.y, v0, c1  // ::Out<9>
                dp4 r5.z, v0, c2  // ::Out<10>
                dp4 r5.w, v0, c3  // ::Out<11>
                mov r6.xyz, -r5
                add r6.xyz, r6, c23  // ::Out<15,16,17>
                add r1.x, r1.x, c19.x
                mov r1.z, -r1.x
                max r1.x, r1.z, r1.x
                mov r1.z, -r1.x
                sge r1.x, r1.z, r1.x
                mov r7, c18  // diffuseColor<0,1,2,3>
                mov r8, -r2
                add r7, r7, r8
                mul r7, r1.x, r7
                add r2, r2, r7  // diffuseColor<0,1,2,3>
            
            #line 608
                add r1.x, r1.y, c17.x
                mov r1.y, -r1.x
                max r1.x, r1.y, r1.x
                mov r1.y, -r1.x
                sge r1.x, r1.y, r1.x
                mov r2, r2  // ::Out<4,5,6,7>
            
            #line 614
                mov r7.x, c13.x  // ::g_Light1Intensity<0>
                mul r7, r7.x, c15
                mul r7, r7, c25.x
                dp3 r1.y, r4, c11
                max r1.y, r1.y, c24.x
                mul r7, r1.y, r7
                mov r8.x, c14.x  // ::g_Light2Intensity<0>
                mul r8, r8.x, c16
                mul r8, r8, c25.x
                dp3 r1.y, r4, c12
                max r1.y, r1.y, c24.x
                mul r8, r1.y, r8
                add r7, r7, r8
                mul r7, r2, r7  // ::Out<4,5,6,7>
            
            #line 608
                mov r8, -r7
                add r2, r2, r8
                mul r1, r1.x, r2
                add r1, r1, r7  // ::Out<4,5,6,7>
            
            #line 617
                dp3 r2.x, r3, c8  // ::Normal<0>
                dp3 r2.y, r3, c9  // ::Normal<1>
                dp3 r2.z, r3, c10  // ::Normal<2>
                mul r2.xyz, r2, c26.z
                add r2.xyz, r2, c26.z  // ::Out<18,19,20>
                dp4 r3.x, v0, c8  // ::Out<21>
                dp4 r3.y, v0, c9  // ::Out<22>
                dp4 r3.z, v0, c10  // ::Out<23>
                mov o0, r0  // ::SurfaceRenderingPhongVS<0,1,2,3>
                mov o1, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
                mov o2, r5  // ::SurfaceRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r4  // ::SurfaceRenderingPhongVS<12,13,14>
                mov o4.xyz, r6  // ::SurfaceRenderingPhongVS<15,16,17>
                mov o5.xyz, r2  // ::SurfaceRenderingPhongVS<18,19,20>
                mov o6.xyz, r3  // ::SurfaceRenderingPhongVS<21,22,23>
            
            // approximately 82 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_fogParam      c6       1
            //   g_fogColor      c7       1
            //   g_farClipPlane  c8       1
            //
            
                ps_3_0
                def c9, 1, -1, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord3 v2.xyz  // In<18,19,20>
                dcl_texcoord4 v3.xyz  // In<21,22,23>
            
            #line 630 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 630
                mul r0, r0.x, c9.x
                texkill r0
            
            #line 648
                mov r0, v0  // ::finalColor<0,1,2,3>
            
            #line 651
                mov r1.y, c9.y
                add r1.x, r1.y, c6.x
                abs r1.x, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, r1.x
                cmp r1.x, r1.x, c9.x, c9.z
            
            #line 654
                dp3 r1.y, v3, v3
                rsq r1.y, r1.y
                rcp r1.y, r1.y
                mul r1.y, r1.y, c6.z
                mov r1.y, -r1.y
                add r1.y, r1.y, c6.y
                add r1.z, r1.y, c9.w
                cmp r1.y, r1.z, r1.y, c9.z
                add r1.z, r1.y, c9.y
                cmp r1.y, r1.z, c9.x, r1.y  // ::fogFLinear<0>
                mov r2.xyz, -c7
                add r2.xyz, r0, r2
                mul r1.yzw, r1.y, r2.xxyz
                add r1.yzw, r1, c7.xxyz  // ::finalColor<0,1,2>
            
            #line 651
                mov r2.xyz, -r1.x
                cmp r0.xyz, r2, r0, r1.yzww  // ::finalColor<0,1,2>
            
            #line 664
                mul r1, c9.xxxz, v2.xyzx
                add oC1, r1, c9.zzzx  // OutNormal<0,1,2,3>
            
            #line 667
                rcp r1.x, c8.x
                rcp r1.y, c8.x
                rcp r1.z, c8.x
                mul oC2.xyz, r1, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c9.x  // OutDepth<3>
                mov oC0.xyz, r0  // OutColor<0,1,2>
                mov oC0.w, r0.w  // OutColor<3>
            
            // approximately 43 instruction slots used
            };
    }
}

technique SurfaceRenderingWithAlphaGouraud
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float3 g_Light1Dir;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float3 g_Light2Dir;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   float g_bBlendBackfaceColor;
            //   bool g_bIndicate;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float g_intensityDiffuse;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   int g_numActiveLight;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_Light1Intensity      c13      1
            //   g_Light2Intensity      c14      1
            //   g_Light1Color          c15      1
            //   g_Light2Color          c16      1
            //   g_numActiveLight       c17      1
            //   g_indicateDiffuseColor c18      1
            //   g_bIndicate            c19      1
            //   g_bBackfaceColor       c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //   g_intensityDiffuse     c25      1
            //
            
                vs_3_0
                def c26, -1, 0, 0.5, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4.xyz
                dcl_texcoord3 o5.xyz
                dcl_texcoord4 o6.xyz
            
            #line 592 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Out<0>
                dp4 r0.y, v0, c5  // ::Out<1>
                dp4 r0.z, v0, c6  // ::Out<2>
                dp4 r0.w, v0, c7  // ::Out<3>
                mov r1.xy, c26
                add r1.z, r1.x, c20.x
                mov r1.w, -r1.z
                max r1.z, r1.w, r1.z
                mov r1.w, -r1.z
                sge r1.z, r1.w, r1.z
                mov r2, -v2
                add r3, r2, c22
                mul r3, r3, c21.x
                add r3, r3, v2  // diffuseColor<0,1,2,3>
                mov r4.xyz, -v1
                dp3 r1.w, r4, r4
                rsq r1.w, r1.w
                mul r5.xyz, r1.w, r4  // inNorm<0,1,2>
            
            #line 594
                add r2, r2, r3
                add r3.xyz, r4, r5
                mul r2, r1.z, r2
                mul r3.xyz, r1.z, r3
                add r2, r2, v2  // diffuseColor<0,1,2,3>
                add r3.xyz, r3, v1  // inNorm<0,1,2>
            
            #line 601
                dp3 r4.x, r3, c0  // ::Out<12>
                dp3 r4.y, r3, c1  // ::Out<13>
                dp3 r4.z, r3, c2  // ::Out<14>
                dp4 r5.x, v0, c0  // ::Out<8>
                dp4 r5.y, v0, c1  // ::Out<9>
                dp4 r5.z, v0, c2  // ::Out<10>
                dp4 r5.w, v0, c3  // ::Out<11>
                mov r6.xyz, -r5
                add r6.xyz, r6, c23  // ::Out<15,16,17>
                add r1.x, r1.x, c19.x
                mov r1.z, -r1.x
                max r1.x, r1.z, r1.x
                mov r1.z, -r1.x
                sge r1.x, r1.z, r1.x
                mov r7, c18  // diffuseColor<0,1,2,3>
                mov r8, -r2
                add r7, r7, r8
                mul r7, r1.x, r7
                add r2, r2, r7  // diffuseColor<0,1,2,3>
            
            #line 608
                add r1.x, r1.y, c17.x
                mov r1.y, -r1.x
                max r1.x, r1.y, r1.x
                mov r1.y, -r1.x
                sge r1.x, r1.y, r1.x
                mov r2, r2  // ::Out<4,5,6,7>
            
            #line 614
                mov r7.x, c13.x  // ::g_Light1Intensity<0>
                mul r7, r7.x, c15
                mul r7, r7, c25.x
                dp3 r1.y, r4, c11
                max r1.y, r1.y, c24.x
                mul r7, r1.y, r7
                mov r8.x, c14.x  // ::g_Light2Intensity<0>
                mul r8, r8.x, c16
                mul r8, r8, c25.x
                dp3 r1.y, r4, c12
                max r1.y, r1.y, c24.x
                mul r8, r1.y, r8
                add r7, r7, r8
                mul r7, r2, r7  // ::Out<4,5,6,7>
            
            #line 608
                mov r8, -r7
                add r2, r2, r8
                mul r1, r1.x, r2
                add r1, r1, r7  // ::Out<4,5,6,7>
            
            #line 617
                dp3 r2.x, r3, c8  // ::Normal<0>
                dp3 r2.y, r3, c9  // ::Normal<1>
                dp3 r2.z, r3, c10  // ::Normal<2>
                mul r2.xyz, r2, c26.z
                add r2.xyz, r2, c26.z  // ::Out<18,19,20>
                dp4 r3.x, v0, c8  // ::Out<21>
                dp4 r3.y, v0, c9  // ::Out<22>
                dp4 r3.z, v0, c10  // ::Out<23>
                mov o0, r0  // ::SurfaceRenderingPhongVS<0,1,2,3>
                mov o1, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
                mov o2, r5  // ::SurfaceRenderingPhongVS<8,9,10,11>
                mov o3.xyz, r4  // ::SurfaceRenderingPhongVS<12,13,14>
                mov o4.xyz, r6  // ::SurfaceRenderingPhongVS<15,16,17>
                mov o5.xyz, r2  // ::SurfaceRenderingPhongVS<18,19,20>
                mov o6.xyz, r3  // ::SurfaceRenderingPhongVS<21,22,23>
            
            // approximately 82 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_alpha;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_alpha         c0       1
            //   g_clipPlane0    c1       1
            //   g_clipPlane0Dir c2       1
            //   g_clipPlane1    c3       1
            //   g_clipPlane1Dir c4       1
            //   g_clipPlane2    c5       1
            //   g_clipPlane2Dir c6       1
            //   g_fogParam      c7       1
            //   g_fogColor      c8       1
            //   g_farClipPlane  c9       1
            //
            
                ps_3_0
                def c10, 1, -1, 0, 0
                dcl_color v0.xyz  // In<4,5,6>
                dcl_texcoord v1  // In<8,9,10,11>
                dcl_texcoord3 v2.xyz  // In<18,19,20>
                dcl_texcoord4 v3.xyz  // In<21,22,23>
            
            #line 630 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v1  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c1, r0
                mul r1.x, r1.x, c2.x  // ::result0<0>
                dp4 r1.y, c3, r0
                mul r1.y, r1.y, c4.x  // ::result1<0>
                dp4 r0.x, c5, r0
                mul r0.x, r0.x, c6.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 630
                mul r0, r0.x, c10.x
                texkill r0
            
            #line 648
                mov r0.xyz, v0  // ::finalColor<0,1,2>
            
            #line 651
                mov r1.y, c10.y
                add r0.w, r1.y, c7.x
                abs r0.w, r0.w
                mov r0.w, -r0.w
                add r0.w, r0.w, r0.w
                cmp r0.w, r0.w, c10.x, c10.z
            
            #line 654
                dp3 r1.x, v3, v3
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                mul r1.x, r1.x, c7.z
                mov r1.x, -r1.x
                add r1.x, r1.x, c7.y
                add r1.y, r1.x, c10.w
                cmp r1.x, r1.y, r1.x, c10.z
                add r1.y, r1.x, c10.y
                cmp r1.x, r1.y, c10.x, r1.x  // ::fogFLinear<0>
                mov r1.yzw, -c8.xxyz
                add r1.yzw, r0.xxyz, r1
                mul r1.xyz, r1.yzww, r1.x
                add r1.xyz, r1, c8  // ::finalColor<0,1,2>
            
            #line 651
                mov r2.xyz, -r0.w
                cmp r0.xyz, r2, r0, r1  // ::finalColor<0,1,2>
            
            #line 661
                mov r0.w, c0.x  // ::finalColor<3>
            
            #line 664
                mul r1, c10.xxxz, v2.xyzx
                add oC1, r1, c10.zzzx  // OutNormal<0,1,2,3>
            
            #line 667
                rcp r1.x, c9.x
                rcp r1.y, c9.x
                rcp r1.z, c9.x
                mul oC2.xyz, r1, v3.z  // OutDepth<0,1,2>
                mov oC2.w, c10.x  // OutDepth<3>
                mov oC0.xyz, r0  // OutColor<0,1,2>
                mov oC0.w, r0.w  // OutColor<3>
            
            // approximately 44 instruction slots used
            };
    }
}

technique AxisRendering
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorldView           c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_MaterialDiffuseColor c13      1
            //   g_fogParam             c14      1
            //   g_fogColor             c15      1
            //
            
                vs_3_0
                def c16, 0.200000003, 0.5, -1, 0
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2.xyz
                dcl_texcoord1 o3.xyz
                dcl_texcoord2 o4
            
            #line 736 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Output<0>
                dp4 r0.y, v0, c5  // ::Output<1>
                dp4 r0.z, v0, c6  // ::Output<2>
                dp4 r0.w, v0, c7  // ::Output<3>
                dp3 r1.x, v1, c0
                dp3 r1.y, v1, c1
                dp3 r1.z, v1, c2
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1  // ::vNormal<0,1,2>
                dp3 r1.w, r1, c11
                max r1.w, r1.w, c16.x
                dp3 r1.x, r1, c12
                max r1.x, r1.x, c16.x
                add r1.x, r1.x, r1.w
                mul r1.xyz, r1.x, c13  // ::Output<4,5,6>
            
            #line 742
                dp3 r2.x, v1, c8  // ::Normal<0>
                dp3 r2.y, v1, c9  // ::Normal<1>
                dp3 r2.z, v1, c10  // ::Normal<2>
                mul r2.xyz, r2, c16.y
                add r2.xyz, r2, c16.y  // ::Output<8,9,10>
                dp4 r3.x, v0, c8  // ::Output<11>
                dp4 r3.y, v0, c9  // ::Output<12>
                dp4 r3.z, v0, c10  // ::Output<13>
                dp4 r4.x, v0, c0  // ::Output<14>
                dp4 r4.y, v0, c1  // ::Output<15>
                dp4 r4.z, v0, c2  // ::Output<16>
                dp4 r4.w, v0, c3  // ::Output<17>
                mov r5.z, c16.z
                add r1.w, r5.z, c14.x
                mov r2.w, -r1.w
                max r1.w, r1.w, r2.w
                mov r2.w, -r1.w
                sge r1.w, r2.w, r1.w
                dp3 r2.w, r3, r3
                rsq r2.w, r2.w
                rcp r2.w, r2.w
                mul r2.w, r2.w, c14.z
                mov r2.w, -r2.w
                add r2.w, r2.w, c14.y
                max r2.w, r2.w, c16.w
                min r2.w, r2.w, -c16.z  // ::fogFLinear<0>
                mov r5.xyz, -c15
                add r5.xyz, r1, r5
                mul r5.xyz, r2.w, r5
                add r5.xyz, r5, c15  // ::Output<4,5,6>
            
            #line 748
                mov r6.xyz, -r1
                add r5.xyz, r5, r6
                mul r5.xyz, r1.w, r5
                add r1.xyz, r1, r5  // ::Output<4,5,6>
            
            #line 754
                mov o0, r0  // ::AxisRenderingVS<0,1,2,3>
                mov o1.xyz, r1  // ::AxisRenderingVS<4,5,6>
                mov o1.w, c16.w  // ::AxisRenderingVS<7>
                mov o4, r4  // ::AxisRenderingVS<14,15,16,17>
                mov o2.xyz, r2  // ::AxisRenderingVS<8,9,10>
                mov o3.xyz, r3  // ::AxisRenderingVS<11,12,13>
            
            // approximately 56 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //   float g_farClipPlane;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //   g_farClipPlane  c6       1
            //
            
                ps_3_0
                def c7, 1, 0, 0, 0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1.xyz  // In<8,9,10>
                dcl_texcoord1 v2.z  // In<13>
                dcl_texcoord2 v3  // In<14,15,16,17>
            
            #line 762 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v3  // CalcClipPlaneVisible::vPosWorld<0,1,2,3>
            
            #line 123
                dp4 r1.x, c0, r0
                mul r1.x, r1.x, c1.x  // ::result0<0>
                dp4 r1.y, c2, r0
                mul r1.y, r1.y, c3.x  // ::result1<0>
                dp4 r0.x, c4, r0
                mul r0.x, r0.x, c5.x  // ::result2<0>
                mul r0.y, r1.y, r1.x
                mul r0.x, r0.x, r0.y  // ::CalcClipPlaneVisible<0>
            
            #line 762
                mul r0, r0.x, c7.x
                texkill r0
                mul r0, c7.xxxy, v1.xyzx
                add oC1, r0, c7.yyyx  // OutNormal<0,1,2,3>
            
            #line 767
                rcp r0.x, c6.x
                rcp r0.y, c6.x
                rcp r0.z, c6.x
                mul oC2.xyz, r0, v2.z  // OutDepth<0,1,2>
                mov oC2.w, c7.x  // OutDepth<3>
                mov oC0, v0  // OutColor<0,1,2,3>
            
            // approximately 19 instruction slots used
            };
    }
}

technique LineWireframeRendering
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_MaterialDiffuseColor;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //   g_MaterialDiffuseColor c4       1
            //
            
                vs_3_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_position o0
                dcl_color o1
            
            #line 795 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c0  // ::Out<0>
                dp4 r0.y, v0, c1  // ::Out<1>
                dp4 r0.z, v0, c2  // ::Out<2>
                dp4 r0.w, v0, c3  // ::Out<3>
                mov r1, c4  // ::Out<4,5,6,7>
                mov o0, r0  // ::HLSL_LineWireframeRendering_VS<0,1,2,3>
                mov o1, r1  // ::HLSL_LineWireframeRendering_VS<4,5,6,7>
            
            // approximately 7 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_3_0
                dcl_color v0  // In<4,5,6,7>
            
            #line 802 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov oC0, v0  // ::HLSL_LineWireframeRendering_PS<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique ClipPlaneRenderingNoAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorld               c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_MaterialDiffuseColor c13      1
            //   g_fogParam             c14      1
            //   g_fogColor             c15      1
            //
            
                vs_3_0
                def c16, 0.200000003, -1, 0, 1
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_position o0
                dcl_color o1
            
            #line 836 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Output<0>
                dp4 r0.y, v0, c5  // ::Output<1>
                dp4 r0.z, v0, c6  // ::Output<2>
                dp4 r0.w, v0, c7  // ::Output<3>
                dp3 r1.x, v1, c8
                dp3 r1.y, v1, c9
                dp3 r1.z, v1, c10
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1  // ::vNormal<0,1,2>
                dp3 r1.w, r1, c11
                max r1.w, r1.w, c16.x
                dp3 r1.x, r1, c12
                max r1.x, r1.x, c16.x
                add r1.x, r1.x, r1.w
                mul r1.xyz, r1.x, c13  // ::Output<4,5,6>
            
            #line 850
                mov r2.y, c16.y
                add r1.w, r2.y, c14.x
                mov r2.x, -r1.w
                max r1.w, r1.w, r2.x
                mov r2.x, -r1.w
                sge r1.w, r2.x, r1.w
                dp4 r2.x, v0, c0  // ::posView<0>
                dp4 r2.y, v0, c1  // ::posView<1>
                dp4 r2.z, v0, c2  // ::posView<2>
                dp4 r2.w, v0, c3  // ::posView<3>
                dp4 r2.x, r2, r2
                rsq r2.x, r2.x
                rcp r2.x, r2.x
                mul r2.x, r2.x, c14.z
                mov r2.x, -r2.x
                add r2.x, r2.x, c14.y
                max r2.x, r2.x, c16.z
                min r2.x, r2.x, c16.w  // ::fogFLinear<0>
                mov r2.yzw, -c15.xxyz
                add r2.yzw, r1.xxyz, r2
                mul r2.xyz, r2.yzww, r2.x
                add r2.xyz, r2, c15  // ::Output<4,5,6>
            
            #line 850
                mov r3.xyz, -r1
                add r2.xyz, r2, r3
                mul r2.xyz, r1.w, r2
                add r1.xyz, r1, r2  // ::Output<4,5,6>
            
            #line 857
                mov o0, r0  // ::ClipPlaneVS<0,1,2,3>
                mov o1.xyz, r1  // ::ClipPlaneVS<4,5,6>
                mov o1.w, c16.z  // ::ClipPlaneVS<7>
            
            // approximately 45 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_3_0
                dcl_color v0  // In<4,5,6,7>
            
            #line 870 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov oC0, v0  // OutColor<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique ClipPlaneRenderingWithAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float g_alpha;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorld               c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_MaterialDiffuseColor c13      1
            //   g_alpha                c14      1
            //   g_fogParam             c15      1
            //   g_fogColor             c16      1
            //
            
                vs_3_0
                def c17, 0.200000003, -1, 0, 1
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_position o0
                dcl_color o1
            
            #line 836 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Output<0>
                dp4 r0.y, v0, c5  // ::Output<1>
                dp4 r0.z, v0, c6  // ::Output<2>
                dp4 r0.w, v0, c7  // ::Output<3>
                dp3 r1.x, v1, c8
                dp3 r1.y, v1, c9
                dp3 r1.z, v1, c10
                dp3 r1.w, r1, r1
                rsq r1.w, r1.w
                mul r1.xyz, r1.w, r1  // ::vNormal<0,1,2>
                dp3 r1.w, r1, c11
                max r1.w, r1.w, c17.x
                dp3 r1.x, r1, c12
                max r1.x, r1.x, c17.x
                add r1.x, r1.x, r1.w
                mul r1.xyz, r1.x, c13  // ::Output<4,5,6>
            
            #line 842
                mov r1.w, c14.x  // ::Output<7>
            
            #line 850
                mov r2.y, c17.y
                add r2.x, r2.y, c15.x
                mov r2.y, -r2.x
                max r2.x, r2.y, r2.x
                mov r2.y, -r2.x
                sge r2.x, r2.y, r2.x
                dp4 r3.x, v0, c0  // ::posView<0>
                dp4 r3.y, v0, c1  // ::posView<1>
                dp4 r3.z, v0, c2  // ::posView<2>
                dp4 r3.w, v0, c3  // ::posView<3>
                dp4 r2.y, r3, r3
                rsq r2.y, r2.y
                rcp r2.y, r2.y
                mul r2.y, r2.y, c15.z
                mov r2.y, -r2.y
                add r2.y, r2.y, c15.y
                max r2.y, r2.y, c17.z
                min r2.y, r2.y, c17.w  // ::fogFLinear<0>
                mov r3.xyz, -c16
                add r3.xyz, r1, r3
                mul r2.yzw, r2.y, r3.xxyz
                add r2.yzw, r2, c16.xxyz  // ::Output<4,5,6>
            
            #line 850
                mov r3.xyz, -r1
                add r2.yzw, r2, r3.xxyz
                mul r2.xyz, r2.yzww, r2.x
                add r1.xyz, r1, r2  // ::Output<4,5,6>
            
            #line 857
                mov o0, r0  // ::ClipPlaneVS<0,1,2,3>
                mov o1.xyz, r1  // ::ClipPlaneVS<4,5,6>
                mov o1.w, r1.w  // ::ClipPlaneVS<7>
            
            // approximately 46 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_3_0
                dcl_color v0  // In<4,5,6,7>
            
            #line 870 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov oC0, v0  // OutColor<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique SkyBoxRendering
{
    pass p0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //
            
                vs_3_0
                dcl_position v0  // In<0,1,2,3>
                dcl_color v1  // In<4,5,6,7>
                dcl_texcoord v2  // In<8,9>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2.xy
            
            #line 911 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c0  // ::Out<0>
                dp4 r0.y, v0, c1  // ::Out<1>
                dp4 r0.z, v0, c2  // ::Out<2>
                dp4 r0.w, v0, c3  // ::Out<3>
                mov r1, v1  // ::Out<4,5,6,7>
                mov r2.xy, v2  // ::Out<8,9>
                mov o0, r0  // ::SkyBoxRenderingVS<0,1,2,3>
                mov o1, r1  // ::SkyBoxRenderingVS<4,5,6,7>
                mov o2.xy, r2  // ::SkyBoxRenderingVS<8,9>
            
            // approximately 9 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_3_0
                def c0, 0, 0, 0, 0
                dcl_color v0.xyz  // In<4,5,6>
                dcl_texcoord v1.xy  // In<8,9>
                dcl_2d s0
            
            #line 920 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v1, s0
                mul r0.xyz, r0, v0  // ::finalColor<0,1,2>
                mov oC0.xyz, r0  // ::SkyBoxRenderingPS<0,1,2>
                mov oC0.w, c0.x  // ::SkyBoxRenderingPS<3>
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique Text3DRenderingNoAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_fogParam             c8       1
            //   g_fogColor             c9       1
            //
            
                vs_3_0
                def c10, -1, 0, 1, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2.xy
            
            #line 960 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Output<0>
                dp4 r0.y, v0, c5  // ::Output<1>
                dp4 r0.z, v0, c6  // ::Output<2>
                dp4 r0.w, v0, c7  // ::Output<3>
                mov r1.xyz, v1  // ::Output<4,5,6>
                mov r2.xy, v2  // ::Output<8,9>
            
            #line 970
                mov r3.x, c10.x
                add r1.w, r3.x, c8.x
                mov r2.z, -r1.w
                max r1.w, r1.w, r2.z
                mov r2.z, -r1.w
                sge r1.w, r2.z, r1.w
                dp4 r3.x, v0, c0  // ::posView<0>
                dp4 r3.y, v0, c1  // ::posView<1>
                dp4 r3.z, v0, c2  // ::posView<2>
                dp4 r3.w, v0, c3  // ::posView<3>
                dp4 r2.z, r3, r3
                rsq r2.z, r2.z
                rcp r2.z, r2.z
                mul r2.z, r2.z, c8.z
                mov r2.z, -r2.z
                add r2.z, r2.z, c8.y
                max r2.z, r2.z, c10.y
                min r2.z, r2.z, c10.z  // ::fogFLinear<0>
                mov r3.xyz, -c9
                add r3.xyz, r1, r3
                mul r3.xyz, r2.z, r3
                add r3.xyz, r3, c9  // ::Output<4,5,6>
            
            #line 970
                mov r4.xyz, -r1
                add r3.xyz, r3, r4
                mul r3.xyz, r1.w, r3
                add r1.xyz, r1, r3  // ::Output<4,5,6>
            
            #line 977
                mov o0, r0  // ::Text3DVS<0,1,2,3>
                mov o1.xyz, r1  // ::Text3DVS<4,5,6>
                mov o1.w, c10.z  // ::Text3DVS<7>
                mov o2.xy, r2  // ::Text3DVS<8,9>
            
            // approximately 36 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_3_0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1.xy  // In<8,9>
                dcl_2d s0
            
            #line 983 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v1, s0
                mul r0, r0, v0  // ::finalColor<0,1,2,3>
                mov oC0, r0  // OutColor<0,1,2,3>
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique Text3DRenderingWithAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_alpha;
            //   float4 g_fogColor;
            //   float3 g_fogParam;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_alpha                c8       1
            //   g_fogParam             c9       1
            //   g_fogColor             c10      1
            //
            
                vs_3_0
                def c11, -1, 0, 1, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_position o0
                dcl_color o1
                dcl_texcoord o2.xy
            
            #line 960 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                dp4 r0.x, v0, c4  // ::Output<0>
                dp4 r0.y, v0, c5  // ::Output<1>
                dp4 r0.z, v0, c6  // ::Output<2>
                dp4 r0.w, v0, c7  // ::Output<3>
                mov r1.xyz, v1  // ::Output<4,5,6>
                mov r2.xy, v2  // ::Output<8,9>
            
            #line 966
                mov r1.w, c8.x  // ::Output<7>
            
            #line 970
                mov r3.x, c9.x  // ::g_fogParam<0>
                add r2.z, r3.x, c11.x
                mov r2.w, -r2.z
                max r2.z, r2.w, r2.z
                mov r2.w, -r2.z
                sge r2.z, r2.w, r2.z
                dp4 r3.x, v0, c0  // ::posView<0>
                dp4 r3.y, v0, c1  // ::posView<1>
                dp4 r3.z, v0, c2  // ::posView<2>
                dp4 r3.w, v0, c3  // ::posView<3>
                dp4 r2.w, r3, r3
                rsq r2.w, r2.w
                rcp r2.w, r2.w
                mul r2.w, r2.w, c9.z
                mov r2.w, -r2.w
                add r2.w, r2.w, c9.y
                max r2.w, r2.w, c11.y
                min r2.w, r2.w, c11.z  // ::fogFLinear<0>
                mov r3.xyz, -c10
                add r3.xyz, r1, r3
                mul r3.xyz, r2.w, r3
                add r3.xyz, r3, c10  // ::Output<4,5,6>
            
            #line 970
                mov r4.xyz, -r1
                add r3.xyz, r3, r4
                mul r3.xyz, r2.z, r3
                add r1.xyz, r1, r3  // ::Output<4,5,6>
            
            #line 977
                mov o0, r0  // ::Text3DVS<0,1,2,3>
                mov o1.xyz, r1  // ::Text3DVS<4,5,6>
                mov o1.w, r1.w  // ::Text3DVS<7>
                mov o2.xy, r2  // ::Text3DVS<8,9>
            
            // approximately 37 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_3_0
                dcl_color v0  // In<4,5,6,7>
                dcl_texcoord v1.xy  // In<8,9>
                dcl_2d s0
            
            #line 983 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v1, s0
                mul r0, r0, v0  // ::finalColor<0,1,2,3>
                mov oC0, r0  // OutColor<0,1,2,3>
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique RenderFinalSceneBorder
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshBackgroundSampler;
            //   float4 g_colorIndicate[7];
            //   float2 g_finalImageDelta;
            //
            //
            // Registers:
            //
            //   Name                  Reg   Size
            //   --------------------- ----- ----
            //   g_colorIndicate       c0       7
            //   g_finalImageDelta     c7       1
            //   MeshBackgroundSampler s0       1
            //
            
                ps_3_0
                def c8, 1, 0, 0.0599999987, 10
                def c9, 0.5, -1, -2, 0
                def c10, -3, -4, -5, -6
                def c11, 0, 0, 0, 0
                dcl_texcoord v0.xy  // In<4,5>
                dcl_texcoord1 v1.xy  // In<6,7>
                dcl_texcoord2 v2.xy  // In<8,9>
                dcl_texcoord3 v3.xy  // In<10,11>
                dcl_2d s0
            
            #line 1048 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s0
                mov r0.x, r0.w  // ::finalColor0<3>
                texld r1, v1, s0
                mov r0.y, r1.w  // ::finalColor1<3>
                texld r1, v2, s0
                mov r0.z, r1.w  // ::finalColor2<3>
                texld r1, v3, s0
                mov r0.w, r1.w  // ::finalColor3<3>
                add r1.xy, c7, v0
                texld r1, r1, s0  // ::finalColorOrig<0,1,2,3>
                mov r0.y, -r0.y
                add r0.x, r0.y, r0.x
                mul r0.x, r0.x, r0.x
                mul r0.x, r0.x, c8.x
                mov r0.y, -r0.w
                add r0.y, r0.y, r0.z
                mul r0.y, r0.y, r0.y
                mul r0.y, r0.y, c8.x
                add r0.x, r0.y, r0.x  // ::finalColorAlpha<0>
            
            #line 1063
                mov r0.x, -r0.x
                add r0.x, r0.x, c8.y
                cmp r0.x, r0.x, c8.y, c8.x
                mov r0.y, -r1.w
                add r0.y, r0.y, c8.z
                cmp r0.y, r0.y, c8.y, c8.x
                mul r0.x, r0.y, r0.x
                mov r0.y, -r0.x
                add r0.y, r0.y, r0.y
                cmp r2.w, r0.y, c8.x, c8.y
                mov r0.y, r1.w  // ::finalColorOrig<3>
            
            #line 1066
                mul r0.y, r0.y, c8.w
                add r0.y, r0.y, c9.x
                frc r0.z, r0.y
                mov r0.z, -r0.z
                add r0.y, r0.z, r0.y  // ::index<0>
                add r3, r0.y, c10
                add r0.yz, r0.y, c9
                abs r3, r3
                abs r0.yz, r0
                mov r3, -r3
                mov r4.xy, -r0.yzzw
                mov r0.y, -r0.y
                add r0.y, r0.y, r4.x
                cmp r0.y, r0.y, c8.x, c8.y
                mov r0.z, -r0.z
                add r0.z, r0.z, r4.y
                cmp r0.z, r0.z, c8.x, c8.y
                add r3, r3, r3
                cmp r3, r3, c8.x, c8.y
                mov r4.xy, c11
                cmp r4, r4.x, r4.y, c0
                mov r5, -r0.y
                cmp r4, r5, r4, c1
                mov r5, -r0.z
                cmp r4, r5, r4, c2
                mov r5, -r3.x
                cmp r4, r5, r4, c3
                mov r5, -r3.y
                cmp r4, r5, r4, c4
                mov r5, -r3.z
                cmp r4, r5, r4, c5
                mov r3, -r3.w
                cmp r3, r3, r4, c6  // ::edgeMaskOR<0,1,2,3>
            
            #line 1063
                mov r2.x, r2.w  // ::edgeMaskAND<0>
                mov r2.y, r2.w  // ::edgeMaskAND<1>
                mov r2.z, r2.w  // ::edgeMaskAND<2>
                mov r2.w, r2.w  // ::edgeMaskAND<3>
                mov r0, -r0.x
                cmp r0, r0, c8.y, r3  // ::edgeMaskOR<0,1,2,3>
            
            #line 1070
                mul r1, r1, r2
                add r0, r0, r1  // ::Output<0,1,2,3>
                mov oC0, r0  // ::RenderFinalSceneBorderPS<0,1,2,3>
            
            // approximately 72 instruction slots used (5 texture, 67 arithmetic)
            };
    }
}

technique SSAO_SM3
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_camFrustumTopLeft[2];
            //   float g_farClipPlane;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_camFrustumTopLeft c0       2
            //   g_farClipPlane      c2       1
            //
            
                vs_3_0
                dcl_position v0  // InPos<0,1,2,3>
                dcl_texcoord v1  // InTex<0,1>
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2.xyz
            
            #line 1148 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov o0, v0  // OutPos<0,1,2,3>
                mov o1.xy, v1  // OutTex<0,1>
            
            #line 1153
                mov r0.xy, -v0
                slt r0.zw, r0.xyxy, v0.xyxy
                slt r0.xy, v0, r0
                mov r0.xy, -r0
                add r0.xy, r0, r0.zwzw  // InPos<0,1>
            
            #line 1156
                mul o2.x, r0.x, c0.x  // OutEyeRay<0>
                mul o2.y, r0.y, c1.x  // OutEyeRay<1>
                mov o2.z, c2.x  // OutEyeRay<2>
            
            // approximately 10 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D DepthMap;
            //   sampler2D NoiseTex;
            //   sampler2D Normal;
            //   float g_farClipPlane;
            //   float3 g_fogParam;
            //   float4x4 g_matProj;
            //   float g_ssaoParam[3];
            //   float4 g_vBatchInstanceColor[75];
            //
            //
            // Registers:
            //
            //   Name                  Reg   Size
            //   --------------------- ----- ----
            //   g_vBatchInstanceColor c0      75
            //   g_matProj             c75      4
            //   g_ssaoParam           c79      3
            //   g_fogParam            c82      1
            //   g_farClipPlane        c83      1
            //   Normal                s0       1
            //   DepthMap              s1       1
            //   NoiseTex              s2       1
            //
            
                ps_3_0
                def c84, 279, 0, -12, -44
                def c85, -1, 1, 0, 2
                def c86, -23, -55, 0.5, -0.5
                def c87, 0, -32, -64, 0.00999999978
                def c88, -2, -34, -66, 0
                def c89, -3, -35, -67, 0
                def c90, -4, -36, -68, 0
                def c91, -5, -37, -69, 0
                def c92, -6, -38, -70, 0
                def c93, -7, -39, -71, 0
                def c94, -8, -40, -72, 0
                def c95, -9, -41, -73, 0
                def c96, -10, -42, -74, 0
                def c97, -11, -43, -14, -46
                def c98, -13, -45, -16, -48
                def c99, -15, -47, -18, -50
                def c100, -17, -49, -20, -52
                def c101, -19, -51, -22, -54
                def c102, -21, -53, -57, 0.5
                def c103, -24, -25, -56, -57
                def c104, -26, -27, -58, -59
                def c105, -28, -29, -60, -61
                def c106, -30, -31, -62, -63
                def c107, -1, -33, -65, 0
                defi i0, 75, 0, 0, 0
                dcl_texcoord v0.xy  // uv0<0,1>
                dcl_texcoord1 v1.xyz  // eyeRay<0,1,2>
                dcl_2d s0
                dcl_2d s1
                dcl_2d s2
            
            #line 1186 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s1  // ::depth<0>
                add r0.y, r0.x, c85.x
                cmp r0.y, r0.y, c85.y, c85.z
            
            #line 1191
                mov r0.y, -r0.y
                add r0.y, r0.y, r0.y
                cmp r0.y, r0.y, c85.y, c85.z
                mul r0.xzw, r0.x, v1.xyyz  // ::eyePos<0,1,2>
            
            #line 1198
                texld r1, v0, s0
                mul r1.xyz, r1, c85.w
                add r1.xyz, r1, c85.x  // ::origNorm<0,1,2>
            
            #line 1202
                mul r2.xy, c84.x, v0
                texld r2, r2, s2
                mov r2.xyz, r2  // ::randNormal<0,1,2>
            
            #line 1205
                mul r2.xyz, r2, c85.w
                add r2.xyz, r2, c85.x  // ::randNormal<0,1,2>
            
            #line 1213
                mov r1.w, -c81.x
            
            #line 1237
                mov r3.w, c85.y
            
            #line 1247
                mov r4.zw, c85.xyzy
            
            #line 1213
                mov r2.w, c85.z  // ::occ<0>
                mov r5.x, c85.z  // ::i<0>
                rep i0
                  add r5.y, r1.w, r5.x
                  cmp r5.y, r5.y, c85.z, c85.y
                  mov r5.y, -r5.y
                  add r5.y, r5.y, r5.y
                  cmp r5.y, r5.y, c85.y, c85.z
                  break_ne r5.y, -r5.y
            
            #line 1217
                  add r5.yz, r5.x, c84.xzww
                  add r6.xy, r5.x, c98
                  add r6.zw, r5.x, c98
                  add r7.xy, r5.x, c100
                  add r7.zw, r5.x, c100
                  add r8.xy, r5.x, c102
                  add r9.xyz, r5.x, c103
                  add r10, r5.x, c104
                  add r11.y, r5.x, c102.z
                  add r12, r5.x, c103
                  mov r12, -r12
                  add r13, r5.x, c105
                  abs r13, r13
                  add r14, r5.x, c106
                  abs r14, r14
                  add r15.xyz, r5.x, c87
                  abs r15.xyz, r15
                  add r16.xyz, r5.x, c107
                  abs r16.xyz, r16
                  add r17.xyz, r5.x, c88
                  abs r17.xyz, r17
                  add r18.xyz, r5.x, c89
                  abs r18.xyz, r18
                  add r19.xyz, r5.x, c90
                  abs r19.xyz, r19
                  add r20.xyz, r5.x, c91
                  abs r20.xyz, r20
                  add r21.xyz, r5.x, c92
                  abs r21.xyz, r21
                  add r22.xyz, r5.x, c93
                  abs r22.xyz, r22
                  add r23.xyz, r5.x, c94
                  abs r23.xyz, r23
                  add r24.xyz, r5.x, c95
                  abs r24.xyz, r24
                  add r25.xyz, r5.x, c96
                  abs r25.xyz, r25
                  add r8.zw, r5.x, c97.xyxy
                  abs r8.zw, r8
                  abs r5.yz, r5
                  abs r6.xy, r6
                  add r11.xz, r5.x, c97.zyww
                  abs r11.xz, r11
                  add r26.xy, r5.x, c99
                  abs r26.xy, r26
                  abs r6.zw, r6
                  abs r7.xy, r7
                  add r26.zw, r5.x, c99
                  abs r26.zw, r26
                  add r27.xy, r5.x, c101
                  abs r27.xy, r27
                  abs r7.zw, r7
                  abs r8.xy, r8
                  add r27.zw, r5.x, c101
                  abs r27.zw, r27
                  add r28.xy, r5.x, c86
                  abs r28.xy, r28
                  mov r28.zw, -r12.xyxz
                  add r28.zw, r9.xyxz, r28
                  cmp r9.xz, r28.zyww, r9, r12
                  mov r12.xz, -r12.yyww
                  mov r11.w, r9.y
                  add r9.yw, r11.xwzy, r12.xxzz
                  cmp r9.yw, r9, r11.xwzy, r12
                  abs r10, r10
                  mov r12, -r14
                  mov r14.xyz, -r15
                  mov r15.xyz, -r16
                  mov r16.xyz, -r17
                  mov r17.xyz, -r18
                  mov r18.xyz, -r19
                  mov r19.xyz, -r20
                  mov r20.xyz, -r21
                  mov r21.xyz, -r22
                  mov r22.xyz, -r23
                  mov r23.xyz, -r24
                  mov r24.xyz, -r25
                  mov r8.zw, -r8
                  mov r5.yz, -r5
                  mov r6.xy, -r6
                  mov r11.xy, -r11.xzzw
                  mov r11.zw, -r26.xyxy
                  mov r6.zw, -r6
                  mov r7.xy, -r7
                  mov r25.xy, -r26.zwzw
                  mov r25.zw, -r27.xyxy
                  mov r7.zw, -r7
                  mov r8.xy, -r8
                  mov r26.xy, -r27.zwzw
                  mov r26.zw, -r28.xyxy
                  mov r9.xz, -r9
                  mov r9.yw, -r9
                  mov r10.xz, -r10
                  mov r10.yw, -r10
                  mov r27, -r13
                  add r14.xyz, r14, r14
                  cmp r14.xyz, r14, c85.y, c85.z
                  add r15.xyz, r15, r15
                  cmp r15.xyz, r15, c85.y, c85.z
                  add r16.xyz, r16, r16
                  cmp r16.xyz, r16, c85.y, c85.z
                  add r17.xyz, r17, r17
                  cmp r17.xyz, r17, c85.y, c85.z
                  add r18.xyz, r18, r18
                  cmp r18.xyz, r18, c85.y, c85.z
                  add r19.xyz, r19, r19
                  cmp r19.xyz, r19, c85.y, c85.z
                  add r20.xyz, r20, r20
                  cmp r20.xyz, r20, c85.y, c85.z
                  add r21.xyz, r21, r21
                  cmp r21.xyz, r21, c85.y, c85.z
                  add r22.xyz, r22, r22
                  cmp r22.xyz, r22, c85.y, c85.z
                  add r23.xyz, r23, r23
                  cmp r23.xyz, r23, c85.y, c85.z
                  add r24.xyz, r24, r24
                  cmp r24.xyz, r24, c85.y, c85.z
                  add r8.zw, r8, r8
                  cmp r8.zw, r8, c85.y, c85.z
                  add r5.yz, r5, r5
                  cmp r5.yz, r5, c85.y, c85.z
                  add r6.xy, r6, r6
                  cmp r6.xy, r6, c85.y, c85.z
                  add r11.xy, r11, r11
                  cmp r11.xy, r11, c85.y, c85.z
                  add r11.zw, r11, r11
                  cmp r11.zw, r11, c85.y, c85.z
                  add r6.zw, r6, r6
                  cmp r6.zw, r6, c85.y, c85.z
                  add r7.xy, r7, r7
                  cmp r7.xy, r7, c85.y, c85.z
                  add r25.xy, r25, r25
                  cmp r25.xy, r25, c85.y, c85.z
                  add r25.zw, r25, r25
                  cmp r25.zw, r25, c85.y, c85.z
                  add r7.zw, r7, r7
                  cmp r7.zw, r7, c85.y, c85.z
                  add r8.xy, r8, r8
                  cmp r8.xy, r8, c85.y, c85.z
                  add r26.xy, r26, r26
                  cmp r26.xy, r26, c85.y, c85.z
                  add r26.zw, r26, r26
                  cmp r26.zw, r26, c85.y, c85.z
                  add r9.xz, r9, r9
                  cmp r9.xz, r9, c85.y, c85.z
                  add r9.yw, r9, r9
                  cmp r9.yw, r9, c85.y, c85.z
                  add r10.xz, r10, r10
                  cmp r10.xz, r10, c85.y, c85.z
                  add r10.yw, r10, r10
                  cmp r10.yw, r10, c85.y, c85.z
                  mov r13.xz, -r13
                  add r13.xz, r13, r27
                  cmp r13.xz, r13, c85.y, c85.z
                  mov r13.yw, -r13
                  add r13.yw, r13, r27
                  cmp r13.yw, r13, c85.y, c85.z
                  add r12, r12, r12
                  cmp r12, r12, c85.y, c85.z
                  mov r27.xyz, -r14.x
                  mov r28.z, c85.z
                  cmp r27.xyz, r27, r28.z, c0
                  mov r28.xyz, -r15.x
                  cmp r27.xyz, r28, r27, c1
                  mov r28.xyz, -r16.x
                  cmp r27.xyz, r28, r27, c2
                  mov r28.xyz, -r17.x
                  cmp r27.xyz, r28, r27, c3
                  mov r28.xyz, -r18.x
                  cmp r27.xyz, r28, r27, c4
                  mov r28.xyz, -r19.x
                  cmp r27.xyz, r28, r27, c5
                  mov r28.xyz, -r20.x
                  cmp r27.xyz, r28, r27, c6
                  mov r28.xyz, -r21.x
                  cmp r27.xyz, r28, r27, c7
                  mov r28.xyz, -r22.x
                  cmp r27.xyz, r28, r27, c8
                  mov r28.xyz, -r23.x
                  cmp r27.xyz, r28, r27, c9
                  mov r28.xyz, -r24.x
                  cmp r27.xyz, r28, r27, c10
                  mov r28.xyz, -r8.z
                  cmp r27.xyz, r28, r27, c11
                  mov r28.xyz, -r5.y
                  cmp r27.xyz, r28, r27, c12
                  mov r28.xyz, -r6.x
                  cmp r27.xyz, r28, r27, c13
                  mov r28.xyz, -r11.x
                  cmp r27.xyz, r28, r27, c14
                  mov r28.xyz, -r11.z
                  cmp r27.xyz, r28, r27, c15
                  mov r28.xyz, -r6.z
                  cmp r27.xyz, r28, r27, c16
                  mov r28.xyz, -r7.x
                  cmp r27.xyz, r28, r27, c17
                  mov r28.xyz, -r25.x
                  cmp r27.xyz, r28, r27, c18
                  mov r28.xyz, -r25.z
                  cmp r27.xyz, r28, r27, c19
                  mov r28.xyz, -r7.z
                  cmp r27.xyz, r28, r27, c20
                  mov r28.xyz, -r8.x
                  cmp r27.xyz, r28, r27, c21
                  mov r28.xyz, -r26.x
                  cmp r27.xyz, r28, r27, c22
                  mov r28.xyz, -r26.z
                  cmp r27.xyz, r28, r27, c23
                  mov r28.xyz, -r9.x
                  cmp r27.xyz, r28, r27, c24
                  mov r28.xyz, -r9.y
                  cmp r27.xyz, r28, r27, c25
                  mov r28.xyz, -r10.x
                  cmp r27.xyz, r28, r27, c26
                  mov r28.xyz, -r10.y
                  cmp r27.xyz, r28, r27, c27
                  mov r28.xyz, -r13.x
                  cmp r27.xyz, r28, r27, c28
                  mov r28.xyz, -r13.y
                  cmp r27.xyz, r28, r27, c29
                  mov r28.xyz, -r12.x
                  cmp r27.xyz, r28, r27, c30
                  mov r28.xyz, -r12.y
                  cmp r27.xyz, r28, r27, c31
                  mov r14.xyw, -r14.y
                  cmp r14.xyw, r14, r27.xyzz, c32.xyzz
                  mov r15.xyw, -r15.y
                  cmp r14.xyw, r15, r14, c33.xyzz
                  mov r15.xyw, -r16.y
                  cmp r14.xyw, r15, r14, c34.xyzz
                  mov r15.xyw, -r17.y
                  cmp r14.xyw, r15, r14, c35.xyzz
                  mov r15.xyw, -r18.y
                  cmp r14.xyw, r15, r14, c36.xyzz
                  mov r15.xyw, -r19.y
                  cmp r14.xyw, r15, r14, c37.xyzz
                  mov r15.xyw, -r20.y
                  cmp r14.xyw, r15, r14, c38.xyzz
                  mov r15.xyw, -r21.y
                  cmp r14.xyw, r15, r14, c39.xyzz
                  mov r15.xyw, -r22.y
                  cmp r14.xyw, r15, r14, c40.xyzz
                  mov r15.xyw, -r23.y
                  cmp r14.xyw, r15, r14, c41.xyzz
                  mov r15.xyw, -r24.y
                  cmp r14.xyw, r15, r14, c42.xyzz
                  mov r8.xzw, -r8.w
                  cmp r8.xzw, r8, r14.xyyw, c43.xyyz
                  mov r5.yzw, -r5.z
                  cmp r5.yzw, r5, r8.xxzw, c44.xxyz
                  mov r6.xyz, -r6.y
                  cmp r5.yzw, r6.xxyz, r5, c45.xxyz
                  mov r6.xyz, -r11.y
                  cmp r5.yzw, r6.xxyz, r5, c46.xxyz
                  mov r6.xyz, -r11.w
                  cmp r5.yzw, r6.xxyz, r5, c47.xxyz
                  mov r6.xyz, -r6.w
                  cmp r5.yzw, r6.xxyz, r5, c48.xxyz
                  mov r6.xyz, -r7.y
                  cmp r5.yzw, r6.xxyz, r5, c49.xxyz
                  mov r6.xyz, -r25.y
                  cmp r5.yzw, r6.xxyz, r5, c50.xxyz
                  mov r6.xyz, -r25.w
                  cmp r5.yzw, r6.xxyz, r5, c51.xxyz
                  mov r6.xyz, -r7.w
                  cmp r5.yzw, r6.xxyz, r5, c52.xxyz
                  mov r6.xyz, -r8.y
                  cmp r5.yzw, r6.xxyz, r5, c53.xxyz
                  mov r6.xyz, -r26.y
                  cmp r5.yzw, r6.xxyz, r5, c54.xxyz
                  mov r6.xyz, -r26.w
                  cmp r5.yzw, r6.xxyz, r5, c55.xxyz
                  mov r6.xyz, -r9.z
                  cmp r5.yzw, r6.xxyz, r5, c56.xxyz
                  mov r6.xyz, -r9.w
                  cmp r5.yzw, r6.xxyz, r5, c57.xxyz
                  mov r6.xyz, -r10.z
                  cmp r5.yzw, r6.xxyz, r5, c58.xxyz
                  mov r6.xyz, -r10.w
                  cmp r5.yzw, r6.xxyz, r5, c59.xxyz
                  mov r6.xyz, -r13.z
                  cmp r5.yzw, r6.xxyz, r5, c60.xxyz
                  mov r6.xyz, -r13.w
                  cmp r5.yzw, r6.xxyz, r5, c61.xxyz
                  mov r6.xyz, -r12.z
                  cmp r5.yzw, r6.xxyz, r5, c62.xxyz
                  mov r6.xyz, -r12.w
                  cmp r5.yzw, r6.xxyz, r5, c63.xxyz
                  mov r6.xyz, -r14.z
                  cmp r5.yzw, r6.xxyz, r5, c64.xxyz
                  mov r6.xyz, -r15.z
                  cmp r5.yzw, r6.xxyz, r5, c65.xxyz
                  mov r6.xyz, -r16.z
                  cmp r5.yzw, r6.xxyz, r5, c66.xxyz
                  mov r6.xyz, -r17.z
                  cmp r5.yzw, r6.xxyz, r5, c67.xxyz
                  mov r6.xyz, -r18.z
                  cmp r5.yzw, r6.xxyz, r5, c68.xxyz
                  mov r6.xyz, -r19.z
                  cmp r5.yzw, r6.xxyz, r5, c69.xxyz
                  mov r6.xyz, -r20.z
                  cmp r5.yzw, r6.xxyz, r5, c70.xxyz
                  mov r6.xyz, -r21.z
                  cmp r5.yzw, r6.xxyz, r5, c71.xxyz
                  mov r6.xyz, -r22.z
                  cmp r5.yzw, r6.xxyz, r5, c72.xxyz
                  mov r6.xyz, -r23.z
                  cmp r5.yzw, r6.xxyz, r5, c73.xxyz
                  mov r6.xyz, -r24.z
                  cmp r5.yzw, r6.xxyz, r5, c74.xxyz  // ::curSample<0,1,2>
            
            #line 1221
                  dp3 r6.x, r5.yzww, r2
                  add r6.x, r6.x, r6.x
                  mov r6.x, -r6.x
                  mul r6.xyz, r2, r6.x
                  add r5.yzw, r5, r6.xxyz  // ::curSample<0,1,2>
            
            #line 1224
                  dp3 r6.x, r5.yzww, r1
                  add r6.y, r6.x, -c85.z
                  cmp r6.y, r6.y, c85.z, c85.y
            
            #line 1227
                  add r6.x, r6.x, r6.x
                  mov r6.x, -r6.x
                  mul r6.xzw, r1.xyyz, r6.x
                  add r6.xzw, r5.yyzw, r6  // ::curSample<0,1,2>
            
            #line 1224
                  mov r7.xyz, -r6.y
                  cmp r5.yzw, r7.xxyz, r5, r6.xxzw  // ::curSample<0,1,2>
            
            #line 1231
                  mul r5.yzw, r5, c79.x
                  add r3.xyz, r0.xzww, r5.yzww  // ::se<0,1,2>
                  mov r5.y, r3.z  // ::se<2>
            
            #line 1237
                  dp4 r6.x, r3, c75  // ::sn<0>
                  dp4 r6.y, r3, c76  // ::sn<1>
                  dp4 r3.x, r3, c78  // ::sn<3>
            
            #line 1243
                  rcp r7.x, r3.x
                  rcp r7.y, r3.x
                  mul r3.xy, r6, r7
                  mul r3.xy, r3, c86.zwzw
                  add r4.xy, r3, c102.w  // ::ss<0,1>
            
            #line 1247
                  texldl r6, r4, s1
                  mul r3.x, r6.x, c83.x  // ::sampleDepth<0>
            
            #line 1254
                  mov r3.y, -r5.y
                  add r3.y, r3.y, r3.x
                  cmp r3.y, r3.y, c85.z, c85.y
            
            #line 1257
                  mov r3.x, -r3.x
                  add r3.x, r3.x, r5.y  // ::zd<0>
            
            #line 1262
                  mul r3.x, r3.x, r3.x
                  mul r3.x, r3.x, c87.w
                  add r3.x, r3.x, c85.y
                  rcp r3.x, r3.x
                  mul r3.x, r3.x, c85.y  // ::falloff<0>
            
            #line 1265
                  add r3.x, r2.w, r3.x  // ::occ<0>
            
            #line 1254
                  mov r3.y, -r3.y
                  cmp r2.w, r3.y, r2.w, r3.x  // ::occ<0>
            
            #line 1213
                  add r5.x, r5.x, c85.y  // ::i<0>
                endrep
            
            #line 1270
                rcp r1.x, c81.x
                mul r1.x, r1.x, r2.w
                mul r1.x, r1.x, c80.x
                add r1.y, r1.x, c85.x
                cmp r1.x, r1.y, c85.y, r1.x
                mov r1.x, -r1.x
                add r1.x, r1.x, c85.y  // ::unOcclusion<0>
            
            #line 1273
                mov r2.x, c85.x
                add r1.y, r2.x, c82.x
                abs r1.y, r1.y
                mov r1.y, -r1.y
                add r1.y, r1.y, r1.y
                cmp r1.y, r1.y, c85.y, c85.z
                dp3 r0.x, r0.xzww, r0.xzww
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mul r0.x, r0.x, c82.z
                mov r0.x, -r0.x
                add r0.x, r0.x, c82.y
                add r0.z, r0.x, -c85.z
                cmp r0.x, r0.z, r0.x, c85.z
                add r0.z, r0.x, c85.x
                cmp r0.x, r0.z, c85.y, r0.x  // ::fogFLinear<0>
                add r0.z, r1.x, c85.x
                mul r0.x, r0.z, r0.x
                add r0.x, r0.x, c85.y  // ::unOcclusion<0>
            
            #line 1273
                mov r0.z, -r1.y
                cmp r1.xyz, r0.z, r1.x, r0.x  // ::unOcclusion<0,0,0>
            
            #line 1280
                mov r1.xyz, r1  // ::SSAO_PS<0,1,2>
                mov r1.w, c85.y  // ::SSAO_PS<3>
            
            #line 1191
                mov r0, -r0.y
                cmp oC0, r0, c85.y, r1  // ::SSAO_PS<0,1,2,3>
            
            // approximately 417 instruction slots used (5 texture, 412 arithmetic)
            };
    }
}

technique Blur4pixel
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_blurTextureSize[2];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_blurTextureSize c0       2
            //
            
                vs_3_0
                def c2, -1, 1, 0, 0
                dcl_position v0  // Pos<0,1,2,3>
                dcl_texcoord v1  // Tex<0,1>
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2.xy
                dcl_texcoord2 o3.xy
                dcl_texcoord3 o4.xy
            
            #line 1330 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v0  // ::Out<0,1,2,3>
                rcp r1.x, c0.x
                mul r2.x, r1.x, c2.x
                rcp r1.y, c1.x
                mul r2.y, r1.y, c2.x
                add r1.zw, r2.xyxy, v1.xyxy  // ::Out<4,5>
                mul r2.x, r1.x, c2.y
                mul r2.y, r1.y, c2.x
                add r2.xy, r2, v1  // ::Out<6,7>
                mul r3.x, r1.x, c2.x
                mul r3.y, r1.y, c2.y
                add r2.zw, r3.xyxy, v1.xyxy  // ::Out<8,9>
                mul r3.x, r1.x, c2.y
                mul r3.y, r1.y, c2.y
                add r1.xy, r3, v1  // ::Out<10,11>
                mov o0, r0  // ::Blur4VS<0,1,2,3>
                mov o1.xy, r1.zwzw  // ::Blur4VS<4,5>
                mov o2.xy, r2  // ::Blur4VS<6,7>
                mov o3.xy, r2.zwzw  // ::Blur4VS<8,9>
                mov o4.xy, r1  // ::Blur4VS<10,11>
            
            // approximately 20 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D TextureSSAO;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   TextureSSAO  s0       1
            //
            
                ps_3_0
                def c0, 0.25, 0, 0, 0
                dcl_texcoord v0.xy  // In<4,5>
                dcl_texcoord1 v1.xy  // In<6,7>
                dcl_texcoord2 v2.xy  // In<8,9>
                dcl_texcoord3 v3.xy  // In<10,11>
                dcl_2d s0
            
            #line 1343 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s0  // ::t0<0,1,2,3>
                texld r1, v1, s0  // ::t1<0,1,2,3>
                texld r2, v2, s0  // ::t2<0,1,2,3>
                texld r3, v3, s0  // ::t3<0,1,2,3>
                add r0, r0, r1
                add r0, r2, r0
                add r0, r3, r0
                mul oC0, r0, c0.x  // ::Blur4PS<0,1,2,3>
            
            // approximately 8 instruction slots used (4 texture, 4 arithmetic)
            };
    }
}

technique Blur16pixel
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_blurTextureSize[2];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_blurTextureSize c0       2
            //
            
                vs_3_0
                def c2, 3, -3, -1, 1
                dcl_position v0  // Pos<0,1,2,3>
                dcl_texcoord v1  // Tex<0,1>
                dcl_position o0
                dcl_texcoord o1.xy
                dcl_texcoord1 o2.xy
                dcl_texcoord2 o3.xy
                dcl_texcoord3 o4.xy
                dcl_texcoord4 o5.xy
                dcl_texcoord5 o6.xy
                dcl_texcoord6 o7.xy
                dcl_texcoord7 o8.xy
            
            #line 1372 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                mov r0, v0  // ::Out<0,1,2,3>
                rcp r1.x, c0.x
                mul r2.x, r1.x, c2.x
                rcp r1.y, c1.x
                mul r2.y, r1.y, c2.y
                add r1.zw, r2.xyxy, v1.xyxy  // ::Out<4,5>
                mul r2.x, r1.x, c2.x
                mul r2.y, r1.y, c2.z
                add r2.xy, r2, v1  // ::Out<6,7>
                mul r3.x, r1.x, c2.x
                mul r3.y, r1.y, c2.w
                add r2.zw, r3.xyxy, v1.xyxy  // ::Out<8,9>
                mul r3.x, r1.x, c2.x
                mul r3.y, r1.y, c2.x
                add r3.xy, r3, v1  // ::Out<10,11>
                mul r4.x, r1.x, c2.w
                mul r4.y, r1.y, c2.y
                add r3.zw, r4.xyxy, v1.xyxy  // ::Out<12,13>
                mul r4.x, r1.x, c2.w
                mul r4.y, r1.y, c2.z
                add r4.xy, r4, v1  // ::Out<14,15>
                mul r5.x, r1.x, c2.w
                mul r5.y, r1.y, c2.w
                add r4.zw, r5.xyxy, v1.xyxy  // ::Out<16,17>
                mul r5.x, r1.x, c2.w
                mul r5.y, r1.y, c2.x
                add r1.xy, r5, v1  // ::Out<18,19>
            
            #line 1383
                mov o0, r0  // ::Blur16VS<0,1,2,3>
                mov o1.xy, r1.zwzw  // ::Blur16VS<4,5>
                mov o2.xy, r2  // ::Blur16VS<6,7>
                mov o3.xy, r2.zwzw  // ::Blur16VS<8,9>
                mov o4.xy, r3  // ::Blur16VS<10,11>
                mov o5.xy, r3.zwzw  // ::Blur16VS<12,13>
                mov o6.xy, r4  // ::Blur16VS<14,15>
                mov o7.xy, r4.zwzw  // ::Blur16VS<16,17>
                mov o8.xy, r1  // ::Blur16VS<18,19>
            
            // approximately 36 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D TextureSSAO;
            //   float g_blurTextureSize[2];
            //
            //
            // Registers:
            //
            //   Name              Reg   Size
            //   ----------------- ----- ----
            //   g_blurTextureSize c0       1
            //   TextureSSAO       s0       1
            //
            
                ps_3_0
                def c1, -4, 0, 0.0625, 0
                dcl_texcoord v0.xy  // In<4,5>
                dcl_texcoord1 v1.xy  // In<6,7>
                dcl_texcoord2 v2.xy  // In<8,9>
                dcl_texcoord3 v3.xy  // In<10,11>
                dcl_texcoord4 v4.xy  // In<12,13>
                dcl_texcoord5 v5.xy  // In<14,15>
                dcl_texcoord6 v6.xy  // In<16,17>
                dcl_texcoord7 v7.xy  // In<18,19>
                dcl_2d s0
            
            #line 1389 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s0  // ::t0<0,1,2,3>
                texld r1, v1, s0  // ::t1<0,1,2,3>
                texld r2, v2, s0  // ::t2<0,1,2,3>
                texld r3, v3, s0  // ::t3<0,1,2,3>
                texld r4, v4, s0  // ::t4<0,1,2,3>
                texld r5, v5, s0  // ::t5<0,1,2,3>
                texld r6, v6, s0  // ::t6<0,1,2,3>
                texld r7, v7, s0  // ::t7<0,1,2,3>
                rcp r8.x, c0.x
                mul r9.x, r8.x, c1.x
                mov r9.y, c1.y
                add r8.yz, r9.xxyw, v0.xxyw
                texld r9, r8.yzzw, s0  // ::t8<0,1,2,3>
            
            #line 1400
                mul r10.x, r8.x, c1.x
                mov r10.y, c1.y
                add r8.yz, r10.xxyw, v1.xxyw
                texld r10, r8.yzzw, s0  // ::t9<0,1,2,3>
                mul r11.x, r8.x, c1.x
                mov r11.y, c1.y
                add r8.yz, r11.xxyw, v2.xxyw
                texld r11, r8.yzzw, s0  // ::ta<0,1,2,3>
                mul r12.x, r8.x, c1.x
                mov r12.y, c1.y
                add r8.yz, r12.xxyw, v3.xxyw
                texld r12, r8.yzzw, s0  // ::tb<0,1,2,3>
                mul r13.x, r8.x, c1.x
                mov r13.y, c1.y
                add r8.yz, r13.xxyw, v4.xxyw
                texld r13, r8.yzzw, s0  // ::tc<0,1,2,3>
                mul r14.x, r8.x, c1.x
                mov r14.y, c1.y
                add r8.yz, r14.xxyw, v5.xxyw
                texld r14, r8.yzzw, s0  // ::td<0,1,2,3>
                mul r15.x, r8.x, c1.x
                mov r15.y, c1.y
                add r8.yz, r15.xxyw, v6.xxyw
                texld r15, r8.yzzw, s0  // ::te<0,1,2,3>
                mul r8.x, r8.x, c1.x
                mov r8.y, c1.y
                add r8.xy, r8, v7
                texld r8, r8, s0  // ::tf<0,1,2,3>
            
            #line 1412
                add r0, r0, r1
                add r0, r2, r0
                add r0, r3, r0
                add r1, r4, r5
                add r1, r6, r1
                add r1, r7, r1
                add r0, r0, r1
                add r1, r9, r10
                add r1, r11, r1
                add r1, r12, r1
                add r0, r0, r1
                add r1, r13, r14
                add r1, r15, r1
                add r1, r8, r1
                add r0, r0, r1
                mul oC0, r0, c1.z  // ::Blur16PS<0,1,2,3>
            
            // approximately 57 instruction slots used (16 texture, 41 arithmetic)
            };
    }
}

technique RenderFinalSceneOneTexture
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D TextureColor1;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   TextureColor1 s0       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy  // uv0<0,1>
                dcl_2d s0
            
            #line 1468 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s0  // ::vColor<0,1,2,3>
                mov oC0, r0  // ::RenderFinalSceneOneTexturePS<0,1,2,3>
            
            // approximately 2 instruction slots used (1 texture, 1 arithmetic)
            };
    }
}

technique RenderFinalSceneTwoTexture
{
    pass p0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D TextureColor1;
            //   sampler2D TextureColor2;
            //
            //
            // Registers:
            //
            //   Name          Reg   Size
            //   ------------- ----- ----
            //   TextureColor1 s0       1
            //   TextureColor2 s1       1
            //
            
                ps_3_0
                dcl_texcoord v0.xy  // uv0<0,1>
                dcl_2d s0
                dcl_2d s1
            
            #line 1462 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\BasicIlluminationShader3.fx"
                texld r0, v0, s0
                texld r1, v0, s1
                mul r0, r0, r1  // ::vColor<0,1,2,3>
                mov oC0, r0  // ::RenderFinalSceneTwoTexturePS<0,1,2,3>
            
            // approximately 4 instruction slots used (2 texture, 2 arithmetic)
            };
    }
}

