
//listing of all techniques and passes with embedded asm listings 

technique SphereRenderingBatchPhong
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c237.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c238.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldView                             c229     4
            //   g_mWorldViewProjection                   c233     4
            //   g_Light1Dir                              c239     1
            //   g_Light2Dir                              c240     1
            //   g_vFog                                   c241     1
            //   g_vecEye                                 c242     1
            //   g_intensityAmbient                       c243     1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
            
            #line 152 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                slt r0.x, v2.x, -v2.x
                frc r0.y, v2.x
                add r0.z, -r0.y, v2.x
                slt r0.y, -r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.z
                mova a0.x, r0.x
            
            #line 186
                add r0, v0, c0[a0.x]  // ::vRotatedPos<0,1,2,3>
            
            #line 189
                dp4 oPos.x, r0, c233  // ::SphereRenderingPhongVS<0>
                dp4 oPos.y, r0, c234  // ::SphereRenderingPhongVS<1>
                dp4 oPos.z, r0, c235  // ::SphereRenderingPhongVS<2>
                dp4 oPos.w, r0, c236  // ::SphereRenderingPhongVS<3>
            
            #line 193
                dp4 oT0.w, r0, c228  // ::SphereRenderingPhongVS<11>
                dp4 r1.x, r0, c225  // ::Out<8>
                dp4 r1.y, r0, c226  // ::Out<9>
                dp4 r1.z, r0, c227  // ::Out<10>
                add oT2.xyz, -r1, c242  // ::SphereRenderingPhongVS<15,16,17>
                mov oT0.xyz, r1  // ::SphereRenderingPhongVS<8,9,10>
            
            #line 197
                dp4 r1.x, r0, c229  // ::posView<0>
                dp4 r1.y, r0, c230  // ::posView<1>
                dp4 r1.z, r0, c231  // ::posView<2>
                dp4 r1.w, r0, c232  // ::posView<3>
                dp4 r0.x, r1, r1
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c241.y, c241.x  // ::SphereRenderingPhongVS<18>
            
            #line 192
                dp3 r0.x, v1, c225  // ::Out<12>
                dp3 r0.y, v1, c226  // ::Out<13>
                dp3 r0.z, v1, c227  // ::Out<14>
            
            #line 202
                dp3 r0.w, r0, c240
                max r0.w, r0.w, c243.x
                mul r1.xyz, r0.w, c238
                dp3 r0.w, r0, c239
            
            #line 192
                mov oT1.xyz, r0  // ::SphereRenderingPhongVS<12,13,14>
            
            #line 202
                max r0.x, r0.w, c243.x
                mad r0.xyz, c237, r0.x, r1
                mul oD0.xyz, r0, c150[a0.x]  // ::SphereRenderingPhongVS<4,5,6>
                mov oD0.w, c75[a0.x].x  // ::SphereRenderingPhongVS<7>
            
            // approximately 37 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_intensitySpecular c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c0.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c1.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_Light1Dir     c2       1
            //   g_Light2Dir     c3       1
            //   g_clipPlane0    c4       1
            //   g_clipPlane0Dir c5       1
            //   g_clipPlane1    c6       1
            //   g_clipPlane1Dir c7       1
            //   g_clipPlane2    c8       1
            //   g_clipPlane2Dir c9       1
            //
            
                ps_2_0
                def c10, 0, 30, 0, 0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c4, t0
                mul r0.x, r0.w, c5.x  // ::result0<0>
                dp4 r0.y, c6, t0
                mul r0.y, r0.y, c7.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c8, t0
                mul r0.y, r0.y, c9.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 211
                texkill r0
            
            #line 217
                dp3 r0.x, t2, t2
                rsq r0.x, r0.x
                mad r1.xyz, t2, r0.x, c2
                mad r0.xyz, t2, r0.x, c3
                nrm r2.xyz, r0  // ::H2<0,1,2>
                nrm r0.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 226
                dp3 r1.w, r1, r0
                dp3 r0.x, r1, r2
                max r1.x, r0.x, c10.x
                pow r0.x, r1.x, c10.y
                max r0.y, r1.w, c10.x
                pow r1.x, r0.y, c10.y
                mad r0.yzw, c0.wzyx, r1.x, v0.wzyx
                mad r0.xyz, c1, r0.x, r0.wzyx  // ::finalColor<0,1,2>
                mov r0.w, v0.w
                mov oC0, r0  // ::SphereRenderingPhongPS<0,1,2,3>
            
            // approximately 36 instruction slots used
            };
    }
}

technique SphereRenderingBatchGouraud
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c237.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c238.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldView                             c229     4
            //   g_mWorldViewProjection                   c233     4
            //   g_Light1Dir                              c239     1
            //   g_Light2Dir                              c240     1
            //   g_vFog                                   c241     1
            //   g_vecEye                                 c242     1
            //   g_intensityAmbient                       c243     1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
            
            #line 152 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                slt r0.x, v2.x, -v2.x
                frc r0.y, v2.x
                add r0.z, -r0.y, v2.x
                slt r0.y, -r0.y, r0.y
                mad r0.x, r0.x, r0.y, r0.z
                mova a0.x, r0.x
            
            #line 186
                add r0, v0, c0[a0.x]  // ::vRotatedPos<0,1,2,3>
            
            #line 189
                dp4 oPos.x, r0, c233  // ::SphereRenderingPhongVS<0>
                dp4 oPos.y, r0, c234  // ::SphereRenderingPhongVS<1>
                dp4 oPos.z, r0, c235  // ::SphereRenderingPhongVS<2>
                dp4 oPos.w, r0, c236  // ::SphereRenderingPhongVS<3>
            
            #line 193
                dp4 oT0.w, r0, c228  // ::SphereRenderingPhongVS<11>
                dp4 r1.x, r0, c225  // ::Out<8>
                dp4 r1.y, r0, c226  // ::Out<9>
                dp4 r1.z, r0, c227  // ::Out<10>
                add oT2.xyz, -r1, c242  // ::SphereRenderingPhongVS<15,16,17>
                mov oT0.xyz, r1  // ::SphereRenderingPhongVS<8,9,10>
            
            #line 197
                dp4 r1.x, r0, c229  // ::posView<0>
                dp4 r1.y, r0, c230  // ::posView<1>
                dp4 r1.z, r0, c231  // ::posView<2>
                dp4 r1.w, r0, c232  // ::posView<3>
                dp4 r0.x, r1, r1
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c241.y, c241.x  // ::SphereRenderingPhongVS<18>
            
            #line 192
                dp3 r0.x, v1, c225  // ::Out<12>
                dp3 r0.y, v1, c226  // ::Out<13>
                dp3 r0.z, v1, c227  // ::Out<14>
            
            #line 202
                dp3 r0.w, r0, c240
                max r0.w, r0.w, c243.x
                mul r1.xyz, r0.w, c238
                dp3 r0.w, r0, c239
            
            #line 192
                mov oT1.xyz, r0  // ::SphereRenderingPhongVS<12,13,14>
            
            #line 202
                max r0.x, r0.w, c243.x
                mad r0.xyz, c237, r0.x, r1
                mul oD0.xyz, r0, c150[a0.x]  // ::SphereRenderingPhongVS<4,5,6>
                mov oD0.w, c75[a0.x].x  // ::SphereRenderingPhongVS<7>
            
            // approximately 37 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 211
                texkill r0
            
            #line 230
                mov oC0, v0  // ::SphereRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique CylinderRenderingBatchPhong
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c237.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c238.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldView                             c229     4
            //   g_mWorldViewProjection                   c233     4
            //   g_Light1Dir                              c239     1
            //   g_Light2Dir                              c240     1
            //   g_vFog                                   c241     1
            //   g_vecEye                                 c242     1
            //   g_intensityAmbient                       c243     1
            //
            
                vs_2_0
                def c246, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c244, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c245, -0.020833334, -0.125, 1, 0.5
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
            
            #line 186 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov r0.w, v0.w
            
            #line 152
                slt r1.x, v2.x, -v2.x
                frc r1.y, v2.x
                add r1.z, -r1.y, v2.x
                slt r1.y, -r1.y, r1.y
                mad r1.x, r1.x, r1.y, r1.z
                mova a0.x, r1.x
            
            #line 166
                mul r1.x, v0.z, c75[a0.x].w  // inPos<2>
            
            #line 173
                mov r2.xy, c246
                mad r1.yz, c75[a0.x].xzyw, r2.x, r2.y
                frc r1.yz, r1
                mad r1.yz, r1, c246.z, c246.w
            
            #line 169
                sincos r2.xy, r1.y, c244, c245
            
            #line 173
                sincos r3.xy, r1.z, c244, c245
            
            #line 170
                mul r1.xy, r1.x, r2.yxzw
                mad r0.y, v0.y, r2.x, -r1.x  // ::vRotatedPos<1>
                mad r1.x, v0.y, r2.y, r1.y  // ::vRotatedPos<2>
            
            #line 174
                mul r1.xy, r3.yxzw, r1.x
                mad r0.x, v0.x, r3.x, r1.x  // ::vRotatedPos<0>
                mad r0.z, -v0.x, r3.y, r1.y  // ::vRotatedPos<2>
            
            #line 186
                add r0, r0, c0[a0.x]  // ::vRotatedPos<0,1,2,3>
            
            #line 189
                dp4 oPos.x, r0, c233  // ::SphereRenderingPhongVS<0>
                dp4 oPos.y, r0, c234  // ::SphereRenderingPhongVS<1>
                dp4 oPos.z, r0, c235  // ::SphereRenderingPhongVS<2>
                dp4 oPos.w, r0, c236  // ::SphereRenderingPhongVS<3>
            
            #line 193
                dp4 oT0.w, r0, c228  // ::SphereRenderingPhongVS<11>
                dp4 r1.x, r0, c225  // ::Out<8>
                dp4 r1.y, r0, c226  // ::Out<9>
                dp4 r1.z, r0, c227  // ::Out<10>
                add oT2.xyz, -r1, c242  // ::SphereRenderingPhongVS<15,16,17>
                mov oT0.xyz, r1  // ::SphereRenderingPhongVS<8,9,10>
            
            #line 197
                dp4 r1.x, r0, c229  // ::posView<0>
                dp4 r1.y, r0, c230  // ::posView<1>
                dp4 r1.z, r0, c231  // ::posView<2>
                dp4 r1.w, r0, c232  // ::posView<3>
                dp4 r0.x, r1, r1
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c241.y, c241.x  // ::SphereRenderingPhongVS<18>
            
            #line 178
                mul r0.xyz, r2.yyxw, v1.zyzw
                mad r1.y, v1.y, r2.x, -r0.x  // ::vRotatedNorm<1>
                add r0.x, r0.z, r0.y  // ::vRotatedNorm<2>
            
            #line 182
                mul r0.xy, r3.yxzw, r0.x
                mad r1.x, v1.x, r3.x, r0.x  // ::vRotatedNorm<0>
                mad r1.z, -v1.x, r3.y, r0.y  // ::vRotatedNorm<2>
            
            #line 192
                dp3 r0.x, r1, c225  // ::Out<12>
                dp3 r0.y, r1, c226  // ::Out<13>
                dp3 r0.z, r1, c227  // ::Out<14>
            
            #line 202
                dp3 r0.w, r0, c240
                max r0.w, r0.w, c243.x
                mul r1.xyz, r0.w, c238
                dp3 r0.w, r0, c239
            
            #line 192
                mov oT1.xyz, r0  // ::SphereRenderingPhongVS<12,13,14>
            
            #line 202
                max r0.x, r0.w, c243.x
                mad r0.xyz, c237, r0.x, r1
                mul oD0.xyz, r0, c150[a0.x]  // ::SphereRenderingPhongVS<4,5,6>
                mov oD0.w, c75[a0.x].x  // ::SphereRenderingPhongVS<7>
            
            // approximately 71 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_intensitySpecular c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c0.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c1.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_Light1Dir     c2       1
            //   g_Light2Dir     c3       1
            //   g_clipPlane0    c4       1
            //   g_clipPlane0Dir c5       1
            //   g_clipPlane1    c6       1
            //   g_clipPlane1Dir c7       1
            //   g_clipPlane2    c8       1
            //   g_clipPlane2Dir c9       1
            //
            
                ps_2_0
                def c10, 0, 30, 0, 0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c4, t0
                mul r0.x, r0.w, c5.x  // ::result0<0>
                dp4 r0.y, c6, t0
                mul r0.y, r0.y, c7.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c8, t0
                mul r0.y, r0.y, c9.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 211
                texkill r0
            
            #line 217
                dp3 r0.x, t2, t2
                rsq r0.x, r0.x
                mad r1.xyz, t2, r0.x, c2
                mad r0.xyz, t2, r0.x, c3
                nrm r2.xyz, r0  // ::H2<0,1,2>
                nrm r0.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 226
                dp3 r1.w, r1, r0
                dp3 r0.x, r1, r2
                max r1.x, r0.x, c10.x
                pow r0.x, r1.x, c10.y
                max r0.y, r1.w, c10.x
                pow r1.x, r0.y, c10.y
                mad r0.yzw, c0.wzyx, r1.x, v0.wzyx
                mad r0.xyz, c1, r0.x, r0.wzyx  // ::finalColor<0,1,2>
                mov r0.w, v0.w
                mov oC0, r0  // ::SphereRenderingPhongPS<0,1,2,3>
            
            // approximately 36 instruction slots used
            };
    }
}

technique CylinderRenderingBatchGouraud
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c237.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c238.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float4 g_vBatchInstanceColor[75];
            //   float4 g_vBatchInstancePosition[75];
            //   float4 g_vBatchInstanceSelectionRotationXYScale[75];
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                                     Reg   Size
            //   ---------------------------------------- ----- ----
            //   g_vBatchInstancePosition                 c0      75
            //   g_vBatchInstanceSelectionRotationXYScale c75     75
            //   g_vBatchInstanceColor                    c150    75
            //   g_mWorld                                 c225     4
            //   g_mWorldView                             c229     4
            //   g_mWorldViewProjection                   c233     4
            //   g_Light1Dir                              c239     1
            //   g_Light2Dir                              c240     1
            //   g_vFog                                   c241     1
            //   g_vecEye                                 c242     1
            //   g_intensityAmbient                       c243     1
            //
            
                vs_2_0
                def c246, 0.159154937, 0.5, 6.28318548, -3.14159274
                def c244, -1.55009923e-006, -2.17013894e-005, 0.00260416674, 0.00026041668
                def c245, -0.020833334, -0.125, 1, 0.5
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // vBoxInstanceIndex<0>
            
            #line 186 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov r0.w, v0.w
            
            #line 152
                slt r1.x, v2.x, -v2.x
                frc r1.y, v2.x
                add r1.z, -r1.y, v2.x
                slt r1.y, -r1.y, r1.y
                mad r1.x, r1.x, r1.y, r1.z
                mova a0.x, r1.x
            
            #line 166
                mul r1.x, v0.z, c75[a0.x].w  // inPos<2>
            
            #line 173
                mov r2.xy, c246
                mad r1.yz, c75[a0.x].xzyw, r2.x, r2.y
                frc r1.yz, r1
                mad r1.yz, r1, c246.z, c246.w
            
            #line 169
                sincos r2.xy, r1.y, c244, c245
            
            #line 173
                sincos r3.xy, r1.z, c244, c245
            
            #line 170
                mul r1.xy, r1.x, r2.yxzw
                mad r0.y, v0.y, r2.x, -r1.x  // ::vRotatedPos<1>
                mad r1.x, v0.y, r2.y, r1.y  // ::vRotatedPos<2>
            
            #line 174
                mul r1.xy, r3.yxzw, r1.x
                mad r0.x, v0.x, r3.x, r1.x  // ::vRotatedPos<0>
                mad r0.z, -v0.x, r3.y, r1.y  // ::vRotatedPos<2>
            
            #line 186
                add r0, r0, c0[a0.x]  // ::vRotatedPos<0,1,2,3>
            
            #line 189
                dp4 oPos.x, r0, c233  // ::SphereRenderingPhongVS<0>
                dp4 oPos.y, r0, c234  // ::SphereRenderingPhongVS<1>
                dp4 oPos.z, r0, c235  // ::SphereRenderingPhongVS<2>
                dp4 oPos.w, r0, c236  // ::SphereRenderingPhongVS<3>
            
            #line 193
                dp4 oT0.w, r0, c228  // ::SphereRenderingPhongVS<11>
                dp4 r1.x, r0, c225  // ::Out<8>
                dp4 r1.y, r0, c226  // ::Out<9>
                dp4 r1.z, r0, c227  // ::Out<10>
                add oT2.xyz, -r1, c242  // ::SphereRenderingPhongVS<15,16,17>
                mov oT0.xyz, r1  // ::SphereRenderingPhongVS<8,9,10>
            
            #line 197
                dp4 r1.x, r0, c229  // ::posView<0>
                dp4 r1.y, r0, c230  // ::posView<1>
                dp4 r1.z, r0, c231  // ::posView<2>
                dp4 r1.w, r0, c232  // ::posView<3>
                dp4 r0.x, r1, r1
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c241.y, c241.x  // ::SphereRenderingPhongVS<18>
            
            #line 178
                mul r0.xyz, r2.yyxw, v1.zyzw
                mad r1.y, v1.y, r2.x, -r0.x  // ::vRotatedNorm<1>
                add r0.x, r0.z, r0.y  // ::vRotatedNorm<2>
            
            #line 182
                mul r0.xy, r3.yxzw, r0.x
                mad r1.x, v1.x, r3.x, r0.x  // ::vRotatedNorm<0>
                mad r1.z, -v1.x, r3.y, r0.y  // ::vRotatedNorm<2>
            
            #line 192
                dp3 r0.x, r1, c225  // ::Out<12>
                dp3 r0.y, r1, c226  // ::Out<13>
                dp3 r0.z, r1, c227  // ::Out<14>
            
            #line 202
                dp3 r0.w, r0, c240
                max r0.w, r0.w, c243.x
                mul r1.xyz, r0.w, c238
                dp3 r0.w, r0, c239
            
            #line 192
                mov oT1.xyz, r0  // ::SphereRenderingPhongVS<12,13,14>
            
            #line 202
                max r0.x, r0.w, c243.x
                mad r0.xyz, c237, r0.x, r1
                mul oD0.xyz, r0, c150[a0.x]  // ::SphereRenderingPhongVS<4,5,6>
                mov oD0.w, c75[a0.x].x  // ::SphereRenderingPhongVS<7>
            
            // approximately 71 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 211
                texkill r0
            
            #line 230
                mov oC0, v0  // ::SphereRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique RibbonRenderingPhong
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c12.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c13.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_Light1Dir            c14      1
            //   g_Light2Dir            c15      1
            //   g_vFog                 c16      1
            //   g_vecEye               c17      1
            //   g_intensityAmbient     c18      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
            
            #line 312 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::RibbonRenderingPhongVS<0>
                dp4 oPos.y, v0, c9  // ::RibbonRenderingPhongVS<1>
                dp4 oPos.z, v0, c10  // ::RibbonRenderingPhongVS<2>
                dp4 oPos.w, v0, c11  // ::RibbonRenderingPhongVS<3>
            
            #line 316
                dp4 oT0.w, v0, c3  // ::RibbonRenderingPhongVS<11>
                dp4 r0.x, v0, c0  // ::Out<8>
                dp4 r0.y, v0, c1  // ::Out<9>
                dp4 r0.z, v0, c2  // ::Out<10>
                add oT2.xyz, -r0, c17  // ::RibbonRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::RibbonRenderingPhongVS<8,9,10>
            
            #line 320
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c16.y, c16.x  // ::RibbonRenderingPhongVS<20>
            
            #line 315
                dp3 r0.x, v1, c0  // ::Out<12>
                dp3 r0.y, v1, c1  // ::Out<13>
                dp3 r0.z, v1, c2  // ::Out<14>
            
            #line 325
                dp3 r0.w, r0, c15
                max r0.w, r0.w, c18.x
                mul r1.xyz, r0.w, c13
                dp3 r0.w, r0, c14
            
            #line 315
                mov oT1.xyz, r0  // ::RibbonRenderingPhongVS<12,13,14>
            
            #line 325
                max r0.x, r0.w, c18.x
                mad r0.xyz, c12, r0.x, r1
                mul oD0.xyz, r0, v3  // ::RibbonRenderingPhongVS<4,5,6>
                mov oD0.w, v3.w  // ::RibbonRenderingPhongVS<7>
            
            #line 329
                mov oT3.xy, v2  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_intensitySpecular c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c0.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c1.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Dir        c2       1
            //   g_Light2Dir        c3       1
            //   g_clipPlane0       c4       1
            //   g_clipPlane0Dir    c5       1
            //   g_clipPlane1       c6       1
            //   g_clipPlane1Dir    c7       1
            //   g_clipPlane2       c8       1
            //   g_clipPlane2Dir    c9       1
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                def c10, 0, 30, 0, 0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
                dcl t3.xy  // In<18,19>
                dcl_2d s0
            
            #line 344 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t3, s0  // ::textureColor<0,1,2>
            
            #line 117
                dp4 r0.w, c4, t0
                mul r0.w, r0.w, c5.x  // ::result0<0>
                dp4 r1.w, c6, t0
                mul r1.x, r1.w, c7.x  // ::result1<0>
            
            #line 121
                mul r0.w, r0.w, r1.x
                dp4 r1.x, c8, t0
                mul r1.x, r1.x, c9.x  // ::result2<0>
                mul r1, r0.w, r1.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 336
                texkill r1
            
            #line 349
                dp3 r0.w, t2, t2
                rsq r0.w, r0.w
                mad r1.xyz, t2, r0.w, c2
                mad r2.xyz, t2, r0.w, c3
                nrm r3.xyz, r2  // ::H2<0,1,2>
                nrm r2.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 358
                dp3 r0.w, r1, r2
                dp3 r1.x, r1, r3
                max r2.x, r1.x, c10.x
                pow r1.x, r2.x, c10.y
                max r1.y, r0.w, c10.x
                pow r0.w, r1.y, c10.y
                mul r1.yzw, r0.w, c0.wzyx
                mad r0.xyz, v0, r0, r1.wzyx
                mad r0.xyz, c1, r1.x, r0  // ::finalColor<0,1,2>
                mov r0.w, v0.w
                mov oC0, r0  // ::RibbonRenderingPhongPS<0,1,2,3>
            
            // approximately 38 instruction slots used (1 texture, 37 arithmetic)
            };
    }
}

technique RibbonRenderingNoTexturePhong
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c12.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c13.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_Light1Dir            c14      1
            //   g_Light2Dir            c15      1
            //   g_vFog                 c16      1
            //   g_vecEye               c17      1
            //   g_intensityAmbient     c18      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
            
            #line 312 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::RibbonRenderingPhongVS<0>
                dp4 oPos.y, v0, c9  // ::RibbonRenderingPhongVS<1>
                dp4 oPos.z, v0, c10  // ::RibbonRenderingPhongVS<2>
                dp4 oPos.w, v0, c11  // ::RibbonRenderingPhongVS<3>
            
            #line 316
                dp4 oT0.w, v0, c3  // ::RibbonRenderingPhongVS<11>
                dp4 r0.x, v0, c0  // ::Out<8>
                dp4 r0.y, v0, c1  // ::Out<9>
                dp4 r0.z, v0, c2  // ::Out<10>
                add oT2.xyz, -r0, c17  // ::RibbonRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::RibbonRenderingPhongVS<8,9,10>
            
            #line 320
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c16.y, c16.x  // ::RibbonRenderingPhongVS<20>
            
            #line 315
                dp3 r0.x, v1, c0  // ::Out<12>
                dp3 r0.y, v1, c1  // ::Out<13>
                dp3 r0.z, v1, c2  // ::Out<14>
            
            #line 325
                dp3 r0.w, r0, c15
                max r0.w, r0.w, c18.x
                mul r1.xyz, r0.w, c13
                dp3 r0.w, r0, c14
            
            #line 315
                mov oT1.xyz, r0  // ::RibbonRenderingPhongVS<12,13,14>
            
            #line 325
                max r0.x, r0.w, c18.x
                mad r0.xyz, c12, r0.x, r1
                mul oD0.xyz, r0, v3  // ::RibbonRenderingPhongVS<4,5,6>
                mov oD0.w, v3.w  // ::RibbonRenderingPhongVS<7>
            
            #line 329
                mov oT3.xy, v2  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_intensitySpecular c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c0.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c1.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_Light1Dir     c2       1
            //   g_Light2Dir     c3       1
            //   g_clipPlane0    c4       1
            //   g_clipPlane0Dir c5       1
            //   g_clipPlane1    c6       1
            //   g_clipPlane1Dir c7       1
            //   g_clipPlane2    c8       1
            //   g_clipPlane2Dir c9       1
            //
            
                ps_2_0
                def c10, 0, 30, 0, 0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c4, t0
                mul r0.x, r0.w, c5.x  // ::result0<0>
                dp4 r0.y, c6, t0
                mul r0.y, r0.y, c7.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c8, t0
                mul r0.y, r0.y, c9.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 336
                texkill r0
            
            #line 349
                dp3 r0.x, t2, t2
                rsq r0.x, r0.x
                mad r1.xyz, t2, r0.x, c2
                mad r0.xyz, t2, r0.x, c3
                nrm r2.xyz, r0  // ::H2<0,1,2>
                nrm r0.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 358
                dp3 r1.w, r1, r0
                dp3 r0.x, r1, r2
                max r1.x, r0.x, c10.x
                pow r0.x, r1.x, c10.y
                max r0.y, r1.w, c10.x
                pow r1.x, r0.y, c10.y
                mad r0.yzw, c0.wzyx, r1.x, v0.wzyx
                mad r0.xyz, c1, r0.x, r0.wzyx  // ::finalColor<0,1,2>
                mov r0.w, v0.w
                mov oC0, r0  // ::RibbonRenderingPhongPS<0,1,2,3>
            
            // approximately 36 instruction slots used
            };
    }
}

technique RibbonRenderingGouraud
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c12.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c13.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_Light1Dir            c14      1
            //   g_Light2Dir            c15      1
            //   g_vFog                 c16      1
            //   g_vecEye               c17      1
            //   g_intensityAmbient     c18      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
            
            #line 312 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::RibbonRenderingPhongVS<0>
                dp4 oPos.y, v0, c9  // ::RibbonRenderingPhongVS<1>
                dp4 oPos.z, v0, c10  // ::RibbonRenderingPhongVS<2>
                dp4 oPos.w, v0, c11  // ::RibbonRenderingPhongVS<3>
            
            #line 316
                dp4 oT0.w, v0, c3  // ::RibbonRenderingPhongVS<11>
                dp4 r0.x, v0, c0  // ::Out<8>
                dp4 r0.y, v0, c1  // ::Out<9>
                dp4 r0.z, v0, c2  // ::Out<10>
                add oT2.xyz, -r0, c17  // ::RibbonRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::RibbonRenderingPhongVS<8,9,10>
            
            #line 320
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c16.y, c16.x  // ::RibbonRenderingPhongVS<20>
            
            #line 315
                dp3 r0.x, v1, c0  // ::Out<12>
                dp3 r0.y, v1, c1  // ::Out<13>
                dp3 r0.z, v1, c2  // ::Out<14>
            
            #line 325
                dp3 r0.w, r0, c15
                max r0.w, r0.w, c18.x
                mul r1.xyz, r0.w, c13
                dp3 r0.w, r0, c14
            
            #line 315
                mov oT1.xyz, r0  // ::RibbonRenderingPhongVS<12,13,14>
            
            #line 325
                max r0.x, r0.w, c18.x
                mad r0.xyz, c12, r0.x, r1
                mul oD0.xyz, r0, v3  // ::RibbonRenderingPhongVS<4,5,6>
                mov oD0.w, v3.w  // ::RibbonRenderingPhongVS<7>
            
            #line 329
                mov oT3.xy, v2  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_clipPlane0       c0       1
            //   g_clipPlane0Dir    c1       1
            //   g_clipPlane1       c2       1
            //   g_clipPlane1Dir    c3       1
            //   g_clipPlane2       c4       1
            //   g_clipPlane2Dir    c5       1
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t3.xy  // In<18,19>
                dcl_2d s0
            
            #line 344 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t3, s0  // ::textureColor<0,1,2>
            
            #line 117
                dp4 r0.w, c0, t0
                mul r0.w, r0.w, c1.x  // ::result0<0>
                dp4 r1.w, c2, t0
                mul r1.x, r1.w, c3.x  // ::result1<0>
            
            #line 121
                mul r0.w, r0.w, r1.x
                dp4 r1.x, c4, t0
                mul r1.x, r1.x, c5.x  // ::result2<0>
                mul r1, r0.w, r1.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 336
                texkill r1
            
            #line 362
                mul r0.xyz, r0, v0  // ::finalColor<0,1,2>
                mov r0.w, v0.w
                mov oC0, r0  // ::RibbonRenderingPhongPS<0,1,2,3>
            
            // approximately 13 instruction slots used (1 texture, 12 arithmetic)
            };
    }
}

technique RibbonRenderingNoTextureGouraud
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_intensityDiffuse c4       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c12.xyz, c4.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c13.xyz, c4.x, r0.xyz
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_Light1Dir            c14      1
            //   g_Light2Dir            c15      1
            //   g_vFog                 c16      1
            //   g_vecEye               c17      1
            //   g_intensityAmbient     c18      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
                dcl_color v3  // diffuseColor<0,1,2,3>
            
            #line 312 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::RibbonRenderingPhongVS<0>
                dp4 oPos.y, v0, c9  // ::RibbonRenderingPhongVS<1>
                dp4 oPos.z, v0, c10  // ::RibbonRenderingPhongVS<2>
                dp4 oPos.w, v0, c11  // ::RibbonRenderingPhongVS<3>
            
            #line 316
                dp4 oT0.w, v0, c3  // ::RibbonRenderingPhongVS<11>
                dp4 r0.x, v0, c0  // ::Out<8>
                dp4 r0.y, v0, c1  // ::Out<9>
                dp4 r0.z, v0, c2  // ::Out<10>
                add oT2.xyz, -r0, c17  // ::RibbonRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::RibbonRenderingPhongVS<8,9,10>
            
            #line 320
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c16.y, c16.x  // ::RibbonRenderingPhongVS<20>
            
            #line 315
                dp3 r0.x, v1, c0  // ::Out<12>
                dp3 r0.y, v1, c1  // ::Out<13>
                dp3 r0.z, v1, c2  // ::Out<14>
            
            #line 325
                dp3 r0.w, r0, c15
                max r0.w, r0.w, c18.x
                mul r1.xyz, r0.w, c13
                dp3 r0.w, r0, c14
            
            #line 315
                mov oT1.xyz, r0  // ::RibbonRenderingPhongVS<12,13,14>
            
            #line 325
                max r0.x, r0.w, c18.x
                mad r0.xyz, c12, r0.x, r1
                mul oD0.xyz, r0, v3  // ::RibbonRenderingPhongVS<4,5,6>
                mov oD0.w, v3.w  // ::RibbonRenderingPhongVS<7>
            
            #line 329
                mov oT3.xy, v2  // ::RibbonRenderingPhongVS<18,19>
            
            // approximately 31 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 336
                texkill r0
            
            #line 362
                mov oC0, v0  // ::RibbonRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique WireframeRenderingPhongLineWidth
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_cameraPosInvWorld;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float g_wireframeLineWidth;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_cameraPosInvWorld    c12      1
            //   g_wireframeLineWidth   c13      1
            //   g_vFog                 c14      1
            //
            
                vs_2_0
                def c15, -1, -2, -3, -4
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // linePos2<0,1,2>
                dcl_texcoord1 v3  // lineIndex<0,1>
            
            #line 447 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov r0.w, -c15.x
            
            #line 451
                mov r1.w, -c15.x
            
            #line 434
                mov r2.xyz, v0  // inPos<0,1,2>
                add r2.xyz, -r2.zxyw, v2.zxyw  // ::vecLine<2,0,1>
                mul r3.xyz, r2, c12.yzxw
                mad r2.xyz, r2.zxyw, c12.zxyw, -r3  // ::finalPosVec<0,1,2>
                nrm r3.xyz, r2  // ::finalPosVec<0,1,2>
            
            #line 453
                mad r1.xyz, -r3, c13.x, v2  // inPos<0,1,2>
                add r2, v3.x, c15
                mul r2, r2, r2
                sge r2, -r2, r2
                lrp r4, r2.w, r1, v0  // inPos<0,1,2,3>
                mad r0.xyz, r3, c13.x, v2  // inPos<0,1,2>
                lrp r1, r2.z, r0, r4  // inPos<0,1,2,3>
            
            #line 443
                mov r0.w, -c15.x
                mad r0.xyz, -r3, c13.x, v0  // inPos<0,1,2>
            
            #line 441
                mad r3.xyz, r3, c13.x, v0  // inPos<0,1,2>
                lrp r4, r2.y, r0, r1  // inPos<0,1,2,3>
            
            #line 439
                mov r3.w, -c15.x
                lrp r0, r2.x, r3, r4  // inPos<0,1,2,3>
            
            #line 457
                dp4 oPos.x, r0, c8  // ::WireframeRenderingPhongVS<0>
                dp4 oPos.y, r0, c9  // ::WireframeRenderingPhongVS<1>
                dp4 oPos.z, r0, c10  // ::WireframeRenderingPhongVS<2>
                dp4 oPos.w, r0, c11  // ::WireframeRenderingPhongVS<3>
            
            #line 460
                dp4 r1.x, r0, c4  // ::posView<0>
                dp4 r1.y, r0, c5  // ::posView<1>
                dp4 r1.z, r0, c6  // ::posView<2>
                dp4 r1.w, r0, c7  // ::posView<3>
            
            #line 464
                dp4 r1.x, r1, r1
                rsq r1.x, r1.x
                rcp r1.x, r1.x
                mad oFog, r1.x, -c14.y, c14.x  // ::WireframeRenderingPhongVS<12>
            
            #line 467
                dp4 oT0.x, r0, c0  // ::WireframeRenderingPhongVS<8>
                dp4 oT0.y, r0, c1  // ::WireframeRenderingPhongVS<9>
                dp4 oT0.z, r0, c2  // ::WireframeRenderingPhongVS<10>
                dp4 oT0.w, r0, c3  // ::WireframeRenderingPhongVS<11>
                mov oD0.xyz, v1  // ::WireframeRenderingPhongVS<4,5,6>
                mov oD0.w, v3.y  // ::WireframeRenderingPhongVS<7>
            
            // approximately 40 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 477
                texkill r0
                mov oC0, v0  // ::WireframeRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique WireframeRenderingPhong
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_vFog                 c12      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord1 v2  // lineIndex<1>
            
            #line 457 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::WireframeRenderingPhongVS<0>
                dp4 oPos.y, v0, c9  // ::WireframeRenderingPhongVS<1>
                dp4 oPos.z, v0, c10  // ::WireframeRenderingPhongVS<2>
                dp4 oPos.w, v0, c11  // ::WireframeRenderingPhongVS<3>
            
            #line 460
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
            
            #line 464
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c12.y, c12.x  // ::WireframeRenderingPhongVS<12>
            
            #line 467
                dp4 oT0.x, v0, c0  // ::WireframeRenderingPhongVS<8>
                dp4 oT0.y, v0, c1  // ::WireframeRenderingPhongVS<9>
                dp4 oT0.z, v0, c2  // ::WireframeRenderingPhongVS<10>
                dp4 oT0.w, v0, c3  // ::WireframeRenderingPhongVS<11>
                mov oD0.xyz, v1  // ::WireframeRenderingPhongVS<4,5,6>
                mov oD0.w, v2.y  // ::WireframeRenderingPhongVS<7>
            
            // approximately 18 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 477
                texkill r0
                mov oC0, v0  // ::WireframeRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique SurfaceRenderingNoAlphaPhong
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   bool g_bIndicate;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_bIndicate        c4       1
            //   g_bBackfaceColor   c5       1
            //   g_intensityDiffuse c6       1
            //
            
                preshader
                add r0.x, c5.x, (-1)
                mul r1.x, r0.x, r0.x
                neg r0.x, r1.x
                ge c1.x, r0.x, r1.x
                mov c0.x, r1.x
                add r0.x, c4.x, (-1)
                mul c2.x, r0.x, r0.x
                mul r0, c0.x, c2
                mul c3, c6.x, r0
                mul r0, c1.x, c3
                mul c4, c6.x, r0
            
            // approximately 11 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_bBlendBackfaceColor;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c5       4
            //   g_mWorldView           c9       4
            //   g_mWorldViewProjection c13      4
            //   g_Light1Dir            c17      1
            //   g_Light2Dir            c18      1
            //   g_indicateDiffuseColor c19      1
            //   g_vFog                 c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
            
            #line 530 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c13  // ::SurfaceRenderingPhongVS<0>
                dp4 oPos.y, v0, c14  // ::SurfaceRenderingPhongVS<1>
                dp4 oPos.z, v0, c15  // ::SurfaceRenderingPhongVS<2>
                dp4 oPos.w, v0, c16  // ::SurfaceRenderingPhongVS<3>
            
            #line 540
                dp4 oT0.w, v0, c8  // ::SurfaceRenderingPhongVS<11>
                dp4 r0.x, v0, c5  // ::Out<8>
                dp4 r0.y, v0, c6  // ::Out<9>
                dp4 r0.z, v0, c7  // ::Out<10>
                add oT2.xyz, -r0, c23  // ::SurfaceRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::SurfaceRenderingPhongVS<8,9,10>
            
            #line 544
                dp4 r0.x, v0, c9  // ::posView<0>
                dp4 r0.y, v0, c10  // ::posView<1>
                dp4 r0.z, v0, c11  // ::posView<2>
                dp4 r0.w, v0, c12  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c20.y, c20.x  // ::SurfaceRenderingPhongVS<18>
            
            #line 534
                add r0, -v2, c22
                mul r0, r0, c21.x
                mad r0, c1.x, r0, v2  // diffuseColor<0,1,2,3>
            
            #line 547
                add r0, r0, -c19
                mov r1, c19  // ::g_indicateDiffuseColor<0,1,2,3>
                mad r0, c2.x, r0, r1  // diffuseColor<0,1,2,3>
            
            #line 535
                nrm r1.xyz, -v1  // inNorm<0,1,2>
            
            #line 532
                lrp r2.xyz, c0.x, v1, r1  // inNorm<0,1,2>
            
            #line 539
                dp3 r1.x, r2, c5  // ::Out<12>
                dp3 r1.y, r2, c6  // ::Out<13>
                dp3 r1.z, r2, c7  // ::Out<14>
            
            #line 552
                dp3 r1.w, r1, c18
                max r1.w, r1.w, c24.x
                mul r2, r1.w, c4
                dp3 r1.w, r1, c17
            
            #line 539
                mov oT1.xyz, r1  // ::SurfaceRenderingPhongVS<12,13,14>
            
            #line 552
                max r1.x, r1.w, c24.x
                mad r1, c3, r1.x, r2
                mul oD0, r0, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
            
            // approximately 39 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_intensitySpecular c4       1
            //
            
                preshader
                mul r0, c0.x, c2
                mul c0, c4.x, r0
                mul r0, c1.x, c3
                mul c1, c4.x, r0
            
            // approximately 4 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_Light1Dir     c2       1
            //   g_Light2Dir     c3       1
            //   g_clipPlane0    c4       1
            //   g_clipPlane0Dir c5       1
            //   g_clipPlane1    c6       1
            //   g_clipPlane1Dir c7       1
            //   g_clipPlane2    c8       1
            //   g_clipPlane2Dir c9       1
            //
            
                ps_2_0
                def c10, 0, 30, 0, 0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c4, t0
                mul r0.x, r0.w, c5.x  // ::result0<0>
                dp4 r0.y, c6, t0
                mul r0.y, r0.y, c7.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c8, t0
                mul r0.y, r0.y, c9.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 559
                texkill r0
            
            #line 564
                dp3 r0.x, t2, t2
                rsq r0.x, r0.x
                mad r1.xyz, t2, r0.x, c2
                mad r0.xyz, t2, r0.x, c3
                nrm r2.xyz, r0  // ::H2<0,1,2>
                nrm r0.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 573
                dp3 r1.w, r1, r0
                dp3 r0.x, r1, r2
                max r1.x, r0.x, c10.x
                pow r0.x, r1.x, c10.y
                max r0.y, r1.w, c10.x
                pow r1.x, r0.y, c10.y
                mad r1, c0, r1.x, v0
                mad r0, c1, r0.x, r1  // ::finalColor<0,1,2,3>
                mov oC0, r0  // ::SurfaceRenderingPhongPS<0,1,2,3>
            
            // approximately 35 instruction slots used
            };
    }
}

technique SurfaceRenderingWithAlphaPhong
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   bool g_bIndicate;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_bIndicate        c4       1
            //   g_bBackfaceColor   c5       1
            //   g_intensityDiffuse c6       1
            //
            
                preshader
                add r0.x, c5.x, (-1)
                mul r1.x, r0.x, r0.x
                neg r0.x, r1.x
                ge c1.x, r0.x, r1.x
                mov c0.x, r1.x
                add r0.x, c4.x, (-1)
                mul c2.x, r0.x, r0.x
                mul r0, c0.x, c2
                mul c3, c6.x, r0
                mul r0, c1.x, c3
                mul c4, c6.x, r0
            
            // approximately 11 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_bBlendBackfaceColor;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c5       4
            //   g_mWorldView           c9       4
            //   g_mWorldViewProjection c13      4
            //   g_Light1Dir            c17      1
            //   g_Light2Dir            c18      1
            //   g_indicateDiffuseColor c19      1
            //   g_vFog                 c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
            
            #line 530 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c13  // ::SurfaceRenderingPhongVS<0>
                dp4 oPos.y, v0, c14  // ::SurfaceRenderingPhongVS<1>
                dp4 oPos.z, v0, c15  // ::SurfaceRenderingPhongVS<2>
                dp4 oPos.w, v0, c16  // ::SurfaceRenderingPhongVS<3>
            
            #line 540
                dp4 oT0.w, v0, c8  // ::SurfaceRenderingPhongVS<11>
                dp4 r0.x, v0, c5  // ::Out<8>
                dp4 r0.y, v0, c6  // ::Out<9>
                dp4 r0.z, v0, c7  // ::Out<10>
                add oT2.xyz, -r0, c23  // ::SurfaceRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::SurfaceRenderingPhongVS<8,9,10>
            
            #line 544
                dp4 r0.x, v0, c9  // ::posView<0>
                dp4 r0.y, v0, c10  // ::posView<1>
                dp4 r0.z, v0, c11  // ::posView<2>
                dp4 r0.w, v0, c12  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c20.y, c20.x  // ::SurfaceRenderingPhongVS<18>
            
            #line 534
                add r0, -v2, c22
                mul r0, r0, c21.x
                mad r0, c1.x, r0, v2  // diffuseColor<0,1,2,3>
            
            #line 547
                add r0, r0, -c19
                mov r1, c19  // ::g_indicateDiffuseColor<0,1,2,3>
                mad r0, c2.x, r0, r1  // diffuseColor<0,1,2,3>
            
            #line 535
                nrm r1.xyz, -v1  // inNorm<0,1,2>
            
            #line 532
                lrp r2.xyz, c0.x, v1, r1  // inNorm<0,1,2>
            
            #line 539
                dp3 r1.x, r2, c5  // ::Out<12>
                dp3 r1.y, r2, c6  // ::Out<13>
                dp3 r1.z, r2, c7  // ::Out<14>
            
            #line 552
                dp3 r1.w, r1, c18
                max r1.w, r1.w, c24.x
                mul r2, r1.w, c4
                dp3 r1.w, r1, c17
            
            #line 539
                mov oT1.xyz, r1  // ::SurfaceRenderingPhongVS<12,13,14>
            
            #line 552
                max r1.x, r1.w, c24.x
                mad r1, c3, r1.x, r2
                mul oD0, r0, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
            
            // approximately 39 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   float g_alpha;
            //   float g_intensitySpecular;
            //
            //
            // Registers:
            //
            //   Name                Reg   Size
            //   ------------------- ----- ----
            //   g_Light1Intensity   c0       1
            //   g_Light2Intensity   c1       1
            //   g_Light1Color       c2       1
            //   g_Light2Color       c3       1
            //   g_alpha             c4       1
            //   g_intensitySpecular c5       1
            //
            
                preshader
                mul r0.xyz, c0.x, c2.xyz
                mul c0.xyz, c5.x, r0.xyz
                mul r0.xyz, c1.x, c3.xyz
                mul c1.xyz, c5.x, r0.xyz
                mov c2.x, c4.x
            
            // approximately 5 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_Light1Dir     c3       1
            //   g_Light2Dir     c4       1
            //   g_clipPlane0    c5       1
            //   g_clipPlane0Dir c6       1
            //   g_clipPlane1    c7       1
            //   g_clipPlane1Dir c8       1
            //   g_clipPlane2    c9       1
            //   g_clipPlane2Dir c10      1
            //
            
                ps_2_0
                def c11, 0, 30, 0, 0
                dcl v0.xyz  // In<4,5,6>
                dcl t0  // In<8,9,10,11>
                dcl t1.xyz  // In<12,13,14>
                dcl t2.xyz  // In<15,16,17>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c5, t0
                mul r0.x, r0.w, c6.x  // ::result0<0>
                dp4 r0.y, c7, t0
                mul r0.y, r0.y, c8.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c9, t0
                mul r0.y, r0.y, c10.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 559
                texkill r0
            
            #line 564
                dp3 r0.x, t2, t2
                rsq r0.x, r0.x
                mad r1.xyz, t2, r0.x, c3
                mad r0.xyz, t2, r0.x, c4
                nrm r2.xyz, r0  // ::H2<0,1,2>
                nrm r0.xyz, r1  // ::H1<0,1,2>
                nrm r1.xyz, t1  // ::N<0,1,2>
            
            #line 573
                dp3 r1.w, r1, r0
                dp3 r0.x, r1, r2
                max r1.x, r0.x, c11.x
                pow r0.x, r1.x, c11.y
                max r0.y, r1.w, c11.x
                pow r1.x, r0.y, c11.y
                mad r0.yzw, c0.wzyx, r1.x, v0.wzyx
                mad r0.xyz, c1, r0.x, r0.wzyx  // ::finalColor<0,1,2>
                mov r0.w, c2.x
                mov oC0, r0  // ::SurfaceRenderingPhongPS<0,1,2,3>
            
            // approximately 36 instruction slots used
            };
    }
}

technique SurfaceRenderingNoAlphaGouraud
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   bool g_bIndicate;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_bIndicate        c4       1
            //   g_bBackfaceColor   c5       1
            //   g_intensityDiffuse c6       1
            //
            
                preshader
                add r0.x, c5.x, (-1)
                mul r1.x, r0.x, r0.x
                neg r0.x, r1.x
                ge c1.x, r0.x, r1.x
                mov c0.x, r1.x
                add r0.x, c4.x, (-1)
                mul c2.x, r0.x, r0.x
                mul r0, c0.x, c2
                mul c3, c6.x, r0
                mul r0, c1.x, c3
                mul c4, c6.x, r0
            
            // approximately 11 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_bBlendBackfaceColor;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c5       4
            //   g_mWorldView           c9       4
            //   g_mWorldViewProjection c13      4
            //   g_Light1Dir            c17      1
            //   g_Light2Dir            c18      1
            //   g_indicateDiffuseColor c19      1
            //   g_vFog                 c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
            
            #line 530 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c13  // ::SurfaceRenderingPhongVS<0>
                dp4 oPos.y, v0, c14  // ::SurfaceRenderingPhongVS<1>
                dp4 oPos.z, v0, c15  // ::SurfaceRenderingPhongVS<2>
                dp4 oPos.w, v0, c16  // ::SurfaceRenderingPhongVS<3>
            
            #line 540
                dp4 oT0.w, v0, c8  // ::SurfaceRenderingPhongVS<11>
                dp4 r0.x, v0, c5  // ::Out<8>
                dp4 r0.y, v0, c6  // ::Out<9>
                dp4 r0.z, v0, c7  // ::Out<10>
                add oT2.xyz, -r0, c23  // ::SurfaceRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::SurfaceRenderingPhongVS<8,9,10>
            
            #line 544
                dp4 r0.x, v0, c9  // ::posView<0>
                dp4 r0.y, v0, c10  // ::posView<1>
                dp4 r0.z, v0, c11  // ::posView<2>
                dp4 r0.w, v0, c12  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c20.y, c20.x  // ::SurfaceRenderingPhongVS<18>
            
            #line 534
                add r0, -v2, c22
                mul r0, r0, c21.x
                mad r0, c1.x, r0, v2  // diffuseColor<0,1,2,3>
            
            #line 547
                add r0, r0, -c19
                mov r1, c19  // ::g_indicateDiffuseColor<0,1,2,3>
                mad r0, c2.x, r0, r1  // diffuseColor<0,1,2,3>
            
            #line 535
                nrm r1.xyz, -v1  // inNorm<0,1,2>
            
            #line 532
                lrp r2.xyz, c0.x, v1, r1  // inNorm<0,1,2>
            
            #line 539
                dp3 r1.x, r2, c5  // ::Out<12>
                dp3 r1.y, r2, c6  // ::Out<13>
                dp3 r1.z, r2, c7  // ::Out<14>
            
            #line 552
                dp3 r1.w, r1, c18
                max r1.w, r1.w, c24.x
                mul r2, r1.w, c4
                dp3 r1.w, r1, c17
            
            #line 539
                mov oT1.xyz, r1  // ::SurfaceRenderingPhongVS<12,13,14>
            
            #line 552
                max r1.x, r1.w, c24.x
                mad r1, c3, r1.x, r2
                mul oD0, r0, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
            
            // approximately 39 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 559
                texkill r0
            
            #line 577
                mov oC0, v0  // ::SurfaceRenderingPhongPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique SurfaceRenderingWithAlphaGouraud
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_Light1Color;
            //   float g_Light1Intensity;
            //   float4 g_Light2Color;
            //   float g_Light2Intensity;
            //   bool g_bBackfaceColor;
            //   bool g_bIndicate;
            //   float g_intensityDiffuse;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   g_Light1Intensity  c0       1
            //   g_Light2Intensity  c1       1
            //   g_Light1Color      c2       1
            //   g_Light2Color      c3       1
            //   g_bIndicate        c4       1
            //   g_bBackfaceColor   c5       1
            //   g_intensityDiffuse c6       1
            //
            
                preshader
                add r0.x, c5.x, (-1)
                mul r1.x, r0.x, r0.x
                neg r0.x, r1.x
                ge c1.x, r0.x, r1.x
                mov c0.x, r1.x
                add r0.x, c4.x, (-1)
                mul c2.x, r0.x, r0.x
                mul r0, c0.x, c2
                mul c3, c6.x, r0
                mul r0, c1.x, c3
                mul c4, c6.x, r0
            
            // approximately 11 instructions used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float g_bBlendBackfaceColor;
            //   float4 g_backfaceDiffuseColor;
            //   float4 g_indicateDiffuseColor;
            //   float g_intensityAmbient;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //   float4 g_vecEye;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c5       4
            //   g_mWorldView           c9       4
            //   g_mWorldViewProjection c13      4
            //   g_Light1Dir            c17      1
            //   g_Light2Dir            c18      1
            //   g_indicateDiffuseColor c19      1
            //   g_vFog                 c20      1
            //   g_bBlendBackfaceColor  c21      1
            //   g_backfaceDiffuseColor c22      1
            //   g_vecEye               c23      1
            //   g_intensityAmbient     c24      1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
                dcl_color v2  // diffuseColor<0,1,2,3>
            
            #line 530 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c13  // ::SurfaceRenderingPhongVS<0>
                dp4 oPos.y, v0, c14  // ::SurfaceRenderingPhongVS<1>
                dp4 oPos.z, v0, c15  // ::SurfaceRenderingPhongVS<2>
                dp4 oPos.w, v0, c16  // ::SurfaceRenderingPhongVS<3>
            
            #line 540
                dp4 oT0.w, v0, c8  // ::SurfaceRenderingPhongVS<11>
                dp4 r0.x, v0, c5  // ::Out<8>
                dp4 r0.y, v0, c6  // ::Out<9>
                dp4 r0.z, v0, c7  // ::Out<10>
                add oT2.xyz, -r0, c23  // ::SurfaceRenderingPhongVS<15,16,17>
                mov oT0.xyz, r0  // ::SurfaceRenderingPhongVS<8,9,10>
            
            #line 544
                dp4 r0.x, v0, c9  // ::posView<0>
                dp4 r0.y, v0, c10  // ::posView<1>
                dp4 r0.z, v0, c11  // ::posView<2>
                dp4 r0.w, v0, c12  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c20.y, c20.x  // ::SurfaceRenderingPhongVS<18>
            
            #line 534
                add r0, -v2, c22
                mul r0, r0, c21.x
                mad r0, c1.x, r0, v2  // diffuseColor<0,1,2,3>
            
            #line 547
                add r0, r0, -c19
                mov r1, c19  // ::g_indicateDiffuseColor<0,1,2,3>
                mad r0, c2.x, r0, r1  // diffuseColor<0,1,2,3>
            
            #line 535
                nrm r1.xyz, -v1  // inNorm<0,1,2>
            
            #line 532
                lrp r2.xyz, c0.x, v1, r1  // inNorm<0,1,2>
            
            #line 539
                dp3 r1.x, r2, c5  // ::Out<12>
                dp3 r1.y, r2, c6  // ::Out<13>
                dp3 r1.z, r2, c7  // ::Out<14>
            
            #line 552
                dp3 r1.w, r1, c18
                max r1.w, r1.w, c24.x
                mul r2, r1.w, c4
                dp3 r1.w, r1, c17
            
            #line 539
                mov oT1.xyz, r1  // ::SurfaceRenderingPhongVS<12,13,14>
            
            #line 552
                max r1.x, r1.w, c24.x
                mad r1, c3, r1.x, r2
                mul oD0, r0, r1  // ::SurfaceRenderingPhongVS<4,5,6,7>
            
            // approximately 39 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_alpha;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_alpha      c0       1
            //
            
                preshader
                mov c6.x, c0.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0.xyz  // In<4,5,6>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 559
                texkill r0
            
            #line 577
                mov r0.xyz, v0
                mov r0.w, c6.x
                mov oC0, r0  // ::SurfaceRenderingPhongPS<0,1,2,3>
            
            // approximately 12 instruction slots used
            };
    }
}

technique AxisRendering
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorld               c0       4
            //   g_mWorldView           c4       4
            //   g_mWorldViewProjection c8       4
            //   g_Light1Dir            c12      1
            //   g_Light2Dir            c13      1
            //   g_MaterialDiffuseColor c14      1
            //   g_vFog                 c15      1
            //
            
                vs_2_0
                def c16, 0.200000003, 0, 0, 0
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
            
            #line 651 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c8  // ::AxisRenderingVS<0>
                dp4 oPos.y, v0, c9  // ::AxisRenderingVS<1>
                dp4 oPos.z, v0, c10  // ::AxisRenderingVS<2>
                dp4 oPos.w, v0, c11  // ::AxisRenderingVS<3>
                dp3 r0.x, v1, c0
                dp3 r0.y, v1, c1
                dp3 r0.z, v1, c2
                nrm r1.xyz, r0  // ::vNormal<0,1,2>
                dp3 r0.x, r1, c12
                dp3 r0.y, r1, c13
                max r0.xy, r0, c16.x
                add r0.x, r0.y, r0.x
                mul oD0.xyz, r0.x, c14  // ::AxisRenderingVS<4,5,6>
            
            #line 657
                dp4 oT0.x, v0, c0  // ::AxisRenderingVS<8>
                dp4 oT0.y, v0, c1  // ::AxisRenderingVS<9>
                dp4 oT0.z, v0, c2  // ::AxisRenderingVS<10>
                dp4 oT0.w, v0, c3  // ::AxisRenderingVS<11>
            
            #line 660
                dp4 r0.x, v0, c4  // ::posView<0>
                dp4 r0.y, v0, c5  // ::posView<1>
                dp4 r0.z, v0, c6  // ::posView<2>
                dp4 r0.w, v0, c7  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c15.y, c15.x  // ::AxisRenderingVS<12>
            
            #line 654
                mov oD0.w, c16.y  // ::AxisRenderingVS<7>
            
            // approximately 28 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_clipPlane0;
            //   float g_clipPlane0Dir;
            //   float4 g_clipPlane1;
            //   float g_clipPlane1Dir;
            //   float4 g_clipPlane2;
            //   float g_clipPlane2Dir;
            //
            //
            // Registers:
            //
            //   Name            Reg   Size
            //   --------------- ----- ----
            //   g_clipPlane0    c0       1
            //   g_clipPlane0Dir c1       1
            //   g_clipPlane1    c2       1
            //   g_clipPlane1Dir c3       1
            //   g_clipPlane2    c4       1
            //   g_clipPlane2Dir c5       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0  // In<8,9,10,11>
            
            #line 117 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 r0.w, c0, t0
                mul r0.x, r0.w, c1.x  // ::result0<0>
                dp4 r0.y, c2, t0
                mul r0.y, r0.y, c3.x  // ::result1<0>
            
            #line 121
                mul r0.x, r0.y, r0.x
                dp4 r0.y, c4, t0
                mul r0.y, r0.y, c5.x  // ::result2<0>
                mul r0, r0.y, r0.x  // ::CalcClipPlaneVisible<0,0,0,0>
            
            #line 668
                texkill r0
                mov oC0, v0  // ::AxisRenderingPS<0,1,2,3>
            
            // approximately 10 instruction slots used
            };
    }
}

technique LineWireframeRendering
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4 g_MaterialDiffuseColor;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_MaterialDiffuseColor c0       1
            //
            
                preshader
                mov c4, c0
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
            
            #line 696 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c0  // ::HLSL_LineWireframeRendering_VS<0>
                dp4 oPos.y, v0, c1  // ::HLSL_LineWireframeRendering_VS<1>
                dp4 oPos.z, v0, c2  // ::HLSL_LineWireframeRendering_VS<2>
                dp4 oPos.w, v0, c3  // ::HLSL_LineWireframeRendering_VS<3>
                mov oD0, c4  // ::HLSL_LineWireframeRendering_VS<4,5,6,7>
            
            // approximately 5 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_2_0
                dcl v0  // In<4,5,6,7>
            
            #line 703 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov oC0, v0  // ::HLSL_LineWireframeRendering_PS<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique ClipPlaneRenderingNoAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorld               c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_MaterialDiffuseColor c13      1
            //   g_vFog                 c14      1
            //
            
                vs_2_0
                def c15, 0.200000003, 0, 0, 0
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
            
            #line 736 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c4  // ::ClipPlaneVS<0>
                dp4 oPos.y, v0, c5  // ::ClipPlaneVS<1>
                dp4 oPos.z, v0, c6  // ::ClipPlaneVS<2>
                dp4 oPos.w, v0, c7  // ::ClipPlaneVS<3>
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0  // ::vNormal<0,1,2>
                dp3 r0.x, r1, c11
                dp3 r0.y, r1, c12
                max r0.xy, r0, c15.x
                add r0.x, r0.y, r0.x
                mul oD0.xyz, r0.x, c13  // ::ClipPlaneVS<4,5,6>
                dp4 r0.x, v0, c0  // ::posView<0>
                dp4 r0.y, v0, c1  // ::posView<1>
                dp4 r0.z, v0, c2  // ::posView<2>
                dp4 r0.w, v0, c3  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c14.y, c14.x  // ::ClipPlaneVS<8>
            
            #line 739
                mov oD0.w, c15.y  // ::ClipPlaneVS<7>
            
            // approximately 24 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_2_0
                dcl v0  // In<4,5,6,7>
            
            #line 754 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov oC0, v0  // ::ClipPlanePS<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique ClipPlaneRenderingWithAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_alpha;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_alpha      c0       1
            //
            
                preshader
                mov c15.x, c0.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float3 g_Light1Dir;
            //   float3 g_Light2Dir;
            //   float4 g_MaterialDiffuseColor;
            //   float4x4 g_mWorld;
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_mWorld               c8       3
            //   g_Light1Dir            c11      1
            //   g_Light2Dir            c12      1
            //   g_MaterialDiffuseColor c13      1
            //   g_vFog                 c14      1
            //
            
                vs_2_0
                def c16, 0.200000003, 0, 0, 0
                dcl_position v0  // vPos<0,1,2,3>
                dcl_normal v1  // inNorm<0,1,2>
            
            #line 736 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c4  // ::ClipPlaneVS<0>
                dp4 oPos.y, v0, c5  // ::ClipPlaneVS<1>
                dp4 oPos.z, v0, c6  // ::ClipPlaneVS<2>
                dp4 oPos.w, v0, c7  // ::ClipPlaneVS<3>
                dp3 r0.x, v1, c8
                dp3 r0.y, v1, c9
                dp3 r0.z, v1, c10
                nrm r1.xyz, r0  // ::vNormal<0,1,2>
                dp3 r0.x, r1, c11
                dp3 r0.y, r1, c12
                max r0.xy, r0, c16.x
                add r0.x, r0.y, r0.x
                mul oD0.xyz, r0.x, c13  // ::ClipPlaneVS<4,5,6>
                dp4 r0.x, v0, c0  // ::posView<0>
                dp4 r0.y, v0, c1  // ::posView<1>
                dp4 r0.z, v0, c2  // ::posView<2>
                dp4 r0.w, v0, c3  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c14.y, c14.x  // ::ClipPlaneVS<8>
            
            #line 739
                mov oD0.w, c15.x  // ::ClipPlaneVS<7>
            
            // approximately 24 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
                ps_2_0
                dcl v0  // In<4,5,6,7>
            
            #line 754 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                mov oC0, v0  // ::ClipPlanePS<0,1,2,3>
            
            // approximately 1 instruction slot used
            };
    }
}

technique SkyBoxRendering
{
    pass Single_Pass
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorldViewProjection;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldViewProjection c0       4
            //
            
                vs_2_0
                dcl_position v0  // In<0,1,2,3>
                dcl_color v1  // In<4,5,6,7>
                dcl_texcoord v2  // In<8,9>
            
            #line 795 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c0  // ::SkyBoxRenderingVS<0>
                dp4 oPos.y, v0, c1  // ::SkyBoxRenderingVS<1>
                dp4 oPos.z, v0, c2  // ::SkyBoxRenderingVS<2>
                dp4 oPos.w, v0, c3  // ::SkyBoxRenderingVS<3>
                mov oD0, v1  // ::SkyBoxRenderingVS<4,5,6,7>
                mov oT0.xy, v2  // ::SkyBoxRenderingVS<8,9>
            
            // approximately 6 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                def c0, 0, 0, 0, 0
                dcl v0.xyz  // In<4,5,6>
                dcl t0.xy  // In<8,9>
                dcl_2d s0
            
            #line 804 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t0, s0
                mul r0.xyz, r0, v0  // ::finalColor<0,1,2>
                mov r0.w, c0.x
                mov oC0, r0  // ::SkyBoxRenderingPS<0,1,2,3>
            
            // approximately 4 instruction slots used (1 texture, 3 arithmetic)
            };
    }
}

technique Text3DRenderingNoAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_vFog                 c8       1
            //
            
                vs_2_0
                def c9, 1, 0, 0, 0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
            
            #line 844 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c4  // ::Text3DVS<0>
                dp4 oPos.y, v0, c5  // ::Text3DVS<1>
                dp4 oPos.z, v0, c6  // ::Text3DVS<2>
                dp4 oPos.w, v0, c7  // ::Text3DVS<3>
            
            #line 847
                dp4 r0.x, v0, c0  // ::posView<0>
                dp4 r0.y, v0, c1  // ::posView<1>
                dp4 r0.z, v0, c2  // ::posView<2>
                dp4 r0.w, v0, c3  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c8.y, c8.x  // ::Text3DVS<10>
            
            #line 845
                mov oD0.xyz, v1  // ::Text3DVS<4,5,6>
                mov oD0.w, c9.x  // ::Text3DVS<7>
            
            #line 850
                mov oT0.xy, v2  // ::Text3DVS<8,9>
            
            // approximately 15 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0.xy  // In<8,9>
                dcl_2d s0
            
            #line 862 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t0, s0
                mul r0, r0, v0  // ::finalColor<0,1,2,3>
                mov oC0, r0  // ::Text3DPS<0,1,2,3>
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique Text3DRenderingWithAlpha
{
    pass P0
    {
        vertexshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float g_alpha;
            //
            //
            // Registers:
            //
            //   Name         Reg   Size
            //   ------------ ----- ----
            //   g_alpha      c0       1
            //
            
                preshader
                mov c9.x, c0.x
            
            // approximately 1 instruction used
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   float4x4 g_mWorldView;
            //   float4x4 g_mWorldViewProjection;
            //   float2 g_vFog;
            //
            //
            // Registers:
            //
            //   Name                   Reg   Size
            //   ---------------------- ----- ----
            //   g_mWorldView           c0       4
            //   g_mWorldViewProjection c4       4
            //   g_vFog                 c8       1
            //
            
                vs_2_0
                dcl_position v0  // inPos<0,1,2,3>
                dcl_color v1  // diffuseColor<0,1,2>
                dcl_texcoord v2  // inTex<0,1>
            
            #line 844 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                dp4 oPos.x, v0, c4  // ::Text3DVS<0>
                dp4 oPos.y, v0, c5  // ::Text3DVS<1>
                dp4 oPos.z, v0, c6  // ::Text3DVS<2>
                dp4 oPos.w, v0, c7  // ::Text3DVS<3>
            
            #line 847
                dp4 r0.x, v0, c0  // ::posView<0>
                dp4 r0.y, v0, c1  // ::posView<1>
                dp4 r0.z, v0, c2  // ::posView<2>
                dp4 r0.w, v0, c3  // ::posView<3>
                dp4 r0.x, r0, r0
                rsq r0.x, r0.x
                rcp r0.x, r0.x
                mad oFog, r0.x, -c8.y, c8.x  // ::Text3DVS<10>
            
            #line 845
                mov oD0.xyz, v1  // ::Text3DVS<4,5,6>
                mov oD0.w, c9.x  // ::Text3DVS<7>
            
            #line 850
                mov oT0.xy, v2  // ::Text3DVS<8,9>
            
            // approximately 15 instruction slots used
            };

        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshTextureSampler;
            //
            //
            // Registers:
            //
            //   Name               Reg   Size
            //   ------------------ ----- ----
            //   MeshTextureSampler s0       1
            //
            
                ps_2_0
                dcl v0  // In<4,5,6,7>
                dcl t0.xy  // In<8,9>
                dcl_2d s0
            
            #line 862 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t0, s0
                mul r0, r0, v0  // ::finalColor<0,1,2,3>
                mov oC0, r0  // ::Text3DPS<0,1,2,3>
            
            // approximately 3 instruction slots used (1 texture, 2 arithmetic)
            };
    }
}

technique RenderFinalSceneBorder
{
    pass P0
    {
        //No embedded vertex shader
        pixelshader = 
            asm {
            //
            // Generated by Microsoft (R) HLSL Shader Compiler 9.27.952.3022
            //
            // Parameters:
            //
            //   sampler2D MeshBackgroundSampler;
            //   float4 g_colorIndicate[7];
            //   float2 g_finalImageDelta;
            //
            //
            // Registers:
            //
            //   Name                  Reg   Size
            //   --------------------- ----- ----
            //   g_colorIndicate       c0       7
            //   g_finalImageDelta     c7       1
            //   MeshBackgroundSampler s0       1
            //
            
                ps_2_0
                def c8, 0.0599999987, 0, -1, 0
                def c9, 10, 0.5, -2, -1
                def c10, -3, -4, -5, -6
                dcl t0.xy  // In<4,5>
                dcl t1.xy  // In<6,7>
                dcl t2.xy  // In<8,9>
                dcl t3.xy  // In<10,11>
                dcl_2d s0
            
            #line 929 "e:\Project\PreteinV3\NuGenCBase\ProteinVistaSource\Basiclllumination.fx"
                texld r0, t2, s0  // ::finalColor2<3>
                texld r1, t3, s0  // ::finalColor3<3>
            
            #line 927
                texld r2, t0, s0  // ::finalColor0<3>
                texld r3, t1, s0  // ::finalColor1<3>
            
            #line 932
                add r0.xy, t0, c7
                texld r4, r0, s0  // ::finalColorOrig<0,1,2,3>
            
            #line 945
                mad r0.x, r4.w, c9.x, c9.y
                frc r0.y, r0.x
                add r0.x, -r0.y, r0.x  // ::index<0>
                add r1.xy, r0.x, c9.wzyx
                add r5, r0.x, c10
                mul r5, r5, r5
                mul r0.xy, r1, r1
                mov r6.w, c8.w
                cmp r6, -r0.x, c1, r6.w
                cmp r6, -r0.y, c2, r6
                cmp r6, -r5.x, c3, r6
                cmp r6, -r5.y, c4, r6
                cmp r6, -r5.z, c5, r6
                cmp r5, -r5.w, c6, r6  // ::edgeMaskOR<0,1,2,3>
            
            #line 933
                add r0.x, r0.w, -r1.w
                mul r0.x, r0.x, r0.x
                add r0.y, r2.w, -r3.w
                mad r0.x, r0.y, r0.y, r0.x  // ::finalColorAlpha<0>
            
            #line 942
                add r0.y, -r4.w, c8.x
                cmp r0.y, r0.y, c8.y, c8.z
                cmp r0.x, -r0.x, c8.y, r0.y
                cmp r1, r0.x, c8.w, r5  // ::edgeMaskOR<0,1,2,3>
            
            #line 949
                cmp r0, r0.x, r4, c8.w
                add r0, r1, r0  // ::Output<0,1,2,3>
                mov oC0, r0  // ::RenderFinalSceneBorderPS<0,1,2,3>
            
            // approximately 31 instruction slots used (5 texture, 26 arithmetic)
            };
    }
}

