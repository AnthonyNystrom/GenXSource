<HTML>
<HEAD>
  <TITLE>Справочное руководство по языку Lua 4.0</TITLE>
  <META NAME="Author" CONTENT="Alexey V. Pautov">
  <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=koi8-r">
  <META NAME="GENERATOR" CONTENT="Dos Navigator 1.51.04/DOS.">
</HEAD>

<BODY>
<H1>Глава 4. Язык LUA</H1>
<H2>Справочное руководство по языку программирования Lua 4.0</H2>

<A NAME="1."></A><H1>4.1 Введение</H1>
<H1>4.1.1 Что такое Lua?</H1>
<P>Сайт языка Lua: <A HREF="http://www.tecgraf.puc-rio.br/lua">
http://www.tecgraf.puc-rio.br/lua</A>.

<P>Lua представляет собой ядро языка, которое Вы можете внедрять в Вашу
прикладную программу. Это означает, что, помимо синтаксиса и семантики,
Lua имеет API, который позволяет прикладной программе обмениваться данными
с программами на Lua и расширять Lua функциями на C. В этом смысле, Lua
может быть расценен как некий базисный метаязык для формирования
проблемно-зависимых языков программирования.

<P>Lua был предоставлен первый приз (технологическая категория) в Second
Compaq Award for Research and Development in Computer Science в 1997. Это
вознаграждение было объединенным предприятием Compaq Computer Brazil, the
Brazilian Ministry of Science and Technology и the Brazilian
Academy of Sciences.

<P>Lua использовался во многих различных проектах во всем мире. Краткий
перечень есть на http://www.tecgraf.puc-rio.br/lua/uses.html.

<P>Lua объединяет простой процедурный синтаксис (подобный Паскалю) с мощными
конструкциями описания данных, основанными на ассоциативных массивах и
расширяемой семантике. Lua имеет динамические типы, интерпретируется из
байт-кода и имеет автоматическое управление памятью.

<P>Lua представляет собой мощный, легкий язык программирования расширений
разработанный, чтобы поддерживать общее процедурное программирование для
средств описания данных. Lua предназначен, чтобы использоваться как мощный и
легкий язык конфигураций для любой программы, которая нуждается в этом, и
для расширения прикладных программ. Lua также часто используется как
автономный язык общего назначения.

<P>Цели реализации: простота, эффективность, мобильность и низкая объемлющая
стоимость. Результат: быстрое ядро языка с маленькими требованиями, что
делает его идеальным также и во встроенных системах.

<P>Lua написан как библиотека на C, написан на ANSI C и компилирует
неизменяемый на всех известных платформах код. Будучи языком расширений, Lua
не имеет никакого понятия главной программы: это работает только как вложение
в некую <EM>ведущую</EM> программу. Эта ведущая программа может вызывать
функции, чтобы выполнить часть кода в Lua, может писать и читать переменные
Lua, и может регистрировать функции C, которые будут вызваны Lua-кодом. С
помощью функций C, Lua может быть расширена, чтобы справиться с широким
диапазоном различных областей, таким образом создавая настроенные языки
программирования, совместно использующие синтаксические рамки.

<H1>4.1.2 Доступность</H1>
<P>Lua свободно доступен для академических и коммерческих целей и может быть
скачан с различных сайтов в сети:
<PRE>
  Базовые  http://www.tecgraf.puc-rio.br/lua
  сайты:   http://csg.uwaterloo.ca/~lhf/lua

  Зеркала:
  Brazil:  ftp://ftp.tecgraf.puc-rio.br/pub/lua/
  Canada:  ftp://csg.uwaterloo.ca/pub/lhf/lua/
  USA:     ftp://ftp.freesoftware.com/pub/languages/lua/
  Germany: ftp://ftp.uni-trier.de/pub/languages/lua/
  Germany: ftp://ftp.gwdg.de/pub/languages/lua/
  Greece:  ftp://ftp.ntua.gr/pub/lang/lua/
  Japan:   ftp://ftp.u-aizu.ac.jp/pub/lang/lua/
  Denmark: ftp://ftp.ucore.com/lua/dist
</PRE>

<P>Lua распространяется свободно. Реализация, описанная в этом руководстве,
доступна по адресам: <A HREF="http://www.tecgraf.puc-rio.br/lua">
http://www.tecgraf.puc-rio.br/lua</A>
и <A HREF="ftp://ftp.tecgraf.puc-rio.br/pub/lua">
ftp://ftp.tecgraf.puc-rio.br/pub/lua</A>.

<H1>4.1.3 Связь с авторами</H1>
<P>Lua был разработан и выполнен Waldemar Celes, Roberto Ierusalimschy
и Luiz Henrique de Figueiredo. С ними можно входить в контакт по e-mail
lua@tecgraf.puc-rio.br.

<P>Шлите Ваши комментарии, вопросы и отчеты об ошибках на
lua@tecgraf.puc-rio.br. Для сообщений об ошибках попробуйте также список
рассылки lua-l@tecgraf.puc-rio.br. Для получения большего количества
информации относительно этого списка, включая инструкции о том, как на него
подписаться, обратитесь на http://www.tecgraf.puc-rio.br/lua/lua-l.html.

<P>Lua разработан в TeCGraf, the Computer Graphics Technology Group
of PUC-Rio (the Pontifical Catholic University of Rio de Janeiro
in Brazil). TeCGraf является лабораторией отдела информатики. Множество
индустриальных программ, разработанных в TeCGraf, используют Lua.

<A NAME="2."></A><H1>4.2 Среда и составные части</H1>
<P>Все инструкции в Lua выполнены в глобальной среде. Эта среда будет
инициализирована обращением к <CODE>lua_open</CODE> и сохранится до обращения
к <CODE>lua_close</CODE> или до завершения ведущей программы. В случае
необходимости программист может создавать много независимых глобальных сред и
свободно переключаться между ними.

<P>Глобальная среда может управляться Lua-кодом или ведущей программой,
которая может читать и писать глобальные переменные, используя функции API
из библиотеки, которая предоставлена Lua.

<P>Глобальные переменные в Lua не должны быть объявлены. Любая переменная
считается глобальной, пока не объявлена явно как локальная. Перед первым
назначением, значение глобальной переменной <B>nil</B> (это значение по
умолчанию может быть изменено, подробности в разделе <A HREF="#tag-method">
4.4.8</A>). Таблица используется, чтобы хранить все глобальные имена и
значения (таблицы объясняются в разделе <A HREF="#TypesSec">4.3</A>).

<P>Модуль выполнения Lua назван составной частью. Это просто
последовательность инструкций, которые выполнены последовательно. Каждая
инструкция может факультативно сопровождаться точкой с запятой:
<PRE>
chunk ::= {stat [`;']}
</PRE>

Инструкции описаны в разделе <A HREF="#stats">4.4.4</A>. Запись выше
представляет собой обычный расширенный BNF, в котором {<EM>a</EM>}
соответствует 0 или более объектов <EM>a</EM> [<EM>a</EM>] означает
факультативный <EM>a</EM>, а (<EM>a</EM>)+ задает один или большее количество
<EM>a</EM>. Полный синтаксис Lua дан в <A HREF="http://www.botik.ru/~rldp/mysql/mysqldev/BNF">BNF</A>.

<P>Составная часть (chunk) может быть сохранена в файле или в строке в
ведущей программе. Когда chunk выполняется, сначала проводится прекомпиляция
в байт-код для реальной машины, а затем инструкции будут выполнены в
последовательном порядке, моделируя действительную машину. Все модификации
глобальной среды сохраняются после окончания работы кода.

<P>Chunk также может быть прекомпилирован в двоичную форму и сохранен в
файле. Подробности есть в описании программы <A NAME="luac"><TT>
<A HREF="http://www.botik.ru/~rldp/mysql/mysqldev/luac.htm">luac</A></TT></A>. Текстовые файлы с кодом и их двоичные
прекомпилированные формы взаимозаменяемы. Lua автоматически обнаруживает тип
файла и действует соответственно.

<A NAME="pre-compilation"></A><P><A NAME="TypesSec"></A><A NAME="3."></A>
<H1>4.3 Типы и тэги</H1>
<P>Lua представляет собой <EM>dynamically typed language</EM>. Это означает,
что переменные не имеют типов, а только значения. Следовательно, не имеется
никаких определений типов на языке. Все значения несут их собственный тип.
Помимо типа все значения также имеют <A NAME="tag"><EM>тэг</EM></A>.

<P>Имеются шесть <A NAME="basic types">базисных типов в Lua</A>:
<A NAME="nil"><EM>nil</EM></A>, <A NAME="number"><EM>number (число)</EM></A>,
<A NAME="string"><EM>string (строка)</EM></A>,
<A NAME="function"><EM>function (функция)</EM></A>,
<A NAME="userdata"><EM>userdata (пользовательские данные)</EM></A> и
<A NAME="table"><EM>table (таблица)</EM></A>. <EM>Nil</EM> тип значения
<B>nil</B>, чье основное свойство должно отличаться от любого другого
значения. <EM>Number</EM> представляет реальные (двойная точность с плавающей
запятой) числа, в то время как <EM>string</EM> имеет обычное значение. Lua
нормально понимает 8-разрядные символы, так что строки могут содержать любой
8-разрядный символ, включая вложенные нули (<CODE>'\0'</CODE>). Подробности в
разделе <A HREF="#lexical">4.4.1</A>. Функция <CODE>type</CODE> возвращает
строку, описывающую тип данного значения (подробности в разделе
<A HREF="#pdf-type">4.6.1</A>).

<P>Функции рассматриваются как значения первого класса (<EM>first-class
values</EM>) в Lua. Это означает, что функции могут быть сохранены в
переменных, переданы как параметры другим функциям и возвращены как
результаты. Lua может вызывать и управлять как функциями, написанными на Lua,
так и функциями, написанными на C. Два вида функций могут различаться их
тэгами: все функции Lua имеют тот же самый тэг, и все функции C имеют свой
тэг, который отличается от тэга функций Lua. Функция <CODE>tag</CODE>
возвращает тэг данного значения (подробности в разделе
<A HREF="#pdf-tag">4.6.1</A>).

<P>Тип <EM>userdata</EM> обеспечивается, чтобы позволить произвольным
C-указателям быть сохраненными в Lua-переменных. Этот тип соответствует
<CODE>void*</CODE> и не имеет никаких предопределенных операций в Lua, за
исключением теста равенства и назначения. Однако, используя <EM>методы
тэгов</EM>, программист может определять операции для значений
<EM>userdata</EM>. Подробности в разделе <A HREF="#tag-method">4.4.8</A>.

<P>Тип <EM>table</EM> осуществляет ассоциативные массивы, то есть массивы,
которые могут быть индексированы не только числами, а любыми значениями (за
исключением <B>nil</B>). Следовательно, этот тип может использоваться не
только, чтобы представить обычные массивы, но также и символные таблицы,
наборы, записи, графы, деревья и т.д. Таблицы представляют собой основной
механизм, структурирующий данные в Lua. Чтобы представлять записи
(<A NAME="records">records</A>), Lua использует имя поля как индекс. Язык
поддерживает это представление, обеспечивая <CODE>a.name</CODE> как
синтаксический аналог для <CODE>a["name"]</CODE>. Таблицы могут также нести
<EM>методы</EM>: поскольку функции представляют собой значения первого
класса, поля таблицы могут содержать функции. Форма <CODE>t:f(x)</CODE>
синтаксический аналог для <CODE>t.f(t,x)</CODE>, который вызывает метод
<CODE>f</CODE> из таблицы <CODE>t</CODE> прохождением таблицы непосредственно
как первый параметр (подробности в разделе <A HREF="#func-def">4.4.5.9</A>).

<P>Обратите внимание, что таблицы представляют собой <EM>объекты</EM>, а не
значения. Переменные не содержат таблицы, только ссылаются на них.
Назначение, обработка параметра и возврат всегда управляют ссылками на
таблицы и не подразумевают никакого вида копирования. Кроме того, таблицы
должны быть явно созданы прежде, чем используются. Подробности в разделе
<A HREF="#tableconstructor">4.4.5.7</A>.

<P>Каждый из типов <EM>nil</EM>, <EM>number</EM> и <EM>string</EM> имеет
свой тэг. Вообще, очень многое в Lua построено именно вокруг тэгов. Все
значения каждого из этих типов имеют тот же самый предопределенный тэг. Как
объяснено выше, значения типа <EM>function</EM> могут иметь два различных
тэга в зависимости от того, являются ли они функциями Lua или функциями C. В
заключение, значения типов <EM>userdata</EM> и <EM>table</EM> могут иметь
переменные тэги, назначенные программистом (подробности в разделе
<A HREF="#tag-method">4.4.8</A>). Функция <CODE>tag</CODE> возвращает тэг
данного значения. Пользовательские тэги могут быть созданы функцией
<CODE>newtag</CODE>. Функция <CODE>settag</CODE> используется, чтобы изменить
тэг таблицы (подробности в разделе <A HREF="#pdf-newtag">4.6.1</A>). Тэг
значений userdata может быть установлен из C (подробности в разделе
<A HREF="#C-tags">4.5.7</A>). Тэги главным образом используются, чтобы выбрать
соответствующие <EM>методы тэгов</EM>, когда происходят некоторые события.
Методы тэгов представляют собой основной механизм для распространения
семантики Lua (подробности в разделе <A HREF="#tag-method">4.4.8</A>).

<A NAME="4."></A><H1>4.4 Язык</H1>
<P>Этот раздел описывает лексику, синтаксис и семантику Lua.
<P><A NAME="lexical"></A>

<A NAME="4.1"></A><H2>4.4.1 Лексические соглашения в языке</H2>
<P><A NAME="Identifiers"><EM>Идентификатором</EM></A> в Lua может быть любая
строка символов, цифр и символов подчеркивания, не начинающаяся цифрой. Это
совпадает с определением идентификаторов в большинстве языков, за исключением
того, что определение символа зависит от текущего региона. Любой символ,
который считается алфавитным в текущем языке, может использоваться в
идентификаторе. То есть, алфавитные символы берутся из настроек текущей
системной локали. Замечу, что для лучшей переносимости программ и их
применения в разных регионах лучше все же ограничиться латинским алфавитом,
цифрами и символом подчеркивания: они применимы везде. Следующие слова
<EM>зарезервированы</EM>, и не могут использоваться как идентификаторы:
<A NAME="reserved words"></A>
<PRE>
and       break     do        else      elseif    return
end       for       function  if        in        then
local     nil       not       or repeat until   while
</PRE>

<P>Lua представляет собой язык, чувствительный к регистру символов:
<TT>and</TT> является зарезервированным словом, но <TT>And</TT> и
<TT>AND</TT> (если региональный язык разрешает) не одно и то же. Значит,
приведенные варианты уже можно использовать как имена переменных. Кроме того,
идентификаторы, начинающиеся с символа подчеркивания, сопровождаемого
прописными буквами (типа <CODE>_INPUT</CODE>) зарезервированы для внутренних
переменных. Их не стоит применять в своих программах.

<P>Следующие строки обозначают другие лексемы (<A NAME="tokens">tokens</A>):
<PRE>
~=    &lt;=    &gt;=    &lt;     &gt;     ==    =     +     -     *
(     )     {     }     [     ]     ;     ,     .     ..    ...   /
</PRE>

<P><A NAME="Literal strings"><EM>Литеральные строки</EM></A> могут быть
разграничены одиночными или двойными кавычками, и могут содержать C-подобные
управляющие последовательности: <CODE>\a</CODE> (bell),
<CODE>\b</CODE> (backspace), <CODE>\f</CODE> (form feed),
<CODE>\n</CODE> (newline), <CODE>\r</CODE> (carriage return),
<CODE>\t</CODE> (horizontal tab), <CODE>\v</CODE> (vertical tab),
<CODE>\\</CODE> (backslash), <CODE>\"</CODE> (double quote),
<CODE>\'</CODE> (single quote), и <CODE>\</CODE><EM>newline</EM> (то есть,
наклонная черта влево, сопровождаемая реальным newline, который приводит к
переводу строки). Символ в строке может также быть определен числовым
значением, через управляющую последовательность <CODE>\</CODE><EM>ddd</EM>,
где <EM>ddd</EM> последовательность до трех <EM>десятичных</EM> цифр. Строки
в Lua могут содержать любое 8-разрядное значение, включая вложенные нули,
которые могут быть определены как <CODE>\000</CODE>.

<P>Литеральные строки могут также быть разграничены парами
<CODE>[[</CODE> ... <CODE>]]</CODE>. Литералы в этой форме в скобках могут
занимать по несколько строк, содержать вложенные пары скобок
<CODE>[[</CODE> ... <CODE>]]</CODE> и не интерпретировать управляющие
последовательности. Эта форма особенно удобна для записи строк, которые
содержат части программы или другие цитируемые строки. Как пример, в системе
использующей ASCII-кодировку, следующие три литерала эквивалентны:
<PRE>
1)   "alo\n123\""
2)   '\97lo\10\04923"'
3)   [[alo
     123"]]
</PRE>

<P><A NAME="Comments"><EM>Комментарии</EM></A> начинаются с двойного тире
(<CODE>--</CODE>) и выполняются до конца строки. Кроме того, первая строка
составной части всегда пропущена, если начинается с символа
<CODE>#</CODE>. Это средство позволяет использование Lua как интерпретатора
скриптов в Unix-системах.

<P><A NAME="Numerical constants"><EM>Числовые константы</EM></A> могут быть
написаны с факультативной целой частью и тоже факультативным дробной частями.
Допустимо применение экспоненциальной формы запитси. Примеры имеющих
силу числовых констант:
<PRE>
3     3.0     3.1416  314.16e-2   0.31416E1
</PRE>

<P><A NAME="coercion"></A><A NAME="4.2"></A><H2>4.4.2 Приведение</H2>
<P>Lua обеспечивает некоторые автоматические преобразования между значениями
во время выполнения. Любая арифметическая операция, примененная к строке,
пробует преобразовывать эту строку в соответствующее число, следуя обычным
правилам. Наоборот, всякий раз, когда используется число, а ожидается строка,
это число будет преобразовано в строку в приемлемом формате. Формат выбран
так, чтобы преобразование из числа в строку было таким, чтобы обратное
преобразование из строки в число было <EM>точным</EM>. Таким образом,
преобразование не обязательно генерирует хороший текст для некоторых чисел.
Для полного управления тем, как числа будут преобразованы в строки,
используйте функцию <CODE>format</CODE> (подробности в разделе
<A HREF="#format">4.6.2</A>).

<A NAME="adjust"></A><A NAME="4.3"></A><H2>4.4.3 Корректировка</H2>
<P>Функции в Lua могут возвращать много значений. Потому, что не имеется
никаких объявлений типа когда функция вызвана, система не знает, сколько
значений вернется, или сколько параметры требуется. Следовательно, иногда
список значений должен быть откорректирован во время выполнения к данной
длине. Если имеется большее количество значений, чем необходимы, то лишние
значения отбрасываются. Если имеется меньшее количество значений, чем
необходимы, то список расширен добавлением потребного количества <B>nil</B>.
Эта корректировка происходит в многократных назначениях (подробности в
разделе <A HREF="#assignment">4.4.4.2</A>) и в обращениях к функции
(подробности в разделе <A HREF="#functioncall">4.4.5.8</A>).

<A NAME="stats"></A><A NAME="4.4"></A><H2>4.4.4 Инструкции</H2>
<P>Lua поддерживает почти стандартный набор инструкций, подобных таким же
наборам на Pascal или C. Стандартные команды включают присваивание, контроль
выполнения и вызовы процедур. Нестандартные команды включают конструкторы
таблицы и объявления локальных переменных.

<H3>4.4.4.1 Блоки</H3>
<A NAME="block">Блоком</A> является список инструкций. Синтаксически блок
равен составной части (chunk):
<PRE>
block ::= chunk
</PRE>

<P>Блок может быть явно разграничен:
<PRE>
stat ::= <B>do</B> block <B>end</B>
</PRE>

Явные блоки полезны, чтобы управлять областью видимости (контекстом)
локальных переменных. Явные блоки также иногда используются, чтобы добавить
возврат или разрывать инструкцию в середине другого блока.

<P><A NAME="assignment"></A><H3>4.4.4.2 <A NAME="Assignment">Присваивания
</H3></A>
Lua поддерживает такую удобную вещь, как <A NAME="multiple assignment">
многократные присваивания</A>. Следовательно, синтаксис определяет список
переменных с левой стороны и список выражений с правой сторона. Элементы в
обоих списках отделяются запятыми:
<PRE>
stat ::= varlist1 `<B>=</B>' explist1
varlist1 ::= var {`<B>,</B>' var}
</PRE>

Эта инструкция сначала оценивает все значения справа и возможные индексы
слева, а затем делает примваивание. Так, код:
<PRE>
i = 3
i, a[i] = 4, 20
</PRE>
установит <CODE>a[3]</CODE> в 20, но не воздействует на <CODE>a[4]</CODE>
потому, что <CODE>i</CODE> в <CODE>a[i]</CODE> оценен прежде, чем ему было
присвоено значение <CODE>4</CODE>. Многократное присваивание может
использоваться, чтобы поменять местами два значения, например:
<PRE>
x, y = y, x
</PRE>

<P>Два списка в многократном присваивании могут иметь различные длины. Перед
собственно присваиванием, список значений будет откорректирован к длине
списка имеющихся переменных.

<P>Одиночное имя может обозначать глобальную переменную, локальную переменную
или формальный параметр:
<PRE>
var ::= name
</PRE>

<P>Квадратные скобки используются, чтобы индексировать таблицу:
<PRE>
var ::= varorfunc `<B>[</B>' exp1 `<B>]</B>'
varorfunc ::= var | functioncall
</PRE>

<EM>varorfunc</EM> должен иметь в качестве результата значение из таблицы,
где поле, индексированное значением выражения <EM>exp1</EM>, получает
назначенное ему значение.

<P>Синтаксис <CODE>var.NAME</CODE> представляет собой только синтаксический
аналог для выражения <CODE>var["NAME"]</CODE>:
<PRE>
var ::= varorfunc `.' name
</PRE>

<P>Значение присваиваний, оценок глобальных переменных и индексированных
переменных может быть изменено методами тэгов. Фактически, назначение
<CODE>x=val</CODE>, где <CODE>x</CODE> представляет собой глобальную
переменную, является эквивалентным обращению <CODE>setglobal("x",val)</CODE>,
а присваивание <CODE>t[i]=val</CODE> эквивалентно
<CODE>settable_event(t,i,val)</CODE>. В разделе <A HREF="#tag-method">4.4.8
</A> есть полное описание этих функций (<CODE>setglobal</CODE> находится в
базисной библиотеке, <TT>settable_event</TT> используется только
для объяснительных целей).

<A NAME="control"></A><H3>4.4.4.3 Структуры управления</H3>
Структуры управления <B>if</B>, <B>while</B> и <B>repeat</B> имеют обычное
значение и знакомый синтаксис:
<A NAME="while-do statement"></A><A NAME="repeat-until statement"></A>
<A NAME="if-then-else statement"></A>
<PRE>
stat ::= while exp1 do block end
stat ::= repeat block until exp1
stat ::= if exp1 then block {elseif exp1 then block} [else block] end
</PRE>

<A NAME="condition expression">Выражение</A> <EM>exp1</EM> условия структуры
управления может возвращать любое значение. Все значения, отличные от
<B>nil</B>, рассматриваются как истина, только <B>nil</B> считается ложью.

<P>Инструкция <B>return</B> используется, чтобы возвратить значения из
функции или из chunk. <A NAME="return"></A><A NAME="return statement"></A>
Поскольку функции или составные части могут возвращать больше, чем одно
значение, синтаксис для инструкции <B>return</B>:
<PRE>
stat ::= <B>return</B> [explist1]
</PRE>

<P>Инструкция <B>break</B> может использоваться, чтобы завершить выполнение
цикла, переходя к следующей инструкции сразу после цикла:
<A NAME="break statement"></A>
<PRE>
stat ::= <B>break</B>
</PRE>
<B>break</B> заканчивает самый внутренний вложенный цикл (<B>while</B>,
<B>repeat</B> или <B>for</B>).

<P>По синтаксическим причинам инструкции <B>return</B> и <B>break</B> могут
быть написаны только как <EM>последние инструкции блока</EM>. Если
действительно необходимо вставить их в середину, надо применить явный
внутренний блок, например, <CODE>do return end</CODE> потому, что теперь
<B>return</B> в самом деле последняя инструкция во внутреннем блоке.

<A NAME="for"></A><H3>4.4.4.4 Инструкция For</H3><A NAME="for statement"></A>
<P>Инструкция <B>for</B> имеет две формы, по одной для чисел и таблиц.
Числовая версия цикла <B>for</B> имеет следующий синтаксис:
<PRE>
stat ::= for name `=' exp1 `,' exp1 [`,' exp1] do block end
</PRE>
Инструкция <B>for</B>, подобная:
<PRE>
for var = e1 ,e2, e3 do block end
</PRE>
является заменителем кода:
<PRE>
do
  local var, _limit, _step = tonumber(e1), tonumber(e2), tonumber(e3)
  if not (var and _limit and _step) then error() end
  while (_step&gt;0 and var&lt;=_limit) or
        (_step&lt;=0 and var&gt;=_limit) do
    block
    var = var+_step
  end
end
</PRE>

Обратите внимание на следующее:
<UL><LI>sep=0pt
<LI><CODE>_limit</CODE> и <CODE>_step</CODE> являются невидимыми переменными.
Имена здесь даны только для объяснительных целей.

<LI>Поведение <EM>неопределено</EM>, если Вы меняете значение
<CODE>var</CODE> внутри блока.

<LI>Если третье выражение (step) отсутствует, то используется step 1.
<LI>Значения limit и step оценены только однажды, перед стартом цикла.
<LI>Переменная <CODE>var</CODE> локальна для инструкции: Вы не можете
использовать ее значение после окончания работы <B>for</B>.
<LI>Вы можете использовать <B>break</B>, чтобы выйти из <B>for</B>. Если Вы
нуждаетесь в значении индекса, присвойте его другой переменной перед выходом.
</UL>

<P>Таблица для инструкции <B>for</B> пересекает все пары
(index,value) данной таблицы.
Это имеет следующий синтаксис:
<PRE>
stat ::= for name `,' name in exp1 do block end
</PRE>
Инструкция <B>for</B>, подобная:
<PRE>
for index, value in exp do block end
</PRE>
равносильна такому коду:
<PRE>
do
  local _t = exp
  local index, value = next(t, nil)
  while index do
    block
    index, value = next(t, index)
  end
end
</PRE>

Обратите внимание на следующее:
<UL><LI>sep=0pt
<LI><CODE>_t</CODE> является невидимомй переменномй. Имя здесь дано только
для объяснительных целей.

<LI>Поведение <EM>неопределено</EM>, если Вы меняете значение
<CODE>index</CODE> внутри блока.

<LI>Поведение <EM>неопределено</EM>, если Вы меняете таблицу
<CODE>_t</CODE> при работе цикла.

<LI>Переменнае <CODE>index</CODE> и <CODE>var</CODE> локальны для инструкции:
Вы не можете использовать их значения после окончания работы <B>for</B>.

<LI>Вы можете использовать <B>break</B>, чтобы выйти из <B>for</B>. Если Вы
нуждаетесь в значениях <CODE>index</CODE> или <CODE>value</CODE>, присвойте
их другим переменным перед выходом.

<LI>Порядок, в котором элементы таблицы будут пересечены, неопределен, <EM>
даже для числовых индексов</EM>. Если Вы хотите пересекать индексы в числовом
порядке, используйте числовой вариант <B>for</B>.</UL>

<A NAME="funcstat"></A><H3>4.4.4.5 Обращения к функции как инструкции</H3>
Из-за возможных побочных эффектов, обращения к функции могут быть
выполнены как инструкции:
<PRE>
stat ::= functioncall
</PRE>
В этом случае все возвращенные значения утрачены. Обращения к функции
объясняются в разделе <A HREF="#functioncall">4.4.5.8</A>.

<A NAME="localvar"></A><H3>4.4.4.6 Локальные объявления</H3>
<A NAME="Local variables">Локальные переменные</A> могут быть объявлены
где-нибудь внутри блока. Объявление может включать начальное присваивание:
<PRE>
stat ::= <B>local</B> declist [init]
declist ::= name {`<B>,</B>' name}
init ::= `<B>=</B>' explist1
</PRE>
Если представлено начальное назначение, то оно имеет ту же самую семантику
многократного назначения. Иначе все переменные инициализированы <B>nil</B>.

<P>Сhunk также блок, так что локальные переменные могут быть объявлены
снаружи любого явного блока.

<P>Область действия (контекст) локальных переменных начинается после
объявления и продолжается до конца блока. Таким образом, код
<CODE>local print=print</CODE> создает локальную переменную, названную
<CODE>print</CODE>, чье начальное значение будет взято из <EM>глобальной</EM>
переменной с тем же самым именем.

<A NAME="4.5"></A><H2>4.4.5 Выражения</H2>
<H3>4.4.5.1 <A NAME="Basic Expressions">Базисные выражения</A></H3>
<P>Базисные выражения в Lua такие:
<PRE>
exp ::= `(' exp `)'
exp ::= nil
exp ::= number
exp ::= literal
exp ::= var
exp ::= upvalue
exp ::= function
exp ::= functioncall
exp ::= tableconstructor
</PRE>

<P>Доступ к глобальной переменной <CODE>x</CODE> эквивалентен обращению
<CODE>getglobal("x")</CODE>, а доступ к индексированной переменной
<CODE>t[i]</CODE> эквивалентен обращению к <CODE>gettable_event(t,i)</CODE>.
Подробности в разделе <A HREF="#tag-method">4.4.8</A>, там есть описания этих
функций (<CODE>getglobal</CODE> находится в базисной библиотеке).

<P>Нетерминальный <EM>exp1</EM> используется, чтобы указать, что значения,
возвращенные выражением должны быть откорректированы к одному значению:
<PRE>
exp1 ::= exp
</PRE>

<H3>4.4.5.2 Арифметические операторы</H3>
Lua поддерживает комплект обычных арифметических операторов: двоичный
<CODE>+</CODE> (сложение), <CODE>-</CODE> (вычитание), <CODE>*</CODE>
(умножение), <CODE>/</CODE> (деление), <CODE>^</CODE> (возведение в степень),
а также унарный <CODE>-</CODE> (обращение знака числа). Если операнды числа
или строки, которые могут быть преобразованы в числа, (согласно правилам,
данным в разделе <A HREF="#coercion">4.4.2</A>), то все операции за
исключением возведения в степень имеют обычное значение. Иначе будет вызван
соответствующий метод тэга. Возведение в степень всегда вызывает метод тэга.
Стандартная математическая библиотека переопределяет этот метод для чисел,
давая ожидаемое значение (подробности в разделе <A HREF="#mathlib">4.6.3</A>).

<H3>4.4.5.3 Реляционные операторы</H3>
<A NAME="relational operators">Реляционные операторы</A> в Lua:
<PRE>
==    ~=    &lt;     &gt;     &lt;=    &gt;=
</PRE>
Эти операторы возвращают <B>nil</B> как ложь, или любое другое значение (но
не <B>nil</B>) в качестве истины.

<P>Равенство (<CODE>==</CODE>) сначала сравнивает тэги операндов. Если они
различны, то результатом будет <B>nil</B>. Иначе сравниваются их значения.
Числа и строки сравниваются обычным способом. Таблицы, userdata, и функции
сравниваются как ссылки, то есть две таблицы рассматриваются равными только,
если они реально та же самая таблица. Оператор <CODE>~=</CODE> прямо
противоположен оператору равенства (<CODE>==</CODE>).

<P>Правила преобразования из раздела <A HREF="#coercion">4.4.2</A>
<EM>НЕ</EM> применяются к сравнениям равенства. Таким образом,
<CODE>"0"==0</CODE> вернет <EM>false</EM>, а <CODE>t[0]</CODE> и
<CODE>t["0"]</CODE> обозначают различные записи в таблице.

<P>Операторы порядка работают следующим образом. Если оба параметра числа, то
они сравниваются также. Иначе, если оба параметра строки, то их значения
сравниваются, используя лексикографический порядок. Во всех остальных
ситуациях будет вызван метод lt тэга (подробности в разделе
<A HREF="#tag-method">4.4.8</A>).

<H3>4.4.5.4 Логические операторы</H3>
<A NAME="logical operators">Логические операторы</A> в Lua:
<A NAME="and"></A><A NAME="or"></A><A NAME="not"></A>
<PRE>
and   or   not
</PRE>
Подобно структурам управления, все логические операторы рассматривают
<B>nil</B> как false (ложь), а все остальное как истину (true).

<P>Оператор конъюнкции <CODE>and</CODE> вернет <B>nil</B>, если первый
параметр <B>nil</B>, иначе это возвращает второй параметр. Оператор
дизъюнкции <CODE>or</CODE> вернет первый параметр, если он отличается от
<B>nil</B>, в противном случае это возвращает второй параметр. Операторы
<CODE>and</CODE> и <CODE>or</CODE> используют <A NAME="short-cut evaluation">
краткое вычисление</A>, то есть второй операнд оценен только в случае
необходимости. Имеются две полезных идиомы в Lua, которые используют
логические операторы. Первая идиома:
<PRE>
x = x or v
</PRE>
Которая является эквивалентной:
<PRE>
if x == nil then x = v end
</PRE>
Эта идиома устанавливает <CODE>x</CODE> к значению по умолчанию
<CODE>v</CODE>, когда <CODE>x</CODE> не установлен.

<P>Вторая идиома такая:
<PRE>
x = a and b or c
</PRE>
Которая должна читаться как <CODE>x=(a and b) or c</CODE>.
Эта идиома эквивалентна:
<PRE>
if a then x = b else x = c end
</PRE>
При условии, что <CODE>b</CODE> не <B>nil</B>.

<A NAME="concat"></A><H3>4.4.5.5 Объединения</H3>
Оператор <A NAME="concatenation">объединения</A> строк в Lua обозначен двумя
точками (`<A NAME=".."><TT>..</TT></A>'). Если оба операнда строки или числа,
они будут преобразованы в строки согласно правилам в разделе
<A HREF="#coercion">4.2</A>. Иначе будет вызван метод concat тэга.

<H3>4.4.5.6 Старшинство</H3>
Порядок <A NAME="Operator precedence">старшинства</A> в Lua следует из
таблицы ниже. Операторы в ней перечислены в порядке от низкого к
более высокому приоритету:
<PRE>
and   or
&lt;     &gt;     &lt;=    &gt;=    ~=    ==
..
+     -
*     /
not   - (unary)
^
</PRE>
Все двоичные операторы ассоциативны слева, кроме возведения в степень,
который является ассоциативным справа. Прекомпилятор может перестраивать
порядок оценки ассоциативных операторов (типа <CODE>..</CODE> или
<CODE>+</CODE>), пока эти оптимизация не изменяют нормальные результаты.
Однако, эти оптимизация могут изменять некоторые результаты, если Вы
определяете не ассоциативные методы тэгов для этих операторов.

<A NAME="tableconstructor"></A><H3>4.4.5.7 Конструкторы таблиц</H3>
<A NAME="constructors">Конструкторы</A> таблиц представляют собой выражения,
которые создают таблицы: каждый раз конструктор оценен, и новая таблица
создана. Конструкторы могут использоваться, чтобы создать пустые таблицы или
создать таблицу и инициализировать некоторые из полей (необязательно все).
Общий синтаксис для конструкторов:
<PRE>
tableconstructor ::= `{' fieldlist `}'
fieldlist ::= lfieldlist|ffieldlist|lfieldlist `;'
              ffieldlist|ffieldlist `;' lfieldlist
lfieldlist ::= [lfieldlist1]
ffieldlist ::= [ffieldlist1]
</PRE>

<P>Форма <EM>lfieldlist1</EM> используется, чтобы инициализировать списки:
<PRE>
lfieldlist1 ::= exp {`<B>,</B>' exp} [`<B>,</B>']
</PRE>
Выражения в списке назначены последовательным числовым индексам, начиная с 1
(но не с 0!). Например, код:
<PRE>
a = {"v1", "v2", 34}
</PRE>
является эквивалентным коду:
<PRE>
do
  local temp = {}
  temp[1] = "v1"
  temp[2] = "v2"
  temp[3] = 34
  a = temp
end
</PRE>

<P>Форма <EM>ffieldlist1</EM> инициализирует другие поля в таблице:
<PRE>
ffieldlist1 ::= ffield {`,' ffield} [`,']
ffield ::= `[' exp `]' `=' exp | name `=' exp
</PRE>
Например такая запись:
<PRE>
a = {[f(k)] = g(y), x = 1, y = 3, [0] = b+c}
</PRE>
эквивалентна такому коду:
<PRE>
do
  local temp = {}
  temp[f(k)] = g(y)
  temp.x = 1    -- or temp["x"] = 1
  temp.y = 3    -- or temp["y"] = 3
  temp[0] = b+c
  a = temp
end
</PRE>
Выражения, подобные <CODE>{x=1, y=4}</CODE> фактически синтаксический
аналог для выражения вида <CODE>{["x"]=1, ["y"]=4}</CODE>.

<P>Обе формы могут иметь факультативную конечную запятую и могут
использоваться в том же самом конструкторе, разделенные точкой с запятой.
Например, все формы ниже правильны:
<PRE>
x = {;}
x = {"a", "b",}
x = {type="list"; "a", "b"}
x = {f(0), f(1), f(2),; n=3,}
</PRE>

<A NAME="functioncall"></A><H3>4.4.5.8 Вызовы функций</H3>
<A NAME="function call">Вызовы функций</A> в Lua имеют синтаксис:
<PRE>
functioncall ::= varorfunc args
</PRE>
Сначала вычисляется <EM>varorfunc</EM>. Если значение имеет тип
<EM>function</EM>, то эта функция будет вызвана с данными параметрами. Иначе
вызывается метод function тэга, имея первым параметром значение
<EM>varorfunc</EM> с перечисленными затем первоначальными параметрами
обращения. Подробности в разделе <A HREF="#tag-method">4.4.8</A>.

<P>Форма
<PRE>
functioncall ::= varorfunc `:' name args
</PRE>
Может использоваться, чтобы вызвать methods. Обращение
<CODE>v:name(...)</CODE> синтаксически аналогично
<CODE>v.name(v, ...)</CODE>, за исключением того, что <CODE>v</CODE> будет
оценен только однажды. Параметры имеют следующий синтаксис:
<PRE>
args ::= `(' [explist1] `)'
args ::= tableconstructor
args ::= literal
explist1 ::= {exp1 `,'} exp
</PRE>
Все выражения параметра оценены перед обращением. Обращение в форме
<CODE>f{...}</CODE> синтаксически аналогично <CODE>f({...})</CODE>, то есть
список параметров представляет собой одиночную новую таблицу. Обращение в
форме <CODE>f'...'</CODE> (<CODE>f"..."</CODE> или <CODE>f[[...]]</CODE>)
синтаксически аналогично <CODE>f('...')</CODE>, то есть список параметров
представляет собой одиночную строку литералов.

<P>Потому, что функция может возвращать любое число результатов, число
результатов должно быть откорректировано прежде, чем они используются. Если
функция вызвана как инструкция, то список возврата откорректирован к 0, таким
образом отбрасывая все возвращенные значения. Если функция вызвана в месте,
которое нуждается в одиночном значении (синтаксически обозначенном
нетерминальным <EM>exp1</EM>), то список возврата откорректирован к 1, таким
образом отбрасывая все возвращенные значения, но не первый. Если функция
вызвана в месте, которое может использовать много значений (синтаксически
обозначено нетерминальным <EM>exp</EM>), то никакая корректировка не будет
сделана. Единственные места, которые могут обрабатывать много значений, это
последние (или единственные) выражения в присваивании, в списке параметров
или в инструкции <B>return</B>. Имеются примеры:
<PRE>
f()                -- 0 результатов
g(f(), x)          -- f() 1 результат
g(x, f())          -- g получает x и все значения, возвращенные f()
a,b,c = f(), x     -- f() скорректирован к 1 результату (и c получает nil)
a,b,c = x, f()     -- f() 2 результата
a,b,c = f()        -- f() 3 результата
return f()         -- возвращает все значения, возвращенные f()
return x,y,f()     -- вернет a, b и все, что вернет f()
</PRE>

<A NAME="func-def"></A><H3>4.4.5.9 <A NAME="Function Definitions">
Определение функций</A></H3>
<P>Синтаксис для определения функций такой:
<PRE>
function ::= function `(' [parlist1] `)' block end
stat ::= function funcname `(' [parlist1] `)' block end
funcname ::= name | name `.' name | name `:' name
</PRE>
Инструкция
<PRE>
function f () ... end
</PRE>
является только синтаксическим аналогом для
<PRE>
f = function () ... end
</PRE>
а инструкция
<PRE>
function v.f () ... end
</PRE>
является синтаксическим аналогом для
<PRE>
v.f = function () ... end
</PRE>

<P>Функциональное определение представляет собой выполнимое выражение, чье
значение имеет тип <EM>function</EM>. Когда Lua прекомпилирует chunk, все
функциональные тела также прекомпилируются. Затем, всякий раз, когда Lua
выполняет функциональное определение верхние переменные (upvalues)
фиксируются, и функция выполняется. Этот функциональный образец (или
<EM>замкнутое выражение</EM>) представляет собой конечное значение выражения.
Различные образцы той же самой функции могут иметь
различные верхние переменные.

<P>Параметры действуют как локальные переменные, инициализированные
со значениями параметра:
<PRE>
parlist1 ::= `...'
parlist1 ::= name {`,' name} [`,' `...']
</PRE>

<A NAME="vararg"></A>Когда функция вызвана, список параметров будет
откорректирован к длине списка параметров, если функция не
<A NAME="vararg function"><EM>vararg-функция</EM></A>, которая обозначена
тремя точками (`<CODE>...</CODE>') в конце списка параметра. Функция vararg
не корректирует список параметров, вместо этого она собирает все лишние
параметры в неявный параметр, названный <A NAME="arg"><TT>arg</TT></A>.
Значением <CODE>arg</CODE> является таблицы из <CODE>n</CODE> полей, чьим
значением является число параметров дополнительного пространства и сами эти
параметры, перечисленные в полях 1, 2, ..., <CODE>n</CODE>.

<P>Как пример, рассмотрите следующие определения:
<PRE>
function f(a, b) end
function g(a, b, ...) end
function r() return 1,2,3 end
</PRE>
Имеем следующее отображение параметров:
<PRE>
ВЫЗОВ            ПАРАМЕТРЫ

f(3)             a=3, b=nil
f(3, 4)          a=3, b=4
f(3, 4, 5)       a=3, b=4
f(r(), 10)       a=1, b=10
f(r())           a=1, b=2
g(3)             a=3, b=nil, arg={n=0}
g(3, 4)          a=3, b=4, arg={n=0}
g(3, 4, 5, 8)    a=3, b=4, arg={5, 8; n=2}
g(5, r())        a=5, b=1, arg={2, 3; n=2}
</PRE>

<P>Результаты возвращены, используя инструкцию <B>return</B>. Если управление
достигает конца функции без того, чтобы столкнуться с инструкцией
<B>return</B>, то функция будет завершена без результатов.

<P>Синтаксис
<PRE>
funcname ::= name `:' name
</PRE>
<A NAME="methods"></A>используется для определения <EM>методов</EM>, то есть
функции, которые имеют неявный дополнительный параметр <TT>self</TT>
<A NAME="self"></A>.

<P>Инструкция
<PRE>
function v:f (...) ... end
</PRE>
является только синтаксическим аналогом для
<PRE>
v.f = function (self, ...) ... end
</PRE>
Обратите внимание, что функция получает дополнительный формальный параметр
<CODE>self</CODE>.

<A NAME="upvalue"></A><A NAME="4.6"></A><H2>4.4.6 Зона видимости и Upvalues
</H2>
<A NAME="visibility"></A><A NAME="upvalues"></A>
<P>Функциональное тело может обратиться к собственным локальным переменным
(которые включают и параметры), а также к глобальным переменным, пока они не
затенены локальными переменными с тем же самым именем. Функция <EM>не
может</EM> обращаться к локальной переменной из функции включения, так как
такие переменные больше не могут существовать, когда функция вызвана. Однако,
функция может обращаться к значению локальной переменной из функции
включения, используя upvalues, чей синтаксис:
<PRE>
upvalue ::= `%' name
</PRE>

<P>upvalue подобен переменному выражению, но его значение закрепляется,
когда функция, в которой он появляется запускается. Имя, используемое в
upvalue, может быть именем любой переменной, видимой в том месте, где функция
определена, то есть пригодны глобальные переменные и локальные переменные.
Обратите внимание, что, когда upvalue таблица, только <EM>ссылка</EM> на эту
таблицу (которая и является значением upvalue) закрепляется, а содержание
самой таблицы может быть изменено по желанию. Использование значений таблицы
как upvalues представляет собой методику для наличия перезаписываемого но
частного состояния, приложенного к функциям.

<P>Имеются некоторые примеры:
<PRE>
a,b,c = 1,2,3   -- глобальные переменные
local d
function f (x)
  local b = {}  -- x и b локальны для f, b затеняет глобальную b
  local g = function (a)
    local y     -- a и y локальны для g
    p = a       -- OK, доступ к локальной a
    p = c       -- OK, доступ к глобальной c
    p = b       -- ERROR: невозможен доступ к переменной вне зоны видимости
    p = %b      -- OK, доступ к замороженной b (локальная f)
    %b = 3      -- ERROR: нельзя менять upvalue
    %b.x = 3    -- OK, изменение содержимого таблицы
    p = %c      -- OK, доступ к замороженному значению глобальной c
    p = %y      -- ERROR: `y' невидима, где `g' определена
    p = %d      -- ERROR: `d' невидима, где `g' определена
  end           -- g
end             -- f
</PRE>

<A NAME="error"></A><A NAME="4.7"></A><H2>4.4.7 Обработка ошибок</H2>
<P>Поскольку Lua язык расширений, все действия Lua начинаются из
C-кода в ведущей программе, вызывающей функцию из Lua-библиотеки. Всякий раз,
когда ошибка происходит в течение Lua-трансляции или выполнения, вызывается
функция <CODE>_ERRORMESSAGE</CODE> <A NAME="_ERRORMESSAGE"></A> и затем
соответствующая функция из библиотеки (<CODE>lua_dofile</CODE>,
<CODE>lua_dostring</CODE>, <CODE>lua_dobuffer</CODE> или
<CODE>lua_call</CODE>) завершена, возвращая условие ошибки.

<P>Ошибки распределения памяти представляют собой исключительную ситуацию из
предыдущего правила. Когда происходит сбой распределения памяти, Lua не может
выполнить функцию <CODE>_ERRORMESSAGE</CODE>. Так что, для этого вида ошибки,
Lua не вызывает функцию <CODE>_ERRORMESSAGE</CODE>. Вместо этого
соответствующая функция из библиотеки немедленно завершится со специальным
кодом ошибки (<CODE>LUA_ERRMEM</CODE>). Это и другие коды ошибки определено в
заголовочном файле <CODE>lua.h</CODE>, подробности в разделе
<A HREF="#luado">4.5.8</A>.

<P>Единственный параметр <CODE>_ERRORMESSAGE</CODE>: строка, описывающая
ошибку. Заданное по умолчанию определение для этого: обращение к функции
<A NAME="_ALERT"></A><CODE>_ALERT</CODE>, которая печатает сообщение на
<CODE>stderr</CODE>. Стандартная библиотека ввода-вывода переопределяет
<CODE>_ERRORMESSAGE</CODE> и использует средства отладки, чтобы печатать
некоторую дополнительную информацию, типа расположения обращений в стеке.

<P>Lua-код может явно генерировать ошибку, вызывая функцию
<CODE>error</CODE> (подробности в разделе <A HREF="#pdf-error">4.6.1</A>).
Lua-код может перехватить ошибку, используя обращение к функции
<CODE>call</CODE> (подробности в разделе <A HREF="#pdf-call">4.6.1</A>).

<A NAME="tag-method"></A><A NAME="4.8"></A><H2>4.4.8 Методы тэгов</H2>
<P>Lua обеспечивает мощный механизм, чтобы расширить семантику, названный
<EM>методами тэгов</EM>. Это определенная программистом функция, которая
вызвана в специфических точках в течение выполнения программы Lua, позволяя
программисту изменить стандартное поведение Lua в этих точках. Каждая из этих
точек названа событием (<A NAME="event"><EM>event</EM></A>).

<P>Метод тэга для некоего специфического события выбран согласно тэгу
значения. Функция <A NAME="settagmethod"><TT>settagmethod</TT></A> изменяет
метод тэга, связанный с данной парой <EM>(tag, event)</EM>. Первый параметр
представляет собой тэг, второй строку (имя события), а третий параметр
(функция) задает новый метод или <B>nil</B>, чтобы восстановить заданное по
умолчанию поведение для пары. Функция <CODE>settagmethod</CODE> возвращает
предыдущий метод тэга для этой пары. Функция-компаньон
<A NAME="gettagmethod"><TT>gettagmethod</TT></A> получает тэг и имя события и
возвращает текущий метод, связанный с парой.

<P>Методы тэгов вызваны при соответствующих событиях, которые
идентифицированы данными именами. Семантика методов лучше объяснена функцией
Lua, описывающей поведение интерпретатора в каждом событии. Эта функция не
только показывает, когда метод вызван, но также параметры, результаты и
заданное по умолчанию поведение. Код, показанный здесь, только иллюстративен:
реальное поведение сложно закодировано в интерпретаторе и намного более
эффективно, чем это моделирование. Все функции, используемые в этих
описаниях (<CODE>rawget</CODE>, <CODE>tonumber</CODE>, <CODE>call</CODE> и
т.д.), описаны подробно в разделе <A HREF="#predefined">4.6.1</A>.

<P><DL><DT><B>``add'':</B>
<DD><A NAME="add event"></A>Вызван, когда операция <CODE>+</CODE> применяется
к не числовым операндам.

<P>Функция <CODE>getbinmethod</CODE> ниже определяет, как Lua выбирает метод
для двоичной операции. Сначала Lua пробует первый операнд. Если тэг не
определяет метод для операции, то Lua пробует второй операнд. Если это также
терпит неудачу, то Lua получает метод из тэга 0.
<PRE>
function getbinmethod (op1, op2, event)
  return gettagmethod(tag(op1), event) or
         gettagmethod(tag(op2), event) or gettagmethod(0, event)
end
</PRE>
При использовании этой функции, метод события ``add'' такой:
<PRE>
function add_event (op1, op2)
  local o1, o2 = tonumber(op1), tonumber(op2)
  if o1 and o2 then  -- both operands are numeric
     return o1+o2  -- '+' here is the primitive 'add'
  else  -- at least one of the operands is not numeric
    local tm = getbinmethod(op1, op2, "add")
    if tm then
      -- call the method with both operands and an extra
      -- argument with the event name
      return tm(op1, op2, "add")
    else  -- no tag method available: default behavior
      error("unexpected type at arithmetic operation")
    end
  end
end
</PRE>

<P><DT><B>``sub'':</B>
<DD><A NAME="sub event"></A>Вызван, когда операция <CODE>-</CODE> применяется
к не числовым операндам. Поведение подобно событию ``add''.

<P><DT><B>``mul'':</B>
<DD><A NAME="mul event"></A>Вызван, когда операция <CODE>*</CODE> применяется
к не числовым операндам. Поведение подобно событию ``add''.

<P><DT><B>``div'':</B>
<DD><A NAME="div event"></A>Вызван, когда операция <CODE>/</CODE> применяется
к не числовым операндам. Поведение подобно событию ``add''.

<P><DT><B>``pow'':</B>
<DD><A NAME="pow event"></A>Вызван, когда операция <CODE>^</CODE> (возведение
в степень) применяется к числовым операндам.
<PRE>
function pow_event (op1, op2)
  local tm = getbinmethod(op1, op2, "pow")
  if tm then
    -- call the method with both operands and an extra
    -- argument with the event name
    return tm(op1, op2, "pow")
  else  -- no tag method available: default behavior
    error("unexpected type at arithmetic operation")
  end
end
</PRE>

<P><DT><B>``unm'':</B>
<DD><A NAME="unm event"></A>Вызван, когда одноместная операция <CODE>-</CODE>
применяется к не числовому операнду.
<PRE>
function unm_event (op)
  local o = tonumber(op)
  if o then  -- operand is numeric
    return -o  -- '-' here is the primitive 'unm'
  else  -- the operand is not numeric.
    -- Try to get a tag method from the operand;
    --  if it does not have one, try a "global" one (tag 0)
    local tm = gettagmethod(tag(op), "unm") or
               gettagmethod(0, "unm")
    if tm then
      -- call the method with the operand, nil, and an extra
      -- argument with the event name
      return tm(op, nil, "unm")
    else  -- no tag method available: default behavior
      error("unexpected type at arithmetic operation")
    end
  end
end
</PRE>

<P><DT><B>``lt'':</B>
<DD><A NAME="lt event"></A>Вызван, когда операция порядка применяется к не
числовому или не строчному операнду. Это соответствует оператору
<CODE>&lt;</CODE>.
<PRE>
function lt_event (op1, op2)
  if type(op1) == "number" and type(op2) == "number" then
     return op1 &lt; op2   -- numeric comparison
  elseif type(op1) == "string" and type(op2) == "string" then
    return op1 &lt; op2   -- lexicographic comparison
  else local tm = getbinmethod(op1, op2, "lt")
    if tm then return tm(op1, op2, "lt")
    else error("unexpected type at comparison");
    end
  end
end
</PRE>
Другие операторы порядка используют этот метод
согласно обычным эквивалентностям:
<PRE>
a&gt;b    &lt;=&gt;  b&lt;a
a&lt;=b   &lt;=&gt;  not (b&lt;a)
a&gt;=b   &lt;=&gt;  not (a&lt;b)
</PRE>

<DT><B>``concat'':</B>
<DD><A NAME="concatenation event"></A>Вызван, когда конкатенация применяется
к не строчным операндам.
<PRE>
function concat_event (op1, op2)
  if (type(op1) == "string" or type(op1) == "number") and
     (type(op2) == "string" or type(op2) == "number") then
     return op1..op2  -- primitive string concatenation
  else local tm = getbinmethod(op1, op2, "concat")
    if tm then return tm(op1, op2, "concat")
    else error("unexpected type for concatenation")
    end
  end
end
</PRE>

<P><DT><B>``index'':</B>
<DD><A NAME="index event"></A>Вызван, когда Lua пробует найти значение
индекса, не представленного в таблице.

<P><DT><B>``getglobal'':</B>
<DD><A NAME="getglobal event"></A>Вызван всякий раз, когда Lua нуждается в
значении глобальной переменной. Этот метод может быть установлен только для
<B>nil</B> и для тэгов, порожденных вызовом <CODE>newtag</CODE>. Обратите
внимание, что тэг представляет собой <EM>текущее
значение</EM> глобальной переменной.
<PRE>
function getglobal (varname)
  -- access the table of globals
  local value = rawget(globals(), varname)
  local tm = gettagmethod(tag(value), "getglobal")
  if not tm then return value
  else return tm(varname, value)
  end
end
</PRE>
Функция <CODE>getglobal</CODE> определена в базисной библиотеке.

<DT><B>``setglobal'':</B>
<DD><A NAME="setglobal event"></A>Вызван всякий раз, когда Lua присваивает
значение глобальной переменной. Этот метод не может быть установлен для
чисел, строк, таблиц и userdata с заданным по умолчанию тэгом.
<PRE>
function setglobal (varname, newvalue)
  local oldvalue = rawget(globals(), varname)
  local tm = gettagmethod(tag(oldvalue), "setglobal")
  if not tm then rawset(globals(), varname, newvalue)
  else tm(varname, oldvalue, newvalue)
  end
end
</PRE>
Функция <CODE>setglobal</CODE> определена в базисной библиотеке.

<P><DT><B>``gettable'':</B>
<DD><A NAME="gettable event"></A>Вызван всякий раз, когда Lua обращается к
индексированной переменной. Этот метод не может быть установлен для таблиц с
заданным по умолчанию тэгом.
<PRE>
function gettable_event (table, index)
  local tm = gettagmethod(tag(table), "gettable")
  if tm then return tm(table, index)
  elseif type(table) ~= "table" then
    error("indexed expression not a table");
  else local v = rawget(table, index)
    tm = gettagmethod(tag(table), "index")
    if v == nil and tm then return tm(table, index)
    else return v
    end
  end
end
</PRE>

<P><DT><B>``settable'':</B>
<DD><A NAME="settable event"></A>Вызван, когда Lua присваивает значение
индексированной переменной. Этот метод не может быть установлен для таблиц с
заданным по умолчанию тэгом.
<PRE>
function settable_event (table, index, value)
  local tm = gettagmethod(tag(table), "settable")
  if tm then tm(table, index, value)
  elseif type(table) ~= "table" then error("indexed expression not a table")
  else rawset(table, index, value)
  end
end
</PRE>

<P><DT><B>``function'':</B>
<DD><A NAME="function event"></A>Вызван, когда Lua пробует вызывать
не функциональное значение.
<PRE>
function function_event (func, ...)
  if type(func) == "function" then return call(func, arg)
  else local tm = gettagmethod(tag(func), "function")
    if tm then for i=arg.n,1,-1 do arg[i+1] = arg[i]
      end
      arg.n = arg.n+1
      arg[1] = func
      return call(tm, arg)
    else error("call expression not a function")
    end
  end
end
</PRE>

<P><DT><B>``gc'':</B>
<DD><A NAME="gc event"></A>Вызван, когда Lua начинает уборку мусора в
userdata. Этот метод может быть установлен только из C, и не может быть
установлен для userdata с заданным по умолчанию тэгом. Для каждого объекта
userdata, который будет собран, Lua делает эквивалент следующей функции в
цикле уборки мусора:
<PRE>
function gc_event (obj)
  local tm = gettagmethod(tag(obj), "gc")
  if tm then tm(obj)
  end
end
</PRE>
В цикле уборки мусора методы тэгов для userdata вызываются в порядке,
<EM>обратном</EM> созданию тэгов, то есть первые методы, которые будут
вызваны, связаны с последним тэгом, созданным в программе. Кроме того, в
конце цикла Lua делает эквивалент обращения <CODE>gc_event(nil)</CODE>.</DL>

<A NAME="5."></A><H1>4.5 API</H1>
<A NAME="C API"></A>Этот раздел описывает API для Lua, то есть набор функций
C, доступных ведущей программе, чтобы связаться с Lua. Все функции API,
связанные типы и константы объявлены в файле заголовка <CODE>lua.h</CODE>.

<P>Даже когда используем термин "функция", любое средство в API можно
обеспечить как <EM>макрокоманду</EM>. Все такие макрокоманды используют
каждый из параметров точно однажды и не генерируют скрытые побочные эффекты.

<A NAME="mangstate"></A><A NAME="5.1"></A><H2>4.5.1 Состояния</H2>
<P>Библиотека Lua полностью повторно используема: она не имеет никаких
глобальных переменных. Все состояние интерпретатора Lua (глобальные
переменные, стек, методы тэгов и т.д.) сохранено в динамически распределенной
структуре типа <A NAME="state"></A><A NAME="lua_State"></A>
<CODE>lua_State</CODE>. Это состояние должно быть передано как первый
параметр каждой функции в библиотеке (за исключением <CODE>lua_open</CODE>).

<P>Перед вызовом любой функции API, Вы должны создать состояние вызовом:
<A NAME="lua_open"></A>
<PRE>
lua_State *lua_open (int stacksize);
</PRE>
Единственный параметр этой функции: размер стека для интерпретатора. Каждое
обращение к функции нуждается в одной позиции стека для каждого параметра,
локальной переменной и временного значения, плюс по одной позиция для
бухгалтерии. Стек должен также иметь приблизительно 20 позиций
дополнительного пространства доступными. Для очень маленьких реализаций, без
применения рекурсивных функций, размер стека в 100 должен быть достаточным.
Если параметр <CODE>stacksize</CODE> равен 0, то используется заданный
по умолчанию размер в 1024.

<P>Чтобы освободить состояние, созданное <CODE>lua_open</CODE>, вызовите:
<A NAME="lua_close"></A>
<PRE>
void lua_close (lua_State *L);
</PRE>

Эта функция уничтожает все объекты в данной среде Lua (вызывая
соответствующие методы тэгов для уборки мусора, если они есть) и освобождает
всю динамическую память, используемую этим состоянием. Обычно Вы не должны
вызвать эту функцию потому, что все ресурсы естественно освобождены, когда
Ваша программа заканчивается. С другой стороны, долго работающие программы
должны бы освобождать ресурсы как только они становятся ненужными, чтобы не
становиться слишком большими.

<P>За исключением <CODE>lua_open</CODE> все функции в Lua API нуждаются в
состоянии как в первом параметре.

<A NAME="5.2"></A><H2>4.5.2 Стек и индексы</H2>
<P>Lua использует стек (<EM>stack</EM>), чтобы передавать значения в и из C.
Каждый элемент в этом стеке представляет значение Lua (nil, число, строка).

<P>Для удобства большинство операций запроса в API не следует за строгой
дисциплиной стека. Вместо этого они могут обратиться к любому элементу в
стеке, используя индекс: положительный индекс представляет абсолютную позицию
стека (начиная с 1, а не с 0, как в C). Отрицательный индекс представляет
смещение от верхней части стека. Более определенно, если стек имеет
<EM>n</EM> элементов, индекс 1 представляет первый элемент (то есть, первый
элемент, помещенный в стек), а индекс <EM>n</EM> представляет последний
элемент. Индекс <I>-1</I> также представляет последний элемент (то есть,
элемент наверху), и индекс <I>-n</I> представляет первый элемент. Мы говорим,
что индекс имеет силу, если он находится между 1 и верхней частью стека (то
есть, если <CODE>1 &lt;= abs(index) &lt;= top</CODE>).
<A NAME="stack index"></A><A NAME="valid index"></A>

<P>В любое время Вы можете получать индекс верхнего элемента вызовом:
<A NAME="lua_gettop"></A>
<PRE>
int lua_gettop (lua_State *L);
</PRE>
Потому, что начало индексов в 1, результат <CODE>lua_gettop</CODE> равно
числу элементов в стеке (0 стало быть означает пустой стек).

<P>Когда Вы взаимодействуете с Lua API, Вы ответственны за контроль
переполнения стека. Функция <A NAME="lua_stackspace"></A>
<PRE>
int lua_stackspace (lua_State *L);
</PRE>
возвращает число доступных позиций стека. Всякий раз, когда Lua вызывается C,
это гарантирует, что по крайней мере <CODE>LUA_MINSTACK</CODE> позиций все
еще доступны. <CODE>LUA_MINSTACK</CODE> определен в файле заголовка
<CODE>lua.h</CODE> и по крайней мере 16, так что Вы должны позаботиться о
месте в стеке только, когда Ваш код имеет циклы, помещающие элементы в стек.

<P>Большинство функций запроса принимает как индексы любое значение внутри
доступного места в стеке. Такие индексы названы <EM>приемлемыми индексами
</EM>. Более формально можно определять приемлемый индекс таким образом:
<A NAME="acceptable index">
<PRE>
(index &lt; 0 &amp;&amp; abs(index) &lt;= top) ||
(index &gt; 0 &amp;&amp; index &lt;= top + stackspace)
</PRE>
Обратите внимание, что 0 не является приемлемым индексом.

<A NAME="5.3"></A><H2>4.5.3 Манипуляции со стеком</H2>
API предлагает следующие функции для базисного манипулирования стеком:
<A NAME="lua_settop"></A><A NAME="lua_pushvalue"></A>
<A NAME="lua_remove"></A><A NAME="lua_insert"></A>
<PRE>
void lua_settop(lua_State *L, int index);
void lua_pushvalue(lua_State *L, int index);
void lua_remove(lua_State *L, int index);
void lua_insert(lua_State *L, int index);
</PRE>

<P><CODE>lua_settop</CODE> принимает любые приемлемые индексы или 0 и
устанавливает верхнюю часть стека к этому индексу. Если новая верхняя часть
больше, чем старая, то новые элементы заполнены <B>nil</B>. Если
<CODE>index</CODE> равен 0, то все элементы из стека будут удалены. Полезная
макрокоманда, определенная в API:
<PRE>
#define lua_pop(L,n) lua_settop(L, -(n)-1)
</PRE>
выталкивает <CODE>n</CODE> элементов из стека.

<P><CODE>lua_pushvalue</CODE> помещает в стек <EM>копию</EM> элемента в
данном индексе. <CODE>lua_remove</CODE> удаляет элемент в данной позиции,
сдвигая элементы вверх от этой позиции, чтобы заполнить промежуток.
<CODE>lua_insert</CODE> перемещает верхний элемент в данную позицию, сдвигая
элементы вверх от позиции на открытое место. Эти функции принимают только
имеющие силу индексы. Как пример, если стек хранит значения (снизу вверх)
<CODE>10 20 30 40 50</CODE>:
<PRE>
lua_pushvalue(L, 3)  --&gt; 10 20 30 40 50 30
lua_pushvalue(L, -1) --&gt; 10 20 30 40 50 30 30
lua_remove(L, -3)    --&gt; 10 20 30 40 30 30
lua_remove(L,  6)    --&gt; 10 20 30 40 30
lua_insert(L,  1)    --&gt; 30 10 20 30 40
lua_insert(L, -1)    --&gt; 30 10 20 30 40  (никакого эффекта нет)
lua_settop(L, -3)    --&gt; 30 10 20
lua_settop(L, 6)     --&gt; 30 10 20 nil nil nil
</PRE>

<A NAME="5.4"></A><H2>4.5.4 Запросы к стеку</H2>
<P>Чтобы проверять тип элемента стека, следующие функции доступны:
<A NAME="lua_type"></A><A NAME="lua_tag"></A>
<A NAME="lua_isnil"></A><A NAME="lua_isnumber"></A>
<A NAME="lua_isstring"></A><A NAME="lua_istable"></A>
<A NAME="lua_isfunction"></A><A NAME="lua_iscfunction"></A>
<A NAME="lua_isuserdata"></A>
<PRE>
int lua_type(lua_State *L, int index);
int lua_tag(lua_State *L, int index);
int lua_isnil(lua_State *L, int index);
int lua_isnumber(lua_State *L, int index);
int lua_isstring(lua_State *L, int index);
int lua_istable(lua_State *L, int index);
int lua_isfunction(lua_State *L, int index);
int lua_iscfunction(lua_State *L, int index);
int lua_isuserdata(lua_State *L, int index);
</PRE>
Эти функции могут быть вызваны с любым приемлемым индексом.

<P><CODE>lua_type</CODE> возвращает одну из следующих констант, согласно типу
данного объекта: <CODE>LUA_TNIL</CODE>, <CODE>LUA_TNUMBER</CODE>,
<CODE>LUA_TSTRING</CODE>, <CODE>LUA_TTABLE</CODE>,
<CODE>LUA_TFUNCTION</CODE>, <CODE>LUA_TUSERDATA</CODE>. Если индекс не имеет
силу (то есть, если та позиция стека пуста), то <CODE>lua_type</CODE>
возвращает <CODE>LUA_TNONE</CODE>. Эти константы могут быть преобразованы в
строки с помощью вызова:<A NAME="lua_typename"></A>
<PRE>
const char *lua_typename(lua_State *L, int t);
</PRE>
здесь <CODE>t</CODE> представляет собой тип, возвращенный
<CODE>lua_type</CODE>. Строки, возвращаемые <CODE>lua_typename</CODE>:
<CODE>"nil"</CODE>, <CODE>"number"</CODE>, <CODE>"string"</CODE>,
<CODE>"table"</CODE>, <CODE>"function"</CODE>, <CODE>"userdata"</CODE> и
<CODE>"no value"</CODE>,

<P><CODE>lua_tag</CODE> возвращает тэг значения или <CODE>LUA_NOTAG</CODE>
для не имеющего силу индекса.

<P>Функция <CODE>lua_is*</CODE> возвращает 1, если объект совместим с данным
типом, и 0 в противном случае. Всегда возвращается 0 для не имеющего силу
индекса. <CODE>lua_isnumber</CODE> принимает числа и числовые строки.
<CODE>lua_isstring</CODE> берет строки и числа и <CODE>lua_isfunction</CODE>
воспринимает функции Lua и C. Чтобы различать между функциями Lua и функциями
C, Вы должны использовать <CODE>lua_iscfunction</CODE>. Чтобы различать между
числами и числовыми строками, Вы можете использовать <CODE>lua_type</CODE>.

<P>API также имеет функции, чтобы сравнить два значения в стеке:
<A NAME="lua_equal"></A><A NAME="lua_lessthan"></A>
<PRE>
int lua_equal(lua_State *L, int index1, int index2);
int lua_lessthan(lua_State *L, int index1, int index2);
</PRE>
Эти функции эквивалентны их дубликатам в Lua. Определенно,
<CODE>lua_lessthan</CODE> эквивалентна <CODE>lt_event</CODE>. Обе функции
возвращают 0, если любой из индексов не имеет силу.

<P>Чтобы транслировать значение в стеке к специфическому типу C, Вы можете
использовать следующие функции преобразования:
<A NAME="lua_tonumber"></A><A NAME="lua_tostring"></A>
<A NAME="lua_strlen"></A><A NAME="lua_tocfunction"></A>
<A NAME="lua_touserdata"></A>
<PRE>
double  lua_tonumber(lua_State *L, int index);
const char *lua_tostring(lua_State *L, int index);
size_t lua_strlen(lua_State *L, int index);
lua_CFunction lua_tocfunction(lua_State *L, int index);
void *lua_touserdata(lua_State *L, int index);
</PRE>
Эти функции могут быть вызваны с любым приемлемым индексом. Когда вызваны с
не имеющим силу индексом, они действуют так, как будто переданное им значение
имело неправильный тип.

<P><CODE>lua_tonumber</CODE> преобразовывает значение в данном индексе к
числу с плавающей запятой. Это значение должно быть числом или строкой,
обратимой в число (подробности в разделе <A HREF="#coercion">4.2</A>). Иначе
<CODE>lua_tonumber</CODE> возвращает 0.

<P><CODE>lua_tostring</CODE> преобразовывает значение Lua в строку
(<CODE>const char*</CODE>). Это значение должно быть числом или строкой,
иначе будет возвращен <CODE>NULL</CODE>. Эта функция возвращает указатель на
строку внутри Lua-среды. Эти строки всегда имеют ноль (<CODE>'\0'</CODE>)
после их последнего символа (как в C), но могут содержать другие ноли в их
теле. Если Вы не знаете, может ли строка содержать ноли, Вы должны
использовать <CODE>lua_strlen</CODE>, чтобы получить фактическую длину.
Потому, что Lua имеет мусороуборщик, не имеется никакой гарантии, что
указатель, возвращенный <CODE>lua_tostring</CODE>, будет иметь силу после
того, как соответствующее значение удалено из стека.

<P><CODE>lua_tocfunction</CODE> преобразовывает значение в стеке к функции C.
Это значение должно быть функцией C, иначе <CODE>lua_tocfunction</CODE>
возвращает <CODE>NULL</CODE>. Тип <CODE>lua_CFunction</CODE> рассмотрен более
подробно в отдельном разделе <A HREF="#LuacallC">5.13</A>.

<P><CODE>lua_touserdata</CODE> преобразовывает значение в <CODE>void*</CODE>.
Это значение должно иметь тип <EM>userdata</EM>, иначе
<CODE>lua_touserdata</CODE> вернет <CODE>NULL</CODE>.

<A NAME="5.5"></A><H2>4.5.5 Помещение значений в стек</H2>
<P>API имеет следующие функции, чтобы поместить значения C в стек:
<A NAME="lua_pushnumber"></A><A NAME="lua_pushlstring"></A>
<A NAME="lua_pushstring"></A><A NAME="lua_pushcfunction"></A>
<A NAME="lua_pushusertag"></A><A NAME="pushing"></A>
<A NAME="lua_pushnil"></A><A NAME="lua_pushuserdata"></A>
<PRE>
void lua_pushnumber(lua_State *L, double n);
void lua_pushlstring(lua_State *L, const char *s, size_t len);
void lua_pushstring(lua_State *L, const char *s);
void lua_pushusertag(lua_State *L, void *u, int tag);
void lua_pushnil(lua_State *L);
void lua_pushcfunction(lua_State *L, lua_CFunction f);
</PRE>
Эти функции получают значение C, преобразовывают его в соответствующее
значение Lua, и помещают результат в стек. В частности,
<CODE>lua_pushlstring</CODE> и <CODE>lua_pushstring</CODE> делают
<EM>внутреннюю копию</EM> данной строки. <CODE>lua_pushstring</CODE> может
использоваться только, чтобы поместить соответствующие C-строки (то есть,
такие строки, которые заканчиваются нолем и не содержат вложенные ноли),
иначе Вы должны использовать более общую функцию
<CODE>lua_pushlstring</CODE>, которая принимает явный размер данных.

<A NAME="GC"></A><A NAME="5.6"></A><H2>4.5.6 Уборка мусора</H2>
<P>Lua использует два числа, чтобы управлять совокупностью мусора. Одно число
рассчитывает, сколько байтов динамической памяти Lua использует, а другое
задает порог. Это внутренний счетчик байтов, сохраняемый Lua не полностью
аккуратно: это может отклоняться на 10% от реального положения дел в памяти.
Когда число байтов пересекает порог, Lua выполняет цикл зачистки мусора,
который исправляет память и стирает оттуда все отработавшие свое, но забытые
там объекты (то есть объекты, больше доступные из Lua). Счетчик байтов будет
исправлен, а затем порог сброшен к двойному значению счетчика байтов.

<P>Вы можете обращаться к текущим значениям этих двух чисел
через следующие функции:
<A NAME="lua_getgcthreshold"></A><A NAME="lua_getgccount"></A>
<PRE>
int lua_getgccount (lua_State *L);
int lua_getgcthreshold (lua_State *L);
</PRE>
Оба возвращают их соответствующие значения в килобайтах. Вы можете изменять
пороговое значение с помощью:
<A NAME="lua_setgcthreshold"></A>
<PRE>
void  lua_setgcthreshold (lua_State *L, int newthreshold);
</PRE>
Снова значение <CODE>newthreshold</CODE> задано в килобайтах. Когда Вы
вызываете эту функцию, Lua устанавливает новый порог и проверяет счетчик
байтов. Если новый порог меньше, чем счетчик байтов, то Lua немедленно
выполняет уборку мусора. После нее новый порог будет установлен
согласно предыдущему правилу.

<P>Если Вы хотите изменять поведение коллектора мусора адаптивно, Вы
можете использовать метод тэга мусоросборщика для <B>nil</B>, чтобы
установить ваш собственный порог (метод тэга будет вызван после того, как
Lua сбрасывает порог).

<A NAME="C-tags"></A><A NAME="5.7"></A><H2>4.5.7 Userdata и тэги</H2>
<P>Поскольку userdata представляют собой объекты, функция
<CODE>lua_pushusertag</CODE> может создавать новые userdata. Если Lua
имеет userdata с данным значением (<CODE>void*</CODE>) и тэг, то этот объект
размещен. Иначе создается новый userdata с данным значением и тэгом. Если эта
функция вызвана с тэгом, равным <CODE>LUA_ANYTAG</CODE><A NAME="LUA_ANYTAG">
</A>, то Lua пробует находить любой объект userdata с данным значением,
независимо от его тэга. Если не имеется никакого userdata с этим значением,
то новый объект будет создан с тэгом, равным 0.

<P>Userdata может иметь различные тэги, чья семантика известна только ведущей
программе. Тэги создаются функцией:
<A NAME="lua_newtag"></A>
<PRE>
int lua_newtag (lua_State *L);
</PRE>
Функция <CODE>lua_settag</CODE> меняет тэг объекта в верхней части стека (без
того, чтобы получить его):
<A NAME="lua_settag"></A>
<PRE>
void lua_settag (lua_State *L, int tag);
</PRE>
Объект должен быть userdata или таблицей, данный тэг должен быть значением,
созданным с помощью функции <CODE>lua_newtag</CODE>.

<A NAME="luado"></A><A NAME="5.8"></A><H2>4.5.8 Выполнение Lua-кода</H2>
Ведущая программа может выполнять Lua-chunk, записанные в файле или в
строке, используя следующие функции:
<A NAME="lua_dofile"></A><A NAME="lua_dostring"></A>
<A NAME="lua_dobuffer"></A>
<PRE>
int lua_dofile(lua_State *L, const char *filename);
int lua_dostring(lua_State *L, const char *string);
int lua_dobuffer(lua_State *L, const char *buff, size_t size,
                 const char *name);
</PRE>
Эти функции возвращают 0 в случае успеха, или один из следующих кодов
ошибки, если они терпят неудачу:

<UL><LI><A NAME="LUA_ERRRUN"><TT>LUA_ERRRUN</TT></A>:
ошибка при управлении chunk.

<LI><A NAME="LUA_ERRSYNTAX"><TT>LUA_ERRSYNTAX</TT></A>: ошибка синтаксиса в
течение прекомпиляции.

<LI><A NAME="LUA_ERRMEM"><TT>LUA_ERRMEM</TT></A>: ошибка распределения
памяти. Для таких ошибок, Lua не вызывает <CODE>_ERRORMESSAGE</CODE>
(подробности в разделе <A HREF="#error">4.4.7</A>).

<LI><A NAME="LUA_ERRERR"><TT>LUA_ERRERR</TT></A>: ошибка при управлении
<CODE>_ERRORMESSAGE</CODE>. Для таких ошибок Lua не вызывает
<CODE>_ERRORMESSAGE</CODE> снова, чтобы избежать циклов.

<LI><A NAME="LUA_ERRFILE"><TT>LUA_ERRFILE</TT></A>: ошибка открытия файла
(только для <CODE>lua_dofile</CODE>). В этом случае Вы можете проверять
<CODE>errno</CODE>, вызывая <CODE>strerror</CODE> или <CODE>perror</CODE>,
чтобы сообщить пользователю, что пошло неправильно.</UL>
Эти константы определены в <CODE>lua.h</CODE>.

<P>Когда функция <CODE>lua_dofile</CODE> вызвана с параметром
<CODE>NULL</CODE>, она выполняет поток <CODE>stdin</CODE>.
<CODE>lua_dofile</CODE> и <CODE>lua_dobuffer</CODE> способны выполнить
прекомпилируемые объекты кода. Они автоматически обнаруживают, является ли
кусок кода текстовым или двоичным, и загружают его соответственно.
<CODE>lua_dostring</CODE> выполняет только исходный текст, заданный в
простой текстовой форме.

<P>Третий параметр для <CODE>lua_dobuffer</CODE> задает имя chunk, который
используется сообщениях об ошибках и отладочных сообщениях. Если имя
<CODE>name</CODE> равно <CODE>NULL</CODE>, то Lua дает заданное по умолчанию
имя этому chunk.

<P>Эти функции помещают в стек любые значения, в конечном счете возвращенные
кодом. Код может возвращать любое число значений; Lua соблюдает осторожность,
в том плане, что эти значения вписываются в размер стека, но после обращения
ответственность переходит к Вам. Если Вы должны поместить другие элементы
после вызова любой из этих функций, и Вы хотите работать спокойно, Вы должны
или проверить место в стеке с помощью <CODE>lua_stackspace</CODE>, или
удалять возвращенные элементы из стека (если Вы не нуждаетесь в них).
Например, следующий код загружает код в файле и отбрасывает все результаты,
возвращенные этим кодом:
<PRE>
{
  int oldtop = lua_gettop(L);
  lua_dofile(L, filename);
  lua_settop(L, oldtop);
}
</PRE>

<A NAME="5.9"></A><H2>4.5.9 Управление глобальными переменными в Lua</H2>
<P>Чтобы прочитать значение глобальной переменной Lua, надо:
<A NAME="lua_getglobal"></A>
<PRE>
void lua_getglobal (lua_State *L, const char *varname);
</PRE>
Это помещает в стек значение данной переменной. Как в Lua эта функция
может вызывать метод тэга для события getglobal. Чтобы читать реальное
значение глобальной переменной без того, чтобы вызывать любой метод тэга,
используют <CODE>lua_rawget</CODE> над таблицей глобальных переменных.

<P>Чтобы записать значение в глобальнукю переменную:
<A NAME="lua_setglobal"></A>
<PRE>
void lua_setglobal (lua_State *L, const char *varname);
</PRE>
Это извлекает из стека значение, которое будет сохранено в данной переменной.
Как в Lua эта функция может вызывать метод тэга для события setglobal.
Чтобы устанавливать реальное значение глобальной переменной без того, чтобы
вызывать любой метод тэга, используют <CODE>lua_rawset</CODE> над таблицей
глобальных переменных (подробности приведены ниже).

<P>Все глобальные переменные сохраняются в обычной Lua-таблице. Вы можете
получать ее вызовом:
<A NAME="lua_getglobals"></A>
<PRE>
void lua_getglobals (lua_State *L);
</PRE>
Это помещает текущую (актуальную) таблицу глобальных переменных в стек. Чтобы
устанавливать другую таблицу глобальных переменных, используйте вызов:
<A NAME="lua_setglobals"></A>
<PRE>
void lua_setglobals (lua_State *L);
</PRE>
Таблица, которую нужно использовать, извлекается из стека.

<A NAME="5.10"></A><H2>4.5.10 Управление таблицами в Lua</H2>
Lua-таблицы могут также управляться через API.

<P>Чтобы читать значение в таблице, таблица должна находиться где-нибудь в
стеке. Теперь вызовите
<A NAME="lua_gettable"></A>
<PRE>
void lua_gettable (lua_State *L, int index);
</PRE>
где <CODE>index</CODE> относится к таблице. <CODE>lua_gettable</CODE>
извлекает ключ из стека и возвращает (через стек) содержание таблицы для
заданного ключа. Как в Lua эта операция может вызывать метод тэга для
события gettable. Получать реальное значение любого ключа таблицы, без того,
чтобы вызывать любой метод тэга, можно, используя
<A NAME="lua_rawget"></A>
<PRE>
void lua_rawget (lua_State *L, int index);
</PRE>

<P>Чтобы сохранять значение в таблицу, которая находится где-нибудь в стеке,
Вы помещаете ключ и значение в стек (именно в этом порядке!), а затем
вызываете такое обращение:
<A NAME="lua_settable"></A>
<PRE>
void lua_settable (lua_State *L, int index);
</PRE>
здесь <CODE>index</CODE> относится к таблице. <CODE>lua_settable</CODE>
извлекает из стека ключ и значение. Как и все в Lua, эта операция может
вызывать метод тэга для события settable. Чтобы устанавливать реальное
значение любого индекса таблицы без того, чтобы вызывать любой метод тэга,
используют <EM>raw</EM>-версию:
<A NAME="lua_rawset"></A>
<PRE>
void lua_rawset (lua_State *L, int index);
</PRE>

<P>В заключение, еще одна функция
<A NAME="lua_newtable"></A>
<PRE>
void lua_newtable (lua_State *L);
</PRE>
создает новую, пустую, таблицу и помещает ее в стек.

<A NAME="5.11"></A><H2>4.5.11 Использование таблиц как массивов</H2>
API имеет функции, которые помогают использовать таблицы Lua как массивы, то
есть таблицы, индексированные только числами:
<A NAME="lua_rawgeti"></A><A NAME="lua_rawseti"></A>
<A NAME="lua_getn"></A>
<PRE>
void lua_rawgeti(lua_State *L, int index, int n);
void lua_rawseti(lua_State *L, int index, int n);
int lua_getn(lua_State *L, int index);
</PRE>

<P><CODE>lua_rawgeti</CODE> получает значение энного элемента таблицы в
позиции <CODE>index</CODE> стека.

<P><CODE>lua_rawseti</CODE> устанавливает значение энного элемента таблицы в
позиции <CODE>index</CODE> стека к значению наверху стека.

<P><CODE>lua_getn</CODE> возвращает число элементов в таблице в позиции
<CODE>index</CODE>. Это число представляет собой значение поля <CODE>n</CODE>
таблицы, если это имеет числовое значение, или самый большой числовой индекс
со значением non-nil в таблице.

<A NAME="5.12"></A><H2>4.5.12 Вызов функций Lua</H2>
<P>Функции, определенные в Lua (и функции C, зарегистрированные в Lua), могут
быть вызваны из ведущей программы. Это выполнено, используя следующий
протокол: сначала, функция, которая будет вызвана, помещена в стек, затем,
параметры функции помещены в прямом порядке, то есть первый параметр помещен
в стек первым. В заключение, функция вызвана:
<A NAME="lua_call"></A>
<PRE>
int lua_call (lua_State *L, int nargs, int nresults);
</PRE>
Эта функция возвращает те же самые коды ошибки, что и
<CODE>lua_dostring</CODE> и другие (подробности в разделе <A HREF="#luado">
4.5.8</A>). Если Вы хотите исследовать ошибку, вместо того, чтобы возвратить
код ошибки, используйте:
<A NAME="lua_rawcall"></A>
<PRE>
void lua_rawcall(lua_State *L, int nargs, int nresults);
</PRE>

<P>В обеих функциях <CODE>nargs</CODE> задает число параметров, которые Вы
поместили в стек. Все параметры и функциональное значение берутся из стека,
а функциональные результаты помещены туда. Число результатов будет
откорректировано до <CODE>nresults</CODE>, если <CODE>nresults</CODE> не
<A NAME="LUA_MULTRET"><TT>LUA_MULTRET</TT></A>. В этом случае <EM>все</EM>
результаты функции будут помещены в стек. Функциональные результаты помещены
в прямом порядке (первый результат и помещен первым), чтобы после обращения
последний результат оказался на самой вершине стека.

<P>Следующий пример показывает, как ведущая программа может делать эквивалент
коду на Lua:
<PRE>
a,b = f("how", t.x, 4)
</PRE>
Here it is in&nbsp;C:
<PRE>
lua_getglobal(L, "t");    /* глобальная `t' (потом пригодится) */
lua_getglobal(L, "f");    /* функция, которая будет вызвана */
lua_pushstring(L, "how"); /* 1-ый параметр */
lua_pushstring(L, "x");   /* помещает в стек строку `x' */
lua_gettable(L, -4);      /* помещает в стек результат t.x (2-ой аргумент) */
lua_pushnumber(L, 4);     /* 3-ий параметр */
lua_call(L, 3, 2);    /* вызывает функцию с 3 параметрами и 2 результатами */
lua_setglobal(L, "b");    /* устанавливает глобальную переменную `b' */
lua_setglobal(L, "a");    /* устанавливает глобальную переменную `a' */
lua_pop(L, 1);            /* удаляет из стека `t' */
</PRE>
Обратите внимание, что код выше сбалансированный: в конце стек обратен
к первоначальной конфигурации. Это считается хорошей практикой.

<P>Некоторые специальные функции Lua имеют собственные интерфейсы C. Ведущая
программа может генерировать ошибку Lua, вызывая функцию:
<A NAME="lua_error"></A>
<PRE>
void lua_error (lua_State *L, const char *message);
</PRE>
Эта функция никогда не возвращает ничего. Если <CODE>lua_error</CODE>
вызвана из функции C, которая была вызвана из Lua, то соответствующий блок
кода Lua завершается так, как будто ошибка произошла внутри кода Lua. Иначе
вся ведущая программа завершается обращением <CODE>exit(EXIT_FAILURE)</CODE>.
Перед завершением выполнения, сообщение <CODE>message</CODE> будет передано
функции драйвера ошибки <CODE>_ERRORMESSAGE</CODE>. Если <CODE>message</CODE>
равно <CODE>NULL</CODE>, то <CODE>_ERRORMESSAGE</CODE> не вызывается.

<P>Методы тэгов могут быть изменены с
<A NAME="lua_settagmethod"></A>
<PRE>
void lua_settagmethod (lua_State *L, int tag, const char *event);
</PRE>
Второй параметр задает тэг, а третий представляет собой имя события. Новый
метод берется из стека. Чтобы получить текущее (актуальное) значение метода
тэга используйте функцию
<A NAME="lua_gettagmethod"></A>
<PRE>
void lua_gettagmethod(lua_State *L, int tag, const char *event);
</PRE>

<P>Также возможно копировать все методы из одного тэга в другой:
<A NAME="lua_copytagmethods"></A>
<PRE>
int lua_copytagmethods (lua_State *L, int tagto, int tagfrom);
</PRE>
Эта функция вернет <CODE>tagto</CODE>.

<P>Вы можете пересекать таблицу с функцией:
<A NAME="lua_next"></A>
<PRE>
int lua_next (lua_State *L, int index);
</PRE>
здесь <CODE>index</CODE> относится к таблице, которая будет пересечена.
Функция берет ключ из стека и помещает туда пару "значение-ключ" из таблицы
(следующую после данного ключа). Если не имеется больше элементов, то функция
возвращает 0 (и не помещает в стек ничего). Типичный пример использования
выглядит следующим образом:
<PRE>
lua_pushnil(L);  /* first key */
while (lua_next(L, t) != 0) {
  /* `key' is at index -2 and `value' at index -1 */
  printf("%s - %s\n", lua_typename(L, lua_type(L, -2)),
         lua_typename(L, lua_type(L, -1)));
  lua_pop(L, 1);  /* removes `value'; keeps `index' for next iteration */
}
</PRE>

<P>Функция
<A NAME="lua_concat"></A>
<PRE>
void lua_concat (lua_State *L, int n);
</PRE>
конкатенирует <CODE>n</CODE> значений сверху стека, извлекает их и оставляет
результат наверху. Здесь <CODE>n</CODE> должно быть по крайней мере равно 2.
Конкатенация выполнена по правилам обычной семантики Lua

<A NAME="LuacallC"></A><A NAME="5.13"></A><H2>4.5.13 Определение функций C
</H2>
Чтобы зарегистрировать функцию C в Lua, имеется следующая макрокоманда:
<A NAME="lua_register"></A>
<PRE>
#define lua_register(L, n, f) (lua_pushcfunction(L, f), lua_setglobal(L, n))
/* const char *n;   */
/* lua_CFunction f; */
</PRE>
Которая получает имя, которое функция будет иметь в Lua, и указатель на
функцию. Этот указатель должен иметь тип <CODE>lua_CFunction</CODE>,
который определен так;
<A NAME="lua_CFunction"></A>
<PRE>
typedef int (*lua_CFunction) (lua_State *L);
</PRE>
То есть, это указатель на функцию с целочисленным результатом и одиночным
параметром, Lua-средой.

<P>Чтобы связываться правильно с Lua, функция C должна следовать следующему
протоколу, который определяет путь, которым параметры и результаты переданы:
функция C получает параметры от Lua в стеке, в прямом порядке (первый
параметр помещен первым). Чтобы возвращать значения Lua, функция C только
помещает их в стек в прямом порядке и возвращает число результатов. Подобно
функции Lua, функция C, вызванная Lua, может возвращать много результатов.

<P>Как пример, следующая функция получает переменное число числовых
параметров, а возвращает их среднее и сумму:
<PRE>
static int foo (lua_State *L) {
  int n = lua_gettop(L);    /* number of arguments */
  double sum = 0;
  int i;

  for (i = 1; i &lt;= n; i++) {
    if (!lua_isnumber(L, i))
       lua_error(L, "incorrect argument to function `average'");
    sum += lua_tonumber(L, i);
  }
  lua_pushnumber(L, sum/n);   /* первый результат */
  lua_pushnumber(L, sum);     /* второй результат */
  return 2;                   /* сколько всего результатов */
}
</PRE>
Эта функция может быть зарегистрирована в Lua как
<CODE>average</CODE> таким вызовом:
<PRE>
lua_register(L, "average", foo);
</PRE>

<P>Когда функция C создана, возможно сопоставить с ней некоторые
<EM>upvalues</EM>, таким образом создавая замкнутое выражение C; эти значения
будут переданы функции всякий раз, когда она вызвана, как обычные параметры.
Чтобы сопоставить upvalues с функцией C, сначала эти значения должны быть
помещены в стек. Затем функция
<A NAME="lua_pushcclosure"></A>
<PRE>
void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n);
</PRE>
используется, чтобы поместить функцию C в стек с параметром <CODE>n</CODE>
означающим, сколько upvalues должно быть связан с функцией (эти upvalues
берутся из стека). Фактически, макрокоманда <CODE>lua_pushcfunction</CODE>
определена как <CODE>lua_pushcclosure</CODE> с <CODE>n</CODE> установленным в
0. Затем, всякий раз, когда функция C вызвана, эти upvalues вставлены как
<EM>последние</EM> параметры функции, после фактических параметров,
переданных в обращении. Это избавляет от необходимости выяснять, сколько
параметров было передано фактически. Так <EM>i</EM>-th upvalue находится в
стеке в индексе <I>i-(n+1)</I>, где <EM>n</EM> задает номер upvalues.

<P>Для большего количества примеров функций C и замкнутых выражений изучите
файлы <CODE>lbaselib.c</CODE>, <CODE>liolib.c</CODE>,
<CODE>lmathlib.c</CODE> и <CODE>lstrlib.c</CODE> в дистрибутиве Lua.

<A NAME="5.14"></A><H2>4.5.14 Ссылки к Lua-объектам</H2>
<P>Если C-код должен хранить значение Lua вне продолжительности жизни функции
C, то надо создать <EM>ссылку</EM> к значению. Функции, чтобы
управлять ссылками, следующие:
<A NAME="reference"></A><A NAME="lua_ref"></A><A NAME="lua_getref"></A>
<A NAME="lua_unref"></A>
<PRE>
int lua_ref(lua_State *L, int lock);
int lua_getref(lua_State *L, int ref);
void lua_unref(lua_State *L, int ref);
</PRE>

<P><CODE>lua_ref</CODE> выталкивает значение из стека, создает ссылку к нему
и возвращает эту ссылку. Для значения <B>nil</B> ссылка всегда
<CODE>LUA_REFNIL</CODE>.<A NAME="LUA_REFNIL"></A> <CODE>lua.h</CODE> также
определяет константу <CODE>LUA_NOREF</CODE><A NAME="LUA_NOREF"></A>, которая
отличается от любой имеющей силу ссылки. Если <CODE>lock</CODE> не равно 0,
то объект <EM>блокирован</EM>: это означает, что объект не будет обработан
мусоросборщиком. Разблокированные ссылки могут быть удалены в порядке уборки
мусора на общих основаниях.

<P>Всякий раз, когда вызванный объект необходим в C, обращение к
<CODE>lua_getref</CODE> помещает тот объект в стек; если объект был убран,
<CODE>lua_getref</CODE> вернет 0 (и не поместит ничего в стек).

<P>Когда ссылка больше не нужна, ее надо освободить вызовом
<CODE>lua_unref</CODE>.

<h3>4.5.15 Системный реестр</h3>
<P>При своем запуске Lua регистрируют таблицу в позиции
<A NAME="LUA_REFREGISTRY"><TT>LUA_REFREGISTRY</TT></A>. К этому можно
обращаться через макрокоманду:
<A NAME="lua_getregistry"></A>
<PRE>
#define lua_getregistry(L) lua_getref(L, LUA_REFREGISTRY)
</PRE>
Эта таблица может использоваться C-библиотеками как общий механизм системного
реестра. Любая C-библиотека может сохранять данные в этой таблице, пока она
выбирает ключ регистрации, отличный от других библиотек.

<A NAME="6."></A><H1>4.6 Стандартные библиотеки</H1>
<P>Стандартные библиотеки обеспечивают полезные функции, которые выполнены
непосредственно через стандартный API. Следовательно, они не так уж и
необходимы для самого языка, а обеспечиваются как отдельные C-модули. В
настоящее время, Lua имеет следующие стандартные библиотеки:

<UL><LI>Базисная библиотека.
<LI>Работа со строками.
<LI>Различная математика (sin, log и т,п,).
<LI>Ввод и вывод (плюс некоторые средства системы).</UL>

Чтобы иметь доступ к этим библиотекам, ведущая C-программа должна вызвать
функции <CODE>lua_baselibopen</CODE>, <CODE>lua_strlibopen</CODE>,
<CODE>lua_mathlibopen</CODE> и <CODE>lua_iolibopen</CODE>, которые объявлены
в файле заголовков <CODE>lualib.h</CODE>.
<A NAME="lua_baselibopen"></A><A NAME="lua_strlibopen"></A>
<A NAME="lua_mathlibopen"></A><A NAME="lua_iolibopen"></A>
<A NAME="predefined"></A>

<A NAME="6.1"></A><H2>4.6.1 Базисные функции</H2>
<P>Базисная библиотека обеспечивает некоторые основные функции для Lua.
Следовательно, если Вы не включаете эту библиотеку в Вашей прикладной
программе, Вы должны тщательно проверить, должны ли Вы обеспечить какую-то
альтернативную реализацию для некоторых средств. Например, без функции
<CODE>_ERRORMESSAGE</CODE> Lua не способен показать сообщения об ошибках.

<A NAME="alert"></A>
<h3><TT>_ALERT (message)</TT></h3><A NAME="alert"></A>
Печатает только строковый аргумент на <A NAME="stderr"><TT>stderr</TT></A>.
Все сообщения об ошибках в Lua напечатаны через функцию, сохраненную в
глобальной переменной <CODE>_ALERT</CODE>. Следовательно, программа может
назначать другую функцию к этой переменной, и изменять путь, которым такие
сообщения показываются (например, для систем без <CODE>stderr</CODE>).

<h3><TT>assert (v [, message])</TT></h3><A NAME="assert"></A>
Выдает ошибку <EM>assertion failed!</EM>, когда параметр <CODE>v</CODE> равен
<B>nil</B>. Эта функция эквивалентна следующей функции Lua:
<PRE>
function assert(v, m)
  if not v then m = m or ""
     error("assertion failed!  " .. m)
  end
end
</PRE>

<h3><TT>call (func, arg [, mode [, errhandler]])</TT></h3><A NAME="call"></A>
<A NAME="pdf-call"></A>
Вызывает функцию <CODE>func</CODE> с параметрами, заданными таблицей
<CODE>arg</CODE>. Обращение эквивалентно
<PRE>
func(arg[1], arg[2], ..., arg[n])
</PRE>
где <CODE>n</CODE> представляет собой результат <CODE>getn(arg)</CODE>. Все
результаты из <CODE>func</CODE> просто возвращены <CODE>call</CODE>.

<P>По умолчанию, если ошибка происходит в течение обращения к
<CODE>func</CODE>, она объясняется подробно. Если строка <CODE>mode</CODE>
включает <CODE>"x"</CODE>, то обращение <EM>защищено</EM>. В этом режиме
обращение к функции не <CODE>call</CODE> не объясняет ошибку подробно,
независимо от того, что случается в течение обращения. Вместо этого, это
возвращает <B>nil</B>, чтобы сообщить об ошибке (помимо вызова
приспособленного драйвера ошибки).

<P>Если <CODE>errhandler</CODE> обеспечивается, функция ошибки
<CODE>_ERRORMESSAGE</CODE> временно установлена к <CODE>errhandler</CODE>
на время выполнения <CODE>func</CODE>. В частности, если
<CODE>errhandler</CODE> равен <B>nil</B>, никакие сообщения об ошибках не
будут выданы в течение выполнения вызванной функции вообще.

<h3><TT>collectgarbage ([limit])</TT></h3><A NAME="collectgarbage"></A>
<P>Устанавливает порог для мусоросборщика в данное значение (в Kbytes).
Если новый порог меньше, чем счетчик байтов, то Lua немедленно выполняет
уборку мусора в памяти. Если <CODE>limit</CODE> отсутствует, значением по
умолчанию является ноль (таким образом уборка мусора запустится сразу).

<h3><TT>copytagmethods (tagto, tagfrom)</TT></h3>
<A NAME="copytagmethods"></A>
Копирует все методы тэга из одного тэга в другой, возвращает
<CODE>tagto</CODE>.

<h3><TT>dofile (filename)</TT></h3><A NAME="dofile"></A>
Получает имя файла, открывает именованный файл и выполняет его содержимое
как Lua-код или как прекомпилируемый код. Когда вызвано без параметров,
<CODE>dofile</CODE> выполняет содержание стандартного ввода
(<CODE>stdin</CODE>). Если имеется любая ошибка, <CODE>dofile</CODE> вернет
<B>nil</B>. Иначе это возвращает значения, возвращенные кодом, или значение
не-<B>nil</B>, если блок кода не возвращает никаких значений. Это выдает
ошибку, когда вызвано не со строчным параметром.

<h3><TT>dostring (string [, chunkname])</TT></h3><A NAME="dostring"></A>
Выполняет данную строку как код на Lua. Если имеется любая ошибка, то
<CODE>dostring</CODE> вернет <B>nil</B>. Иначе это возвращает значения,
возвращенные кодом, или значение не-<B>nil</B>, если код не возвращает
никакие значения. Факультативный параметр <CODE>chunkname</CODE> имя кода,
используемого для информации об ошибках и отладочных сообщений.

<A NAME="pdf-error"></A>
<h3><TT>error (message)</TT></h3><A NAME="error"></A>
Вызывает драйвер ошибки и затем завершает последнюю защищенную вызванную
функцию (в C: <CODE>lua_dofile</CODE>, <CODE>lua_dostring</CODE>,
<CODE>lua_dobuffer</CODE> или <CODE>lua_callfunction</CODE>, в Lua:
<CODE>dofile</CODE>, <CODE>dostring</CODE> или <CODE>call</CODE> в защищенном
режим). Если <CODE>message</CODE> равно <B>nil</B>, то драйвер ошибки не
будет вызван. Функция <CODE>error</CODE> никогда ничего не возвращает.

<h3><TT>foreach (table, func)</TT></h3><A NAME="foreach"></A>
Выполняется данную <CODE>func</CODE> над всеми элементами таблицы
<CODE>table</CODE>. Для каждого элемента, функция вызвана с индексом и
соответствующим значением как параметрами. Если функция возвращает любое
значение не-<B>nil</B>, то цикл завершается, и это значение будет возвращено
как конечное значение <CODE>foreach</CODE>. Эта функция могла бы быть
определена в Lua так:
<PRE>
function foreach (t, f)
  for i, v in t do
    local res = f(i, v)
    if res then return res end
  end
end
</PRE>
Поведение <CODE>foreach</CODE> <EM>неопределено</EM>, если Вы изменяете
таблицу <CODE>t</CODE> в ходе работ.

<h3><TT>foreachi (table, func)</TT></h3><A NAME="foreachi"></A>
Выполняет данную <CODE>func</CODE> над числовыми индексами таблицы
<CODE>table</CODE>. Для каждого индекса функция вызвана с индексом и
соответствующим значением как параметрами. Индексы обрабатываются в
последовательном порядке, от 1 до <CODE>n</CODE>, где <CODE>n</CODE>
представляет собой результат <CODE>getn(table)</CODE>. Если функция
возвращает любое значение не-<B>nil</B>, то цикл прерывается, а это значение
будет возвращено как конечное значение <CODE>foreachi</CODE>. Эта функция
могла бы быть определена в Lua таким образом:
<PRE>
function foreachi (t, f)
  for i=1,getn(t) do
    local res = f(i, t[i])
    if res then return res end
  end
end
</PRE>

<h3><TT>getglobal (name)</TT></h3><A NAME="getglobal"></A>
Получает значение глобальной переменной или вызывает метод тэга для события
getglobal. Полная семантика объясняется в разделе <A HREF="#tag-method">4.4.8
</A>. Строка <CODE>name</CODE> задает имя переменной.

<A NAME="getn"></A><h3><TT>getn (table)</TT></h3><A NAME="getn"></A>
Возвращает размер таблицы, представленной как список. Если таблица имеет
<CODE>n</CODE> полей с числовым значением, это количество и будет размером
таблицы. Иначе размером является самый большой числовой индекс со значением
не-nil в таблице. Эта функция могла бы быть определена в Lua так:
<PRE>
function getn (t)
  if type(t.n) == "number" then return t.n end
  local max = 0
  for i, _ in t do
    if type(i) == "number" and i&gt;max then max=i end
  end
  return max
end
</PRE>

<h3><TT>gettagmethod (tag, event)</TT></h3>
<A NAME="gettagmethod"></A>
Возвращает текущий метод тэга для данной пары <EM>(tag, event)</EM>. Эта
функция не может использоваться, чтобы получить метод тэга для события gc.
Такие методы тэга могут управляться только C-кодом.

<h3><TT>globals ([table])</TT></h3><A NAME="globals"></A>
Возвращает текущую таблицу глобальных переменных. Если параметр
<CODE>table</CODE> задан, то это также устанавливает его как новую
таблицу глобальных переменных.

<A NAME="pdf-newtag"></A>
<h3><TT>newtag ()</TT></h3><A NAME="newtag"></A>
Возвращает новый тэг.

<h3><TT>next (table, [index])</TT></h3><A NAME="next"></A>
Позволяет программе пересекать все поля таблицы. Первый параметр: таблица, а
второй параметр задает индекс в этой таблице. <CODE>next</CODE> вернет
следующий индекс таблицы и значение, связанное с индексом. Когда вторым
параметром является <B>nil</B>, <CODE>next</CODE> вернет первый индекс
таблицы и связанное значение. При вызове с последним индексом или с
<B>nil</B> в пустой таблице, <CODE>next</CODE> вернет <B>nil</B>. Если второй
параметр отсутствует, то это интерпретируется как указание <B>nil</B>.

<P>Lua не имеет никакого объявления полей: семантически не имеется никакого
различия между полем, не представленным в таблице, или полем со значением
<B>nil</B>. Следовательно, <CODE>next</CODE> рассматривает только поля со
значениями не-<B>nil</B>. Порядок, в котором индексы перечислены, не
определен даже для числовых индексов. Чтобы обработать таблицу в числовом
порядке, надо использовать функцию foreachi.

<P>Поведение <CODE>next</CODE> <EM>неопределено</EM>, если Вы изменяете
таблицу в ходе работ.

<h3><TT>print (e1, e2, ...)</TT></h3><A NAME="print"></A>
Получает любое число параметров, и печатает их значения, используя строки,
возвращенные <CODE>tostring</CODE>. Эта функция не предназначена для
форматируемого вывода, ее следует рассматривать только как быстрый способ
показать значение, например для отладки.

<h3><TT>rawget (table, index)</TT></h3><A NAME="rawget"></A>
Получает реальное значение <CODE>table[index]</CODE> без того, чтобы вызвать
любой метод тэга. Таблица должна быть задана как <CODE>table</CODE>, а
<CODE>index</CODE> представляет собой любое значение, отличное от <B>nil</B>.

<h3><TT>rawset (table, index, value)</TT></h3><A NAME="rawset"></A>
Устанавливает реальное значение <CODE>table[index]</CODE> в
<CODE>value</CODE> без того, чтобы вызвать любой метод тэга. Параметр
<CODE>table</CODE> должен быть таблицей, <CODE>index</CODE> представляет
собой любое значение, отличное от <B>nil</B>, а <CODE>value</CODE> задает
любое значение Lua.

<h3><TT>setglobal (name, value)</TT></h3><A NAME="setglobal"></A>
Устанавливает именованную глобальную переменную к данному значению, или
вызывает метод тэга для события setglobal. Полная семантика объясняется в
разделе <A HREF="#tag-method">4.8</A>.

<h3><TT>settag (t, tag)</TT></h3><A NAME="settag"></A>
Устанавливает тэг данной таблицы. Тэг (<CODE>tag</CODE>) должен быть
значением, созданным через <CODE>newtag</CODE>. <CODE>settag</CODE> вернет
значение первого параметра (таблицу). Для безопасности ведущих программ
невозможно изменить тэг userdata прямо из Lua.

<h3><TT>settagmethod (tag, event, newmethod)</TT></h3>
<A NAME="settagmethod"></A>
Устанавливает новый метод тэга к данной паре <EM>(tag, event)</EM> и
возвращает старый метод. Если <CODE>newmethod</CODE> равно <B>nil</B>, то
<CODE>settagmethod</CODE> восстанавливает заданное по умолчанию поведение для
данного события. Эта функция не может использоваться, чтобы установить метод
для события gc. Такие методы могут управляться только C-кодом.

<h3><TT>sort(table [, comp])</TT></h3><A NAME="sort"></A>
Сортирует элементы таблицы в данном порядке, данные берутся из
<CODE>table[1]</CODE> и помещаются в <CODE>table[n]</CODE>, где
<CODE>n</CODE> представляет собой результат <CODE>getn(table)</CODE>. Если
<CODE>comp</CODE> задан, то это должно быть функцией, которая получает два
элемента таблицы и возвращает истину (то есть значение, отличное от
<B>nil</B>), когда первый меньше, чем второй (так, чтобы <CODE>not
comp(a[i+1], a[i])</CODE> был истиной после сортировки). Если
<CODE>comp</CODE> не задано, то вместо этого используется стандартный
оператор <CODE>&lt;</CODE> языка Lua.

<P>Алгоритм сортировки <EM>неустойчив</EM> (то есть элементы, рассматриваемые
как равные, могут изменить свои относительные позиции после сортировки).

<A NAME="pdf-tag"></A>
<h3><TT>tag (v)</TT></h3><A NAME="tag"></A>
Позволяет программам Lua проверять тэг значения. Это получает один параметр и
возвращает тэг (число).

<h3><TT>tonumber (e [, base])</TT></h3><A NAME="tonumber"></A>
Пробует преобразовывать параметр в число. Если параметр уже число или строка,
обратимая в число, то <CODE>tonumber</CODE> вернет это число, иначе это
всегда возвращает <B>nil</B>.

<P>Факультативный параметр определяет ядро, чтобы интерпретировать цифру.
Ядром может быть любое целое число между 2 и 36 включительно. В базах более,
чем 10, символ A (заглавные или строчные буквы) представляет 10,
B соответствует 11 и так далее до символа Z, соответствующему 35. В ядре 10
(значение по умолчанию) число может иметь десятичную часть, также как и
факультативную часть экспоненты. В других базах только целые числа без знака.

<h3><TT>tostring (e)</TT></h3><A NAME="tostring"></A>
Получает параметр любого типа и преобразовывает его в строку в приемлемом
формате. Для полного управления тем, как числа будут преобразованы,
используйте функцию <CODE>format</CODE>.

<h3><TT>tinsert (table [, pos] , value)</TT></h3><A NAME="tinsert"></A>
<P>Вставляет значение элемента <CODE>value</CODE> в позицию <CODE>pos</CODE>
таблицы, сдвигая другие элементы в случае необходимости на открытое место.
Значение по умолчанию для <CODE>pos</CODE> равно <CODE>n+1</CODE>, где
<CODE>n</CODE> является результатом <CODE>getn(table)</CODE> так, чтобы
обращение <CODE>tinsert(t,x)</CODE> вставило <CODE>x</CODE> в конец таблицы
<CODE>t</CODE>. Эта функция также устанавливает или увеличивает поле
<CODE>n</CODE> таблицы, превращая его в <CODE>n+1</CODE>. Эта функция
эквивалентна следующей функции Lua, за исключением того, что доступ к таблице
прямой (без методов тэгов):
<PRE>
function tinsert (t, ...)
  local pos, value
  local n = getn(t)
  if arg.n == 1 then pos, value = n+1, arg[1]
  else pos, value = arg[1], arg[2]
  end
  t.n = n+1;
  for i=n,pos,-1 do
    t[i+1] = t[i]
  end
  t[pos] = value
end
</PRE>

<h3><TT>tremove (table [, pos])</TT></h3><A NAME="tremove"></A>
<P>Удаляет из таблицы <CODE>table</CODE> элемент в позиции <CODE>pos</CODE>,
сдвигая в случае необходимости другие элементы, чтобы закрыть образовавшуюся
дырку. Возвращает значение удаленного элемента. Значение по умолчанию для
<CODE>pos</CODE> равно <CODE>n</CODE>, где <CODE>n</CODE> является
результатом <CODE>getn(table)</CODE>, чтобы обращение <CODE>tremove(t)</CODE>
удалило последний элемент из таблицы <CODE>t</CODE>. Эта функция также
устанавливает поле <CODE>n</CODE> таблицы в значение <CODE>n-1</CODE>.

<P>Эта функция эквивалентна следующей функции Lua, за исключением того, что
доступ к таблице прямой (без использования методов тэгов):
<PRE>
function tremove (t, pos)
  local n = getn(t)
  if n&lt;=0 then
     return
  end
  pos = pos or n
  local value = t[pos]
  for i=pos,n-1 do
    t[i] = t[i+1]
  end
  t[n] = nil
  t.n = n-1
  return value
end
</PRE>

<A NAME="pdf-type"></A>
<h3><TT>type (v)</TT></h3><A NAME="type"></A>
Позволяет программам Lua проверять тип значения. Это получает один параметр,
а возвращает тип, кодированный как строка. Возможные результаты этой функции:
<CODE>"nil"</CODE> (строка, а не значение <B>nil</B>!),
<CODE>"number"</CODE>, <CODE>"string"</CODE>, <CODE>"table"</CODE>,
<CODE>"function"</CODE> и <CODE>"userdata"</CODE>.

<A NAME="6.2"></A><H2>4.6.2 Строковые манипуляции в Lua</H2>
Эта библиотека обеспечивает универсальные функции для манипулирования
строками, типа нахождения и извлечения соответствия образца и подстрок.
При индексации строки в Lua, первый символ находится в позиции 1 (не в 0, как
в C!). Также, индексам позволено быть отрицательными, что понимается как
индексация в обратном направлении, с конца строка к началу. Таким образом,
последний символ находится в позиции <I>-1</I> и так далее.

<h3><TT>strbyte (s [, i])</TT></h3><A NAME="strbyte"></A>
Возвращает внутренний числовой код <EM>i</EM>-го символа строки
<CODE>s</CODE>. Если <CODE>i</CODE> отсутствует, то принято 1.
<CODE>i</CODE> может быть отрицателен.

<P>Числовые коды не обязательно переносимы между платформами.

<h3><TT>strchar (i1, i2, ...)</TT></h3><A NAME="strchar"></A>
Получает 0 или большее количество целых чисел. Возвращает строку с длиной,
равной числу параметров, в которой каждый символ имеет внутренний числовой
код, заданный соответствующим параметром.

<P>Числовые коды не обязательно переносимы между платформами.

<h3><TT>strfind (s, pattern [, init [, plain]])</TT></h3>
<A NAME="strfind"></A>
Ищет первое соответствие образцу <CODE>pattern</CODE> в
<CODE>s</CODE>. Если это найдено, <CODE>strfind</CODE> вернет индексы
<CODE>s</CODE>, где эти вхождения начинаются и заканчивается, иначе это
возвращает <B>nil</B>. Если образец определяет набор данных (подробности в
описании <CODE>gsub</CODE> ниже), зафиксированные строки возвращены как
дополнительные результаты. Факультативный числовой параметр <CODE>init</CODE>
определяет, где запустить поиск: значение по умолчанию 1, и оно может быть
отрицательным. Четвертый факультативный аргумент <CODE>plain</CODE> выключает
средства поиска образца, так что функция просто ищет подстроку без символов в
<CODE>pattern</CODE>, обрабатываемых особым образом. Обратите внимание, что
если задана опция <CODE>plain</CODE>, должна быть задана и <CODE>init</CODE>.

<h3><TT>strlen (s)</TT></h3><A NAME="strlen"></A>
Получает строку и возвращает ее длину. Пустая строка (<CODE>""</CODE>) имеет
длину 0. Вложенные ноли в строке считаются, так что строка
<CODE>"a\000b\000c"</CODE> имеет длину 5 символов.

<h3><TT>strlower (s)</TT></h3><A NAME="strlower"></A>
Получает строку и возвращает ее копию со всеми символами верхнего регистра,
измененными на строчные буквы. Все другие символы оставлены прежними.
Определение того, какие буквы прописные, зависит от настроек региона.

<h3><TT>strrep (s, n)</TT></h3><A NAME="strrep"></A>
Возвращает строку, которая является суммой <CODE>n</CODE> копий строки
<CODE>s</CODE>.

<h3> <TT>strsub (s, i [, j])</TT></h3><A NAME="strsub"></A>
Возвращает другую строку, которая является подстрокой <CODE>s</CODE>,
начинающегося в <CODE>i</CODE> и продолжающейся до <CODE>j</CODE>.
<CODE>i</CODE> и <CODE>j</CODE> могут быть отрицательными, Если
<CODE>j</CODE> отсутствует, то оно считается равным <I>-1</I> (длине строки).
В частности, обращение <CODE>strsub(s,1,j)</CODE> возвращает префикс
<CODE>s</CODE> длиной <CODE>j</CODE>, а вызов <CODE>strsub(s, -i)</CODE>
вернет суффикс <CODE>s</CODE> длиной <CODE>i</CODE>.

<h3><TT>strupper (s)</TT></h3><A NAME="strupper"></A>
Получает строку и возвращает копию со всеми символами строчных букв,
измененными на верхний регистр. Все другие символы оставлены как есть.
Что такое строчные буквы, читается из настроек региона.

<h3> <TT>format (formatstring, e1, e2, ...)</TT></h3><A NAME="format"></A>
<A NAME="format"></A>
Возвращает форматированную версию переменного числа параметров после
применения описания, заданного в первом параметре (который должен быть
строкой). Строка формата следует тем же самым правилам, что и семейство
стандартных функций <CODE>printf</CODE> в C. Единственное различие состоит в
том, что параметры <CODE>*</CODE>, <CODE>l</CODE>, <CODE>L</CODE>,
<CODE>n</CODE>, <CODE>p</CODE> и <CODE>h</CODE> тут не работают, зато имеется
дополнительная опция <CODE>q</CODE>. Опция <CODE>q</CODE> форматирует строку
в форме, подходящей, чтобы безопасно читаться обратно Lua интерпретатором.
Строка записана между двойными кавычками, а все двойные кавычки и спецсимволы
будут правильно экранированы при записи. Например, обращение
<PRE>
format('%q', 'a string with "quotes" and \n new line')
</PRE>
произведет такую строку:
<PRE>
"a string with \"quotes\" and \
 new line"
</PRE>

<P>Преобразования могут применяться к энному параметру в списке параметров
вместо следующего неиспользуемого параметра. В этом случае символ
<CODE>%</CODE> заменен последовательностью <CODE>%d$</CODE>, где
<CODE>d</CODE> десятичная цифра в диапазоне [1,9], определяет позицию
параметра в списке. Например, обращение
<CODE>format("%2$d -&gt; %1$03d", 1, 34)</CODE> выдаст результат
<CODE>"34 -&gt; 001"</CODE>. Тот же самый параметр может использоваться
больше, чем в одном преобразовании.

<P>Опции <CODE>c</CODE>, <CODE>d</CODE>, <CODE>E</CODE>, <CODE>e</CODE>,
<CODE>f</CODE>, <CODE>g</CODE>, <CODE>G</CODE>, <CODE>i</CODE>,
<CODE>o</CODE>, <CODE>u</CODE>, <CODE>X</CODE> и <CODE>x</CODE> все ожидают
число как параметр, в то время как <CODE>q</CODE> и <CODE>s</CODE> ожидают
строку. Модификатор <CODE>*</CODE> может применяться, формируя
соответствующую строку формата. Например, <CODE>"%*g"</CODE>
может соответствовать <CODE>"%"...что-то-внутри..."g"</CODE>.

<P>Ни строка формата, ни значения строки, которые нужно форматировать с
<CODE>%s</CODE>, не могут содержать вложенные ноли. Но <CODE>%q</CODE>
обрабатывает значения строк с вложенными нолями.

<h3><TT>gsub (s, pat, repl [, n])</TT></h3>
<A NAME="gsub"></A>
Возвращает копию <CODE>s</CODE>, в которой все местонахождения образца
<CODE>pat</CODE> были заменены строкой замены, определенной в
<CODE>repl</CODE>. Функция <CODE>gsub</CODE> также возвращает, как второе
значение, общее количество сделанных замен.

<P>Если <CODE>repl</CODE> является строкой, то значение используется для
замены как есть. Любая последовательность в <CODE>repl</CODE> в форме
<CODE>%n</CODE> с <CODE>n</CODE> от 1 до 9 предназначена для
<EM>n</EM>-й зафиксированной подстроки.

<P>Если <CODE>repl</CODE> представляет собой функцию, то эта функция будет
вызвана каждый раз, когда соответствие происходит, со всеми зафиксированными
подстроками, переданными как параметры. Если значение, возвращенное этой
функцией, является строкой, то это используется как строка для замены, иначе
берется пустая строка.

<P>Последний факультативный параметр <CODE>n</CODE> ограничивает максимальное
число замен. Например, когда <CODE>n</CODE> равно 1, только первое
местонахождение <CODE>pat</CODE> будет обработано.

<P>Имеются некоторые примеры:
<PRE>
   x = gsub("hello world", "(%w+)", "%1 %1")
   --&gt; x="hello hello world world"
   x = gsub("hello world", "(%w+)", "%1 %1", 1)
   --&gt; x="hello hello world"
   x = gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
   --&gt; x="world hello Lua from"
   x = gsub("home = $HOME, user = $USER", "%$(%w+)", getenv)
   --&gt; x="home = /home/roberto, user = roberto"  (for instance)
   x = gsub("4+5 = $return 4+5$", "%$(.-)%$", dostring)
   --&gt; x="4+5 = 9"
   local t = {name="lua", version="4.0"}
   x = gsub("$name - $version", "%$(%w+)", function (v) return %t[v] end)
   --&gt; x="lua - 4.0"
   t = {n=0}
   gsub("first second word", "(%w+)", function (w) tinsert(%t, w) end)
   --&gt; t={"first", "second", "word"; n=3}
</PRE>

<A NAME="pm"></A><h3>Шаблоны</h3>
<H4>Символьный класс:</H4>
<A NAME="character class"><EM>Символьный класс</EM></A> используется, чтобы
представить набор символов. Следующие комбинации позволяются в
описании символьного класса:

<DL><DT><B><EM>x</EM></B>
<DD>Здесь <EM>x</EM> любые волшебные символы: <CODE>^$()%.[]*+-?</CODE>.
Представляет непосредственно символ <EM>x</EM>.

<DT><B><TT>. (точка)</TT></B>
<DD>Представляет все символы.

<DT><B><TT>%a</TT></B>
<DD>Представляет все буквы.

<DT><B><TT>%c</TT></B>
<DD>Представляет все спецсимволы.

<DT><B><TT>%d</TT></B>
<DD>Представляет все цифры.

<DT><B><TT>%l</TT></B>
<DD>Представляет все буквы в нижнем регистре.

<DT><B><TT>%p</TT></B>
<DD>Представляет все символы пунктуации.

<DT><B><TT>%s</TT></B>
<DD>Представляет все пробелы.

<DT><B><TT>%u</TT></B>
<DD>Представляет все буквы в верхнем регистре.

<DT><B><TT>%w</TT></B>
<DD>Представляет все алфавитно-цифровые символы.

<DT><B><TT>%x</TT></B>
<DD>Представляет все шестнадцатеричные цифры.

<DT><B><TT>%z</TT></B>
<DD>Представляет символ с представлением 0.

<DT><B><TT>%<EM>x</TT></EM></B>
<DD>Здесь <EM>x</EM> задает любой не алфавитно-цифровой символ. Представляет
символ <EM>x</EM>. Это стандартный способ экранировки управляющих
спецсимволов. Лучше следить за тем, чтобы любому символу пунктуации (даже не
управляющему!) предшествовал <CODE>%</CODE>, когда символ применен в образце.

<DT><B><TT>[char-set</TT></B>]
<DD>Представляет класс, который является объединением всех символов в
<CODE>char-set</CODE>. Диапазон символов может быть определен, отделяя
конечные символы диапазона тире (<CODE>-</CODE>). Все классы
<CODE>%</CODE><EM>x</EM>, описанные выше, могут также использоваться как
компоненты в char-set. Все другие символы в char-set представляются как есть.
Например, <CODE>[%w_]</CODE> (или <CODE>[_%w]</CODE>) представляет все
алфавитно-цифровые символы плюс символ подчеркивания, <CODE>[0-7]</CODE>
представляет восьмеричные цифры, а <CODE>[0-7%l%-]</CODE> представляет
восьмеричные цифры плюс символы строчных букв плюс символ тире.
Взаимодействие между диапазонами и классами не определено. Следовательно,
образцы, подобные <CODE>[%a-z]</CODE> или <CODE>[a-%%]</CODE> не
имеют никакого значения.

<DT><B><TT>[^char-set</TT></B>]
<DD>Представляет дополнение <CODE>char-set</CODE>, где <CODE>char-set</CODE>
интерпретируется как выше.</DL>

<P>Для всех классов, представляемых одиночными символами (<CODE>%a</CODE>,
<CODE>%c</CODE>, ...), соответствующая прописная буква представляет
дополнение класса. Например, <CODE>%S</CODE> представляет все не пробелы.

<P>Определения символа, пробела и т.д. зависят от текущего региона. В
частности, класс <CODE>[a-z]</CODE> не может быть эквивалентен
<CODE>%l</CODE>. Вторая форма должна быть предпочтительней для переносимости.

<H4>Элемент образца:</H4>
<A NAME="pattern item"><EM>Элементом образца</EM></A> может быть:
<UL><LI>Одиночный символьный класс, который соответствует любому
одиночному символу в классе.

<LI>Одиночный символьный класс, сопровождаемый <CODE>*</CODE>, что
соответствует 0 или большему количеству повторений символов в классе. Эти
элементы повторения будут всегда соответствовать самой
длинной возможной последовательности.

<LI>Одиночный символьный класс, сопровождаемый <CODE>+</CODE>, что
соответствует 1 или большему количеству повторений символов в классе. Эти
элементы повторения будут всегда соответствовать самой
длинной возможной последовательности.

<LI>Одиночный символьный класс, сопровождаемый <CODE>-</CODE>, что
также соответствует 0 или большему количеству повторений символов в классе.
В отличие от <CODE>*</CODE>, элементы повторения будут всегда соответствовать
самой короткой возможной последовательности.

<LI>Одиночный символьный класс, сопровождаемый <CODE>?</CODE>, что
соответствует 0 или 1 местонахождению символа в классе.

<LI><TT>%<EM>n</TT></EM>, для <EM>n</EM> от 1 до 9. Такой элемент
соответствует подстроке, равной <EM>n</EM>-й зафиксированной строке.

<LI><TT>%b<EM>xy</TT></EM>, здесь <EM>x</EM> и <EM>y</EM> два различных
символа. Такой элемент соответствует строкам, которые начинаются с
<EM>x</EM>, заканчиваются на <EM>y</EM>, и в них <EM>сбалансированы</EM>
<EM>x</EM> и <EM>y</EM>. Это означает, что, если читать строку слева направо,
подсчитывая <I>+1</I> для <EM>x</EM> и <I>-1</I> для <EM>y</EM>, то последний
<EM>y</EM> является первым <EM>y</EM>, для которого счетчик равен 0.
Например, элемент <CODE>%b()</CODE> соответствует выражениям со
сбалансированными круглыми скобками.</UL>

<H4>Шаблоны:</H4>
<A NAME="pattern"><EM>Шаблон</EM></A> представляет собой последовательность
элементов образца. Циркумфлекс (<CODE>^</CODE>) в начале образца закрепляет
соответствие в начале подчиненной строки. <CODE>$</CODE> в конце образца
закрепляет соответствие в конце подчиненной строки. В других позициях
<CODE>^</CODE> и <CODE>$</CODE> не имеют никакого специального значения и
представляются как есть.

<H4>Сборы данных:</H4>
Образец может содержать подобразцы, включенные в круглые скобки, они
описывают <EM>сборы данных</EM>. Когда соответствие выполнено, подстроки
подчиненной строки, которые соответствуют сборам данных, сохранены для
будущего использования. Сборы данных пронумерованы согласно их левым круглым
скобкам. Например, в образце <CODE>"(a*(.)%w(%s*))"</CODE>, часть
соответствия строки <CODE>"a*(.)%w(%s*)"</CODE> сохранена как первый
сбор данных (а, следовательно, имеет номер 1), символьное соответствие
<CODE>.</CODE> зафиксировано с номером 2, а часть, соответствующая
<CODE>%s*</CODE>, конечно, имеет номер 3.

<P>Образец не может содержать вложенные ноли. Используйте вместо этого
<CODE>%z</CODE>.

<A NAME="mathlib"></A><A NAME="6.3"></A><H2>4.6.3 Математические функции</H2>
<P>Эта библиотека предоставляет интерфейс к некоторым функциям стандартной
математической библиотеки C. Кроме того, это регистрирует метод тэга для
двоичного оператора <CODE>^</CODE>, который возвращает <I>x^y</I>, когда
применяется к числам <CODE>x^y</CODE>.

<P>Библиотека обеспечивает следующие функции:
<A NAME="abs"></A><A NAME="acos"></A><A NAME="asin"></A><A NAME="atan"></A>
<A NAME="atan2"></A><A NAME="ceil"></A><A NAME="cos"></A><A NAME="def"></A>
<A NAME="exp"></A><A NAME="floor"></A><A NAME="log"></A><A NAME="log10"></A>
<A NAME="max"></A><A NAME="min"></A><A NAME="mod"></A><A NAME="rad"></A>
<A NAME="sin"></A><A NAME="sqrt"></A><A NAME="tan"></A><A NAME="frexp"></A>
<A NAME="ldexp"></A><A NAME="random"></A><A NAME="randomseed"></A>
<PRE>
abs  acos  asin  atan  atan2  ceil  cos  deg    exp    floor   log  log10
max  min   mod   rad   sin    sqrt  tan  frexp  ldexp  random  randomseed
</PRE>
Плюс глобальная переменная <A NAME="PI"><TT>PI</TT></A>. Большинство из них
представляют собой только интерфейсы к функциям в C-библиотеке, за
исключением того, что для тригонометрических функций все углы выражены в
<EM>градусах</EM>, а не в радианах. Функции <CODE>deg</CODE> и
<CODE>rad</CODE> могут использоваться для того, чтобы преобразовывать данные
между радианами и градусами.

<P>Функция <CODE>max</CODE> возвращает максимальное значение числовых
параметров. Точно так же <CODE>min</CODE> вычисляет минимум. Обе они могут
использоваться с 1, 2 или большим количеством параметров.

<P>Функции <CODE>random</CODE> и <CODE>randomseed</CODE> представляют собой
интерфейсы к простому генератору случайных чисел, предоставляемому ANSI C
(соответвенно функции <CODE>rand</CODE> и <CODE>srand</CODE>). Не может быть
дпно никаких гарантий касательно их статистических свойств. Функция
<CODE>random</CODE> при вызове без параметров возвращает псевдослучайное
вещественное число в диапазоне <I>[0,1)</I>. При вызове с параметром
<I>n</I>, <CODE>random</CODE> вернет псевдослучайное целое число в диапазоне
<I>[1,n]</I>. При вызове с двумя параметрами <I>l</I> и <I>u</I>,
<CODE>random</CODE> вернет псевдослучайное целое число в диапазоне
<I>[l,u]</I>. Границы всегда входят в диапазон.

<A NAME="libio"></A><A NAME="6.4"></A><H2>4.6.4 Средства ввода-вывода</H2>
<P>Все операции ввода-вывода в Lua реализованы через два
<A NAME="file handles"><EM>дескриптора файла</EM></A>, по одному на ввод и
вывод. Эти дескрипторы сохранены в двух глобальных переменных Lua, названных
<CODE>_INPUT</CODE> и <CODE>_OUTPUT</CODE>. Глобальные переменные
<CODE>_STDIN</CODE>, <CODE>_STDOUT</CODE> и <CODE>_STDERR</CODE>
инициализированы с описателями файлов для
<CODE>stdin</CODE>, <CODE>stdout</CODE> и <CODE>stderr</CODE>. Первоначально
Initially, <CODE>_INPUT=_STDIN</CODE> и <CODE>_OUTPUT=_STDOUT</CODE>.
<A NAME="_INPUT"></A><A NAME="_OUTPUT"></A><A NAME="_STDIN"></A>
<A NAME="_STDOUT"></A><A NAME="_STDERR"></A>

<P>Дескриптор файла представляет собой объект userdata, содержащий поток
файла (<CODE>FILE*</CODE>) с отличительным тэгом, созданным
библиотекой ввода-вывода (I/O).

<P>Если иное не установлено, все функции I/O возвращают <B>nil</B> на сбое и
некоторое значение, отличное от <B>nil</B>, при успехе.

<h3><TT>openfile (filename, mode)</TT></h3><A NAME="openfile"></A>
<P>Эта функция открывает файл в режиме, определенном в строке
<CODE>mode</CODE>. Это возвращает новый дескриптор файла или, в случае
ошибок, <B>nil</B> плюс строку, описывающую ошибку. Эта функция не изменяет
<CODE>_INPUT</CODE> или <CODE>_OUTPUT</CODE>.

<P>Строка <CODE>mode</CODE> может быть любой из следующего списка:
<DL><DT><B>r</B>
<DD>Режим чтения.

<DT><B>w</B>
<DD>Режим записи.

<DT><B>a</B>
<DD>Режим добавления к концу.

<DT><B>r+</B>
<DD>Режим обновления, все ранее записанные данные сохраняются.

<DT><B>w+</B>
<DD>Режим обновления, все ранее записанные данные уничтожаются.

<DT><B>a+</B>
<DD>Режим модификации, предыдущие данные сохраняются, запись позволяется
только в конце файла.</DL>

Строка <CODE>mode</CODE> может также иметь в конце <CODE>b</CODE>, что
необходимо в некоторых системах, чтобы открыть файл в двоичном режиме. Эта
строка аналогична той, что используется в стандартной функции C
<CODE>fopen</CODE>.

<h3><TT>closefile (handle)</TT></h3><A NAME="closefile"></A>
<P>Эта функция закрывает файл. Это не изменяет
<CODE>_INPUT</CODE> или <CODE>_OUTPUT</CODE>.

<h3><TT>readfrom (filename)</TT></h3><A NAME="readfrom"></A>
<P>Эта функция может быть вызвана двумя путями. Когда она вызвана с именем
файла, открывает именованный файл, устанавливает дескриптор как значение
<CODE>_INPUT</CODE> и возвращает это значение. Это не закрывает текущий файл
input. При вызове без параметров, она закрывает файл <CODE>_INPUT</CODE> и
восстанавливает <CODE>stdin</CODE> как значение <CODE>_INPUT</CODE>. Если эта
функция где-то не сработала, она возвращает <B>nil</B> плюс строку описания.

<P>Если <CODE>filename</CODE> начинается с символа трубопровода
<CODE>|</CODE>, открывается поточный ввод <A NAME="piped input"></A> через
функцию <A NAME="popen"><TT>popen</TT></A>. Не все системы его выполняют.
Кроме того, число файлов, которые могут быть открыты в то же самое время,
обычно ограничивается и зависит от системы.

<h3><TT>writeto (filename)</TT></h3><A NAME="writeto"></A>
<P>Эта функция может быть вызвана двумя путями. Когда она вызвана с именем
файла, открывает именованный файл, устанавливает дескриптор как значение
<CODE>_OUTPUT</CODE> и возвращает это значение. Это не закрывает текущий
выходной файл. Обратите внимание, что если файл уже существует, <EM>то он
будет полностью уничтожен</EM> этой операцией. Когда функция вызвана без
параметров, она закрывает файл <CODE>_OUTPUT</CODE> и восстанавливает
<CODE>stdout</CODE> как значение <CODE>_OUTPUT</CODE>. В случае ошибки
функция возвращает <B>nil</B> плюс строку, описывающую ошибку.
<A NAME="closing a file"></A>

<P>Если <CODE>filename</CODE> начинается с символа трубопровода
<CODE>|</CODE>, открывается поточный ввод <A NAME="piped input"></A> через
функцию <A NAME="popen"><TT>popen</TT></A>. Не все системы его выполняют.
Кроме того, число файлов, которые могут быть открыты в то же самое время,
обычно ограничивается и зависит от системы.

<h3><TT>appendto (filename)</TT></h3><A NAME="appendto"></A>
<P>Открывает файл, именованный <CODE>filename</CODE> и устанавливает это как
значение <CODE>_OUTPUT</CODE>. В отличие от операции <CODE>writeto</CODE>,
эта функция не стирает предыдущее содержание файла, вместо этого все, что
пишется в файл, будет конкатенировано к концу. Если эта функция получила
сбой, она вернет <B>nil</B> плюс строку, описывающую ошибку.

<h3><TT>remove (filename)</TT></h3><A NAME="remove"></A>
<P>Удаляет файл с данным именем. Если эта функция получила сбой, она вернет
<B>nil</B> плюс строку с описанием ошибки.

<h3><TT>rename (name1, name2)</TT></h3><A NAME="rename"></A>
<P>Переименовывает файл <CODE>name1</CODE> в <CODE>name2</CODE>. Если эта
функция получила сбой, она вернет <B>nil</B> плюс строку с описанием ошибки.

<h3><TT>flush ([filehandle])</TT></h3><A NAME="flush"></A>
<P>Сохраняет любые записанные данные в заданный файл. Если
<CODE>filehandle</CODE> не определен, то <CODE>flush</CODE> сбросит на диск
все открытые файлы. Если эта функция получила сбой, она вернет <B>nil</B>
плюс строку с описанием ошибки.

<h3><TT>seek (filehandle [, whence] [, offset])</TT></h3><A NAME="seek"></A>
<P>Получает позицию файла, измеряемую в байтах от начала файла, и меняет ее
на позицию, данную смещением <CODE>offset</CODE> плюс ядром, определенным
как строка <CODE>whence</CODE> следующим образом:
<DL><DT><B>set</B>
<DD>Позиция 0 (начало файла).

<DT><B>cur</B>
<DD>Текущая позиция.

<DT><B>end</B>
<DD>Конец файла.</DL>

В случае успеха функция <CODE>seek</CODE> возвращает конечную позицию файла,
измеряемую в байтах от начала файла. Если эта функция получила сбой, она
вернет <B>nil</B> плюс строку, описывающую эту ошибку.

<P>Значение по умолчанию для <CODE>whence</CODE> равно <CODE>cur</CODE>, а
для <CODE>offset</CODE> это 0. Следовательно, вызов <CODE>seek(file)</CODE>
возвращает текущую позицию файла без того, чтобы изменить это. Вызов
<CODE>seek(file, "set")</CODE> устанавливает позицию на начало файла (и
возвращает 0), а <CODE>seek(file, "end")</CODE> устанавливает позицию в конец
файла и возвращает его размер.

<h3><TT>tmpname ()</TT></h3><A NAME="tmpname"></A>
<P>Возвращает строку с именем файла, которое может безопасно использоваться
для временного файла. Файл должен быть явно открыт перед использованием и
удален, когда больше не нужен.

<h3><TT>read ([filehandle,] format1, ...)</TT></h3><A NAME="read"></A>
<P>Читает файл <CODE>_INPUT</CODE> или <CODE>filehandle</CODE>, если этот
параметр задан, согласно данным форматам, которые определяют, что читать. Для
каждого формата, функция возвращает строку или число с прочитанными данными
или <B>nil</B>, если не может читать данные с определенным форматом. Когда
вызвана без форматов, эта функция использует заданный по умолчанию формат,
который читает следующую строку.

<P>Доступные форматы такие:
<DL><DT><B>*n</B>
<DD>Читает число. Это единственный формат, который возвращает
число вместо строки.

<DT><B>*l</B>
<DD>Читает следующую строку (обходя концы строк) или <B>nil</B> в конце
файла. Это и есть заданный по умолчанию формат.

<DT><B>*a</B>
<DD>Читает целый файл, начинающийся в текущей позиции. На конце файла,
возвращает пустую строку.

<DT><B>*w</B>
<DD>Читает следующее слово (максимальная последовательность символов без
пробелов. Пробелы обходит в случае необходимости. Замечу, что под пробелом
здесь понимается не только собственно пробел, но и спецсимволы. В конце файла
функция вернет <B>nil</B>.

<DT><B><EM>Число</EM></B>
<DD>Читает строку до указанного числа символов в длину или <B>nil</B>
на конце файла.</DL>

<h3><TT>write ([filehandle, ] value1, ...)</TT></h3><A NAME="write"></A>
<P>Пишет значение каждого из параметров в файл <CODE>_OUTPUT</CODE> или в
<CODE>filehandle</CODE>, если этот параметр задан. Параметры должны быть
строками или числами. Чтобы писать другие значения, используйте
<CODE>tostring</CODE> или <CODE>format</CODE> перед <CODE>write</CODE>.
Если эта функция нарвалась на ошибку, она вернет <B>nil</B> и строку с
описанием данной ошибки.

<A NAME="libiosys"></A><A NAME="6.5"></A><H2>4.6.5 Средства системы</H2>
<h3><TT>clock ()</TT></h3><A NAME="clock"></A>
<P>Возвращает приближение количество времени CPU,
используемое программой (в секундах).

<h3><TT>date ([format])</TT></h3><A NAME="date"></A>
<P>Возвращает строку, содержащую дату и время, форматируемую согласно
данному формату <CODE>format</CODE>. Формат задается по тем же самым
правилам, что и в функции ANSI C <CODE>strftime</CODE>. Когда вызвана без
параметров, возвращает приемлемое представление даты и времени, которое
зависит от ведущей системы и от текущего региона.

<h3><TT>execute (command)</TT></h3><A NAME="execute"></A>
<P>Эта функция эквивалентна функции C <CODE>system</CODE>. Это передает
команду <CODE>command</CODE>, которая будет выполнена оболочкой операционной
системы. Возвращает код состояния, который является зависимым от системы.

<h3><TT>exit ([code])</TT></h3><A NAME="exit"></A>
<P>Вызывает C-функцию <CODE>exit</CODE> с факультативным кодом завершения
программы <CODE>code</CODE>. Значение по умолчанию для <CODE>code</CODE>:
код успешного завершения.

<h3><TT>getenv (varname)</TT></h3><A NAME="getenv"></A>
<P>Возвращает значение системной переменной процесса <CODE>varname</CODE>
или <B>nil</B>, если эта переменная не определена.

<h3><TT>setlocale (locale [, category])</TT></h3><A NAME="setlocale"></A>
<P>Эта функция предоставляет интерфейс к функции ANSI C
<CODE>setlocale</CODE>. <CODE>locale</CODE> представляет собой строку,
определяющую регион, <CODE>category</CODE> факультативная строка,
описывающая которую категорию изменить: <CODE>"all"</CODE>,
<CODE>"collate"</CODE>, <CODE>"ctype"</CODE>, <CODE>"monetary"</CODE>,
<CODE>"numeric"</CODE> или <CODE>"time"</CODE>, заданная по умолчанию
категория: <CODE>"all"</CODE>. Функция возвращает имя нового региона или
<B>nil</B>, если этот запрос не может быть выполнен.

<A NAME="debugI"></A><A NAME="7."></A><H1>4.7 Интерфейс отладки</H1>
<P>Lua не имеет никаких встроенных средств отладки. Вместо этого, это
предлагает специальный интерфейс, посредством функций и обработчиков
прерываний, который позволяет создание различных видов отладчиков,
профилировщиков и других инструментальных средств, которые нуждаются во
<EM>внутренней информации из интерпретатора</EM>. Этот интерфейс объявлен в
файле заголовков <CODE>luadebug.h</CODE>.

<A NAME="7.1"></A><H2>4.7.1 Информация стека и функций</H2>
<P><A NAME="lua_getstack"></A>Основная функция, чтобы получить информацию
относительно стека интерпретатора:
<PRE>
int lua_getstack (lua_State *L, int level, lua_Debug *ar);
</PRE>
Это заполняет части структуры <CODE>lua_Debug</CODE> с идентификацией
<EM>записи активации</EM> функции, выполняющейся в заданном уровне. Уровень
0 текущая функция управления, в то время как уровень <I>n+1</I> функция,
которая вызвала уровнем <I>n</I>. Обычно <CODE>lua_getstack</CODE> вернет 1,
когда вызвана с уровнем больше, чем глубина стека, она возвращает 0.

<P><A NAME="lua_Debug"></A>Структура <CODE>lua_Debug</CODE> используется,
чтобы нести различные части информации относительно активной функции:
<PRE>
typedef struct lua_Debug {
  const char *event;     /* "call", "return" */
  int currentline;       /* (l) */
  const char *name;      /* (n) */
  const char *namewhat;
          /* (n) поля, глобальные и локальные переменные, методы тэгов */
  int nups;              /* (u) количество upvalues */
  int linedefined;       /* (S) */
  const char *what;      /* (S) "Lua" функция, "C" функция, Lua "main" */
  const char *source;    /* (S) */
  char short_src[LUA_IDSIZE]; /* (S) */
  /* private part */
  ...
} lua_Debug;
</PRE>

<CODE>lua_getstack</CODE> заполняет только одну из частей этой структуры для
будущего использования. Чтобы заполнить другие поля <CODE>lua_Debug</CODE>
полезной информацией, надо вызвать:
<A NAME="lua_getinfo"></A>
<PRE>
int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar);
</PRE>
Эта функция возвращает 0 на ошибке (например, недопустимая опция в
<CODE>what</CODE>). Каждый символ в строке <CODE>what</CODE> указывает
некоторые поля <CODE>ar</CODE>, которые будет заполнены, как обозначено
символом в круглых скобках в определении <CODE>lua_Debug</CODE>:
<CODE>S</CODE> заполняет поле исходником (<CODE>source</CODE>),
<CODE>linedefined</CODE> и <CODE>what</CODE>, <CODE>l</CODE> заполняет поле
текущей строкой (<CODE>currentline</CODE>) и так далее. Кроме того,
<CODE>f</CODE> помещает в стек функцию, которая работает в данном уровне.

<P>Чтобы добираться до информации относительно функции, которая не активна
(то есть она не в стеке), Вы помещаете функцию в стек и начинаете строку
<CODE>what</CODE> с символа <CODE>&gt;</CODE>. Например, чтобы знать, в
которой строке функция <CODE>f</CODE> была определена, Вы можете писать:
<PRE>
  lua_Debug ar;
  lua_getglobal(L, "f");
  lua_getinfo(L, "&gt;S", &amp;ar);
  printf("%d\n", ar.linedefined);
</PRE>
Поля <CODE>lua_Debug</CODE> имеют следующее значение:

<DL><DT><B>source</B>
<DD>Если функция была определена в строке, <CODE>source</CODE> как раз и
будет этой строкой, а если функция была определена в файле,
<CODE>source</CODE> начинается с <CODE>@</CODE>, а дальше имя файла.

<DT><B>short_src</B>
<DD>Пригодная к печати версия <CODE>source</CODE>, чтобы использоваться в
сообщениях об ошибке.

<DT><B>linedefined</B>
<DD>Код строки, где было начато определение функции.

<DT><B>what</B>
<DD>Строка <CODE>"Lua"</CODE>, если это функция Lua, <CODE>"C"</CODE>, если
это функция C или <CODE>"main"</CODE>, если это основная часть chunk.

<DT><B>currentline</B>
<DD>Текущая строка, где данная функция выполняется. Когда никакая информация
о строке недоступна, <CODE>currentline</CODE> установлен в <I>-1</I>.

<DT><B>name</B>
<DD>Приемлемое имя для данной функции. Так как функции в Lua значения первого
класса, они не имеют фиксированных имен. Именем функции может быть значение
многих глобальных переменных, в то время как другие функции могут быть
сохранены только в поле таблицы. Функция <CODE>lua_getinfo</CODE> проверяет,
является ли данная функция методом тэга или значением глобальной переменной.
Если данная функция представляет собой метод тэга, <CODE>name</CODE>
указывает на имя события. Если данная функция является значением глобальной
переменной, то <CODE>name</CODE> указывает на имя переменной. Если данная
функция не является ни методом тэга, ни глобальной переменной, то
<CODE>name</CODE> установлен в <CODE>NULL</CODE>.

<DT><B>namewhat</B>
<DD>Объясняет предыдущее поле. Если функция глобальная переменная,
<CODE>namewhat</CODE> равен <CODE>"global"</CODE>. Если функция метод тэга,
<CODE>namewhat</CODE> равен <CODE>"tag-method"</CODE>, иначе
<CODE>namewhat</CODE> равен <CODE>""</CODE> (пустой строке).

<DT><B>nups</B>
<DD>Число upvalues в функции.</DL>

<A NAME="7.2"></A><H2>4.7.2 Управление локальными переменными</H2>
<P>Для манипулирования локальными переменными <CODE>luadebug.h</CODE>
использует индексы: первый параметр или локальная переменная имеет индекс 1 и
так далее до последней активной локальной переменной.

<P><A NAME="lua_getlocal"></A><A NAME="lua_setlocal"></A>Следующие функции
позволяют манипулировать локальными переменными данной активной записи.
<PRE>
const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n);
const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n);
</PRE>
Параметр <CODE>ar</CODE> должен быть имеющей силу записью активации,
заполненной предыдущим обращением к <CODE>lua_getstack</CODE> или данный как
параметр обработчика прерываний. Функция <CODE>lua_getlocal</CODE> получает
индекс локальной переменной (<CODE>n</CODE>), помещает значение в стек и
возвращает имя. Для <CODE>lua_setlocal</CODE> Вы помещаете новое значение в
стек, а функция назначает это значение переменной и возвращает имя. Обе
функции возвращают <CODE>NULL</CODE> при сбое. Это случается, если заданный
индекс больше, чем число активных локальных переменных.

<P>Как пример, следующая функция вносит в список имена всех локальных
переменных функции в данном уровне стека:
<PRE>
int listvars (lua_State *L, int level) {
  lua_Debug ar;
  int i = 1;
  const char *name;

  if (lua_getstack(L, level, &amp;ar) == 0) return 0;
     /* failure: no such level in the stack */
  while ((name = lua_getlocal(L, &amp;ar, i++)) != NULL) {
    printf("%s\n", name);
    lua_pop(L, 1);  /* remove variable value */
  }
  return 1;
}
</PRE>

<A NAME="sub-hooks"></A><A NAME="7.3"></A><H2>4.7.3 Обработчики прерываний
</H2>
<P>Lua-интерпретатор предлагает два обработчика прерываний для целей отладки:
<EM>call</EM> и <EM>line</EM>. Оба обработчика имеют тот же самый тип:
<A NAME="lua_Hook"></A>
<PRE>
typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);
</PRE>
Вы можете устанавливать их со следующими функциями:
<A NAME="lua_setcallhook"></A><A NAME="lua_setlinehook"></A>
<PRE>
lua_Hook lua_setcallhook (lua_State *L, lua_Hook func);
lua_Hook lua_setlinehook (lua_State *L, lua_Hook func);
</PRE>
Обработчик прерываний заблокирован, когда значение <CODE>NULL</CODE>, что и
является начальным значением обоих обработчиков прерываний. Функции
<CODE>lua_setcallhook</CODE> и <CODE>lua_setlinehook</CODE> устанавливают
соответствующие обработчики прерываний и возвращают их предыдущие значения.

<P>Обработчик прерываний call вызван всякий раз, когда интерпретатор вызывает
или оставляет функцию. Поле события <CODE>event</CODE> записи <CODE>ar</CODE>
имеет строки <CODE>"call"</CODE> или <CODE>"return"</CODE>. Этот
<CODE>ar</CODE> может затем использоваться в обращениях для
<CODE>lua_getinfo</CODE>, <CODE>lua_getlocal</CODE> и
<CODE>lua_setlocal</CODE>, чтобы получить большее количество информации
относительно функции и управлять локальными переменными.

<P>Обработчик прерываний line вызван каждый раз, когда интерпретатор изменяет
строку кода, которую выполняет. Поле <CODE>event</CODE> в <CODE>ar</CODE>
имеет строку <CODE>"line"</CODE>, а поле <CODE>currentline</CODE> хранит код
строки. Вы можете использовать этот <CODE>ar</CODE> в других
обращениях к отладочному API.

<P>В то время как Lua управляет обработчиком прерываний, это отключает другие
обращения к обработчикам прерываний. Следовательно, если обработчик
прерываний вызывает Lua, чтобы выполнить функцию или chunk, это выполнение
идет без обращений к обработчикам прерываний.

<A NAME="7.4"></A><H2>4.7.4 Рефлексивный интерфейс отладки</H2>
<P>Библиотека <CODE>ldblib</CODE> обеспечивает функциональные возможности
интерфейса отладки программам Lua. Если Вы хотите использовать эту
библиотеку, Ваша ведущая прикладная программа должна открыть ее вызовом
<CODE>lua_dblibopen</CODE>.<A NAME="lua_dblibopen"></A>

<P>Вы должны проявить большую осторожность при использовании этой библиотеки.
Функции, обеспеченные здесь, должны использоваться исключительно для
отладки и подобных задач (например, профилирования). Пожалуйста,
сопротивляйтесь искушению использовать их как обычный инструмент
программирования. Они медленны и нарушают некоторые аспекты языка (например,
секретность локальных переменных). Как общее правило, если Ваша программа не
нуждается в этой библиотеке, не открывайте ее вообще.

<h3><TT>getinfo (function, [what])</TT></h3><A NAME="getinfo"></A>
<P>Эта функция возвращает таблицу с информацией относительно функции. Вы
можете давать функцию непосредственно, или Вы можете давать число как
значение <CODE>function</CODE>, что означает функциональное управление в
уровне стека <CODE>function</CODE>. Уровень 0 считается текущей функцией
(непосредственно <CODE>getinfo</CODE>), уровень 1: функция, которая вызвала
<CODE>getinfo</CODE> и так далее. Если <CODE>function</CODE> представляет
собой число большее, чем число активных функций, то <CODE>getinfo</CODE>
сразу вернет <B>nil</B>.

<P>Возвращенная таблица содержит все поля, возвращенные
<CODE>lua_getinfo</CODE> со строкой <CODE>what</CODE> описывающий, что
нужно получить. Значение по умолчанию для <CODE>what</CODE>: нужно получить
всю доступную информацию.

<P>Например, выражение <CODE>getinfo(1,"n").name</CODE> вернет имя текущей
функции, если приемлемое имя может быть найдено, и
<CODE>getinfo(print)</CODE> возвращает таблицу со всей доступной информацией
относительно функции <CODE>print</CODE>.

<h3><TT>getlocal (level, local)</TT></h3><A NAME="getlocal"></A>
<P>Эта функция возвращает имя и значение локальной переменной с индексом,
<CODE>local</CODE> на уровне <CODE>level</CODE> стека. Первый параметр или
локальная переменная имеет индекс 1 и так далее до последней активной
локальной переменной. Функция вернет <B>nil</B>, если не имеется никакой
локальной переменной с данным индексом, и поднимает ошибку когда вызвана с
<CODE>level</CODE> вне диапазона. Вы можете вызывать <CODE>getinfo</CODE>,
чтобы проверить, имеет ли этот уровень силу.

<h3><TT>setlocal (level, local, value)</TT></h3><A NAME="setlocal"></A>
<P>Эта функция назначает значение <CODE>value</CODE> локальной переменной
с индексом <CODE>local</CODE> функции на уровне <CODE>level</CODE> стека.
Функция вернет <B>nil</B>, если не имеется никакой локальной переменной с
данным индексом, и поднимает ошибку когда вызвана с уровнем
<CODE>level</CODE> вне диапазона.

<h3><TT>setcallhook (hook)</TT></h3><A NAME="setcallhook"></A>
<P>Устанавливает функциональный обработчик прерываний <CODE>hook</CODE>
как обработчик прерываний call. Этот обработчик прерываний будет вызван
каждый раз при начале и завершении интерпретации функции. Единственный
параметр на обработчик прерываний call: имя события (<CODE>"call"</CODE> или
<CODE>"return"</CODE>). Вы можете вызывать <CODE>getinfo</CODE> с уровнем 2,
чтобы получить большее количество информации относительно функции
(уровень 0 соответствует функции <CODE>getinfo</CODE>, а уровень 1 задает
функцию обработчика прерываний. Когда вызвана без параметров, эта функция
выключает обработчики прерываний call. <CODE>setcallhook</CODE> вернет
старый обработчик прерываний.

<h3><TT>setlinehook (hook)</TT></h3><A NAME="setlinehook"></A>
<P>Устанавливает функциональный обработчик прерываний <CODE>hook</CODE> как
обработчик прерываний line. Этот обработчик прерываний будет вызван каждый
раз, когда интерпретатор изменяет обрабатываемую строку кода. Единственный
параметр на обработчике прерываний line: код строки, которую интерпретатор
собирается выполнять. Когда вызвана без параметров, эта функция выключает
обработчики прерываний line. Вызов <CODE>setlinehook</CODE> возвращает
старый обработчик прерываний.

<A NAME="lua-sa"></A><A NAME="8."></A><H1>4.8 Lua в автономном режиме</H1>
<P>Хотя Lua был разработан как язык расширений, чтобы быть вложенным в
ведущую программу на C, это часто используется как автономный язык.
Интерпретатор для Lua, как автономного языка, называется просто
<CODE>lua</CODE>. Эта программа может быть вызвана с любой
последовательностью следующих параметров:

<DL><DT><B><TT>-sNUM</TT></B>
<DD>Устанавливает размер стека в <TT>NUM</TT> (если используется, должно
быть первой опцией).

<DT><B><TT>-</TT></B>
<DD>Выполняет <CODE>stdin</CODE> как файл.

<DT><B><TT>-c</TT></B>
<DD>Вызывает <CODE>lua_close</CODE> после обработки всех параметров.

<DT><B><TT>-e</TT> \rm<EM>stat</EM></B>
<DD>Выполняет строку <CODE>stat</CODE>.

<DT><B><TT>-f filename</TT></B>
<DD>Выполняет файл <CODE>filename</CODE>
с параметрами для таблицы <CODE>arg</CODE>.

<DT><B><TT>-i</TT></B>
<DD>Вводит интерактивный режим с подсказкой.

<DT><B><TT>-q</TT></B>
<DD>Вводит интерактивный режим без подсказки.

<DT><B><TT>-v</TT></B>
<DD>Информация о версии пакета.

<DT><B><TT>var=value</TT></B>
<DD>Устанавливает глобальную переменную
<CODE>var</CODE> в строку <CODE>"value"</CODE>.

<DT><B><TT>filename</TT></B>
<DD>Выполняет файл <CODE>filename</CODE>.</DL>

Когда вызван без параметров, <CODE>lua</CODE> ведет себя как
<CODE>lua -v -i</CODE>, когда <CODE>stdin</CODE> представляет собой терминал,
или аналогично <CODE>lua -</CODE> в противном случае.

<P>Все параметры обработаны по порядку, за исключением <CODE>-c</CODE>.
Например, обращение, подобное:
<PRE>
$ lua -i a=test prog.lua
</PRE>
Сначала взаимодействует с пользователем до <CODE>EOF</CODE> в
<CODE>stdin</CODE>, затем установит <CODE>a</CODE> в <CODE>"test"</CODE> и
в заключение выполнит файл <CODE>prog.lua</CODE>. Здесь под <CODE>$</CODE>
понимается подсказка оболочки. Ваша подсказка может быть иной.

<P>Когда используется опция <TT>-f filename</TT>, все параметры в командной
строке переданы программе Lua <CODE>filename</CODE> в таблице, названной
<CODE>arg</CODE>. В этой таблице поле <CODE>n</CODE> получает индекс
последнего параметра, а поле 0 получает <CODE>"filename"</CODE>. Например,
<PRE>
$ lua a.lua -f b.lua t1 t3
</PRE>
интерпретатор сначала выполняет файл <TT>a.lua</TT>, затем создает таблицу:
<PRE>
arg = {"t1", "t3";  n = 2, [0] = "b.lua"}
</PRE>
а в заключение выполняет файл <TT>b.lua</TT>. <A NAME="getargs"></A>
Автономный интерпретатор также обеспечивает функцию <CODE>getargs</CODE>,
которая может использоваться, чтобы обратиться ко <EM>всем</EM> параметрам
командной строки. Например, если Вы вызываете Lua строкой:
<PRE>
$ lua -c a b
</PRE>
то обращение к <CODE>getargs</CODE> в <CODE>a</CODE> или в <CODE>b</CODE>
возвратит такую таблицу:
<PRE>
{[0] = "lua", [1] = "-c", [2] = "a", [3] = "b", n = 3}
</PRE>

<P>В интерактивном режиме может быть написана многострочная инструкция. Для
этого надо заканчивать промежуточные строки наклонной чертой влево
(<CODE>\</CODE>). Если глобальная переменная <A NAME="_PROMPT">
<TT>_PROMPT</TT></A> определена как строка, то ее значение используется как
подсказка. Следовательно, подсказка может быть изменена непосредственно в
командной строке. Например:
<PRE>
$ lua _PROMPT='myprompt&gt; ' -i
</PRE>
Или в программе Lua, назначая новое значение переменной <CODE>_PROMPT</CODE>.

<P>В Unix Lua-скрипты могут быть переделаны в выполнимые программы, используя
<CODE>chmod +x</CODE> и форму <CODE>#!</CODE> как в
<CODE>#!/usr/local/bin/lua</CODE> или <CODE>#!/usr/local/bin/lua -f</CODE>,
чтобы получить другие параметры.

<A NAME="Acknowledgments"></A><h1>4.10 Благодарности</h1>
<P>Авторы пакета хотели бы поблагодарить CENPES/PETROBRAS, который, совместно
с TeCGraf, использовал ранние версии этой системы и дал ценные комментарии.
Авторы также хотели бы отблагодарить Carlos Henrique Levy за найденное имя
для проекта. Lua на португальском означает луну.

<A NAME="Incompatibilities"></A><h1>4.11
Несовместимость с предыдущими версиями</h1>
<P>Lua 4.0 представляет собой значительное изменение языка. Была проделана
большая работа, чтобы избежать несовместимости с предыдущими общими версиями
Lua, но некоторые различия нужно представлять. Есть список несовместимостей.

<h2>Несовместимости с <A NAME="version 3.2</h2>">version 3.2</h2></A>
<h3>Изменения в языке</h3>
<UL><LI>Все прагмы (<CODE>$debug</CODE>, <CODE>$if</CODE>, ...) удалены.
<LI><B>for</B>, <B>break</B> и <B>in</B> теперь зарезервированные слова.
<LI>Методы тэгов уборки мусора для таблиц теперь устаревшие.
<LI>Имеется теперь только один метод тэга для операторов порядка.
<LI>Во вложенных обращениях к функции, подобно <CODE>f(g(x))</CODE>,
<EM>все</EM> возвращаемые значения из <CODE>g</CODE> переданы как параметры
<CODE>f</CODE>. Это случается только, когда <CODE>g</CODE> последний или
единственный параметр для <CODE>f</CODE>.
<LI>Предварительный компилятор может принимать, что некоторые операторы
ассоциативны для оптимизации. Это может вызывать проблемы, если эти операторы
имеют не ассоциативные методы тэгов.
<LI>Старые прекомпилированные программы устарели, и
должны быть перетранслирована.</UL>

<h3>Изменения в библиотеках</h3>
<UL><LI>При пересечении таблицы с <CODE>next</CODE> или <CODE>foreach</CODE>
таблица не может изменяться.
<LI>Общие образцы чтения теперь устаревшие.
<LI>Функции <CODE>rawgettable</CODE> и <CODE>rawsettable</CODE> теперь
переименованы соответственно в <CODE>rawget</CODE> и <CODE>rawset</CODE>.
<LI>Функции <CODE>foreachvar</CODE>, <CODE>nextvar</CODE>,
<CODE>rawsetglobal</CODE> и <CODE>rawgetglobal</CODE> устаревшие. Вы
можете получать их функциональные возможности, используя операции таблицы
с таблицей глобальных переменных, возвращаемой <CODE>globals</CODE>.
<LI><CODE>setglobal</CODE> и <CODE>sort</CODE> больше не возвращают значение.
Вызов <CODE>type</CODE> больше не возвращает второе значение.
<LI>Опция <CODE>p</CODE> в функции <CODE>call</CODE> устарела.</UL>

<h3>Изменения в API</h3>
<UL><LI>API был полностью переделан. Это теперь полностью повторно
используемо и намного более ясно.
<LI>Отладочный API был полностью переделан.</UL>

<A NAME="BNF"></A><A NAME="grammar"></A><h1>4.12 Полный синтаксис Lua</h1>
<A NAME="grammar"></A>
<PRE>
chunk ::= {stat [`<B>;</B>']}
block ::= chunk
stat ::=  varlist1 `<B>=</B>' explist1 <BR>
          | functioncall <BR>
          | <B>do</B> block <B>end</B> <BR>
          | <B>while</B> exp1 <B>do</B> block <B>end</B> <BR>
          | <B>repeat</B> block <B>until</B> exp1 <BR>
          | <B>if</B> exp1 <B>then</B> block {<B>elseif</B>
            exp1 <B>then</B> block} [<B>else</B> block] <B>end</B><BR>
          | <B>return</B> [explist1] <BR>
          | <B>break</B> <BR>
          | <B>for</B> `<B>name</B>' `<B>=</B>' exp1 `<B>,</B>'
            exp1 [`<B>,</B>' exp1] <B>do</B> block <B>end</B> <BR>
          | <B>for</B> `<B>name</B>' `<B>,</B>' `<B>name</B>'
            <B>in</B> exp1 <B>do</B> block <B>end</B> <BR>
          | <B>function</B> funcname `<B>(</B>' [parlist1] `<B>)</B>'
            block <B>end</B> <BR>
          | <B>local</B> declist [init] funcname ::= `<B>name</B>'
            | `<B>name</B>' `<B>.</B>' `<B>name</B>' | `<B>name</B>'
            `<B>:</B>' `<B>name</B>'
varlist1 ::= var {`<B>,</B>' var}
var ::= `<B>name</B>' | varorfunc `<B>[</B>' exp1 `<B>]</B>'
        | varorfunc `<B>.</B>' `<B>name</B>'
varorfunc ::= var | functioncall
declist ::= `<B>name</B>' {`<B>,</B>' `<B>name</B>'}
init ::= `<B>=</B>' explist1
explist1 ::= {exp1 `<B>,</B>'} exp
exp1 ::= exp
exp ::= <B>nil</B> | `<B>number</B>' | `<B>literal</B>' | var
        | function | upvalue <BR> | functioncall | tableconstructor
        | `<B>(</B>' exp `<B>)</B>' | exp binop exp | unop exp
functioncall ::= varorfunc args | varorfunc `:' `<B>name</B>' args
args ::= `<B>(</B>' [explist1] `<B>)</B>' | tableconstructor
         | `<B>literal</B>'
function ::= <B>function</B> `<B>(</B>' [parlist1] `<B>)</B>'
             block <B>end</B>
parlist1 ::= `<B>...</B>' | `<B>name</B>' {`<B>,</B>'
             `<B>name</B>'} [`<B>,</B>' `<B>...</B>']
upvalue ::= `<B>%</B>' `<B>name</B>'
tableconstructor ::= `<B>{</B>' fieldlist `<B>}</B>'
fieldlist ::= lfieldlist | ffieldlist | lfieldlist `<B>;</B>'
              ffieldlist | ffieldlist `<B>;</B>' lfieldlist
lfieldlist ::= [lfieldlist1]
ffieldlist ::= [ffieldlist1]
lfieldlist1 ::= exp {`<B>,</B>' exp} [`<B>,</B>']
ffieldlist1 ::= ffield {`<B>,</B>' ffield} [`<B>,</B>']
ffield ::= `<B>[</B>' exp `<B>]</B>' `<B>=</B>' exp
           | `<B>name</B>' `<B>=</B>' exp
binop ::= `<B>+</B>' | `<B>-</B>' | `<B>*</B>' | `<B>/</B>'
            | `<B>\^{ </B>' | `<B>..</B>' <BR>
          | `<B>&lt;</B>' | `<B>&lt;=</B>' | `<B>&gt;</B>'
            | `<B>&gt;=</B>' | `<B>==</B>' | `<B>\&nbsp;{ </B>'=} <BR>
          | <B>and</B> | <B>or</B>}
unop ::= `<B>-</B>' | <B>not</B>
</PRE>

<H1>4.13 lua: интерпретатор языка Lua</H1>
<H2>Синтаксис</H2>
<B>lua</B> [<I>arguments</I>]

<H2>Описание</H2>
<B>lua</B> представляет собой автономный интерпретатор языка Lua. Он
загружает и выполняет программы на Lua, как в текстовой исходной форме, так и
в виде прекомпилированных модулей, созданных компилятором <B>luac</B>.
<B>lua</B> может использоваться как пакетный интерпретатор, а
также в интерактивном режиме.

<P><I>arguments</I> могут быть параметрами, назначениями или именами файлов.
Они будут обработаны слева направо.

<P>Параметры начинаются с тире (<B>-</B>) и описаны ниже.

<P>Назначение представляет собой параметр формы <B>a=b</B>, который назначает
b глобальной переменной <B>a</B>. Обратите внимание, что никакие кавычки не
нужны вокруг строки, если она не содержит пробелы или другие символы,
специальные для оболочки. Вообще, Вы должны быть внимательны при
использовании кавычек и пробелов в командной строке потому, что они обычно
обрабатываются оболочкой непосредственно.

<P>Если параметр не является ни опцией, ни назначением, то это имя файла,
который затем будет загружен и выполнен.

<P>Если никакие параметры не заданы, то принято <B>-v -i</B>, когда
стандартный ввод представляет собой терминал, в противном случае используется
<B>-</B>.

<H1>Опции</H1>
<P><B>Тире (-)</B> загрузить стандартный ввод как файл, то есть не в
интерактивном режиме, даже когда стандартный ввод является терминалом.

<P><B>-c</B> Закрыть Lua перед выходом.

<P><B>-e "</B><I>stat"</I> выполнить инструкцию <I>stat</I>. Вы должны
цитировать <I>stat</I>, если она содержит пробелы или кавычки.

<P><B>-f "</B><I>file"</I> собрать все последующие параметры как строку в
глобальную таблицу <B>arg</B>, а затем выполнить файл <I>file</I>. Параметры
в <B>arg</B> начинаются с 0, который содержит строку file. Индекс
последнего параметра сохранен в <B>arg.n</B>.

<P><B>-i</B> ввести интерактивный режим, показывая подсказку. В этом режиме
<B>lua</B> читает строки из стандартного ввода и выполняет их как они
читаются. Каждая строка должна содержать полную инструкцию. Чтобы записать
инструкцию, охватывающую несколько строк, закончите каждую строку наклонной
чертой влево (<B>\</B>). Показываемая подсказка представляет собой значение
глобальной переменной <B>_PROMPT</B>, если это значение строка. Чтобы
изменить подсказку, задайте нужное значение <B>_PROMPT</B>. Вы можете делать
это после вызова интерпретатора или в командной строке с помощью
<B>"_PROMPT=\'lua: \'"</B>. Обратите внимание на потребность в кавычках
потому, что строка содержит пробел. Заданная по умолчанию подсказка: &gt;.

<P><B>-q</B> ввести интерактивный режим, но не показывая подсказку.

<P><B>-s</B><I>n</I> установить размер стека в n. Если представлено, это
должно быть первой опцией. Обратите внимание, что <I>n</I> находится в том же
самом параметре, что и <B>-s</B>. Например, чтобы определить размер стека в
2000, используйте <B>-s2000</B>.
<P><B>-v</B> вывести информацию о версии.

<H1>Также можно посмотреть</H1>
<B>luac</B>(1)
<BR><A HREF="http://www.tecgraf.puc-rio.br/lua">
http://www.tecgraf.puc-rio.br/lua</A>.

<H1>Диагностика</H1>
Сообщения пакета об ошибках должны быть самодостаточными.

<H1>luac: компилятор Lua</H1>

<H1>Синтаксис вызова</H1>
<B>luac</B> [<I>options</I>] [<I>filenames</I>]

<H1>Описание</H1>
<B>luac</B> представляет собой компилятор Lua. Он транслирует программы,
написанные на языке программирования Lua в двоичные файлы, которые могут быть
загружены и выполнен с помощью <B>lua_dofile</B> в C или <B>dofile</B> в Lua.

<P>Основные преимущества прекомпилированных программ: они быстрее при
загрузке, исходный текст защищен от изменений пользователя и недоступно
обнаружение ошибок синтаксиса.

<P>Прекомпиляция не подразумевает более быстрое выполнение потому, что в Lua
блоки всегда компилируются в байт-код прежде, чем выполняются. <B>luac</B>
просто позволяет этому байт-коду быть сохраненным в файле.

<P><B>luac</B> производит одиночный выходной файл, содержащий байт-код для
всех заданных исходных файлов. По умолчанию выходной файл именован
<B>luac.out</B>, но Вы можете изменять это опцией <B>-o</B>.

<P>Двоичные файлы, созданные <B>luac</B>, переносимы на любую архитектуру с
тем же самым размером слова. Это означает, что двоичные файлы, созданные на
32-разрядной платформе (типа Intel) могут читаться без изменений на другой
32-разрядной платформе (типа Sparc), даже если порядок байт различен. С
другой стороны, двоичные файлы, созданные на 16-разрядной платформе, не могут
читаться на 32-разрядной платформе.

<P>В командной строке Вы можете смешивать текстовые файлы, содержащие код на
Lua, и двоичные файлы, содержащие прекомпилированные блоки. Это полезно:
чтобы объединить несколько прекомпилированных блоков даже с различных (но
совместимых) платформ в один блок.

<P>Вы можете использовать <B>"-"</B>, чтобы указать <I>stdin</I>
как исходный файл.

<P>Внутренний формат двоичных файлов, произведенных <B>luac</B>, может
изменяться, когда выпущена новая версия Lua. Так что храните исходные файлы
всех прекомпилированных программ Lua.

<H1>Опции</H1>
<P>Параметры должны быть отделены друг от друга.
<B>-l</B> производит распечатку компилируемого байт-кода для виртуальной
машины Lua. Если никакие файлы не даны, то <B>luac</B> загружает
<B>luac.out</B> и вносит в список его полное содержание.

<P><B>-o "</B><I>file"</I> выводит данные в <I>file</I> вместо значения по
умолчанию <B>luac.out</B>. Выходной файл может быть исходным файл потому, что
все файлы загружены прежде, чем выходной файл записан.

<P><B>-p</B> загружают файлы, но не генерируют никакой выходной файл.
Использован главным образом для проверки синтаксиса или тестирования
прекомпиляции: разрушенные файлы, вероятно, сгенерируют ошибки, когда будут
загружены. Для полного теста целостности используйте опцию <B>-t</B>.

<P><B>-s</B> убирает отладочную информации перед записью выходного файла. Это
экономит некоторое место в очень больших блоках, но если ошибки происходят
при управлении ими, то сообщения об ошибках не смогут содержать полную
информацию о том, что случилось.

<P><B>-t</B> выполняет полный тест целостности прекомпилированного кода. Код,
который признает нормальным этот тест, полностью безопасен в том смысле, что
это не будет разрывать интерпретатор. Однако, не имеется никакой гарантии,
что такой код делает что-нибудь полезное. Если никакие файлы не заданы, то
<B>luac</B> загружает <B>luac.out</B> и проверяет его содержимое.

<P><B>-v</B> выводит сведения о версии.

<H1>Файлы</H1>
<P><B>luac.out</B> представляет собой заданный по умолчанию выходной файл

<H1>Также можно посмотреть</H1>
<P><B>lua</B>(1)
<BR><A HREF="http://www.tecgraf.puc-rio.br/lua">
http://www.tecgraf.puc-rio.br/lua</A>.

<H1>Диагностика</H1>
<P>Сообщения пакета об ошибках должны быть самодостаточными.

<H1>Авторы пакета</H1>
<PRE>
R. Ierusalimschy,
L. H. de Figueiredo и
W. Celes (<A HREF="mailto:lua@tecgraf.puc-rio.br">
lua@tecgraf.puc-rio.br</A>).
</PRE>

<H1>4.14 Установка языка LUA</H1>
<P>Построение Lua на системах Unix очень просто:
<UL><LI>Отредактируйте файл <B>config</B>, чтобы соответствовать Вашей
системе, если в этом есть необходимость.
<LI>Выполните команду <B>make</B>.
<LI>Если Вы хотите устанавливать Lua в "официальное" место в Вашей системе,
то затем сделайте <B>make install</B>. Официальное место и способ
устанавливать файлы определены в <B>config</B>. Вам, вероятно, придется
регистрироваться как <B>root</B>, чтобы сделать это.</UL>

<P>Ниже приведены инструкции для пользователей систем Windows и Macintosh.

<H2>4.14.1 Что Вы получаете</H2>
<P>Если <B>make</B> выполнилась без проблем, Вы получите:
<UL><LI>Интерпретатор <B>./bin/lua</B>, а также
прекомпилятор <B>./bin/luac</B>.
<LI>Набор библиотек в <B>./lib</B>.
<LI>Включаемые файлы в <B>./include</B>.</UL>

<P>Это единственные каталоги, в которых Вы нуждаетесь для разработки.

<P>Man-страницы для <B>lua</B> и <B>luac</B> в nroff и html, а также
справочное описание в html помещаются в <B>./doc</B>, некоторый типовой код в
<B>./test</B>, а некоторые полезные дополнения в <B>./etc</B>. Вы не
нуждаетесь в этих каталогах для разработки.

<P>Изучите также <B>README</B>-файлы в различных подкаталогах. Удобная
отправная точка: <B>./doc/readme.html</B>.

<H2>4.14.2 Проблемы и некоторые решения</H2>
<P>Если вызов <B>make</B> ничего хорошего не сделал, пожалуйста, сообщите на
<a href="mailto:lua@tecgraf.puc-rio.br">lua@tecgraf.puc-rio.br</a>. Если Вы
делаете изменения для <B>config</B> или в файлах <B>Makefile</B>, пожалуйста,
пошлите их туда же.

<H2>4.14.3 Разделяемые библиотеки</H2>
<P>Если Вы управляете Linux, сделайте <B>make so</B> после успешного
выполнения <B>make</B>. Это создаст общедоступные библиотеки в <B>./lib</B>.
Вероятно, лучше формировать общедоступные библиотеки прежде, чем
выполнять <B>make install</B>.

<P>Если Вы хотите переделать интерпретатор и транслятор так, чтобы
использовать общедоступные библиотеки, то выполните также <B>make sobin</B>.

<P>Вы, возможно, должны включить <B>lib</B> в системную переменную
<B>LD_LIBRAY_PATH</B>, чтобы компоновать программы, которые используют
общедоступные библиотеки, если Вы не помещаете их в официальные места с
помощью <B>make install</B>.

<P>Формирование общедоступных библиотек в других системах подобно этому, но
детали отличаются. Вы будете должны поправить несколько деталей в
<B>Makefile</B> на верхнем уровне дерева кода.

<H2>4.14.4 Установка на Windows или Macintosh</H2>
<P>Команды для формирования <B>Lua</B> на Mac или Windows-машине зависят от
специфического компилятора, который Вы используете. Самый простой путь
состоит в том, чтобы создать папку со всеми файлами <B>.c</B> и <B>.h</B>.
Затем создайте проекты для основной библиотеки, стандартной библиотеки,
интерпретатора и прекомпилятора следующим образом:
<PRE>
core lib:     lapi.c lcode.c ldebug.c ldo.c lfunc.c lgc.c llex.c lmem.c
              lobject.c lparser.c lstate.c lstring.c ltable.c ltests.c
              ltm.c lundump.c lvm.c lzio.c
standard lib: lauxlib.c lbaselib.c ldblib.c liolib.c lmathlib.c lstrlib.c
interpreter:  core lib, standard lib, lua.c
compiler:     core lib, dump.c luac.c opt.c print.c stubs.c
</PRE>

<P>Конечно, чтобы использовать Lua как разделяемую библиотеку, Вы должны
знать, как создавать и использовать библиотеки с Вашим компилятором и в
Вашей операционной системе.

<H2>4.14.5 INSTALL для mysql 3.23.32</H2>
<UL><LI>Скачайте LUA 4.0 patched для использования с mysql (оригинальный
пакет не годится).
<LI>Установите и откомпилируйте LUA 4.0, но не в том же самом каталоге, где и
mysql. Я использую <B>/usr/src/lua</B> для LUA и
<B>/usr/src/mysql</B> для MySQL.
<LI>В дереве исходного кода mysql сделайте:
<PRE>
cd sql
tar zxf /download/mylua.tar.gz
cd ..
./configure --enable-assembler --prefix=/usr/local/mysql \
            --enable-assembler --with-mysqld-ldflags="-L/usr/src/lua/lib \
            -llua -llualib"
</PRE>

<LI>Опробуйте скрипт примера:
<PRE>
mysql mysql
mysql&lt; SELECT user,host FROM user
              PROCEDURE("/usr/src/mysql/sql/count.lua")
</PRE>

</BODY>
</HTML>

<!-- This document saved from http://www.botik.ru/~rldp/mysql/mysqldev/glava04.htm -->
