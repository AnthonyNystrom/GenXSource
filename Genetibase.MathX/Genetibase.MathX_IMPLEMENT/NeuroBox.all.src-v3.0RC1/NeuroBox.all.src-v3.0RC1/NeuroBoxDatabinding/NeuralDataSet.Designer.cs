//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace NeuroBox.Repository {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("NeuralDataSet")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class NeuralDataSet : System.Data.DataSet {
        
        private NetworksDataTable tableNetworks;
        
        private LayersDataTable tableLayers;
        
        private NeuronsDataTable tableNeurons;
        
        private SynapsesDataTable tableSynapses;
        
        private TrainingSetsDataTable tableTrainingSets;
        
        private TrainingItemDataTable tableTrainingItem;
        
        private System.Data.DataRelation relationNetworksLayers;
        
        private System.Data.DataRelation relationLayersNeurons;
        
        private System.Data.DataRelation relationNeuronsSynapses_Source;
        
        private System.Data.DataRelation relationNetworksSynapses_Target;
        
        private System.Data.DataRelation relationNetworksSynapses;
        
        private System.Data.DataRelation relationNetworksTrainingSets;
        
        private System.Data.DataRelation relationTrainingSetsTrainingItem;
        
        private System.Data.DataRelation relationSynapsesTrainingItem;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public NeuralDataSet() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected NeuralDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Networks"] != null)) {
                    base.Tables.Add(new NetworksDataTable(ds.Tables["Networks"]));
                }
                if ((ds.Tables["Layers"] != null)) {
                    base.Tables.Add(new LayersDataTable(ds.Tables["Layers"]));
                }
                if ((ds.Tables["Neurons"] != null)) {
                    base.Tables.Add(new NeuronsDataTable(ds.Tables["Neurons"]));
                }
                if ((ds.Tables["Synapses"] != null)) {
                    base.Tables.Add(new SynapsesDataTable(ds.Tables["Synapses"]));
                }
                if ((ds.Tables["TrainingSets"] != null)) {
                    base.Tables.Add(new TrainingSetsDataTable(ds.Tables["TrainingSets"]));
                }
                if ((ds.Tables["TrainingItem"] != null)) {
                    base.Tables.Add(new TrainingItemDataTable(ds.Tables["TrainingItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NetworksDataTable Networks {
            get {
                return this.tableNetworks;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public LayersDataTable Layers {
            get {
                return this.tableLayers;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public NeuronsDataTable Neurons {
            get {
                return this.tableNeurons;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SynapsesDataTable Synapses {
            get {
                return this.tableSynapses;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrainingSetsDataTable TrainingSets {
            get {
                return this.tableTrainingSets;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TrainingItemDataTable TrainingItem {
            get {
                return this.tableTrainingItem;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            NeuralDataSet cln = ((NeuralDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Networks"] != null)) {
                    base.Tables.Add(new NetworksDataTable(ds.Tables["Networks"]));
                }
                if ((ds.Tables["Layers"] != null)) {
                    base.Tables.Add(new LayersDataTable(ds.Tables["Layers"]));
                }
                if ((ds.Tables["Neurons"] != null)) {
                    base.Tables.Add(new NeuronsDataTable(ds.Tables["Neurons"]));
                }
                if ((ds.Tables["Synapses"] != null)) {
                    base.Tables.Add(new SynapsesDataTable(ds.Tables["Synapses"]));
                }
                if ((ds.Tables["TrainingSets"] != null)) {
                    base.Tables.Add(new TrainingSetsDataTable(ds.Tables["TrainingSets"]));
                }
                if ((ds.Tables["TrainingItem"] != null)) {
                    base.Tables.Add(new TrainingItemDataTable(ds.Tables["TrainingItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableNetworks = ((NetworksDataTable)(base.Tables["Networks"]));
            if ((initTable == true)) {
                if ((this.tableNetworks != null)) {
                    this.tableNetworks.InitVars();
                }
            }
            this.tableLayers = ((LayersDataTable)(base.Tables["Layers"]));
            if ((initTable == true)) {
                if ((this.tableLayers != null)) {
                    this.tableLayers.InitVars();
                }
            }
            this.tableNeurons = ((NeuronsDataTable)(base.Tables["Neurons"]));
            if ((initTable == true)) {
                if ((this.tableNeurons != null)) {
                    this.tableNeurons.InitVars();
                }
            }
            this.tableSynapses = ((SynapsesDataTable)(base.Tables["Synapses"]));
            if ((initTable == true)) {
                if ((this.tableSynapses != null)) {
                    this.tableSynapses.InitVars();
                }
            }
            this.tableTrainingSets = ((TrainingSetsDataTable)(base.Tables["TrainingSets"]));
            if ((initTable == true)) {
                if ((this.tableTrainingSets != null)) {
                    this.tableTrainingSets.InitVars();
                }
            }
            this.tableTrainingItem = ((TrainingItemDataTable)(base.Tables["TrainingItem"]));
            if ((initTable == true)) {
                if ((this.tableTrainingItem != null)) {
                    this.tableTrainingItem.InitVars();
                }
            }
            this.relationNetworksLayers = this.Relations["NetworksLayers"];
            this.relationLayersNeurons = this.Relations["LayersNeurons"];
            this.relationNeuronsSynapses_Source = this.Relations["NeuronsSynapses_Source"];
            this.relationNetworksSynapses_Target = this.Relations["NetworksSynapses_Target"];
            this.relationNetworksSynapses = this.Relations["NetworksSynapses"];
            this.relationNetworksTrainingSets = this.Relations["NetworksTrainingSets"];
            this.relationTrainingSetsTrainingItem = this.Relations["TrainingSetsTrainingItem"];
            this.relationSynapsesTrainingItem = this.Relations["SynapsesTrainingItem"];
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "NeuralDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.cdrnet.net/projects/neuro/NeuralDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableNetworks = new NetworksDataTable();
            base.Tables.Add(this.tableNetworks);
            this.tableLayers = new LayersDataTable();
            base.Tables.Add(this.tableLayers);
            this.tableNeurons = new NeuronsDataTable();
            base.Tables.Add(this.tableNeurons);
            this.tableSynapses = new SynapsesDataTable();
            base.Tables.Add(this.tableSynapses);
            this.tableTrainingSets = new TrainingSetsDataTable();
            base.Tables.Add(this.tableTrainingSets);
            this.tableTrainingItem = new TrainingItemDataTable();
            base.Tables.Add(this.tableTrainingItem);
            System.Data.ForeignKeyConstraint fkc;
            fkc = new System.Data.ForeignKeyConstraint("NetworksLayers", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableLayers.laFK_networkColumn});
            this.tableLayers.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("LayersNeurons", new System.Data.DataColumn[] {
                        this.tableLayers.laIDColumn}, new System.Data.DataColumn[] {
                        this.tableNeurons.neFK_layerColumn});
            this.tableNeurons.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("NeuronsSynapses_Source", new System.Data.DataColumn[] {
                        this.tableNeurons.neIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_neuronSourceColumn});
            this.tableSynapses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("NetworksSynapses_Target", new System.Data.DataColumn[] {
                        this.tableNeurons.neIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_neuronTargetColumn});
            this.tableSynapses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("NetworksSynapses", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_networkColumn});
            this.tableSynapses.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("NetworksTrainingSets", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingSets.trFK_networkColumn});
            this.tableTrainingSets.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("TrainingSetsTrainingItem", new System.Data.DataColumn[] {
                        this.tableTrainingSets.trIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingItem.tiFK_trainingsetColumn});
            this.tableTrainingItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            fkc = new System.Data.ForeignKeyConstraint("SynapsesTrainingItem", new System.Data.DataColumn[] {
                        this.tableSynapses.syIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingItem.tiFK_synapseColumn});
            this.tableTrainingItem.Constraints.Add(fkc);
            fkc.AcceptRejectRule = System.Data.AcceptRejectRule.Cascade;
            fkc.DeleteRule = System.Data.Rule.Cascade;
            fkc.UpdateRule = System.Data.Rule.Cascade;
            this.relationNetworksLayers = new System.Data.DataRelation("NetworksLayers", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableLayers.laFK_networkColumn}, false);
            this.Relations.Add(this.relationNetworksLayers);
            this.relationLayersNeurons = new System.Data.DataRelation("LayersNeurons", new System.Data.DataColumn[] {
                        this.tableLayers.laIDColumn}, new System.Data.DataColumn[] {
                        this.tableNeurons.neFK_layerColumn}, false);
            this.Relations.Add(this.relationLayersNeurons);
            this.relationNeuronsSynapses_Source = new System.Data.DataRelation("NeuronsSynapses_Source", new System.Data.DataColumn[] {
                        this.tableNeurons.neIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_neuronSourceColumn}, false);
            this.Relations.Add(this.relationNeuronsSynapses_Source);
            this.relationNetworksSynapses_Target = new System.Data.DataRelation("NetworksSynapses_Target", new System.Data.DataColumn[] {
                        this.tableNeurons.neIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_neuronTargetColumn}, false);
            this.Relations.Add(this.relationNetworksSynapses_Target);
            this.relationNetworksSynapses = new System.Data.DataRelation("NetworksSynapses", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableSynapses.syFK_networkColumn}, false);
            this.Relations.Add(this.relationNetworksSynapses);
            this.relationNetworksTrainingSets = new System.Data.DataRelation("NetworksTrainingSets", new System.Data.DataColumn[] {
                        this.tableNetworks.nwIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingSets.trFK_networkColumn}, false);
            this.Relations.Add(this.relationNetworksTrainingSets);
            this.relationTrainingSetsTrainingItem = new System.Data.DataRelation("TrainingSetsTrainingItem", new System.Data.DataColumn[] {
                        this.tableTrainingSets.trIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingItem.tiFK_trainingsetColumn}, false);
            this.Relations.Add(this.relationTrainingSetsTrainingItem);
            this.relationSynapsesTrainingItem = new System.Data.DataRelation("SynapsesTrainingItem", new System.Data.DataColumn[] {
                        this.tableSynapses.syIDColumn}, new System.Data.DataColumn[] {
                        this.tableTrainingItem.tiFK_synapseColumn}, false);
            this.Relations.Add(this.relationSynapsesTrainingItem);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNetworks() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLayers() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeNeurons() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSynapses() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrainingSets() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTrainingItem() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            NeuralDataSet ds = new NeuralDataSet();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void NetworksRowChangeEventHandler(object sender, NetworksRowChangeEvent e);
        
        public delegate void LayersRowChangeEventHandler(object sender, LayersRowChangeEvent e);
        
        public delegate void NeuronsRowChangeEventHandler(object sender, NeuronsRowChangeEvent e);
        
        public delegate void SynapsesRowChangeEventHandler(object sender, SynapsesRowChangeEvent e);
        
        public delegate void TrainingSetsRowChangeEventHandler(object sender, TrainingSetsRowChangeEvent e);
        
        public delegate void TrainingItemRowChangeEventHandler(object sender, TrainingItemRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NetworksDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnnwID;
            
            private System.Data.DataColumn columnnw_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksDataTable() {
                this.TableName = "Networks";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetworksDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NetworksDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nwIDColumn {
                get {
                    return this.columnnwID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn nw_nameColumn {
                get {
                    return this.columnnw_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow this[int index] {
                get {
                    return ((NetworksRow)(this.Rows[index]));
                }
            }
            
            public event NetworksRowChangeEventHandler NetworksRowChanging;
            
            public event NetworksRowChangeEventHandler NetworksRowChanged;
            
            public event NetworksRowChangeEventHandler NetworksRowDeleting;
            
            public event NetworksRowChangeEventHandler NetworksRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNetworksRow(NetworksRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow AddNetworksRow(string nw_name) {
                NetworksRow rowNetworksRow = ((NetworksRow)(this.NewRow()));
                rowNetworksRow.ItemArray = new object[] {
                        null,
                        nw_name};
                this.Rows.Add(rowNetworksRow);
                return rowNetworksRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NetworksDataTable cln = ((NetworksDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NetworksDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnnwID = base.Columns["nwID"];
                this.columnnw_name = base.Columns["nw_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnnwID = new System.Data.DataColumn("nwID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnwID);
                this.columnnw_name = new System.Data.DataColumn("nw_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnnw_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Networks", new System.Data.DataColumn[] {
                                this.columnnwID}, false));
                this.columnnwID.AutoIncrement = true;
                this.columnnwID.AutoIncrementSeed = 1;
                this.columnnwID.AllowDBNull = false;
                this.columnnwID.Unique = true;
                this.columnnwID.Caption = "Network ID";
                this.columnnw_name.Caption = "Title";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow NewNetworksRow() {
                return ((NetworksRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NetworksRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NetworksRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NetworksRowChanged != null)) {
                    this.NetworksRowChanged(this, new NetworksRowChangeEvent(((NetworksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NetworksRowChanging != null)) {
                    this.NetworksRowChanging(this, new NetworksRowChangeEvent(((NetworksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NetworksRowDeleted != null)) {
                    this.NetworksRowDeleted(this, new NetworksRowChangeEvent(((NetworksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NetworksRowDeleting != null)) {
                    this.NetworksRowDeleting(this, new NetworksRowChangeEvent(((NetworksRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNetworksRow(NetworksRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NetworksDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LayersDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnlaID;
            
            private System.Data.DataColumn columnlaFK_network;
            
            private System.Data.DataColumn columnla_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersDataTable() {
                this.TableName = "Layers";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayersDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected LayersDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn laIDColumn {
                get {
                    return this.columnlaID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn laFK_networkColumn {
                get {
                    return this.columnlaFK_network;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn la_nameColumn {
                get {
                    return this.columnla_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow this[int index] {
                get {
                    return ((LayersRow)(this.Rows[index]));
                }
            }
            
            public event LayersRowChangeEventHandler LayersRowChanging;
            
            public event LayersRowChangeEventHandler LayersRowChanged;
            
            public event LayersRowChangeEventHandler LayersRowDeleting;
            
            public event LayersRowChangeEventHandler LayersRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLayersRow(LayersRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow AddLayersRow(NetworksRow parentNetworksRowByNetworksLayers, string la_name) {
                LayersRow rowLayersRow = ((LayersRow)(this.NewRow()));
                rowLayersRow.ItemArray = new object[] {
                        null,
                        parentNetworksRowByNetworksLayers[0],
                        la_name};
                this.Rows.Add(rowLayersRow);
                return rowLayersRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                LayersDataTable cln = ((LayersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new LayersDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnlaID = base.Columns["laID"];
                this.columnlaFK_network = base.Columns["laFK_network"];
                this.columnla_name = base.Columns["la_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnlaID = new System.Data.DataColumn("laID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlaID);
                this.columnlaFK_network = new System.Data.DataColumn("laFK_network", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnlaFK_network);
                this.columnla_name = new System.Data.DataColumn("la_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnla_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Layers", new System.Data.DataColumn[] {
                                this.columnlaID}, false));
                this.columnlaID.AutoIncrement = true;
                this.columnlaID.AutoIncrementSeed = 1;
                this.columnlaID.AllowDBNull = false;
                this.columnlaID.Unique = true;
                this.columnlaID.Caption = "Layer ID";
                this.columnlaFK_network.AllowDBNull = false;
                this.columnlaFK_network.Caption = "Network";
                this.columnla_name.Caption = "Title";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow NewLayersRow() {
                return ((LayersRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new LayersRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(LayersRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LayersRowChanged != null)) {
                    this.LayersRowChanged(this, new LayersRowChangeEvent(((LayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LayersRowChanging != null)) {
                    this.LayersRowChanging(this, new LayersRowChangeEvent(((LayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LayersRowDeleted != null)) {
                    this.LayersRowDeleted(this, new LayersRowChangeEvent(((LayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LayersRowDeleting != null)) {
                    this.LayersRowDeleting(this, new LayersRowChangeEvent(((LayersRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLayersRow(LayersRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LayersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class NeuronsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnneID;
            
            private System.Data.DataColumn columnneFK_layer;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsDataTable() {
                this.TableName = "Neurons";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NeuronsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected NeuronsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn neIDColumn {
                get {
                    return this.columnneID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn neFK_layerColumn {
                get {
                    return this.columnneFK_layer;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow this[int index] {
                get {
                    return ((NeuronsRow)(this.Rows[index]));
                }
            }
            
            public event NeuronsRowChangeEventHandler NeuronsRowChanging;
            
            public event NeuronsRowChangeEventHandler NeuronsRowChanged;
            
            public event NeuronsRowChangeEventHandler NeuronsRowDeleting;
            
            public event NeuronsRowChangeEventHandler NeuronsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddNeuronsRow(NeuronsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow AddNeuronsRow(LayersRow parentLayersRowByLayersNeurons) {
                NeuronsRow rowNeuronsRow = ((NeuronsRow)(this.NewRow()));
                rowNeuronsRow.ItemArray = new object[] {
                        null,
                        parentLayersRowByLayersNeurons[0]};
                this.Rows.Add(rowNeuronsRow);
                return rowNeuronsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                NeuronsDataTable cln = ((NeuronsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new NeuronsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnneID = base.Columns["neID"];
                this.columnneFK_layer = base.Columns["neFK_layer"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnneID = new System.Data.DataColumn("neID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnneID);
                this.columnneFK_layer = new System.Data.DataColumn("neFK_layer", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnneFK_layer);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Neurons", new System.Data.DataColumn[] {
                                this.columnneID}, false));
                this.columnneID.AutoIncrement = true;
                this.columnneID.AutoIncrementSeed = 1;
                this.columnneID.AllowDBNull = false;
                this.columnneID.Unique = true;
                this.columnneID.Caption = "Neuron ID";
                this.columnneFK_layer.AllowDBNull = false;
                this.columnneFK_layer.Caption = "Layer";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow NewNeuronsRow() {
                return ((NeuronsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new NeuronsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(NeuronsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.NeuronsRowChanged != null)) {
                    this.NeuronsRowChanged(this, new NeuronsRowChangeEvent(((NeuronsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.NeuronsRowChanging != null)) {
                    this.NeuronsRowChanging(this, new NeuronsRowChangeEvent(((NeuronsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.NeuronsRowDeleted != null)) {
                    this.NeuronsRowDeleted(this, new NeuronsRowChangeEvent(((NeuronsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.NeuronsRowDeleting != null)) {
                    this.NeuronsRowDeleting(this, new NeuronsRowChangeEvent(((NeuronsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveNeuronsRow(NeuronsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "NeuronsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SynapsesDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnsyID;
            
            private System.Data.DataColumn columnsyFK_neuronSource;
            
            private System.Data.DataColumn columnsyFK_neuronTarget;
            
            private System.Data.DataColumn columnsyFK_network;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesDataTable() {
                this.TableName = "Synapses";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynapsesDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected SynapsesDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn syIDColumn {
                get {
                    return this.columnsyID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn syFK_neuronSourceColumn {
                get {
                    return this.columnsyFK_neuronSource;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn syFK_neuronTargetColumn {
                get {
                    return this.columnsyFK_neuronTarget;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn syFK_networkColumn {
                get {
                    return this.columnsyFK_network;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow this[int index] {
                get {
                    return ((SynapsesRow)(this.Rows[index]));
                }
            }
            
            public event SynapsesRowChangeEventHandler SynapsesRowChanging;
            
            public event SynapsesRowChangeEventHandler SynapsesRowChanged;
            
            public event SynapsesRowChangeEventHandler SynapsesRowDeleting;
            
            public event SynapsesRowChangeEventHandler SynapsesRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSynapsesRow(SynapsesRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow AddSynapsesRow(NeuronsRow parentNeuronsRowByNeuronsSynapses_Source, NeuronsRow parentNeuronsRowByNetworksSynapses_Target, NetworksRow parentNetworksRowByNetworksSynapses) {
                SynapsesRow rowSynapsesRow = ((SynapsesRow)(this.NewRow()));
                rowSynapsesRow.ItemArray = new object[] {
                        null,
                        parentNeuronsRowByNeuronsSynapses_Source[0],
                        parentNeuronsRowByNetworksSynapses_Target[0],
                        parentNetworksRowByNetworksSynapses[0]};
                this.Rows.Add(rowSynapsesRow);
                return rowSynapsesRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                SynapsesDataTable cln = ((SynapsesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new SynapsesDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnsyID = base.Columns["syID"];
                this.columnsyFK_neuronSource = base.Columns["syFK_neuronSource"];
                this.columnsyFK_neuronTarget = base.Columns["syFK_neuronTarget"];
                this.columnsyFK_network = base.Columns["syFK_network"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnsyID = new System.Data.DataColumn("syID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsyID);
                this.columnsyFK_neuronSource = new System.Data.DataColumn("syFK_neuronSource", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsyFK_neuronSource);
                this.columnsyFK_neuronTarget = new System.Data.DataColumn("syFK_neuronTarget", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsyFK_neuronTarget);
                this.columnsyFK_network = new System.Data.DataColumn("syFK_network", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnsyFK_network);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_Synapses", new System.Data.DataColumn[] {
                                this.columnsyID}, false));
                this.columnsyID.AutoIncrement = true;
                this.columnsyID.AutoIncrementSeed = 1;
                this.columnsyID.AllowDBNull = false;
                this.columnsyID.Unique = true;
                this.columnsyID.Caption = "Synapse ID";
                this.columnsyFK_neuronSource.AllowDBNull = false;
                this.columnsyFK_neuronSource.Caption = "Source Neuron";
                this.columnsyFK_neuronTarget.AllowDBNull = false;
                this.columnsyFK_neuronTarget.Caption = "Target Neuron";
                this.columnsyFK_network.AllowDBNull = false;
                this.columnsyFK_network.Caption = "Network ID";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow NewSynapsesRow() {
                return ((SynapsesRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SynapsesRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(SynapsesRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SynapsesRowChanged != null)) {
                    this.SynapsesRowChanged(this, new SynapsesRowChangeEvent(((SynapsesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SynapsesRowChanging != null)) {
                    this.SynapsesRowChanging(this, new SynapsesRowChangeEvent(((SynapsesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SynapsesRowDeleted != null)) {
                    this.SynapsesRowDeleted(this, new SynapsesRowChangeEvent(((SynapsesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SynapsesRowDeleting != null)) {
                    this.SynapsesRowDeleting(this, new SynapsesRowChangeEvent(((SynapsesRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSynapsesRow(SynapsesRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SynapsesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrainingSetsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntrID;
            
            private System.Data.DataColumn columntrFK_network;
            
            private System.Data.DataColumn columntr_name;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsDataTable() {
                this.TableName = "TrainingSets";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingSetsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrainingSetsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trIDColumn {
                get {
                    return this.columntrID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn trFK_networkColumn {
                get {
                    return this.columntrFK_network;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tr_nameColumn {
                get {
                    return this.columntr_name;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow this[int index] {
                get {
                    return ((TrainingSetsRow)(this.Rows[index]));
                }
            }
            
            public event TrainingSetsRowChangeEventHandler TrainingSetsRowChanging;
            
            public event TrainingSetsRowChangeEventHandler TrainingSetsRowChanged;
            
            public event TrainingSetsRowChangeEventHandler TrainingSetsRowDeleting;
            
            public event TrainingSetsRowChangeEventHandler TrainingSetsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrainingSetsRow(TrainingSetsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow AddTrainingSetsRow(NetworksRow parentNetworksRowByNetworksTrainingSets, string tr_name) {
                TrainingSetsRow rowTrainingSetsRow = ((TrainingSetsRow)(this.NewRow()));
                rowTrainingSetsRow.ItemArray = new object[] {
                        null,
                        parentNetworksRowByNetworksTrainingSets[0],
                        tr_name};
                this.Rows.Add(rowTrainingSetsRow);
                return rowTrainingSetsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TrainingSetsDataTable cln = ((TrainingSetsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TrainingSetsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntrID = base.Columns["trID"];
                this.columntrFK_network = base.Columns["trFK_network"];
                this.columntr_name = base.Columns["tr_name"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntrID = new System.Data.DataColumn("trID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrID);
                this.columntrFK_network = new System.Data.DataColumn("trFK_network", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntrFK_network);
                this.columntr_name = new System.Data.DataColumn("tr_name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntr_name);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_TrainingSets", new System.Data.DataColumn[] {
                                this.columntrID}, false));
                this.columntrID.AutoIncrement = true;
                this.columntrID.AutoIncrementSeed = 1;
                this.columntrID.AllowDBNull = false;
                this.columntrID.Unique = true;
                this.columntrID.Caption = "Training Set ID";
                this.columntrFK_network.AllowDBNull = false;
                this.columntrFK_network.Caption = "Network";
                this.columntr_name.Caption = "Title";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow NewTrainingSetsRow() {
                return ((TrainingSetsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TrainingSetsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TrainingSetsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrainingSetsRowChanged != null)) {
                    this.TrainingSetsRowChanged(this, new TrainingSetsRowChangeEvent(((TrainingSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrainingSetsRowChanging != null)) {
                    this.TrainingSetsRowChanging(this, new TrainingSetsRowChangeEvent(((TrainingSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrainingSetsRowDeleted != null)) {
                    this.TrainingSetsRowDeleted(this, new TrainingSetsRowChangeEvent(((TrainingSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrainingSetsRowDeleting != null)) {
                    this.TrainingSetsRowDeleting(this, new TrainingSetsRowChangeEvent(((TrainingSetsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrainingSetsRow(TrainingSetsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrainingSetsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TrainingItemDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columntiID;
            
            private System.Data.DataColumn columntiFK_trainingset;
            
            private System.Data.DataColumn columntiFK_synapse;
            
            private System.Data.DataColumn columnti_weight;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemDataTable() {
                this.TableName = "TrainingItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingItemDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TrainingItemDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tiIDColumn {
                get {
                    return this.columntiID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tiFK_trainingsetColumn {
                get {
                    return this.columntiFK_trainingset;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn tiFK_synapseColumn {
                get {
                    return this.columntiFK_synapse;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ti_weightColumn {
                get {
                    return this.columnti_weight;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow this[int index] {
                get {
                    return ((TrainingItemRow)(this.Rows[index]));
                }
            }
            
            public event TrainingItemRowChangeEventHandler TrainingItemRowChanging;
            
            public event TrainingItemRowChangeEventHandler TrainingItemRowChanged;
            
            public event TrainingItemRowChangeEventHandler TrainingItemRowDeleting;
            
            public event TrainingItemRowChangeEventHandler TrainingItemRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTrainingItemRow(TrainingItemRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow AddTrainingItemRow(TrainingSetsRow parentTrainingSetsRowByTrainingSetsTrainingItem, SynapsesRow parentSynapsesRowBySynapsesTrainingItem, double ti_weight) {
                TrainingItemRow rowTrainingItemRow = ((TrainingItemRow)(this.NewRow()));
                rowTrainingItemRow.ItemArray = new object[] {
                        null,
                        parentTrainingSetsRowByTrainingSetsTrainingItem[0],
                        parentSynapsesRowBySynapsesTrainingItem[0],
                        ti_weight};
                this.Rows.Add(rowTrainingItemRow);
                return rowTrainingItemRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                TrainingItemDataTable cln = ((TrainingItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new TrainingItemDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columntiID = base.Columns["tiID"];
                this.columntiFK_trainingset = base.Columns["tiFK_trainingset"];
                this.columntiFK_synapse = base.Columns["tiFK_synapse"];
                this.columnti_weight = base.Columns["ti_weight"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columntiID = new System.Data.DataColumn("tiID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntiID);
                this.columntiFK_trainingset = new System.Data.DataColumn("tiFK_trainingset", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntiFK_trainingset);
                this.columntiFK_synapse = new System.Data.DataColumn("tiFK_synapse", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columntiFK_synapse);
                this.columnti_weight = new System.Data.DataColumn("ti_weight", typeof(double), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnti_weight);
                this.Constraints.Add(new System.Data.UniqueConstraint("PK_TrainingItems", new System.Data.DataColumn[] {
                                this.columntiID}, false));
                this.columntiID.AutoIncrement = true;
                this.columntiID.AutoIncrementSeed = 1;
                this.columntiID.AllowDBNull = false;
                this.columntiID.Unique = true;
                this.columntiID.Caption = "Training Item ID";
                this.columntiFK_trainingset.AllowDBNull = false;
                this.columntiFK_trainingset.Caption = "Training Set";
                this.columntiFK_synapse.AllowDBNull = false;
                this.columntiFK_synapse.Caption = "Synapse";
                this.columnti_weight.AllowDBNull = false;
                this.columnti_weight.Caption = "Synapse Weight";
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow NewTrainingItemRow() {
                return ((TrainingItemRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new TrainingItemRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(TrainingItemRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TrainingItemRowChanged != null)) {
                    this.TrainingItemRowChanged(this, new TrainingItemRowChangeEvent(((TrainingItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TrainingItemRowChanging != null)) {
                    this.TrainingItemRowChanging(this, new TrainingItemRowChangeEvent(((TrainingItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TrainingItemRowDeleted != null)) {
                    this.TrainingItemRowDeleted(this, new TrainingItemRowChangeEvent(((TrainingItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TrainingItemRowDeleting != null)) {
                    this.TrainingItemRowDeleting(this, new TrainingItemRowChangeEvent(((TrainingItemRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTrainingItemRow(TrainingItemRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                NeuralDataSet ds = new NeuralDataSet();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TrainingItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NetworksRow : System.Data.DataRow {
            
            private NetworksDataTable tableNetworks;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NetworksRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNetworks = ((NetworksDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int nwID {
                get {
                    return ((int)(this[this.tableNetworks.nwIDColumn]));
                }
                set {
                    this[this.tableNetworks.nwIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string nw_name {
                get {
                    try {
                        return ((string)(this[this.tableNetworks.nw_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'nw_name\' in table \'Networks\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableNetworks.nw_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isnw_nameNull() {
                return this.IsNull(this.tableNetworks.nw_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setnw_nameNull() {
                this[this.tableNetworks.nw_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow[] GetLayersRows() {
                return ((LayersRow[])(base.GetChildRows(this.Table.ChildRelations["NetworksLayers"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow[] GetTrainingSetsRows() {
                return ((TrainingSetsRow[])(base.GetChildRows(this.Table.ChildRelations["NetworksTrainingSets"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow[] GetSynapsesRows() {
                return ((SynapsesRow[])(base.GetChildRows(this.Table.ChildRelations["NetworksSynapses"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class LayersRow : System.Data.DataRow {
            
            private LayersDataTable tableLayers;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LayersRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLayers = ((LayersDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int laID {
                get {
                    return ((int)(this[this.tableLayers.laIDColumn]));
                }
                set {
                    this[this.tableLayers.laIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int laFK_network {
                get {
                    return ((int)(this[this.tableLayers.laFK_networkColumn]));
                }
                set {
                    this[this.tableLayers.laFK_networkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string la_name {
                get {
                    try {
                        return ((string)(this[this.tableLayers.la_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'la_name\' in table \'Layers\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLayers.la_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow NetworksRow {
                get {
                    return ((NetworksRow)(this.GetParentRow(this.Table.ParentRelations["NetworksLayers"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NetworksLayers"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Isla_nameNull() {
                return this.IsNull(this.tableLayers.la_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Setla_nameNull() {
                this[this.tableLayers.la_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow[] GetNeuronsRows() {
                return ((NeuronsRow[])(base.GetChildRows(this.Table.ChildRelations["LayersNeurons"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class NeuronsRow : System.Data.DataRow {
            
            private NeuronsDataTable tableNeurons;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal NeuronsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableNeurons = ((NeuronsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int neID {
                get {
                    return ((int)(this[this.tableNeurons.neIDColumn]));
                }
                set {
                    this[this.tableNeurons.neIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int neFK_layer {
                get {
                    return ((int)(this[this.tableNeurons.neFK_layerColumn]));
                }
                set {
                    this[this.tableNeurons.neFK_layerColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow LayersRow {
                get {
                    return ((LayersRow)(this.GetParentRow(this.Table.ParentRelations["LayersNeurons"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["LayersNeurons"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow[] GetSynapsesRowsByNeuronsSynapses_Source() {
                return ((SynapsesRow[])(base.GetChildRows(this.Table.ChildRelations["NeuronsSynapses_Source"])));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow[] GetSynapsesRowsByNetworksSynapses_Target() {
                return ((SynapsesRow[])(base.GetChildRows(this.Table.ChildRelations["NetworksSynapses_Target"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class SynapsesRow : System.Data.DataRow {
            
            private SynapsesDataTable tableSynapses;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SynapsesRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSynapses = ((SynapsesDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int syID {
                get {
                    return ((int)(this[this.tableSynapses.syIDColumn]));
                }
                set {
                    this[this.tableSynapses.syIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int syFK_neuronSource {
                get {
                    return ((int)(this[this.tableSynapses.syFK_neuronSourceColumn]));
                }
                set {
                    this[this.tableSynapses.syFK_neuronSourceColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int syFK_neuronTarget {
                get {
                    return ((int)(this[this.tableSynapses.syFK_neuronTargetColumn]));
                }
                set {
                    this[this.tableSynapses.syFK_neuronTargetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int syFK_network {
                get {
                    return ((int)(this[this.tableSynapses.syFK_networkColumn]));
                }
                set {
                    this[this.tableSynapses.syFK_networkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow NeuronsRowByNeuronsSynapses_Source {
                get {
                    return ((NeuronsRow)(this.GetParentRow(this.Table.ParentRelations["NeuronsSynapses_Source"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NeuronsSynapses_Source"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow NeuronsRowByNetworksSynapses_Target {
                get {
                    return ((NeuronsRow)(this.GetParentRow(this.Table.ParentRelations["NetworksSynapses_Target"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NetworksSynapses_Target"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow NetworksRow {
                get {
                    return ((NetworksRow)(this.GetParentRow(this.Table.ParentRelations["NetworksSynapses"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NetworksSynapses"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow[] GetTrainingItemRows() {
                return ((TrainingItemRow[])(base.GetChildRows(this.Table.ChildRelations["SynapsesTrainingItem"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrainingSetsRow : System.Data.DataRow {
            
            private TrainingSetsDataTable tableTrainingSets;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingSetsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrainingSets = ((TrainingSetsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int trID {
                get {
                    return ((int)(this[this.tableTrainingSets.trIDColumn]));
                }
                set {
                    this[this.tableTrainingSets.trIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int trFK_network {
                get {
                    return ((int)(this[this.tableTrainingSets.trFK_networkColumn]));
                }
                set {
                    this[this.tableTrainingSets.trFK_networkColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string tr_name {
                get {
                    try {
                        return ((string)(this[this.tableTrainingSets.tr_nameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'tr_name\' in table \'TrainingSets\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTrainingSets.tr_nameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow NetworksRow {
                get {
                    return ((NetworksRow)(this.GetParentRow(this.Table.ParentRelations["NetworksTrainingSets"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["NetworksTrainingSets"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Istr_nameNull() {
                return this.IsNull(this.tableTrainingSets.tr_nameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void Settr_nameNull() {
                this[this.tableTrainingSets.tr_nameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow[] GetTrainingItemRows() {
                return ((TrainingItemRow[])(base.GetChildRows(this.Table.ChildRelations["TrainingSetsTrainingItem"])));
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TrainingItemRow : System.Data.DataRow {
            
            private TrainingItemDataTable tableTrainingItem;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TrainingItemRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTrainingItem = ((TrainingItemDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tiID {
                get {
                    return ((int)(this[this.tableTrainingItem.tiIDColumn]));
                }
                set {
                    this[this.tableTrainingItem.tiIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tiFK_trainingset {
                get {
                    return ((int)(this[this.tableTrainingItem.tiFK_trainingsetColumn]));
                }
                set {
                    this[this.tableTrainingItem.tiFK_trainingsetColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int tiFK_synapse {
                get {
                    return ((int)(this[this.tableTrainingItem.tiFK_synapseColumn]));
                }
                set {
                    this[this.tableTrainingItem.tiFK_synapseColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public double ti_weight {
                get {
                    return ((double)(this[this.tableTrainingItem.ti_weightColumn]));
                }
                set {
                    this[this.tableTrainingItem.ti_weightColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow TrainingSetsRow {
                get {
                    return ((TrainingSetsRow)(this.GetParentRow(this.Table.ParentRelations["TrainingSetsTrainingItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["TrainingSetsTrainingItem"]);
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow SynapsesRow {
                get {
                    return ((SynapsesRow)(this.GetParentRow(this.Table.ParentRelations["SynapsesTrainingItem"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["SynapsesTrainingItem"]);
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NetworksRowChangeEvent : System.EventArgs {
            
            private NetworksRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRowChangeEvent(NetworksRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NetworksRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class LayersRowChangeEvent : System.EventArgs {
            
            private LayersRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRowChangeEvent(LayersRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LayersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class NeuronsRowChangeEvent : System.EventArgs {
            
            private NeuronsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRowChangeEvent(NeuronsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public NeuronsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class SynapsesRowChangeEvent : System.EventArgs {
            
            private SynapsesRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRowChangeEvent(SynapsesRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SynapsesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrainingSetsRowChangeEvent : System.EventArgs {
            
            private TrainingSetsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRowChangeEvent(TrainingSetsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingSetsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TrainingItemRowChangeEvent : System.EventArgs {
            
            private TrainingItemRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRowChangeEvent(TrainingItemRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TrainingItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591