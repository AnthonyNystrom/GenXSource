<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head><title>Generation</title><meta http-equiv="Content-Type" content="text/html; charset=windows-1252" /><link rel="stylesheet" type="text/css" href="gsStyle1.css" /><style type="text/css">
    .style1 {text-indent: 0pt;
	line-height: 121%;
	text-align: left;
	font-family: Georgia;
	font-size: 11.0pt;
	color: black;}
    .style8 {
	text-align: center;
}
    </style>
</head><body bgcolor="#FFFFFF"><div style="position: absolute; width: 100px; height: 100px; z-index: 0; left: 6px;
        top: 159px" id="backgroundGraph"><img alt="" src="images/lightergrayBackGroundGraph.png" width="698" height="610"> </div><p class="MsoOrganizationName"><span style='color: #FFFFFF; position: absolute; z-index: 8; left: 388px; top: 74px; width: 166px;
            height: 25px' id="ADLab">Automated Design Lab </span></p><span style='position: absolute; z-index: 6; left: 8px; top: 15px; width: 510px;
        height: 42px' id="orangeDots"><img width="510" height="42" src="images/orangeDots.png"> </span><a href="http://www.engr.utexas.edu"><span style='position: absolute; z-index: 5; left: 560px; top: 0px; width: 189px;
        height: 177px' id="UTCOEBreadcrumbs"><img width="200" height="188" src="images/UTCOEemblem.jpg" /></span></a> <span style='position: absolute; z-index: 2; left: 1px; top: 72px; width: 759px;
        height: 22px' id="fatOrangeBar"><img width="759" height="22" src="images/thickOrangeBarHoriz.png"> </span><span style='position: absolute; z-index: 8; left: 197px; top: 47px; width: 372px;
        height: 25px' id="GSTitle"><p class="MsoOrganizationName">GraphSynth 1.6</p></span><span style='position: absolute; z-index: 12; left: 197px; top: 197px; width: 560px;
        height: 3px' id="beforeContentBreak"><img width="560" height="3" src="images/thinBlackBarHoriz.png"> </span>
<span style='position: absolute; z-index: 7; left: 200px; top: 1323px; width: 538px;
                height: 4px' id="bottommostBar" class="style7"><div class="style6"><p class="style8"><img width="538" height="4" src="images/thinnerOrangeBarHoriz.png"> | <a href="index.htm">Home</a> | <a href="introMethod.htm">Methodology Overview</a> | <a href="graphs.htm">Graph Basics</a> | <a href="grammars.htm">Grammar Basics</a> | <a href="rule_recognition.htm">Grammars: Recognition</a> | <a href="rule_application.htm">Grammars: Application</a> | <a href="ruleSets.htm">Grammars: RuleSets</a> | <a href="generation.htm">Generation</a> | <a href="searchProcess.htm">Search Process</a> | <a href="navigating.htm">Navigating GraphSynth</a> | <a href="examples.htm">Examples</a> | <a href="download.htm">Download</a> | </p></div></span><span style='position: absolute; z-index: 1; left: 0px; top: 0px; width: 760px;
        height: 10px' id="topmostBar"><img width="760" height="10" src="images/thinOrangeBarHoriz.png" /> </span><span style='position: absolute; z-index: 3; left: 156px; top: 48px; width: 17px;
        height: 18px' id="leftArrow"><img width="17" height="18" src="images/orangeDotArrow.png" /> </span><span style='position: absolute; z-index: 4; left: 174px; top: 48px; width: 17px;
        height: 18px' id="rightArrow"><img width="17" height="18" src="images/orangeDotArrow.png" /></span> <span style='position: absolute; z-index: 9; left: 191px; top: 152px; width: 557px;
        height: 32px' id="pageTitle"><p class="MsoTitle3">Generation </p></span><span style='position:absolute;z-index:3;
 left:516px; top:310px; width:256px;height:762px'><p class=style1><span lang="en-US" style='font-family:Georgia;'>The code for this particular generation function is found in the 2.Generation directory under the filename RecognizeChooseApply.cs. This is actually an abstract class and cannot be invoked directly, as a result on must produce an inherited class to use this function. Two such inherited classes are shown in that same directory: chooseViaHumanGui.cs and randomChoose.cs. Mainly these inherited classes answer a difficult question of graph synthesis: how or who will make the decisions to synthesize new graphs?</span></p><p class=style1><span lang="en-US" style='font-family:Georgia;'>Once an inherited class is established, a creation of that class (constructor) will be required to populate the fields of the recognize, choose, and apply process. These fields are:</span></p><p class=MsoNormal><span lang="en-US" style='font-size:11.0pt;line-height:121%;
  font-family:"Courier New";color:blue;'>int</span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:black;'>[] maxNumOfCalls </span><span lang="en-US"
  style='font-size:11.0pt;line-height:121%;font-family:Georgia;color:black;
  '>:  the number of calls or cycles specified for each rule set. This is an array of length specified by the number of rule sets (</span><span
  style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:blue'>&lt;</span><span lang="en-US" style='font-size:11.0pt;line-height:
  121%;font-family:"Courier New";color:maroon;'>numOfRuleSets</span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>&gt;</span><span lang="en-US" style='font-family:
  "Times New Roman";color:blue;'> </span><span lang="en-US"
  style='font-size:11.0pt;line-height:121%;font-family:Georgia;color:black;
  '>in App.config). If it is not set, the value of maxRulesToApply will be used (</span><span style='font-size:11.0pt;line-height:
  121%;font-family:"Courier New";color:blue'>&lt;</span><span lang="en-US"
  style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:maroon;'>maxRulesToApply</span><span lang="en-US"
  style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>&gt;</span><span lang="en-US" style='font-size:11.0pt;
  line-height:121%;font-family:Georgia;color:black;'>). </span></p><p class=MsoNormal><span lang="en-US" style='font-size:11.0pt;line-height:121%;
  font-family:"Courier New";color:teal;'>candidate </span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  '>seed </span><span lang="en-US" style='font-size:11.0pt;
  line-height:121%;font-family:Georgia;'>:  Often the same seed is used as a starting point with the generation process. That seed is stored here as a global field of the class. </span></p><p class=MsoNormal><span lang="en-US" style='font-size:11.0pt;line-height:121%;
  font-family:"Courier New";color:teal;'>ruleSet</span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  '>[] rulesets </span><span lang="en-US" style='font-size:11.0pt;
  line-height:121%;font-family:Georgia;'>: The ruleSet array used to perform the generation process is stored here. </span></p><p class=MsoNormal><span lang="en-US" style='font-size:11.0pt;line-height:121%;
  font-family:"Courier New";color:teal;'>Boolean</span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:"Courier New";
  color:black;'> </span><span lang="en-US" style='font-size:11.0pt;
  line-height:121%;font-family:"Courier New";'>display </span><span
  lang="en-US" style='font-size:11.0pt;line-height:121%;font-family:Georgia;
  '>: A simple Boolean used for debugging or interactive generation. If true then the host will be re-plotted after each apply action.</span></p></span><div style="position: absolute; left: 193px; top: 370px; width: 161px; height: 516px; z-index: 5" id="layer1"><img alt="generation process" src="images/generationProcess.png" class="style1"></div><span style='position:absolute;z-index:1;
 left:192px;top:231px; width:563px; height:148px'><p class=style1><span lang="en-US">We consider the seed graph, the grammar rules and the rule sets to provide the designer with the Representation for a particular problem domain. On top of this representation, GraphSynth provides us the basic framework to generate candidate solutions through a recognize, choose and apply cycle shown here.</span></p></span><span style='position:absolute;z-index:4;
 left:195px; top:1148px; width:569px;height:160px'><p class=style1><span lang="en-US">After the creation of the generation methods, one can invoke the generation by calling one of the existing </span><span
  lang="en-US" style='font-family:Georgia;'>RecognizeChooseApply.cs invoked functions:<br></span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>public</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'> </span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:teal;'>candidate</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'> generateOneCandidate()<br></span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>public</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'> </span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>void</span><span lang="en-US" style='font-size:10.0pt;
  line-height:121%;font-family:"Courier New";color:black;'> runGUIOrRandomTest()<br></span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>public</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'> </span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:teal;'>candidate</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'>[] GenerateArrayOfCandidates(</span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>int</span><span lang="en-US" style='font-size:10.0pt;
  line-height:121%;font-family:"Courier New";color:black;'> numToCandidates)<br></span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>public</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'> </span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:teal;'>List</span><span lang="en-US" style='font-size:10.0pt;
  line-height:121%;font-family:"Courier New";color:black;'>&lt;</span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:teal;'>candidate</span><span lang="en-US" style='font-size:
  10.0pt;line-height:121%;font-family:"Courier New";color:black;'>&gt; GenerateListOfCandidates(</span><span
  lang="en-US" style='font-size:10.0pt;line-height:121%;font-family:"Courier New";
  color:blue;'>int</span><span lang="en-US" style='font-size:10.0pt;
  line-height:121%;font-family:"Courier New";color:black;'> numToCandidates)</span><span
  lang="en-US" style='font-family:"Times New Roman";color:black;'><br>or by writing your own invoking function in the derived class (see example at bottom of </span><span
  lang="en-US" style='font-family:Georgia;'>randomChoose.cs).</span></p></span><span style='position:absolute;z-index:2;
 left:186px; top:1061px; width:328px;height:60px'><table cellpadding=0 cellspacing=0><tr><td width=328 height=60><p class=MsoNormal><span lang="en-US"
  style='font-size:8.0pt;font-family:Tahoma;'>Figure 1: Throughout a recognize, choose, and apply generation process, any of five things may happen. In order to plan accordingly a rule set should include instructions for how to handle each of these possible exits.</span></p></td></tr></table></span><span style="position: absolute; left: 9px; top: 211px; width: 175px; height: 431px; z-index: 100" id="navigation"><li class="sideBarNav"><a href="index.htm">Home</a></li><li class="sideBarNav"><a href="introMethod.htm">Methodology Overview</a></li><li class="sideBarNav"><a href="graphs.htm">Graph Basics</a></li><li class="sideBarNav"><a href="grammars.htm">Grammar Basics</a></li><li class="sideBarNav"><a href="rule_recognition.htm">Grammars: Recognition</a></li><li class="sideBarNav"><a href="rule_application.htm">Grammars: Application</a></li><li class="sideBarNav"><a href="ruleSets.htm">Grammars: RuleSets</a></li><li class="sideBarNav"><a href="generation.htm">Generation</a></li><li class="sideBarNav"><a href="searchProcess.htm">Search Process</a></li><li class="sideBarNav"><a href="navigating.htm">Navigating GraphSynth</a></li><li class="sideBarNav"><a href="examples.htm">Examples</a></li><li class="sideBarNav"><a href="download.htm">Download</a></li> </span></body></html>