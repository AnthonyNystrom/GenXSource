/* WS_SnapUpServiceC.cpp
   Generated by gSOAP 2.7.10 from .\wsdl-h\SnapUpService.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "WS_SnapUpServiceH.h"

namespace WS_SnapUpService {

SOAP_SOURCE_STAMP("@(#) WS_SnapUpServiceC.cpp ver 2.7.10 2008-05-17 16:12:16 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_WS_SnapUpService_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_WS_SnapUpService_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_WS_SnapUpService_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhotoResponse:
		return soap_in_PointerTo_SnapUpService__JavaUploadPhotoResponse(soap, NULL, NULL, "SnapUpService:JavaUploadPhotoResponse");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhoto:
		return soap_in_PointerTo_SnapUpService__JavaUploadPhoto(soap, NULL, NULL, "SnapUpService:JavaUploadPhoto");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhotoResponse:
		return soap_in_PointerTo_SnapUpService__DeviceUploadPhotoResponse(soap, NULL, NULL, "SnapUpService:DeviceUploadPhotoResponse");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhoto:
		return soap_in_PointerTo_SnapUpService__DeviceUploadPhoto(soap, NULL, NULL, "SnapUpService:DeviceUploadPhoto");
	case SOAP_TYPE_WS_SnapUpService_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_SnapUpService_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_WS_SnapUpService_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_WS_SnapUpService_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_WS_SnapUpService_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_WS_SnapUpService_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "SnapUpService:JavaUploadPhotoResponse"))
		{	*type = SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse;
			return soap_in__SnapUpService__JavaUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SnapUpService:JavaUploadPhoto"))
		{	*type = SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto;
			return soap_in__SnapUpService__JavaUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SnapUpService:DeviceUploadPhotoResponse"))
		{	*type = SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse;
			return soap_in__SnapUpService__DeviceUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "SnapUpService:DeviceUploadPhoto"))
		{	*type = SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto;
			return soap_in__SnapUpService__DeviceUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_WS_SnapUpService__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_WS_SnapUpService_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_WS_SnapUpService_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_WS_SnapUpService_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse:
		return ((_SnapUpService__JavaUploadPhotoResponse *)ptr)->soap_out(soap, "SnapUpService:JavaUploadPhotoResponse", id, NULL);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto:
		return ((_SnapUpService__JavaUploadPhoto *)ptr)->soap_out(soap, "SnapUpService:JavaUploadPhoto", id, NULL);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse:
		return ((_SnapUpService__DeviceUploadPhotoResponse *)ptr)->soap_out(soap, "SnapUpService:DeviceUploadPhotoResponse", id, NULL);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto:
		return ((_SnapUpService__DeviceUploadPhoto *)ptr)->soap_out(soap, "SnapUpService:DeviceUploadPhoto", id, NULL);
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhotoResponse:
		return soap_out_PointerTo_SnapUpService__JavaUploadPhotoResponse(soap, tag, id, (_SnapUpService__JavaUploadPhotoResponse *const*)ptr, "SnapUpService:JavaUploadPhotoResponse");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhoto:
		return soap_out_PointerTo_SnapUpService__JavaUploadPhoto(soap, tag, id, (_SnapUpService__JavaUploadPhoto *const*)ptr, "SnapUpService:JavaUploadPhoto");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhotoResponse:
		return soap_out_PointerTo_SnapUpService__DeviceUploadPhotoResponse(soap, tag, id, (_SnapUpService__DeviceUploadPhotoResponse *const*)ptr, "SnapUpService:DeviceUploadPhotoResponse");
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhoto:
		return soap_out_PointerTo_SnapUpService__DeviceUploadPhoto(soap, tag, id, (_SnapUpService__DeviceUploadPhoto *const*)ptr, "SnapUpService:DeviceUploadPhoto");
	case SOAP_TYPE_WS_SnapUpService_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_WS_SnapUpService__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_WS_SnapUpService_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_WS_SnapUpService_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse:
		((_SnapUpService__JavaUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto:
		((_SnapUpService__JavaUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse:
		((_SnapUpService__DeviceUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto:
		((_SnapUpService__DeviceUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__JavaUploadPhoto:
		soap_serialize___SnapUpService3__JavaUploadPhoto(soap, (const struct __SnapUpService3__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__DeviceUploadPhoto:
		soap_serialize___SnapUpService3__DeviceUploadPhoto(soap, (const struct __SnapUpService3__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__JavaUploadPhoto:
		soap_serialize___SnapUpService2__JavaUploadPhoto(soap, (const struct __SnapUpService2__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__DeviceUploadPhoto:
		soap_serialize___SnapUpService2__DeviceUploadPhoto(soap, (const struct __SnapUpService2__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhotoResponse:
		soap_serialize_PointerTo_SnapUpService__JavaUploadPhotoResponse(soap, (_SnapUpService__JavaUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhoto:
		soap_serialize_PointerTo_SnapUpService__JavaUploadPhoto(soap, (_SnapUpService__JavaUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhotoResponse:
		soap_serialize_PointerTo_SnapUpService__DeviceUploadPhotoResponse(soap, (_SnapUpService__DeviceUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhoto:
		soap_serialize_PointerTo_SnapUpService__DeviceUploadPhoto(soap, (_SnapUpService__DeviceUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_WS_SnapUpService_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_WS_SnapUpService_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto:
		return (void*)soap_instantiate__SnapUpService__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse:
		return (void*)soap_instantiate__SnapUpService__DeviceUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto:
		return (void*)soap_instantiate__SnapUpService__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse:
		return (void*)soap_instantiate__SnapUpService__JavaUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__DeviceUploadPhoto:
		return (void*)soap_instantiate___SnapUpService2__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__JavaUploadPhoto:
		return (void*)soap_instantiate___SnapUpService2__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__DeviceUploadPhoto:
		return (void*)soap_instantiate___SnapUpService3__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__JavaUploadPhoto:
		return (void*)soap_instantiate___SnapUpService3__JavaUploadPhoto(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_WS_SnapUpService_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto:
		if (p->size < 0)
			delete (_SnapUpService__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (_SnapUpService__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse:
		if (p->size < 0)
			delete (_SnapUpService__DeviceUploadPhotoResponse*)p->ptr;
		else
			delete[] (_SnapUpService__DeviceUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto:
		if (p->size < 0)
			delete (_SnapUpService__JavaUploadPhoto*)p->ptr;
		else
			delete[] (_SnapUpService__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse:
		if (p->size < 0)
			delete (_SnapUpService__JavaUploadPhotoResponse*)p->ptr;
		else
			delete[] (_SnapUpService__JavaUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __SnapUpService2__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __SnapUpService2__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService2__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __SnapUpService2__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __SnapUpService2__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __SnapUpService3__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __SnapUpService3__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService___SnapUpService3__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __SnapUpService3__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __SnapUpService3__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_WS_SnapUpService_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_WS_SnapUpService_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_WS_SnapUpService_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_WS_SnapUpService_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_WS_SnapUpService_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_SnapUpService_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_SnapUpService_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_WS_SnapUpService_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _SnapUpService__JavaUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _SnapUpService__JavaUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _SnapUpService__JavaUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _SnapUpService__JavaUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__SnapUpService__JavaUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _SnapUpService__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_SnapUpService__JavaUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__SnapUpService__JavaUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhotoResponse * SOAP_FMAC4 soap_get__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, _SnapUpService__JavaUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__SnapUpService__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_SnapUpService__JavaUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__SnapUpService__JavaUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhotoResponse * SOAP_FMAC4 soap_in__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _SnapUpService__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_SnapUpService__JavaUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse, sizeof(_SnapUpService__JavaUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_SnapUpService__JavaUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_SnapUpService__JavaUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse, 0, sizeof(_SnapUpService__JavaUploadPhotoResponse), 0, soap_copy__SnapUpService__JavaUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _SnapUpService__JavaUploadPhotoResponse * SOAP_FMAC6 soap_new__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__SnapUpService__JavaUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, _SnapUpService__JavaUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__SnapUpService__JavaUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _SnapUpService__JavaUploadPhotoResponse;
		if (size)
			*size = sizeof(_SnapUpService__JavaUploadPhotoResponse);
		((_SnapUpService__JavaUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _SnapUpService__JavaUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_SnapUpService__JavaUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_SnapUpService__JavaUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_SnapUpService__JavaUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__SnapUpService__JavaUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _SnapUpService__JavaUploadPhotoResponse %p -> %p\n", q, p));
	*(_SnapUpService__JavaUploadPhotoResponse*)p = *(_SnapUpService__JavaUploadPhotoResponse*)q;
}

void _SnapUpService__JavaUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_SnapUpService__JavaUploadPhoto::encryptedWebMemberID = NULL;
	this->_SnapUpService__JavaUploadPhoto::webPhotoCollectionID = NULL;
	this->_SnapUpService__JavaUploadPhoto::base64StringPhoto = NULL;
	this->_SnapUpService__JavaUploadPhoto::dateTime = NULL;
	/* transient soap skipped */
}

void _SnapUpService__JavaUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__JavaUploadPhoto::encryptedWebMemberID);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__JavaUploadPhoto::webPhotoCollectionID);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__JavaUploadPhoto::base64StringPhoto);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__JavaUploadPhoto::dateTime);
	/* transient soap skipped */
}

int _SnapUpService__JavaUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _SnapUpService__JavaUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__SnapUpService__JavaUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__SnapUpService__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const _SnapUpService__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:encryptedWebMemberID", -1, &(a->_SnapUpService__JavaUploadPhoto::encryptedWebMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:webPhotoCollectionID", -1, &(a->_SnapUpService__JavaUploadPhoto::webPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:base64StringPhoto", -1, &(a->_SnapUpService__JavaUploadPhoto::base64StringPhoto), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:dateTime", -1, &(a->_SnapUpService__JavaUploadPhoto::dateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_SnapUpService__JavaUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__SnapUpService__JavaUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhoto * SOAP_FMAC4 soap_get__SnapUpService__JavaUploadPhoto(struct soap *soap, _SnapUpService__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__SnapUpService__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_SnapUpService__JavaUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__SnapUpService__JavaUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhoto * SOAP_FMAC4 soap_in__SnapUpService__JavaUploadPhoto(struct soap *soap, const char *tag, _SnapUpService__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_SnapUpService__JavaUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto, sizeof(_SnapUpService__JavaUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_SnapUpService__JavaUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_encryptedWebMemberID1 = 1, soap_flag_webPhotoCollectionID1 = 1, soap_flag_base64StringPhoto1 = 1, soap_flag_dateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_encryptedWebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:encryptedWebMemberID", &(a->_SnapUpService__JavaUploadPhoto::encryptedWebMemberID), "xsd:string"))
				{	soap_flag_encryptedWebMemberID1--;
					continue;
				}
			if (soap_flag_webPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:webPhotoCollectionID", &(a->_SnapUpService__JavaUploadPhoto::webPhotoCollectionID), "xsd:string"))
				{	soap_flag_webPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:base64StringPhoto", &(a->_SnapUpService__JavaUploadPhoto::base64StringPhoto), "xsd:string"))
				{	soap_flag_base64StringPhoto1--;
					continue;
				}
			if (soap_flag_dateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:dateTime", &(a->_SnapUpService__JavaUploadPhoto::dateTime), "xsd:string"))
				{	soap_flag_dateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_SnapUpService__JavaUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto, 0, sizeof(_SnapUpService__JavaUploadPhoto), 0, soap_copy__SnapUpService__JavaUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _SnapUpService__JavaUploadPhoto * SOAP_FMAC6 soap_new__SnapUpService__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__SnapUpService__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__SnapUpService__JavaUploadPhoto(struct soap *soap, _SnapUpService__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate__SnapUpService__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__SnapUpService__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _SnapUpService__JavaUploadPhoto;
		if (size)
			*size = sizeof(_SnapUpService__JavaUploadPhoto);
		((_SnapUpService__JavaUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _SnapUpService__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_SnapUpService__JavaUploadPhoto);
		for (int i = 0; i < n; i++)
			((_SnapUpService__JavaUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_SnapUpService__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__SnapUpService__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _SnapUpService__JavaUploadPhoto %p -> %p\n", q, p));
	*(_SnapUpService__JavaUploadPhoto*)p = *(_SnapUpService__JavaUploadPhoto*)q;
}

void _SnapUpService__DeviceUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _SnapUpService__DeviceUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _SnapUpService__DeviceUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _SnapUpService__DeviceUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__SnapUpService__DeviceUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _SnapUpService__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_SnapUpService__DeviceUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__SnapUpService__DeviceUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_get__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, _SnapUpService__DeviceUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__SnapUpService__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_SnapUpService__DeviceUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__SnapUpService__DeviceUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_in__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _SnapUpService__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_SnapUpService__DeviceUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse, sizeof(_SnapUpService__DeviceUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_SnapUpService__DeviceUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_SnapUpService__DeviceUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse, 0, sizeof(_SnapUpService__DeviceUploadPhotoResponse), 0, soap_copy__SnapUpService__DeviceUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _SnapUpService__DeviceUploadPhotoResponse * SOAP_FMAC6 soap_new__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__SnapUpService__DeviceUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, _SnapUpService__DeviceUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__SnapUpService__DeviceUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _SnapUpService__DeviceUploadPhotoResponse;
		if (size)
			*size = sizeof(_SnapUpService__DeviceUploadPhotoResponse);
		((_SnapUpService__DeviceUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _SnapUpService__DeviceUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_SnapUpService__DeviceUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_SnapUpService__DeviceUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_SnapUpService__DeviceUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _SnapUpService__DeviceUploadPhotoResponse %p -> %p\n", q, p));
	*(_SnapUpService__DeviceUploadPhotoResponse*)p = *(_SnapUpService__DeviceUploadPhotoResponse*)q;
}

void _SnapUpService__DeviceUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_SnapUpService__DeviceUploadPhoto::nickname = NULL;
	this->_SnapUpService__DeviceUploadPhoto::password = NULL;
	this->_SnapUpService__DeviceUploadPhoto::base64StringPhoto = NULL;
	this->_SnapUpService__DeviceUploadPhoto::dateTime = NULL;
	/* transient soap skipped */
}

void _SnapUpService__DeviceUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__DeviceUploadPhoto::nickname);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__DeviceUploadPhoto::password);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__DeviceUploadPhoto::base64StringPhoto);
	soap_serialize_PointerTostd__string(soap, &this->_SnapUpService__DeviceUploadPhoto::dateTime);
	/* transient soap skipped */
}

int _SnapUpService__DeviceUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _SnapUpService__DeviceUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__SnapUpService__DeviceUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__SnapUpService__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const _SnapUpService__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:nickname", -1, &(a->_SnapUpService__DeviceUploadPhoto::nickname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:password", -1, &(a->_SnapUpService__DeviceUploadPhoto::password), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:base64StringPhoto", -1, &(a->_SnapUpService__DeviceUploadPhoto::base64StringPhoto), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "SnapUpService:dateTime", -1, &(a->_SnapUpService__DeviceUploadPhoto::dateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_SnapUpService__DeviceUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__SnapUpService__DeviceUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhoto * SOAP_FMAC4 soap_get__SnapUpService__DeviceUploadPhoto(struct soap *soap, _SnapUpService__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__SnapUpService__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_SnapUpService__DeviceUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__SnapUpService__DeviceUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhoto * SOAP_FMAC4 soap_in__SnapUpService__DeviceUploadPhoto(struct soap *soap, const char *tag, _SnapUpService__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_SnapUpService__DeviceUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto, sizeof(_SnapUpService__DeviceUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_SnapUpService__DeviceUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_nickname1 = 1, soap_flag_password1 = 1, soap_flag_base64StringPhoto1 = 1, soap_flag_dateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nickname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:nickname", &(a->_SnapUpService__DeviceUploadPhoto::nickname), "xsd:string"))
				{	soap_flag_nickname1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:password", &(a->_SnapUpService__DeviceUploadPhoto::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			if (soap_flag_base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:base64StringPhoto", &(a->_SnapUpService__DeviceUploadPhoto::base64StringPhoto), "xsd:string"))
				{	soap_flag_base64StringPhoto1--;
					continue;
				}
			if (soap_flag_dateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "SnapUpService:dateTime", &(a->_SnapUpService__DeviceUploadPhoto::dateTime), "xsd:string"))
				{	soap_flag_dateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_SnapUpService__DeviceUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto, 0, sizeof(_SnapUpService__DeviceUploadPhoto), 0, soap_copy__SnapUpService__DeviceUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _SnapUpService__DeviceUploadPhoto * SOAP_FMAC6 soap_new__SnapUpService__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__SnapUpService__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__SnapUpService__DeviceUploadPhoto(struct soap *soap, _SnapUpService__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate__SnapUpService__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__SnapUpService__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _SnapUpService__DeviceUploadPhoto;
		if (size)
			*size = sizeof(_SnapUpService__DeviceUploadPhoto);
		((_SnapUpService__DeviceUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _SnapUpService__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_SnapUpService__DeviceUploadPhoto);
		for (int i = 0; i < n; i++)
			((_SnapUpService__DeviceUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_SnapUpService__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__SnapUpService__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _SnapUpService__DeviceUploadPhoto %p -> %p\n", q, p));
	*(_SnapUpService__DeviceUploadPhoto*)p = *(_SnapUpService__DeviceUploadPhoto*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___SnapUpService3__JavaUploadPhoto(struct soap *soap, struct __SnapUpService3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->SnapUpService__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___SnapUpService3__JavaUploadPhoto(struct soap *soap, const struct __SnapUpService3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_SnapUpService__JavaUploadPhoto(soap, &a->SnapUpService__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___SnapUpService3__JavaUploadPhoto(struct soap *soap, const struct __SnapUpService3__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___SnapUpService3__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___SnapUpService3__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __SnapUpService3__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_SnapUpService__JavaUploadPhoto(soap, "SnapUpService:JavaUploadPhoto", -1, &a->SnapUpService__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __SnapUpService3__JavaUploadPhoto * SOAP_FMAC4 soap_get___SnapUpService3__JavaUploadPhoto(struct soap *soap, struct __SnapUpService3__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___SnapUpService3__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __SnapUpService3__JavaUploadPhoto * SOAP_FMAC4 soap_in___SnapUpService3__JavaUploadPhoto(struct soap *soap, const char *tag, struct __SnapUpService3__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_SnapUpService__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __SnapUpService3__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_SnapUpService___SnapUpService3__JavaUploadPhoto, sizeof(struct __SnapUpService3__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___SnapUpService3__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SnapUpService__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_SnapUpService__JavaUploadPhoto(soap, "SnapUpService:JavaUploadPhoto", &a->SnapUpService__JavaUploadPhoto, ""))
				{	soap_flag_SnapUpService__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __SnapUpService3__JavaUploadPhoto * SOAP_FMAC6 soap_new___SnapUpService3__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___SnapUpService3__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___SnapUpService3__JavaUploadPhoto(struct soap *soap, struct __SnapUpService3__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __SnapUpService3__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___SnapUpService3__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___SnapUpService3__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService___SnapUpService3__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __SnapUpService3__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __SnapUpService3__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __SnapUpService3__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __SnapUpService3__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __SnapUpService3__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___SnapUpService3__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __SnapUpService3__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __SnapUpService3__JavaUploadPhoto*)p = *(struct __SnapUpService3__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___SnapUpService3__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->SnapUpService__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___SnapUpService3__DeviceUploadPhoto(struct soap *soap, const struct __SnapUpService3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_SnapUpService__DeviceUploadPhoto(soap, &a->SnapUpService__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___SnapUpService3__DeviceUploadPhoto(struct soap *soap, const struct __SnapUpService3__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___SnapUpService3__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___SnapUpService3__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __SnapUpService3__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_SnapUpService__DeviceUploadPhoto(soap, "SnapUpService:DeviceUploadPhoto", -1, &a->SnapUpService__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __SnapUpService3__DeviceUploadPhoto * SOAP_FMAC4 soap_get___SnapUpService3__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService3__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___SnapUpService3__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __SnapUpService3__DeviceUploadPhoto * SOAP_FMAC4 soap_in___SnapUpService3__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __SnapUpService3__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_SnapUpService__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __SnapUpService3__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_SnapUpService___SnapUpService3__DeviceUploadPhoto, sizeof(struct __SnapUpService3__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___SnapUpService3__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SnapUpService__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_SnapUpService__DeviceUploadPhoto(soap, "SnapUpService:DeviceUploadPhoto", &a->SnapUpService__DeviceUploadPhoto, ""))
				{	soap_flag_SnapUpService__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __SnapUpService3__DeviceUploadPhoto * SOAP_FMAC6 soap_new___SnapUpService3__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___SnapUpService3__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___SnapUpService3__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService3__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __SnapUpService3__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___SnapUpService3__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___SnapUpService3__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService___SnapUpService3__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __SnapUpService3__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __SnapUpService3__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __SnapUpService3__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __SnapUpService3__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __SnapUpService3__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___SnapUpService3__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __SnapUpService3__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __SnapUpService3__DeviceUploadPhoto*)p = *(struct __SnapUpService3__DeviceUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___SnapUpService2__JavaUploadPhoto(struct soap *soap, struct __SnapUpService2__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->SnapUpService__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___SnapUpService2__JavaUploadPhoto(struct soap *soap, const struct __SnapUpService2__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_SnapUpService__JavaUploadPhoto(soap, &a->SnapUpService__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___SnapUpService2__JavaUploadPhoto(struct soap *soap, const struct __SnapUpService2__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___SnapUpService2__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___SnapUpService2__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __SnapUpService2__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_SnapUpService__JavaUploadPhoto(soap, "SnapUpService:JavaUploadPhoto", -1, &a->SnapUpService__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __SnapUpService2__JavaUploadPhoto * SOAP_FMAC4 soap_get___SnapUpService2__JavaUploadPhoto(struct soap *soap, struct __SnapUpService2__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___SnapUpService2__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __SnapUpService2__JavaUploadPhoto * SOAP_FMAC4 soap_in___SnapUpService2__JavaUploadPhoto(struct soap *soap, const char *tag, struct __SnapUpService2__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_SnapUpService__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __SnapUpService2__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_SnapUpService___SnapUpService2__JavaUploadPhoto, sizeof(struct __SnapUpService2__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___SnapUpService2__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SnapUpService__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_SnapUpService__JavaUploadPhoto(soap, "SnapUpService:JavaUploadPhoto", &a->SnapUpService__JavaUploadPhoto, ""))
				{	soap_flag_SnapUpService__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __SnapUpService2__JavaUploadPhoto * SOAP_FMAC6 soap_new___SnapUpService2__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___SnapUpService2__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___SnapUpService2__JavaUploadPhoto(struct soap *soap, struct __SnapUpService2__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __SnapUpService2__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___SnapUpService2__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___SnapUpService2__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService___SnapUpService2__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __SnapUpService2__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __SnapUpService2__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __SnapUpService2__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __SnapUpService2__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __SnapUpService2__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___SnapUpService2__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __SnapUpService2__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __SnapUpService2__JavaUploadPhoto*)p = *(struct __SnapUpService2__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___SnapUpService2__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService2__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->SnapUpService__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___SnapUpService2__DeviceUploadPhoto(struct soap *soap, const struct __SnapUpService2__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_SnapUpService__DeviceUploadPhoto(soap, &a->SnapUpService__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___SnapUpService2__DeviceUploadPhoto(struct soap *soap, const struct __SnapUpService2__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___SnapUpService2__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___SnapUpService2__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __SnapUpService2__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_SnapUpService__DeviceUploadPhoto(soap, "SnapUpService:DeviceUploadPhoto", -1, &a->SnapUpService__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __SnapUpService2__DeviceUploadPhoto * SOAP_FMAC4 soap_get___SnapUpService2__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService2__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___SnapUpService2__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __SnapUpService2__DeviceUploadPhoto * SOAP_FMAC4 soap_in___SnapUpService2__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __SnapUpService2__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_SnapUpService__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __SnapUpService2__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_SnapUpService___SnapUpService2__DeviceUploadPhoto, sizeof(struct __SnapUpService2__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___SnapUpService2__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SnapUpService__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_SnapUpService__DeviceUploadPhoto(soap, "SnapUpService:DeviceUploadPhoto", &a->SnapUpService__DeviceUploadPhoto, ""))
				{	soap_flag_SnapUpService__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __SnapUpService2__DeviceUploadPhoto * SOAP_FMAC6 soap_new___SnapUpService2__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___SnapUpService2__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___SnapUpService2__DeviceUploadPhoto(struct soap *soap, struct __SnapUpService2__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __SnapUpService2__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___SnapUpService2__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___SnapUpService2__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_SnapUpService___SnapUpService2__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __SnapUpService2__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __SnapUpService2__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __SnapUpService2__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __SnapUpService2__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __SnapUpService2__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___SnapUpService2__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __SnapUpService2__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __SnapUpService2__DeviceUploadPhoto*)p = *(struct __SnapUpService2__DeviceUploadPhoto*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_SnapUpService__JavaUploadPhotoResponse(struct soap *soap, _SnapUpService__JavaUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_SnapUpService__JavaUploadPhotoResponse(struct soap *soap, _SnapUpService__JavaUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhotoResponse);
	if (soap_out_PointerTo_SnapUpService__JavaUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_SnapUpService__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, _SnapUpService__JavaUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_SnapUpService__JavaUploadPhotoResponse(struct soap *soap, _SnapUpService__JavaUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_SnapUpService__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_SnapUpService__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _SnapUpService__JavaUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_SnapUpService__JavaUploadPhotoResponse **)soap_malloc(soap, sizeof(_SnapUpService__JavaUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_SnapUpService__JavaUploadPhotoResponse *)soap_instantiate__SnapUpService__JavaUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_SnapUpService__JavaUploadPhotoResponse ** p = (_SnapUpService__JavaUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhotoResponse, sizeof(_SnapUpService__JavaUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_SnapUpService__JavaUploadPhoto(struct soap *soap, _SnapUpService__JavaUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_SnapUpService__JavaUploadPhoto(struct soap *soap, _SnapUpService__JavaUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__JavaUploadPhoto);
	if (soap_out_PointerTo_SnapUpService__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_SnapUpService__JavaUploadPhoto(struct soap *soap, const char *tag, int id, _SnapUpService__JavaUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_SnapUpService__JavaUploadPhoto(struct soap *soap, _SnapUpService__JavaUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_SnapUpService__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _SnapUpService__JavaUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_SnapUpService__JavaUploadPhoto(struct soap *soap, const char *tag, _SnapUpService__JavaUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_SnapUpService__JavaUploadPhoto **)soap_malloc(soap, sizeof(_SnapUpService__JavaUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_SnapUpService__JavaUploadPhoto *)soap_instantiate__SnapUpService__JavaUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_SnapUpService__JavaUploadPhoto ** p = (_SnapUpService__JavaUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService__SnapUpService__JavaUploadPhoto, sizeof(_SnapUpService__JavaUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, _SnapUpService__DeviceUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, _SnapUpService__DeviceUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhotoResponse);
	if (soap_out_PointerTo_SnapUpService__DeviceUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, _SnapUpService__DeviceUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, _SnapUpService__DeviceUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_SnapUpService__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_SnapUpService__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _SnapUpService__DeviceUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_SnapUpService__DeviceUploadPhotoResponse **)soap_malloc(soap, sizeof(_SnapUpService__DeviceUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_SnapUpService__DeviceUploadPhotoResponse *)soap_instantiate__SnapUpService__DeviceUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_SnapUpService__DeviceUploadPhotoResponse ** p = (_SnapUpService__DeviceUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhotoResponse, sizeof(_SnapUpService__DeviceUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_SnapUpService__DeviceUploadPhoto(struct soap *soap, _SnapUpService__DeviceUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_SnapUpService__DeviceUploadPhoto(struct soap *soap, _SnapUpService__DeviceUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerTo_SnapUpService__DeviceUploadPhoto);
	if (soap_out_PointerTo_SnapUpService__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_SnapUpService__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, _SnapUpService__DeviceUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_SnapUpService__DeviceUploadPhoto(struct soap *soap, _SnapUpService__DeviceUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_SnapUpService__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _SnapUpService__DeviceUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_SnapUpService__DeviceUploadPhoto(struct soap *soap, const char *tag, _SnapUpService__DeviceUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_SnapUpService__DeviceUploadPhoto **)soap_malloc(soap, sizeof(_SnapUpService__DeviceUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_SnapUpService__DeviceUploadPhoto *)soap_instantiate__SnapUpService__DeviceUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_SnapUpService__DeviceUploadPhoto ** p = (_SnapUpService__DeviceUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService__SnapUpService__DeviceUploadPhoto, sizeof(_SnapUpService__DeviceUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_SnapUpService_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_SnapUpService_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_SnapUpService__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_SnapUpService__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_WS_SnapUpService_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_SnapUpService_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_SnapUpService_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_SnapUpService_string, 1, -1, -1);
}

} // namespace WS_SnapUpService


/* End of WS_SnapUpServiceC.cpp */
