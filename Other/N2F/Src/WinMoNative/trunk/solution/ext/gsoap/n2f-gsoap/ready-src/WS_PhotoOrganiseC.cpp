/* WS_PhotoOrganiseC.cpp
   Generated by gSOAP 2.7.10 from .\wsdl-h\PhotoOrganise.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "WS_PhotoOrganiseH.h"

namespace WS_PhotoOrganise {

SOAP_SOURCE_STAMP("@(#) WS_PhotoOrganiseC.cpp ver 2.7.10 2008-04-13 13:01:18 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_WS_PhotoOrganise_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_WS_PhotoOrganise_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_WS_PhotoOrganise_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_WS_PhotoOrganise_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_WS_PhotoOrganise_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_WS_PhotoOrganise_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_WS_PhotoOrganise_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray:
		return soap_in_PhotoOrganise2StringArray(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem:
		return soap_in_PhotoOrganise__PhotoItem(soap, NULL, NULL, "PhotoOrganise:PhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem:
		return soap_in_PhotoOrganise__ArrayOfPhotoItem(soap, NULL, NULL, "PhotoOrganise:ArrayOfPhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem:
		return soap_in_PhotoOrganise__PhotoCollectionItem(soap, NULL, NULL, "PhotoOrganise:PhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem:
		return soap_in_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, NULL, NULL, "PhotoOrganise:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhotoResponse:
		return soap_in_PointerTo_PhotoOrganise__DeletePhotoResponse(soap, NULL, NULL, "PhotoOrganise:DeletePhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhoto:
		return soap_in_PointerTo_PhotoOrganise__DeletePhoto(soap, NULL, NULL, "PhotoOrganise:DeletePhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollectionResponse:
		return soap_in_PointerTo_PhotoOrganise__RenameCollectionResponse(soap, NULL, NULL, "PhotoOrganise:RenameCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollection:
		return soap_in_PointerTo_PhotoOrganise__RenameCollection(soap, NULL, NULL, "PhotoOrganise:RenameCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhotoResponse:
		return soap_in_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(soap, NULL, NULL, "PhotoOrganise:JavaUploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhoto:
		return soap_in_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, NULL, NULL, "PhotoOrganise:JavaUploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse:
		return soap_in_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(soap, NULL, NULL, "PhotoOrganise:DeviceUploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhoto:
		return soap_in_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, NULL, NULL, "PhotoOrganise:DeviceUploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhotoResponse:
		return soap_in_PointerTo_PhotoOrganise__UploadPhotoResponse(soap, NULL, NULL, "PhotoOrganise:UploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhoto:
		return soap_in_PointerTo_PhotoOrganise__UploadPhoto(soap, NULL, NULL, "PhotoOrganise:UploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse:
		return soap_in_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(soap, NULL, NULL, "PhotoOrganise:GetPhotosByCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollection:
		return soap_in_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, NULL, NULL, "PhotoOrganise:GetPhotosByCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollectionsResponse:
		return soap_in_PointerTo_PhotoOrganise__GetCollectionsResponse(soap, NULL, NULL, "PhotoOrganise:GetCollectionsResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollections:
		return soap_in_PointerTo_PhotoOrganise__GetCollections(soap, NULL, NULL, "PhotoOrganise:GetCollections");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollectionResponse:
		return soap_in_PointerTo_PhotoOrganise__CreateNewCollectionResponse(soap, NULL, NULL, "PhotoOrganise:CreateNewCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollection:
		return soap_in_PointerTo_PhotoOrganise__CreateNewCollection(soap, NULL, NULL, "PhotoOrganise:CreateNewCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__LoginResponse:
		return soap_in_PointerTo_PhotoOrganise__LoginResponse(soap, NULL, NULL, "PhotoOrganise:LoginResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__Login:
		return soap_in_PointerTo_PhotoOrganise__Login(soap, NULL, NULL, "PhotoOrganise:Login");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoItem:
		return soap_in_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, NULL, NULL, "PhotoOrganise:ArrayOfPhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem:
		return soap_in_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, NULL, NULL, "PhotoOrganise:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoItem:
		return soap_in_PointerToPhotoOrganise__PhotoItem(soap, NULL, NULL, "PhotoOrganise:PhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoCollectionItem:
		return soap_in_PointerToPhotoOrganise__PhotoCollectionItem(soap, NULL, NULL, "PhotoOrganise:PhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_WS_PhotoOrganise_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray;
			return soap_in_PhotoOrganise2StringArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:PhotoItem"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem;
			return soap_in_PhotoOrganise__PhotoItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:ArrayOfPhotoItem"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem;
			return soap_in_PhotoOrganise__ArrayOfPhotoItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:PhotoCollectionItem"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem;
			return soap_in_PhotoOrganise__PhotoCollectionItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:ArrayOfPhotoCollectionItem"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem;
			return soap_in_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_WS_PhotoOrganise_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "PhotoOrganise:DeletePhotoResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse;
			return soap_in__PhotoOrganise__DeletePhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:DeletePhoto"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto;
			return soap_in__PhotoOrganise__DeletePhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:RenameCollectionResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse;
			return soap_in__PhotoOrganise__RenameCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:RenameCollection"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection;
			return soap_in__PhotoOrganise__RenameCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:JavaUploadPhotoResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse;
			return soap_in__PhotoOrganise__JavaUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:JavaUploadPhoto"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto;
			return soap_in__PhotoOrganise__JavaUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:DeviceUploadPhotoResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse;
			return soap_in__PhotoOrganise__DeviceUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:DeviceUploadPhoto"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto;
			return soap_in__PhotoOrganise__DeviceUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:UploadPhotoResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse;
			return soap_in__PhotoOrganise__UploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:UploadPhoto"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto;
			return soap_in__PhotoOrganise__UploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:GetPhotosByCollectionResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse;
			return soap_in__PhotoOrganise__GetPhotosByCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:GetPhotosByCollection"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection;
			return soap_in__PhotoOrganise__GetPhotosByCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:GetCollectionsResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse;
			return soap_in__PhotoOrganise__GetCollectionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:GetCollections"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections;
			return soap_in__PhotoOrganise__GetCollections(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:CreateNewCollectionResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse;
			return soap_in__PhotoOrganise__CreateNewCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:CreateNewCollection"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection;
			return soap_in__PhotoOrganise__CreateNewCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:LoginResponse"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse;
			return soap_in__PhotoOrganise__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "PhotoOrganise:Login"))
		{	*type = SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login;
			return soap_in__PhotoOrganise__Login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_WS_PhotoOrganise__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_WS_PhotoOrganise_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_WS_PhotoOrganise_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_WS_PhotoOrganise_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_WS_PhotoOrganise_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_WS_PhotoOrganise_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_WS_PhotoOrganise_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_WS_PhotoOrganise_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray:
		return ((PhotoOrganise2StringArray *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse:
		return ((_PhotoOrganise__DeletePhotoResponse *)ptr)->soap_out(soap, "PhotoOrganise:DeletePhotoResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto:
		return ((_PhotoOrganise__DeletePhoto *)ptr)->soap_out(soap, "PhotoOrganise:DeletePhoto", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse:
		return ((_PhotoOrganise__RenameCollectionResponse *)ptr)->soap_out(soap, "PhotoOrganise:RenameCollectionResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection:
		return ((_PhotoOrganise__RenameCollection *)ptr)->soap_out(soap, "PhotoOrganise:RenameCollection", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse:
		return ((_PhotoOrganise__JavaUploadPhotoResponse *)ptr)->soap_out(soap, "PhotoOrganise:JavaUploadPhotoResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto:
		return ((_PhotoOrganise__JavaUploadPhoto *)ptr)->soap_out(soap, "PhotoOrganise:JavaUploadPhoto", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse:
		return ((_PhotoOrganise__DeviceUploadPhotoResponse *)ptr)->soap_out(soap, "PhotoOrganise:DeviceUploadPhotoResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto:
		return ((_PhotoOrganise__DeviceUploadPhoto *)ptr)->soap_out(soap, "PhotoOrganise:DeviceUploadPhoto", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse:
		return ((_PhotoOrganise__UploadPhotoResponse *)ptr)->soap_out(soap, "PhotoOrganise:UploadPhotoResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto:
		return ((_PhotoOrganise__UploadPhoto *)ptr)->soap_out(soap, "PhotoOrganise:UploadPhoto", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse:
		return ((_PhotoOrganise__GetPhotosByCollectionResponse *)ptr)->soap_out(soap, "PhotoOrganise:GetPhotosByCollectionResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection:
		return ((_PhotoOrganise__GetPhotosByCollection *)ptr)->soap_out(soap, "PhotoOrganise:GetPhotosByCollection", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse:
		return ((_PhotoOrganise__GetCollectionsResponse *)ptr)->soap_out(soap, "PhotoOrganise:GetCollectionsResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections:
		return ((_PhotoOrganise__GetCollections *)ptr)->soap_out(soap, "PhotoOrganise:GetCollections", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse:
		return ((_PhotoOrganise__CreateNewCollectionResponse *)ptr)->soap_out(soap, "PhotoOrganise:CreateNewCollectionResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection:
		return ((_PhotoOrganise__CreateNewCollection *)ptr)->soap_out(soap, "PhotoOrganise:CreateNewCollection", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse:
		return ((_PhotoOrganise__LoginResponse *)ptr)->soap_out(soap, "PhotoOrganise:LoginResponse", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login:
		return ((_PhotoOrganise__Login *)ptr)->soap_out(soap, "PhotoOrganise:Login", id, NULL);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem:
		return ((PhotoOrganise__PhotoItem *)ptr)->soap_out(soap, tag, id, "PhotoOrganise:PhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem:
		return ((PhotoOrganise__ArrayOfPhotoItem *)ptr)->soap_out(soap, tag, id, "PhotoOrganise:ArrayOfPhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem:
		return ((PhotoOrganise__PhotoCollectionItem *)ptr)->soap_out(soap, tag, id, "PhotoOrganise:PhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem:
		return ((PhotoOrganise__ArrayOfPhotoCollectionItem *)ptr)->soap_out(soap, tag, id, "PhotoOrganise:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhotoResponse:
		return soap_out_PointerTo_PhotoOrganise__DeletePhotoResponse(soap, tag, id, (_PhotoOrganise__DeletePhotoResponse *const*)ptr, "PhotoOrganise:DeletePhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhoto:
		return soap_out_PointerTo_PhotoOrganise__DeletePhoto(soap, tag, id, (_PhotoOrganise__DeletePhoto *const*)ptr, "PhotoOrganise:DeletePhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollectionResponse:
		return soap_out_PointerTo_PhotoOrganise__RenameCollectionResponse(soap, tag, id, (_PhotoOrganise__RenameCollectionResponse *const*)ptr, "PhotoOrganise:RenameCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollection:
		return soap_out_PointerTo_PhotoOrganise__RenameCollection(soap, tag, id, (_PhotoOrganise__RenameCollection *const*)ptr, "PhotoOrganise:RenameCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhotoResponse:
		return soap_out_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(soap, tag, id, (_PhotoOrganise__JavaUploadPhotoResponse *const*)ptr, "PhotoOrganise:JavaUploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhoto:
		return soap_out_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, tag, id, (_PhotoOrganise__JavaUploadPhoto *const*)ptr, "PhotoOrganise:JavaUploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse:
		return soap_out_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, id, (_PhotoOrganise__DeviceUploadPhotoResponse *const*)ptr, "PhotoOrganise:DeviceUploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhoto:
		return soap_out_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, tag, id, (_PhotoOrganise__DeviceUploadPhoto *const*)ptr, "PhotoOrganise:DeviceUploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhotoResponse:
		return soap_out_PointerTo_PhotoOrganise__UploadPhotoResponse(soap, tag, id, (_PhotoOrganise__UploadPhotoResponse *const*)ptr, "PhotoOrganise:UploadPhotoResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhoto:
		return soap_out_PointerTo_PhotoOrganise__UploadPhoto(soap, tag, id, (_PhotoOrganise__UploadPhoto *const*)ptr, "PhotoOrganise:UploadPhoto");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse:
		return soap_out_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, id, (_PhotoOrganise__GetPhotosByCollectionResponse *const*)ptr, "PhotoOrganise:GetPhotosByCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollection:
		return soap_out_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, tag, id, (_PhotoOrganise__GetPhotosByCollection *const*)ptr, "PhotoOrganise:GetPhotosByCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollectionsResponse:
		return soap_out_PointerTo_PhotoOrganise__GetCollectionsResponse(soap, tag, id, (_PhotoOrganise__GetCollectionsResponse *const*)ptr, "PhotoOrganise:GetCollectionsResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollections:
		return soap_out_PointerTo_PhotoOrganise__GetCollections(soap, tag, id, (_PhotoOrganise__GetCollections *const*)ptr, "PhotoOrganise:GetCollections");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollectionResponse:
		return soap_out_PointerTo_PhotoOrganise__CreateNewCollectionResponse(soap, tag, id, (_PhotoOrganise__CreateNewCollectionResponse *const*)ptr, "PhotoOrganise:CreateNewCollectionResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollection:
		return soap_out_PointerTo_PhotoOrganise__CreateNewCollection(soap, tag, id, (_PhotoOrganise__CreateNewCollection *const*)ptr, "PhotoOrganise:CreateNewCollection");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__LoginResponse:
		return soap_out_PointerTo_PhotoOrganise__LoginResponse(soap, tag, id, (_PhotoOrganise__LoginResponse *const*)ptr, "PhotoOrganise:LoginResponse");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__Login:
		return soap_out_PointerTo_PhotoOrganise__Login(soap, tag, id, (_PhotoOrganise__Login *const*)ptr, "PhotoOrganise:Login");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoItem:
		return soap_out_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, tag, id, (PhotoOrganise__ArrayOfPhotoItem *const*)ptr, "PhotoOrganise:ArrayOfPhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem:
		return soap_out_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, id, (PhotoOrganise__ArrayOfPhotoCollectionItem *const*)ptr, "PhotoOrganise:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoItem:
		return soap_out_PointerToPhotoOrganise__PhotoItem(soap, tag, id, (PhotoOrganise__PhotoItem *const*)ptr, "PhotoOrganise:PhotoItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoCollectionItem:
		return soap_out_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, id, (PhotoOrganise__PhotoCollectionItem *const*)ptr, "PhotoOrganise:PhotoCollectionItem");
	case SOAP_TYPE_WS_PhotoOrganise_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_WS_PhotoOrganise__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_WS_PhotoOrganise_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_WS_PhotoOrganise_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray:
		((PhotoOrganise2StringArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse:
		((_PhotoOrganise__DeletePhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto:
		((_PhotoOrganise__DeletePhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse:
		((_PhotoOrganise__RenameCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection:
		((_PhotoOrganise__RenameCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse:
		((_PhotoOrganise__JavaUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto:
		((_PhotoOrganise__JavaUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse:
		((_PhotoOrganise__DeviceUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto:
		((_PhotoOrganise__DeviceUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse:
		((_PhotoOrganise__UploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto:
		((_PhotoOrganise__UploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse:
		((_PhotoOrganise__GetPhotosByCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection:
		((_PhotoOrganise__GetPhotosByCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse:
		((_PhotoOrganise__GetCollectionsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections:
		((_PhotoOrganise__GetCollections *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse:
		((_PhotoOrganise__CreateNewCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection:
		((_PhotoOrganise__CreateNewCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse:
		((_PhotoOrganise__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login:
		((_PhotoOrganise__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem:
		((PhotoOrganise__PhotoItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem:
		((PhotoOrganise__ArrayOfPhotoItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem:
		((PhotoOrganise__PhotoCollectionItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem:
		((PhotoOrganise__ArrayOfPhotoCollectionItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeletePhoto:
		soap_serialize___PhotoOrganise4__DeletePhoto(soap, (const struct __PhotoOrganise4__DeletePhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__RenameCollection:
		soap_serialize___PhotoOrganise4__RenameCollection(soap, (const struct __PhotoOrganise4__RenameCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__JavaUploadPhoto:
		soap_serialize___PhotoOrganise4__JavaUploadPhoto(soap, (const struct __PhotoOrganise4__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeviceUploadPhoto:
		soap_serialize___PhotoOrganise4__DeviceUploadPhoto(soap, (const struct __PhotoOrganise4__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__UploadPhoto:
		soap_serialize___PhotoOrganise4__UploadPhoto(soap, (const struct __PhotoOrganise4__UploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetPhotosByCollection:
		soap_serialize___PhotoOrganise4__GetPhotosByCollection(soap, (const struct __PhotoOrganise4__GetPhotosByCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetCollections:
		soap_serialize___PhotoOrganise4__GetCollections(soap, (const struct __PhotoOrganise4__GetCollections *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__CreateNewCollection:
		soap_serialize___PhotoOrganise4__CreateNewCollection(soap, (const struct __PhotoOrganise4__CreateNewCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__Login:
		soap_serialize___PhotoOrganise4__Login(soap, (const struct __PhotoOrganise4__Login *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeletePhoto:
		soap_serialize___PhotoOrganise3__DeletePhoto(soap, (const struct __PhotoOrganise3__DeletePhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__RenameCollection:
		soap_serialize___PhotoOrganise3__RenameCollection(soap, (const struct __PhotoOrganise3__RenameCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__JavaUploadPhoto:
		soap_serialize___PhotoOrganise3__JavaUploadPhoto(soap, (const struct __PhotoOrganise3__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeviceUploadPhoto:
		soap_serialize___PhotoOrganise3__DeviceUploadPhoto(soap, (const struct __PhotoOrganise3__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__UploadPhoto:
		soap_serialize___PhotoOrganise3__UploadPhoto(soap, (const struct __PhotoOrganise3__UploadPhoto *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetPhotosByCollection:
		soap_serialize___PhotoOrganise3__GetPhotosByCollection(soap, (const struct __PhotoOrganise3__GetPhotosByCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetCollections:
		soap_serialize___PhotoOrganise3__GetCollections(soap, (const struct __PhotoOrganise3__GetCollections *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__CreateNewCollection:
		soap_serialize___PhotoOrganise3__CreateNewCollection(soap, (const struct __PhotoOrganise3__CreateNewCollection *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__Login:
		soap_serialize___PhotoOrganise3__Login(soap, (const struct __PhotoOrganise3__Login *)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhotoResponse:
		soap_serialize_PointerTo_PhotoOrganise__DeletePhotoResponse(soap, (_PhotoOrganise__DeletePhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhoto:
		soap_serialize_PointerTo_PhotoOrganise__DeletePhoto(soap, (_PhotoOrganise__DeletePhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollectionResponse:
		soap_serialize_PointerTo_PhotoOrganise__RenameCollectionResponse(soap, (_PhotoOrganise__RenameCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollection:
		soap_serialize_PointerTo_PhotoOrganise__RenameCollection(soap, (_PhotoOrganise__RenameCollection *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhotoResponse:
		soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(soap, (_PhotoOrganise__JavaUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhoto:
		soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, (_PhotoOrganise__JavaUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse:
		soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(soap, (_PhotoOrganise__DeviceUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhoto:
		soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, (_PhotoOrganise__DeviceUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhotoResponse:
		soap_serialize_PointerTo_PhotoOrganise__UploadPhotoResponse(soap, (_PhotoOrganise__UploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhoto:
		soap_serialize_PointerTo_PhotoOrganise__UploadPhoto(soap, (_PhotoOrganise__UploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse:
		soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(soap, (_PhotoOrganise__GetPhotosByCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollection:
		soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, (_PhotoOrganise__GetPhotosByCollection *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollectionsResponse:
		soap_serialize_PointerTo_PhotoOrganise__GetCollectionsResponse(soap, (_PhotoOrganise__GetCollectionsResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollections:
		soap_serialize_PointerTo_PhotoOrganise__GetCollections(soap, (_PhotoOrganise__GetCollections *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollectionResponse:
		soap_serialize_PointerTo_PhotoOrganise__CreateNewCollectionResponse(soap, (_PhotoOrganise__CreateNewCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollection:
		soap_serialize_PointerTo_PhotoOrganise__CreateNewCollection(soap, (_PhotoOrganise__CreateNewCollection *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__LoginResponse:
		soap_serialize_PointerTo_PhotoOrganise__LoginResponse(soap, (_PhotoOrganise__LoginResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__Login:
		soap_serialize_PointerTo_PhotoOrganise__Login(soap, (_PhotoOrganise__Login *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoItem:
		soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, (PhotoOrganise__ArrayOfPhotoItem *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem:
		soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, (PhotoOrganise__ArrayOfPhotoCollectionItem *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoItem:
		soap_serialize_PointerToPhotoOrganise__PhotoItem(soap, (PhotoOrganise__PhotoItem *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoCollectionItem:
		soap_serialize_PointerToPhotoOrganise__PhotoCollectionItem(soap, (PhotoOrganise__PhotoCollectionItem *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_WS_PhotoOrganise_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem:
		return (void*)soap_instantiate_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem:
		return (void*)soap_instantiate_PhotoOrganise__PhotoCollectionItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem:
		return (void*)soap_instantiate_PhotoOrganise__ArrayOfPhotoItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem:
		return (void*)soap_instantiate_PhotoOrganise__PhotoItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login:
		return (void*)soap_instantiate__PhotoOrganise__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse:
		return (void*)soap_instantiate__PhotoOrganise__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection:
		return (void*)soap_instantiate__PhotoOrganise__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse:
		return (void*)soap_instantiate__PhotoOrganise__CreateNewCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections:
		return (void*)soap_instantiate__PhotoOrganise__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse:
		return (void*)soap_instantiate__PhotoOrganise__GetCollectionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection:
		return (void*)soap_instantiate__PhotoOrganise__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse:
		return (void*)soap_instantiate__PhotoOrganise__GetPhotosByCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto:
		return (void*)soap_instantiate__PhotoOrganise__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse:
		return (void*)soap_instantiate__PhotoOrganise__UploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto:
		return (void*)soap_instantiate__PhotoOrganise__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse:
		return (void*)soap_instantiate__PhotoOrganise__DeviceUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto:
		return (void*)soap_instantiate__PhotoOrganise__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse:
		return (void*)soap_instantiate__PhotoOrganise__JavaUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection:
		return (void*)soap_instantiate__PhotoOrganise__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse:
		return (void*)soap_instantiate__PhotoOrganise__RenameCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto:
		return (void*)soap_instantiate__PhotoOrganise__DeletePhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse:
		return (void*)soap_instantiate__PhotoOrganise__DeletePhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray:
		return (void*)soap_instantiate_PhotoOrganise2StringArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__Login:
		return (void*)soap_instantiate___PhotoOrganise3__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__CreateNewCollection:
		return (void*)soap_instantiate___PhotoOrganise3__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetCollections:
		return (void*)soap_instantiate___PhotoOrganise3__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetPhotosByCollection:
		return (void*)soap_instantiate___PhotoOrganise3__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__UploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise3__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeviceUploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise3__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__JavaUploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise3__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__RenameCollection:
		return (void*)soap_instantiate___PhotoOrganise3__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeletePhoto:
		return (void*)soap_instantiate___PhotoOrganise3__DeletePhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__Login:
		return (void*)soap_instantiate___PhotoOrganise4__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__CreateNewCollection:
		return (void*)soap_instantiate___PhotoOrganise4__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetCollections:
		return (void*)soap_instantiate___PhotoOrganise4__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetPhotosByCollection:
		return (void*)soap_instantiate___PhotoOrganise4__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__UploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise4__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeviceUploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise4__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__JavaUploadPhoto:
		return (void*)soap_instantiate___PhotoOrganise4__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__RenameCollection:
		return (void*)soap_instantiate___PhotoOrganise4__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeletePhoto:
		return (void*)soap_instantiate___PhotoOrganise4__DeletePhoto(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem:
		return (void*)soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem:
		if (p->size < 0)
			delete (PhotoOrganise__ArrayOfPhotoCollectionItem*)p->ptr;
		else
			delete[] (PhotoOrganise__ArrayOfPhotoCollectionItem*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem:
		if (p->size < 0)
			delete (PhotoOrganise__PhotoCollectionItem*)p->ptr;
		else
			delete[] (PhotoOrganise__PhotoCollectionItem*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem:
		if (p->size < 0)
			delete (PhotoOrganise__ArrayOfPhotoItem*)p->ptr;
		else
			delete[] (PhotoOrganise__ArrayOfPhotoItem*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem:
		if (p->size < 0)
			delete (PhotoOrganise__PhotoItem*)p->ptr;
		else
			delete[] (PhotoOrganise__PhotoItem*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login:
		if (p->size < 0)
			delete (_PhotoOrganise__Login*)p->ptr;
		else
			delete[] (_PhotoOrganise__Login*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__LoginResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__LoginResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection:
		if (p->size < 0)
			delete (_PhotoOrganise__CreateNewCollection*)p->ptr;
		else
			delete[] (_PhotoOrganise__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__CreateNewCollectionResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__CreateNewCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections:
		if (p->size < 0)
			delete (_PhotoOrganise__GetCollections*)p->ptr;
		else
			delete[] (_PhotoOrganise__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__GetCollectionsResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__GetCollectionsResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection:
		if (p->size < 0)
			delete (_PhotoOrganise__GetPhotosByCollection*)p->ptr;
		else
			delete[] (_PhotoOrganise__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__GetPhotosByCollectionResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__GetPhotosByCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto:
		if (p->size < 0)
			delete (_PhotoOrganise__UploadPhoto*)p->ptr;
		else
			delete[] (_PhotoOrganise__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__UploadPhotoResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__UploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto:
		if (p->size < 0)
			delete (_PhotoOrganise__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (_PhotoOrganise__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__DeviceUploadPhotoResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__DeviceUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto:
		if (p->size < 0)
			delete (_PhotoOrganise__JavaUploadPhoto*)p->ptr;
		else
			delete[] (_PhotoOrganise__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__JavaUploadPhotoResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__JavaUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection:
		if (p->size < 0)
			delete (_PhotoOrganise__RenameCollection*)p->ptr;
		else
			delete[] (_PhotoOrganise__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__RenameCollectionResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__RenameCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto:
		if (p->size < 0)
			delete (_PhotoOrganise__DeletePhoto*)p->ptr;
		else
			delete[] (_PhotoOrganise__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse:
		if (p->size < 0)
			delete (_PhotoOrganise__DeletePhotoResponse*)p->ptr;
		else
			delete[] (_PhotoOrganise__DeletePhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray:
		if (p->size < 0)
			delete (PhotoOrganise2StringArray*)p->ptr;
		else
			delete[] (PhotoOrganise2StringArray*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__Login:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__Login*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__Login*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__CreateNewCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__CreateNewCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetCollections:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__GetCollections*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetPhotosByCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__GetPhotosByCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__UploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__UploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__RenameCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__RenameCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeletePhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise3__DeletePhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise3__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__Login:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__Login*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__Login*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__CreateNewCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__CreateNewCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetCollections:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__GetCollections*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetPhotosByCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__GetPhotosByCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__UploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__UploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__RenameCollection:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__RenameCollection*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeletePhoto:
		if (p->size < 0)
			delete (struct __PhotoOrganise4__DeletePhoto*)p->ptr;
		else
			delete[] (struct __PhotoOrganise4__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem:
		if (p->size < 0)
			delete (std::vector<PhotoOrganise__PhotoItem * >*)p->ptr;
		else
			delete[] (std::vector<PhotoOrganise__PhotoItem * >*)p->ptr;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem:
		if (p->size < 0)
			delete (std::vector<PhotoOrganise__PhotoCollectionItem * >*)p->ptr;
		else
			delete[] (std::vector<PhotoOrganise__PhotoCollectionItem * >*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<PhotoOrganise__PhotoItem * >*)p)[len] = *(PhotoOrganise__PhotoItem **)q;
		break;
	case SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<PhotoOrganise__PhotoCollectionItem * >*)p)[len] = *(PhotoOrganise__PhotoCollectionItem **)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_time);
	if (soap_out_time(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	//return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_time);

#pragma message("this error araises because of unix-like timinng rtl functions are not support on wince")
	// TODO: should be fixed somehow, if will be used

	return 0;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	//return soap_indateTime(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_time);

#pragma message("this error araises because of unix-like timinng rtl functions are not support on wince")
	// TODO: should be fixed somehow, if will be used

	return NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_WS_PhotoOrganise_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_PhotoOrganise_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_PhotoOrganise_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_WS_PhotoOrganise_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void PhotoOrganise2StringArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrString = NULL;
}

void PhotoOrganise2StringArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptrString && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrString, 1, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray))
		for (int i = 0; i < this->__size; i++)
		{	soap_embedded(soap, this->__ptrString + i, SOAP_TYPE_WS_PhotoOrganise_std__string);
			soap_serialize_std__string(soap, this->__ptrString + i);
		}
}

int PhotoOrganise2StringArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrString, 1, tag, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int PhotoOrganise2StringArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_PhotoOrganise2StringArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PhotoOrganise2StringArray(struct soap *soap, const char *tag, int id, const PhotoOrganise2StringArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:string", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrString, 1, type, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_std__string(soap, "String", -1, &a->__ptrString[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *PhotoOrganise2StringArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_PhotoOrganise2StringArray(soap, this, tag, type);
}

SOAP_FMAC3 PhotoOrganise2StringArray * SOAP_FMAC4 soap_get_PhotoOrganise2StringArray(struct soap *soap, PhotoOrganise2StringArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_PhotoOrganise2StringArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *PhotoOrganise2StringArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_PhotoOrganise2StringArray(soap, tag, this, type);
}

SOAP_FMAC3 PhotoOrganise2StringArray * SOAP_FMAC4 soap_in_PhotoOrganise2StringArray(struct soap *soap, const char *tag, PhotoOrganise2StringArray *a, const char *type)
{	int i, j;
	std::string *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (PhotoOrganise2StringArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray, sizeof(PhotoOrganise2StringArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrString = soap_new_std__string(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_std__string(soap, a->__ptrString+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_std__string(soap, NULL, a->__ptrString + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	std::string q;
			soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (std::string *)soap_push_block(soap, sizeof(std::string));
				if (!p)
					return NULL;
				memcpy(p, &q, sizeof(std::string));
				soap_default_std__string(soap, p);
				if (!soap_in_std__string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			if (soap->blist->size)
				a->__ptrString = soap_new_std__string(soap, soap->blist->size/sizeof(std::string));
			else
				a->__ptrString = NULL;
			soap_save_block(soap, (char*)a->__ptrString, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (PhotoOrganise2StringArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray, 0, sizeof(PhotoOrganise2StringArray), 0, soap_copy_PhotoOrganise2StringArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 PhotoOrganise2StringArray * SOAP_FMAC6 soap_new_PhotoOrganise2StringArray(struct soap *soap, int n)
{	return soap_instantiate_PhotoOrganise2StringArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_PhotoOrganise2StringArray(struct soap *soap, PhotoOrganise2StringArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 PhotoOrganise2StringArray * SOAP_FMAC4 soap_instantiate_PhotoOrganise2StringArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_PhotoOrganise2StringArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise2StringArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new PhotoOrganise2StringArray;
		if (size)
			*size = sizeof(PhotoOrganise2StringArray);
		((PhotoOrganise2StringArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new PhotoOrganise2StringArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(PhotoOrganise2StringArray);
		for (int i = 0; i < n; i++)
			((PhotoOrganise2StringArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (PhotoOrganise2StringArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_PhotoOrganise2StringArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying PhotoOrganise2StringArray %p -> %p\n", q, p));
	*(PhotoOrganise2StringArray*)p = *(PhotoOrganise2StringArray*)q;
}

void _PhotoOrganise__DeletePhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _PhotoOrganise__DeletePhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__DeletePhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__DeletePhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__DeletePhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__DeletePhotoResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__DeletePhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__DeletePhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__DeletePhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhotoResponse * SOAP_FMAC4 soap_get__PhotoOrganise__DeletePhotoResponse(struct soap *soap, _PhotoOrganise__DeletePhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__DeletePhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__DeletePhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__DeletePhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhotoResponse * SOAP_FMAC4 soap_in__PhotoOrganise__DeletePhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__DeletePhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__DeletePhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse, sizeof(_PhotoOrganise__DeletePhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__DeletePhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__DeletePhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse, 0, sizeof(_PhotoOrganise__DeletePhotoResponse), 0, soap_copy__PhotoOrganise__DeletePhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__DeletePhotoResponse * SOAP_FMAC6 soap_new__PhotoOrganise__DeletePhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__DeletePhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__DeletePhotoResponse(struct soap *soap, _PhotoOrganise__DeletePhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhotoResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__DeletePhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__DeletePhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__DeletePhotoResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__DeletePhotoResponse);
		((_PhotoOrganise__DeletePhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__DeletePhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__DeletePhotoResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__DeletePhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__DeletePhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__DeletePhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__DeletePhotoResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__DeletePhotoResponse*)p = *(_PhotoOrganise__DeletePhotoResponse*)q;
}

void _PhotoOrganise__DeletePhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__DeletePhoto::WebPhotoID = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__DeletePhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__DeletePhoto::WebPhotoID);
	/* transient soap skipped */
}

int _PhotoOrganise__DeletePhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__DeletePhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__DeletePhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__DeletePhoto(struct soap *soap, const char *tag, int id, const _PhotoOrganise__DeletePhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoID", -1, &(a->_PhotoOrganise__DeletePhoto::WebPhotoID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__DeletePhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__DeletePhoto(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhoto * SOAP_FMAC4 soap_get__PhotoOrganise__DeletePhoto(struct soap *soap, _PhotoOrganise__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__DeletePhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__DeletePhoto(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhoto * SOAP_FMAC4 soap_in__PhotoOrganise__DeletePhoto(struct soap *soap, const char *tag, _PhotoOrganise__DeletePhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__DeletePhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto, sizeof(_PhotoOrganise__DeletePhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__DeletePhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoID", &(a->_PhotoOrganise__DeletePhoto::WebPhotoID), "xsd:string"))
				{	soap_flag_WebPhotoID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__DeletePhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto, 0, sizeof(_PhotoOrganise__DeletePhoto), 0, soap_copy__PhotoOrganise__DeletePhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__DeletePhoto * SOAP_FMAC6 soap_new__PhotoOrganise__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__DeletePhoto(struct soap *soap, _PhotoOrganise__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhoto * SOAP_FMAC4 soap_instantiate__PhotoOrganise__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__DeletePhoto;
		if (size)
			*size = sizeof(_PhotoOrganise__DeletePhoto);
		((_PhotoOrganise__DeletePhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__DeletePhoto);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__DeletePhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__DeletePhoto %p -> %p\n", q, p));
	*(_PhotoOrganise__DeletePhoto*)p = *(_PhotoOrganise__DeletePhoto*)q;
}

void _PhotoOrganise__RenameCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _PhotoOrganise__RenameCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__RenameCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__RenameCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__RenameCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__RenameCollectionResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__RenameCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__RenameCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__RenameCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollectionResponse * SOAP_FMAC4 soap_get__PhotoOrganise__RenameCollectionResponse(struct soap *soap, _PhotoOrganise__RenameCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__RenameCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__RenameCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__RenameCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollectionResponse * SOAP_FMAC4 soap_in__PhotoOrganise__RenameCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__RenameCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__RenameCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse, sizeof(_PhotoOrganise__RenameCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__RenameCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__RenameCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse, 0, sizeof(_PhotoOrganise__RenameCollectionResponse), 0, soap_copy__PhotoOrganise__RenameCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__RenameCollectionResponse * SOAP_FMAC6 soap_new__PhotoOrganise__RenameCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__RenameCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__RenameCollectionResponse(struct soap *soap, _PhotoOrganise__RenameCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollectionResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__RenameCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__RenameCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__RenameCollectionResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__RenameCollectionResponse);
		((_PhotoOrganise__RenameCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__RenameCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__RenameCollectionResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__RenameCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__RenameCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__RenameCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__RenameCollectionResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__RenameCollectionResponse*)p = *(_PhotoOrganise__RenameCollectionResponse*)q;
}

void _PhotoOrganise__RenameCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__RenameCollection::WebPhotoCollectionID = NULL;
	this->_PhotoOrganise__RenameCollection::NewName = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__RenameCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__RenameCollection::WebPhotoCollectionID);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__RenameCollection::NewName);
	/* transient soap skipped */
}

int _PhotoOrganise__RenameCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__RenameCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__RenameCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__RenameCollection(struct soap *soap, const char *tag, int id, const _PhotoOrganise__RenameCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", -1, &(a->_PhotoOrganise__RenameCollection::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:NewName", -1, &(a->_PhotoOrganise__RenameCollection::NewName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__RenameCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__RenameCollection(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollection * SOAP_FMAC4 soap_get__PhotoOrganise__RenameCollection(struct soap *soap, _PhotoOrganise__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__RenameCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__RenameCollection(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollection * SOAP_FMAC4 soap_in__PhotoOrganise__RenameCollection(struct soap *soap, const char *tag, _PhotoOrganise__RenameCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__RenameCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection, sizeof(_PhotoOrganise__RenameCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__RenameCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_NewName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", &(a->_PhotoOrganise__RenameCollection::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_NewName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:NewName", &(a->_PhotoOrganise__RenameCollection::NewName), "xsd:string"))
				{	soap_flag_NewName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__RenameCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection, 0, sizeof(_PhotoOrganise__RenameCollection), 0, soap_copy__PhotoOrganise__RenameCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__RenameCollection * SOAP_FMAC6 soap_new__PhotoOrganise__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__RenameCollection(struct soap *soap, _PhotoOrganise__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollection * SOAP_FMAC4 soap_instantiate__PhotoOrganise__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__RenameCollection;
		if (size)
			*size = sizeof(_PhotoOrganise__RenameCollection);
		((_PhotoOrganise__RenameCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__RenameCollection);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__RenameCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__RenameCollection %p -> %p\n", q, p));
	*(_PhotoOrganise__RenameCollection*)p = *(_PhotoOrganise__RenameCollection*)q;
}

void _PhotoOrganise__JavaUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _PhotoOrganise__JavaUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__JavaUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__JavaUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__JavaUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__JavaUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__JavaUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhotoResponse * SOAP_FMAC4 soap_get__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, _PhotoOrganise__JavaUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__JavaUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__JavaUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhotoResponse * SOAP_FMAC4 soap_in__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__JavaUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse, sizeof(_PhotoOrganise__JavaUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__JavaUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__JavaUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse, 0, sizeof(_PhotoOrganise__JavaUploadPhotoResponse), 0, soap_copy__PhotoOrganise__JavaUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__JavaUploadPhotoResponse * SOAP_FMAC6 soap_new__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__JavaUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, _PhotoOrganise__JavaUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__JavaUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__JavaUploadPhotoResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__JavaUploadPhotoResponse);
		((_PhotoOrganise__JavaUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__JavaUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__JavaUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__JavaUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__JavaUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__JavaUploadPhotoResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__JavaUploadPhotoResponse*)p = *(_PhotoOrganise__JavaUploadPhotoResponse*)q;
}

void _PhotoOrganise__JavaUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__JavaUploadPhoto::EncryptedWebMemberID = NULL;
	this->_PhotoOrganise__JavaUploadPhoto::WebPhotoCollectionID = NULL;
	this->_PhotoOrganise__JavaUploadPhoto::Base64StringPhoto = NULL;
	this->_PhotoOrganise__JavaUploadPhoto::DateTime = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__JavaUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__JavaUploadPhoto::EncryptedWebMemberID);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__JavaUploadPhoto::WebPhotoCollectionID);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__JavaUploadPhoto::Base64StringPhoto);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__JavaUploadPhoto::DateTime);
	/* transient soap skipped */
}

int _PhotoOrganise__JavaUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__JavaUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__JavaUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const _PhotoOrganise__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:EncryptedWebMemberID", -1, &(a->_PhotoOrganise__JavaUploadPhoto::EncryptedWebMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", -1, &(a->_PhotoOrganise__JavaUploadPhoto::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:Base64StringPhoto", -1, &(a->_PhotoOrganise__JavaUploadPhoto::Base64StringPhoto), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:DateTime", -1, &(a->_PhotoOrganise__JavaUploadPhoto::DateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__JavaUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__JavaUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhoto * SOAP_FMAC4 soap_get__PhotoOrganise__JavaUploadPhoto(struct soap *soap, _PhotoOrganise__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__JavaUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__JavaUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhoto * SOAP_FMAC4 soap_in__PhotoOrganise__JavaUploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__JavaUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto, sizeof(_PhotoOrganise__JavaUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__JavaUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_EncryptedWebMemberID1 = 1, soap_flag_WebPhotoCollectionID1 = 1, soap_flag_Base64StringPhoto1 = 1, soap_flag_DateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EncryptedWebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:EncryptedWebMemberID", &(a->_PhotoOrganise__JavaUploadPhoto::EncryptedWebMemberID), "xsd:string"))
				{	soap_flag_EncryptedWebMemberID1--;
					continue;
				}
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", &(a->_PhotoOrganise__JavaUploadPhoto::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_Base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:Base64StringPhoto", &(a->_PhotoOrganise__JavaUploadPhoto::Base64StringPhoto), "xsd:string"))
				{	soap_flag_Base64StringPhoto1--;
					continue;
				}
			if (soap_flag_DateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:DateTime", &(a->_PhotoOrganise__JavaUploadPhoto::DateTime), "xsd:string"))
				{	soap_flag_DateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__JavaUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto, 0, sizeof(_PhotoOrganise__JavaUploadPhoto), 0, soap_copy__PhotoOrganise__JavaUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__JavaUploadPhoto * SOAP_FMAC6 soap_new__PhotoOrganise__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__JavaUploadPhoto(struct soap *soap, _PhotoOrganise__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate__PhotoOrganise__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__JavaUploadPhoto;
		if (size)
			*size = sizeof(_PhotoOrganise__JavaUploadPhoto);
		((_PhotoOrganise__JavaUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__JavaUploadPhoto);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__JavaUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__JavaUploadPhoto %p -> %p\n", q, p));
	*(_PhotoOrganise__JavaUploadPhoto*)p = *(_PhotoOrganise__JavaUploadPhoto*)q;
}

void _PhotoOrganise__DeviceUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _PhotoOrganise__DeviceUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__DeviceUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__DeviceUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__DeviceUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__DeviceUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_get__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, _PhotoOrganise__DeviceUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__DeviceUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_in__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__DeviceUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse, sizeof(_PhotoOrganise__DeviceUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__DeviceUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__DeviceUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse, 0, sizeof(_PhotoOrganise__DeviceUploadPhotoResponse), 0, soap_copy__PhotoOrganise__DeviceUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__DeviceUploadPhotoResponse * SOAP_FMAC6 soap_new__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__DeviceUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, _PhotoOrganise__DeviceUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__DeviceUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__DeviceUploadPhotoResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__DeviceUploadPhotoResponse);
		((_PhotoOrganise__DeviceUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__DeviceUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__DeviceUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__DeviceUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__DeviceUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__DeviceUploadPhotoResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__DeviceUploadPhotoResponse*)p = *(_PhotoOrganise__DeviceUploadPhotoResponse*)q;
}

void _PhotoOrganise__DeviceUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__DeviceUploadPhoto::WebMemberID = NULL;
	this->_PhotoOrganise__DeviceUploadPhoto::WebPassword = NULL;
	this->_PhotoOrganise__DeviceUploadPhoto::Base64StringPhoto = NULL;
	this->_PhotoOrganise__DeviceUploadPhoto::DateTime = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__DeviceUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__DeviceUploadPhoto::WebMemberID);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__DeviceUploadPhoto::WebPassword);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__DeviceUploadPhoto::Base64StringPhoto);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__DeviceUploadPhoto::DateTime);
	/* transient soap skipped */
}

int _PhotoOrganise__DeviceUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__DeviceUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__DeviceUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const _PhotoOrganise__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebMemberID", -1, &(a->_PhotoOrganise__DeviceUploadPhoto::WebMemberID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPassword", -1, &(a->_PhotoOrganise__DeviceUploadPhoto::WebPassword), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:Base64StringPhoto", -1, &(a->_PhotoOrganise__DeviceUploadPhoto::Base64StringPhoto), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:DateTime", -1, &(a->_PhotoOrganise__DeviceUploadPhoto::DateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__DeviceUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__DeviceUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhoto * SOAP_FMAC4 soap_get__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, _PhotoOrganise__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__DeviceUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__DeviceUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhoto * SOAP_FMAC4 soap_in__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__DeviceUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto, sizeof(_PhotoOrganise__DeviceUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__DeviceUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_Base64StringPhoto1 = 1, soap_flag_DateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebMemberID", &(a->_PhotoOrganise__DeviceUploadPhoto::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPassword", &(a->_PhotoOrganise__DeviceUploadPhoto::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_Base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:Base64StringPhoto", &(a->_PhotoOrganise__DeviceUploadPhoto::Base64StringPhoto), "xsd:string"))
				{	soap_flag_Base64StringPhoto1--;
					continue;
				}
			if (soap_flag_DateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:DateTime", &(a->_PhotoOrganise__DeviceUploadPhoto::DateTime), "xsd:string"))
				{	soap_flag_DateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__DeviceUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto, 0, sizeof(_PhotoOrganise__DeviceUploadPhoto), 0, soap_copy__PhotoOrganise__DeviceUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__DeviceUploadPhoto * SOAP_FMAC6 soap_new__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, _PhotoOrganise__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__DeviceUploadPhoto;
		if (size)
			*size = sizeof(_PhotoOrganise__DeviceUploadPhoto);
		((_PhotoOrganise__DeviceUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__DeviceUploadPhoto);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__DeviceUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__DeviceUploadPhoto %p -> %p\n", q, p));
	*(_PhotoOrganise__DeviceUploadPhoto*)p = *(_PhotoOrganise__DeviceUploadPhoto*)q;
}

void _PhotoOrganise__UploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_PhotoOrganise__UploadPhotoResponse::UploadPhotoResult);
	/* transient soap skipped */
}

void _PhotoOrganise__UploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__UploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__UploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__UploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__UploadPhotoResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__UploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse), type))
		return soap->error;
	soap_element_result(soap, "PhotoOrganise:UploadPhotoResult");
	if (soap_out_bool(soap, "PhotoOrganise:UploadPhotoResult", -1, &(a->_PhotoOrganise__UploadPhotoResponse::UploadPhotoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__UploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__UploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhotoResponse * SOAP_FMAC4 soap_get__PhotoOrganise__UploadPhotoResponse(struct soap *soap, _PhotoOrganise__UploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__UploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__UploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__UploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhotoResponse * SOAP_FMAC4 soap_in__PhotoOrganise__UploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__UploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__UploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse, sizeof(_PhotoOrganise__UploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__UploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_UploadPhotoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadPhotoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "PhotoOrganise:UploadPhotoResult", &(a->_PhotoOrganise__UploadPhotoResponse::UploadPhotoResult), "xsd:boolean"))
				{	soap_flag_UploadPhotoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "PhotoOrganise:UploadPhotoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__UploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse, 0, sizeof(_PhotoOrganise__UploadPhotoResponse), 0, soap_copy__PhotoOrganise__UploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UploadPhotoResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__UploadPhotoResponse * SOAP_FMAC6 soap_new__PhotoOrganise__UploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__UploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__UploadPhotoResponse(struct soap *soap, _PhotoOrganise__UploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhotoResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__UploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__UploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__UploadPhotoResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__UploadPhotoResponse);
		((_PhotoOrganise__UploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__UploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__UploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__UploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__UploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__UploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__UploadPhotoResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__UploadPhotoResponse*)p = *(_PhotoOrganise__UploadPhotoResponse*)q;
}

void _PhotoOrganise__UploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__UploadPhoto::WebPhotoCollectionID = NULL;
	this->_PhotoOrganise__UploadPhoto::MainPhotoFilebytes = NULL;
	soap_default_time(soap, &this->_PhotoOrganise__UploadPhoto::TakenDT);
	/* transient soap skipped */
}

void _PhotoOrganise__UploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__UploadPhoto::WebPhotoCollectionID);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_PhotoOrganise__UploadPhoto::MainPhotoFilebytes);
	/* transient soap skipped */
}

int _PhotoOrganise__UploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__UploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__UploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__UploadPhoto(struct soap *soap, const char *tag, int id, const _PhotoOrganise__UploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", -1, &(a->_PhotoOrganise__UploadPhoto::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "PhotoOrganise:MainPhotoFilebytes", -1, &(a->_PhotoOrganise__UploadPhoto::MainPhotoFilebytes), ""))
		return soap->error;
	if (soap_out_time(soap, "PhotoOrganise:TakenDT", -1, &(a->_PhotoOrganise__UploadPhoto::TakenDT), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__UploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__UploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhoto * SOAP_FMAC4 soap_get__PhotoOrganise__UploadPhoto(struct soap *soap, _PhotoOrganise__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__UploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__UploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhoto * SOAP_FMAC4 soap_in__PhotoOrganise__UploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__UploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__UploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto, sizeof(_PhotoOrganise__UploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__UploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_MainPhotoFilebytes1 = 1, soap_flag_TakenDT1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", &(a->_PhotoOrganise__UploadPhoto::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_MainPhotoFilebytes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "PhotoOrganise:MainPhotoFilebytes", &(a->_PhotoOrganise__UploadPhoto::MainPhotoFilebytes), "xsd:base64Binary"))
				{	soap_flag_MainPhotoFilebytes1--;
					continue;
				}
			if (soap_flag_TakenDT1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "PhotoOrganise:TakenDT", &(a->_PhotoOrganise__UploadPhoto::TakenDT), "xsd:dateTime"))
				{	soap_flag_TakenDT1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__UploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto, 0, sizeof(_PhotoOrganise__UploadPhoto), 0, soap_copy__PhotoOrganise__UploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TakenDT1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__UploadPhoto * SOAP_FMAC6 soap_new__PhotoOrganise__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__UploadPhoto(struct soap *soap, _PhotoOrganise__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhoto * SOAP_FMAC4 soap_instantiate__PhotoOrganise__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__UploadPhoto;
		if (size)
			*size = sizeof(_PhotoOrganise__UploadPhoto);
		((_PhotoOrganise__UploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__UploadPhoto);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__UploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__UploadPhoto %p -> %p\n", q, p));
	*(_PhotoOrganise__UploadPhoto*)p = *(_PhotoOrganise__UploadPhoto*)q;
}

void _PhotoOrganise__GetPhotosByCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__GetPhotosByCollectionResponse::GetPhotosByCollectionResult = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__GetPhotosByCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, &this->_PhotoOrganise__GetPhotosByCollectionResponse::GetPhotosByCollectionResult);
	/* transient soap skipped */
}

int _PhotoOrganise__GetPhotosByCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__GetPhotosByCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__GetPhotosByCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse), type))
		return soap->error;
	if (a->GetPhotosByCollectionResult)
		soap_element_result(soap, "PhotoOrganise:GetPhotosByCollectionResult");
	if (soap_out_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, "PhotoOrganise:GetPhotosByCollectionResult", -1, &(a->_PhotoOrganise__GetPhotosByCollectionResponse::GetPhotosByCollectionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__GetPhotosByCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__GetPhotosByCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_get__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, _PhotoOrganise__GetPhotosByCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__GetPhotosByCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_in__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__GetPhotosByCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__GetPhotosByCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse, sizeof(_PhotoOrganise__GetPhotosByCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__GetPhotosByCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetPhotosByCollectionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPhotosByCollectionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, "PhotoOrganise:GetPhotosByCollectionResult", &(a->_PhotoOrganise__GetPhotosByCollectionResponse::GetPhotosByCollectionResult), "PhotoOrganise:ArrayOfPhotoItem"))
				{	soap_flag_GetPhotosByCollectionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "PhotoOrganise:GetPhotosByCollectionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__GetPhotosByCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse, 0, sizeof(_PhotoOrganise__GetPhotosByCollectionResponse), 0, soap_copy__PhotoOrganise__GetPhotosByCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__GetPhotosByCollectionResponse * SOAP_FMAC6 soap_new__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__GetPhotosByCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, _PhotoOrganise__GetPhotosByCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__GetPhotosByCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__GetPhotosByCollectionResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__GetPhotosByCollectionResponse);
		((_PhotoOrganise__GetPhotosByCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__GetPhotosByCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__GetPhotosByCollectionResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__GetPhotosByCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__GetPhotosByCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__GetPhotosByCollectionResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__GetPhotosByCollectionResponse*)p = *(_PhotoOrganise__GetPhotosByCollectionResponse*)q;
}

void _PhotoOrganise__GetPhotosByCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__GetPhotosByCollection::WebPhotoCollectionID = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__GetPhotosByCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__GetPhotosByCollection::WebPhotoCollectionID);
	/* transient soap skipped */
}

int _PhotoOrganise__GetPhotosByCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__GetPhotosByCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__GetPhotosByCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const _PhotoOrganise__GetPhotosByCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", -1, &(a->_PhotoOrganise__GetPhotosByCollection::WebPhotoCollectionID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__GetPhotosByCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__GetPhotosByCollection(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollection * SOAP_FMAC4 soap_get__PhotoOrganise__GetPhotosByCollection(struct soap *soap, _PhotoOrganise__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__GetPhotosByCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__GetPhotosByCollection(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollection * SOAP_FMAC4 soap_in__PhotoOrganise__GetPhotosByCollection(struct soap *soap, const char *tag, _PhotoOrganise__GetPhotosByCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__GetPhotosByCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection, sizeof(_PhotoOrganise__GetPhotosByCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__GetPhotosByCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", &(a->_PhotoOrganise__GetPhotosByCollection::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__GetPhotosByCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection, 0, sizeof(_PhotoOrganise__GetPhotosByCollection), 0, soap_copy__PhotoOrganise__GetPhotosByCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__GetPhotosByCollection * SOAP_FMAC6 soap_new__PhotoOrganise__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__GetPhotosByCollection(struct soap *soap, _PhotoOrganise__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate__PhotoOrganise__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__GetPhotosByCollection;
		if (size)
			*size = sizeof(_PhotoOrganise__GetPhotosByCollection);
		((_PhotoOrganise__GetPhotosByCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__GetPhotosByCollection);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__GetPhotosByCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__GetPhotosByCollection %p -> %p\n", q, p));
	*(_PhotoOrganise__GetPhotosByCollection*)p = *(_PhotoOrganise__GetPhotosByCollection*)q;
}

void _PhotoOrganise__GetCollectionsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__GetCollectionsResponse::GetCollectionsResult = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__GetCollectionsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, &this->_PhotoOrganise__GetCollectionsResponse::GetCollectionsResult);
	/* transient soap skipped */
}

int _PhotoOrganise__GetCollectionsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__GetCollectionsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__GetCollectionsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__GetCollectionsResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__GetCollectionsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse), type))
		return soap->error;
	if (a->GetCollectionsResult)
		soap_element_result(soap, "PhotoOrganise:GetCollectionsResult");
	if (soap_out_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, "PhotoOrganise:GetCollectionsResult", -1, &(a->_PhotoOrganise__GetCollectionsResponse::GetCollectionsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__GetCollectionsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__GetCollectionsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollectionsResponse * SOAP_FMAC4 soap_get__PhotoOrganise__GetCollectionsResponse(struct soap *soap, _PhotoOrganise__GetCollectionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__GetCollectionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__GetCollectionsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__GetCollectionsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollectionsResponse * SOAP_FMAC4 soap_in__PhotoOrganise__GetCollectionsResponse(struct soap *soap, const char *tag, _PhotoOrganise__GetCollectionsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__GetCollectionsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse, sizeof(_PhotoOrganise__GetCollectionsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__GetCollectionsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetCollectionsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetCollectionsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, "PhotoOrganise:GetCollectionsResult", &(a->_PhotoOrganise__GetCollectionsResponse::GetCollectionsResult), "PhotoOrganise:ArrayOfPhotoCollectionItem"))
				{	soap_flag_GetCollectionsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "PhotoOrganise:GetCollectionsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__GetCollectionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse, 0, sizeof(_PhotoOrganise__GetCollectionsResponse), 0, soap_copy__PhotoOrganise__GetCollectionsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__GetCollectionsResponse * SOAP_FMAC6 soap_new__PhotoOrganise__GetCollectionsResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__GetCollectionsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__GetCollectionsResponse(struct soap *soap, _PhotoOrganise__GetCollectionsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__GetCollectionsResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__GetCollectionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__GetCollectionsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__GetCollectionsResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__GetCollectionsResponse);
		((_PhotoOrganise__GetCollectionsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__GetCollectionsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__GetCollectionsResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__GetCollectionsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__GetCollectionsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__GetCollectionsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__GetCollectionsResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__GetCollectionsResponse*)p = *(_PhotoOrganise__GetCollectionsResponse*)q;
}

void _PhotoOrganise__GetCollections::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _PhotoOrganise__GetCollections::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__GetCollections::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__GetCollections::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__GetCollections(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__GetCollections(struct soap *soap, const char *tag, int id, const _PhotoOrganise__GetCollections *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__GetCollections::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__GetCollections(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollections * SOAP_FMAC4 soap_get__PhotoOrganise__GetCollections(struct soap *soap, _PhotoOrganise__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__GetCollections::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__GetCollections(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollections * SOAP_FMAC4 soap_in__PhotoOrganise__GetCollections(struct soap *soap, const char *tag, _PhotoOrganise__GetCollections *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__GetCollections *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections, sizeof(_PhotoOrganise__GetCollections), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__GetCollections *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__GetCollections *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections, 0, sizeof(_PhotoOrganise__GetCollections), 0, soap_copy__PhotoOrganise__GetCollections);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__GetCollections * SOAP_FMAC6 soap_new__PhotoOrganise__GetCollections(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__GetCollections(struct soap *soap, _PhotoOrganise__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__GetCollections * SOAP_FMAC4 soap_instantiate__PhotoOrganise__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__GetCollections;
		if (size)
			*size = sizeof(_PhotoOrganise__GetCollections);
		((_PhotoOrganise__GetCollections*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__GetCollections);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__GetCollections*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__GetCollections %p -> %p\n", q, p));
	*(_PhotoOrganise__GetCollections*)p = *(_PhotoOrganise__GetCollections*)q;
}

void _PhotoOrganise__CreateNewCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_PhotoOrganise__CreateNewCollectionResponse::CreateNewCollectionResult);
	/* transient soap skipped */
}

void _PhotoOrganise__CreateNewCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _PhotoOrganise__CreateNewCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__CreateNewCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__CreateNewCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__CreateNewCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse), type))
		return soap->error;
	soap_element_result(soap, "PhotoOrganise:CreateNewCollectionResult");
	if (soap_out_bool(soap, "PhotoOrganise:CreateNewCollectionResult", -1, &(a->_PhotoOrganise__CreateNewCollectionResponse::CreateNewCollectionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__CreateNewCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__CreateNewCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollectionResponse * SOAP_FMAC4 soap_get__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, _PhotoOrganise__CreateNewCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__CreateNewCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__CreateNewCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__CreateNewCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollectionResponse * SOAP_FMAC4 soap_in__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__CreateNewCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__CreateNewCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse, sizeof(_PhotoOrganise__CreateNewCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__CreateNewCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CreateNewCollectionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CreateNewCollectionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "PhotoOrganise:CreateNewCollectionResult", &(a->_PhotoOrganise__CreateNewCollectionResponse::CreateNewCollectionResult), "xsd:boolean"))
				{	soap_flag_CreateNewCollectionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "PhotoOrganise:CreateNewCollectionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__CreateNewCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse, 0, sizeof(_PhotoOrganise__CreateNewCollectionResponse), 0, soap_copy__PhotoOrganise__CreateNewCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CreateNewCollectionResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__CreateNewCollectionResponse * SOAP_FMAC6 soap_new__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__CreateNewCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, _PhotoOrganise__CreateNewCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollectionResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__CreateNewCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__CreateNewCollectionResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__CreateNewCollectionResponse);
		((_PhotoOrganise__CreateNewCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__CreateNewCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__CreateNewCollectionResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__CreateNewCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__CreateNewCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__CreateNewCollectionResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__CreateNewCollectionResponse*)p = *(_PhotoOrganise__CreateNewCollectionResponse*)q;
}

void _PhotoOrganise__CreateNewCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__CreateNewCollection::NewFolderName = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__CreateNewCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__CreateNewCollection::NewFolderName);
	/* transient soap skipped */
}

int _PhotoOrganise__CreateNewCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__CreateNewCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__CreateNewCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__CreateNewCollection(struct soap *soap, const char *tag, int id, const _PhotoOrganise__CreateNewCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:NewFolderName", -1, &(a->_PhotoOrganise__CreateNewCollection::NewFolderName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__CreateNewCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__CreateNewCollection(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollection * SOAP_FMAC4 soap_get__PhotoOrganise__CreateNewCollection(struct soap *soap, _PhotoOrganise__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__CreateNewCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__CreateNewCollection(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollection * SOAP_FMAC4 soap_in__PhotoOrganise__CreateNewCollection(struct soap *soap, const char *tag, _PhotoOrganise__CreateNewCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__CreateNewCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection, sizeof(_PhotoOrganise__CreateNewCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__CreateNewCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_NewFolderName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NewFolderName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:NewFolderName", &(a->_PhotoOrganise__CreateNewCollection::NewFolderName), "xsd:string"))
				{	soap_flag_NewFolderName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__CreateNewCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection, 0, sizeof(_PhotoOrganise__CreateNewCollection), 0, soap_copy__PhotoOrganise__CreateNewCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__CreateNewCollection * SOAP_FMAC6 soap_new__PhotoOrganise__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__CreateNewCollection(struct soap *soap, _PhotoOrganise__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollection * SOAP_FMAC4 soap_instantiate__PhotoOrganise__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__CreateNewCollection;
		if (size)
			*size = sizeof(_PhotoOrganise__CreateNewCollection);
		((_PhotoOrganise__CreateNewCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__CreateNewCollection);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__CreateNewCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__CreateNewCollection %p -> %p\n", q, p));
	*(_PhotoOrganise__CreateNewCollection*)p = *(_PhotoOrganise__CreateNewCollection*)q;
}

void _PhotoOrganise__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__LoginResponse::LoginResult = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__LoginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__LoginResponse::LoginResult);
	/* transient soap skipped */
}

int _PhotoOrganise__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__LoginResponse(struct soap *soap, const char *tag, int id, const _PhotoOrganise__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse), type))
		return soap->error;
	if (a->LoginResult)
		soap_element_result(soap, "PhotoOrganise:LoginResult");
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:LoginResult", -1, &(a->_PhotoOrganise__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__LoginResponse * SOAP_FMAC4 soap_get__PhotoOrganise__LoginResponse(struct soap *soap, _PhotoOrganise__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__LoginResponse * SOAP_FMAC4 soap_in__PhotoOrganise__LoginResponse(struct soap *soap, const char *tag, _PhotoOrganise__LoginResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse, sizeof(_PhotoOrganise__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:LoginResult", &(a->_PhotoOrganise__LoginResponse::LoginResult), "xsd:string"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "PhotoOrganise:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse, 0, sizeof(_PhotoOrganise__LoginResponse), 0, soap_copy__PhotoOrganise__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__LoginResponse * SOAP_FMAC6 soap_new__PhotoOrganise__LoginResponse(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__LoginResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__LoginResponse(struct soap *soap, _PhotoOrganise__LoginResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__LoginResponse * SOAP_FMAC4 soap_instantiate__PhotoOrganise__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__LoginResponse;
		if (size)
			*size = sizeof(_PhotoOrganise__LoginResponse);
		((_PhotoOrganise__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__LoginResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__LoginResponse);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__LoginResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__LoginResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__LoginResponse %p -> %p\n", q, p));
	*(_PhotoOrganise__LoginResponse*)p = *(_PhotoOrganise__LoginResponse*)q;
}

void _PhotoOrganise__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_PhotoOrganise__Login::Email = NULL;
	this->_PhotoOrganise__Login::Password = NULL;
	/* transient soap skipped */
}

void _PhotoOrganise__Login::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__Login::Email);
	soap_serialize_PointerTostd__string(soap, &this->_PhotoOrganise__Login::Password);
	/* transient soap skipped */
}

int _PhotoOrganise__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _PhotoOrganise__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__PhotoOrganise__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__PhotoOrganise__Login(struct soap *soap, const char *tag, int id, const _PhotoOrganise__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:Email", -1, &(a->_PhotoOrganise__Login::Email), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:Password", -1, &(a->_PhotoOrganise__Login::Password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_PhotoOrganise__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__PhotoOrganise__Login(soap, this, tag, type);
}

SOAP_FMAC3 _PhotoOrganise__Login * SOAP_FMAC4 soap_get__PhotoOrganise__Login(struct soap *soap, _PhotoOrganise__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__PhotoOrganise__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_PhotoOrganise__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__PhotoOrganise__Login(soap, tag, this, type);
}

SOAP_FMAC3 _PhotoOrganise__Login * SOAP_FMAC4 soap_in__PhotoOrganise__Login(struct soap *soap, const char *tag, _PhotoOrganise__Login *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_PhotoOrganise__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login, sizeof(_PhotoOrganise__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_PhotoOrganise__Login *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Email1 = 1, soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:Email", &(a->_PhotoOrganise__Login::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:Password", &(a->_PhotoOrganise__Login::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_PhotoOrganise__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login, 0, sizeof(_PhotoOrganise__Login), 0, soap_copy__PhotoOrganise__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _PhotoOrganise__Login * SOAP_FMAC6 soap_new__PhotoOrganise__Login(struct soap *soap, int n)
{	return soap_instantiate__PhotoOrganise__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__PhotoOrganise__Login(struct soap *soap, _PhotoOrganise__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _PhotoOrganise__Login * SOAP_FMAC4 soap_instantiate__PhotoOrganise__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__PhotoOrganise__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _PhotoOrganise__Login;
		if (size)
			*size = sizeof(_PhotoOrganise__Login);
		((_PhotoOrganise__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _PhotoOrganise__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_PhotoOrganise__Login);
		for (int i = 0; i < n; i++)
			((_PhotoOrganise__Login*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_PhotoOrganise__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__PhotoOrganise__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _PhotoOrganise__Login %p -> %p\n", q, p));
	*(_PhotoOrganise__Login*)p = *(_PhotoOrganise__Login*)q;
}

void PhotoOrganise__PhotoItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->PhotoOrganise__PhotoItem::WebPhotoID = NULL;
	this->PhotoOrganise__PhotoItem::MainPhotoURL = NULL;
	this->PhotoOrganise__PhotoItem::ThumbnailURL = NULL;
	/* transient soap skipped */
}

void PhotoOrganise__PhotoItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->PhotoOrganise__PhotoItem::WebPhotoID);
	soap_serialize_PointerTostd__string(soap, &this->PhotoOrganise__PhotoItem::MainPhotoURL);
	soap_serialize_PointerTostd__string(soap, &this->PhotoOrganise__PhotoItem::ThumbnailURL);
	/* transient soap skipped */
}

int PhotoOrganise__PhotoItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int PhotoOrganise__PhotoItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_PhotoOrganise__PhotoItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PhotoOrganise__PhotoItem(struct soap *soap, const char *tag, int id, const PhotoOrganise__PhotoItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoID", -1, &(a->PhotoOrganise__PhotoItem::WebPhotoID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:MainPhotoURL", -1, &(a->PhotoOrganise__PhotoItem::MainPhotoURL), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:ThumbnailURL", -1, &(a->PhotoOrganise__PhotoItem::ThumbnailURL), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *PhotoOrganise__PhotoItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_PhotoOrganise__PhotoItem(soap, this, tag, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoItem * SOAP_FMAC4 soap_get_PhotoOrganise__PhotoItem(struct soap *soap, PhotoOrganise__PhotoItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_PhotoOrganise__PhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *PhotoOrganise__PhotoItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_PhotoOrganise__PhotoItem(soap, tag, this, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoItem * SOAP_FMAC4 soap_in_PhotoOrganise__PhotoItem(struct soap *soap, const char *tag, PhotoOrganise__PhotoItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (PhotoOrganise__PhotoItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem, sizeof(PhotoOrganise__PhotoItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (PhotoOrganise__PhotoItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoID1 = 1, soap_flag_MainPhotoURL1 = 1, soap_flag_ThumbnailURL1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoID", &(a->PhotoOrganise__PhotoItem::WebPhotoID), "xsd:string"))
				{	soap_flag_WebPhotoID1--;
					continue;
				}
			if (soap_flag_MainPhotoURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:MainPhotoURL", &(a->PhotoOrganise__PhotoItem::MainPhotoURL), "xsd:string"))
				{	soap_flag_MainPhotoURL1--;
					continue;
				}
			if (soap_flag_ThumbnailURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:ThumbnailURL", &(a->PhotoOrganise__PhotoItem::ThumbnailURL), "xsd:string"))
				{	soap_flag_ThumbnailURL1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (PhotoOrganise__PhotoItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem, 0, sizeof(PhotoOrganise__PhotoItem), 0, soap_copy_PhotoOrganise__PhotoItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 PhotoOrganise__PhotoItem * SOAP_FMAC6 soap_new_PhotoOrganise__PhotoItem(struct soap *soap, int n)
{	return soap_instantiate_PhotoOrganise__PhotoItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_PhotoOrganise__PhotoItem(struct soap *soap, PhotoOrganise__PhotoItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 PhotoOrganise__PhotoItem * SOAP_FMAC4 soap_instantiate_PhotoOrganise__PhotoItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_PhotoOrganise__PhotoItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new PhotoOrganise__PhotoItem;
		if (size)
			*size = sizeof(PhotoOrganise__PhotoItem);
		((PhotoOrganise__PhotoItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new PhotoOrganise__PhotoItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(PhotoOrganise__PhotoItem);
		for (int i = 0; i < n; i++)
			((PhotoOrganise__PhotoItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (PhotoOrganise__PhotoItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_PhotoOrganise__PhotoItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying PhotoOrganise__PhotoItem %p -> %p\n", q, p));
	*(PhotoOrganise__PhotoItem*)p = *(PhotoOrganise__PhotoItem*)q;
}

void PhotoOrganise__ArrayOfPhotoItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, &this->PhotoOrganise__ArrayOfPhotoItem::PhotoItem);
	/* transient soap skipped */
}

void PhotoOrganise__ArrayOfPhotoItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, &this->PhotoOrganise__ArrayOfPhotoItem::PhotoItem);
	/* transient soap skipped */
}

int PhotoOrganise__ArrayOfPhotoItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int PhotoOrganise__ArrayOfPhotoItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_PhotoOrganise__ArrayOfPhotoItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, const char *tag, int id, const PhotoOrganise__ArrayOfPhotoItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, "PhotoOrganise:PhotoItem", -1, &(a->PhotoOrganise__ArrayOfPhotoItem::PhotoItem), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *PhotoOrganise__ArrayOfPhotoItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_PhotoOrganise__ArrayOfPhotoItem(soap, this, tag, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoItem * SOAP_FMAC4 soap_get_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_PhotoOrganise__ArrayOfPhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *PhotoOrganise__ArrayOfPhotoItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_PhotoOrganise__ArrayOfPhotoItem(soap, tag, this, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoItem * SOAP_FMAC4 soap_in_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, const char *tag, PhotoOrganise__ArrayOfPhotoItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (PhotoOrganise__ArrayOfPhotoItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem, sizeof(PhotoOrganise__ArrayOfPhotoItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (PhotoOrganise__ArrayOfPhotoItem *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, "PhotoOrganise:PhotoItem", &(a->PhotoOrganise__ArrayOfPhotoItem::PhotoItem), "PhotoOrganise:PhotoItem"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (PhotoOrganise__ArrayOfPhotoItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem, 0, sizeof(PhotoOrganise__ArrayOfPhotoItem), 0, soap_copy_PhotoOrganise__ArrayOfPhotoItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 PhotoOrganise__ArrayOfPhotoItem * SOAP_FMAC6 soap_new_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, int n)
{	return soap_instantiate_PhotoOrganise__ArrayOfPhotoItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoItem * SOAP_FMAC4 soap_instantiate_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_PhotoOrganise__ArrayOfPhotoItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new PhotoOrganise__ArrayOfPhotoItem;
		if (size)
			*size = sizeof(PhotoOrganise__ArrayOfPhotoItem);
		((PhotoOrganise__ArrayOfPhotoItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new PhotoOrganise__ArrayOfPhotoItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(PhotoOrganise__ArrayOfPhotoItem);
		for (int i = 0; i < n; i++)
			((PhotoOrganise__ArrayOfPhotoItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (PhotoOrganise__ArrayOfPhotoItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_PhotoOrganise__ArrayOfPhotoItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying PhotoOrganise__ArrayOfPhotoItem %p -> %p\n", q, p));
	*(PhotoOrganise__ArrayOfPhotoItem*)p = *(PhotoOrganise__ArrayOfPhotoItem*)q;
}

void PhotoOrganise__PhotoCollectionItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->PhotoOrganise__PhotoCollectionItem::WebPhotoCollectionID = NULL;
	this->PhotoOrganise__PhotoCollectionItem::Name = NULL;
	/* transient soap skipped */
}

void PhotoOrganise__PhotoCollectionItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->PhotoOrganise__PhotoCollectionItem::WebPhotoCollectionID);
	soap_serialize_PointerTostd__string(soap, &this->PhotoOrganise__PhotoCollectionItem::Name);
	/* transient soap skipped */
}

int PhotoOrganise__PhotoCollectionItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int PhotoOrganise__PhotoCollectionItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_PhotoOrganise__PhotoCollectionItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, int id, const PhotoOrganise__PhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", -1, &(a->PhotoOrganise__PhotoCollectionItem::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "PhotoOrganise:Name", -1, &(a->PhotoOrganise__PhotoCollectionItem::Name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *PhotoOrganise__PhotoCollectionItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_PhotoOrganise__PhotoCollectionItem(soap, this, tag, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoCollectionItem * SOAP_FMAC4 soap_get_PhotoOrganise__PhotoCollectionItem(struct soap *soap, PhotoOrganise__PhotoCollectionItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_PhotoOrganise__PhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *PhotoOrganise__PhotoCollectionItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_PhotoOrganise__PhotoCollectionItem(soap, tag, this, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoCollectionItem * SOAP_FMAC4 soap_in_PhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, PhotoOrganise__PhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (PhotoOrganise__PhotoCollectionItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem, sizeof(PhotoOrganise__PhotoCollectionItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (PhotoOrganise__PhotoCollectionItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_Name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:WebPhotoCollectionID", &(a->PhotoOrganise__PhotoCollectionItem::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "PhotoOrganise:Name", &(a->PhotoOrganise__PhotoCollectionItem::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (PhotoOrganise__PhotoCollectionItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem, 0, sizeof(PhotoOrganise__PhotoCollectionItem), 0, soap_copy_PhotoOrganise__PhotoCollectionItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 PhotoOrganise__PhotoCollectionItem * SOAP_FMAC6 soap_new_PhotoOrganise__PhotoCollectionItem(struct soap *soap, int n)
{	return soap_instantiate_PhotoOrganise__PhotoCollectionItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_PhotoOrganise__PhotoCollectionItem(struct soap *soap, PhotoOrganise__PhotoCollectionItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 PhotoOrganise__PhotoCollectionItem * SOAP_FMAC4 soap_instantiate_PhotoOrganise__PhotoCollectionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_PhotoOrganise__PhotoCollectionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new PhotoOrganise__PhotoCollectionItem;
		if (size)
			*size = sizeof(PhotoOrganise__PhotoCollectionItem);
		((PhotoOrganise__PhotoCollectionItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new PhotoOrganise__PhotoCollectionItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(PhotoOrganise__PhotoCollectionItem);
		for (int i = 0; i < n; i++)
			((PhotoOrganise__PhotoCollectionItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (PhotoOrganise__PhotoCollectionItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_PhotoOrganise__PhotoCollectionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying PhotoOrganise__PhotoCollectionItem %p -> %p\n", q, p));
	*(PhotoOrganise__PhotoCollectionItem*)p = *(PhotoOrganise__PhotoCollectionItem*)q;
}

void PhotoOrganise__ArrayOfPhotoCollectionItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, &this->PhotoOrganise__ArrayOfPhotoCollectionItem::PhotoCollectionItem);
	/* transient soap skipped */
}

void PhotoOrganise__ArrayOfPhotoCollectionItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, &this->PhotoOrganise__ArrayOfPhotoCollectionItem::PhotoCollectionItem);
	/* transient soap skipped */
}

int PhotoOrganise__ArrayOfPhotoCollectionItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int PhotoOrganise__ArrayOfPhotoCollectionItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, int id, const PhotoOrganise__ArrayOfPhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, "PhotoOrganise:PhotoCollectionItem", -1, &(a->PhotoOrganise__ArrayOfPhotoCollectionItem::PhotoCollectionItem), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *PhotoOrganise__ArrayOfPhotoCollectionItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, this, tag, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_get_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoCollectionItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *PhotoOrganise__ArrayOfPhotoCollectionItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, this, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_in_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, PhotoOrganise__ArrayOfPhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (PhotoOrganise__ArrayOfPhotoCollectionItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem, sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (PhotoOrganise__ArrayOfPhotoCollectionItem *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, "PhotoOrganise:PhotoCollectionItem", &(a->PhotoOrganise__ArrayOfPhotoCollectionItem::PhotoCollectionItem), "PhotoOrganise:PhotoCollectionItem"))
					continue;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (PhotoOrganise__ArrayOfPhotoCollectionItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem, 0, sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem), 0, soap_copy_PhotoOrganise__ArrayOfPhotoCollectionItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 PhotoOrganise__ArrayOfPhotoCollectionItem * SOAP_FMAC6 soap_new_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, int n)
{	return soap_instantiate_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoCollectionItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_instantiate_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_PhotoOrganise__ArrayOfPhotoCollectionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new PhotoOrganise__ArrayOfPhotoCollectionItem;
		if (size)
			*size = sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem);
		((PhotoOrganise__ArrayOfPhotoCollectionItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new PhotoOrganise__ArrayOfPhotoCollectionItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem);
		for (int i = 0; i < n; i++)
			((PhotoOrganise__ArrayOfPhotoCollectionItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (PhotoOrganise__ArrayOfPhotoCollectionItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_PhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying PhotoOrganise__ArrayOfPhotoCollectionItem %p -> %p\n", q, p));
	*(PhotoOrganise__ArrayOfPhotoCollectionItem*)p = *(PhotoOrganise__ArrayOfPhotoCollectionItem*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__DeletePhoto(struct soap *soap, struct __PhotoOrganise4__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__DeletePhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__DeletePhoto(struct soap *soap, const struct __PhotoOrganise4__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__DeletePhoto(soap, &a->PhotoOrganise__DeletePhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__DeletePhoto(struct soap *soap, const struct __PhotoOrganise4__DeletePhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__DeletePhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__DeletePhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__DeletePhoto(soap, "PhotoOrganise:DeletePhoto", -1, &a->PhotoOrganise__DeletePhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__DeletePhoto * SOAP_FMAC4 soap_get___PhotoOrganise4__DeletePhoto(struct soap *soap, struct __PhotoOrganise4__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__DeletePhoto * SOAP_FMAC4 soap_in___PhotoOrganise4__DeletePhoto(struct soap *soap, const char *tag, struct __PhotoOrganise4__DeletePhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__DeletePhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__DeletePhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeletePhoto, sizeof(struct __PhotoOrganise4__DeletePhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__DeletePhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__DeletePhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__DeletePhoto(soap, "PhotoOrganise:DeletePhoto", &a->PhotoOrganise__DeletePhoto, ""))
				{	soap_flag_PhotoOrganise__DeletePhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__DeletePhoto * SOAP_FMAC6 soap_new___PhotoOrganise4__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__DeletePhoto(struct soap *soap, struct __PhotoOrganise4__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__DeletePhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__DeletePhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__DeletePhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__DeletePhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__DeletePhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__DeletePhoto*)p = *(struct __PhotoOrganise4__DeletePhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__RenameCollection(struct soap *soap, struct __PhotoOrganise4__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__RenameCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__RenameCollection(struct soap *soap, const struct __PhotoOrganise4__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__RenameCollection(soap, &a->PhotoOrganise__RenameCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__RenameCollection(struct soap *soap, const struct __PhotoOrganise4__RenameCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__RenameCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__RenameCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__RenameCollection(soap, "PhotoOrganise:RenameCollection", -1, &a->PhotoOrganise__RenameCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__RenameCollection * SOAP_FMAC4 soap_get___PhotoOrganise4__RenameCollection(struct soap *soap, struct __PhotoOrganise4__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__RenameCollection * SOAP_FMAC4 soap_in___PhotoOrganise4__RenameCollection(struct soap *soap, const char *tag, struct __PhotoOrganise4__RenameCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__RenameCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__RenameCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__RenameCollection, sizeof(struct __PhotoOrganise4__RenameCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__RenameCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__RenameCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__RenameCollection(soap, "PhotoOrganise:RenameCollection", &a->PhotoOrganise__RenameCollection, ""))
				{	soap_flag_PhotoOrganise__RenameCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__RenameCollection * SOAP_FMAC6 soap_new___PhotoOrganise4__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__RenameCollection(struct soap *soap, struct __PhotoOrganise4__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__RenameCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__RenameCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__RenameCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__RenameCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__RenameCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__RenameCollection*)p = *(struct __PhotoOrganise4__RenameCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise4__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, const struct __PhotoOrganise4__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, &a->PhotoOrganise__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, const struct __PhotoOrganise4__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, "PhotoOrganise:JavaUploadPhoto", -1, &a->PhotoOrganise__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__JavaUploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise4__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__JavaUploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise4__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__JavaUploadPhoto, sizeof(struct __PhotoOrganise4__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, "PhotoOrganise:JavaUploadPhoto", &a->PhotoOrganise__JavaUploadPhoto, ""))
				{	soap_flag_PhotoOrganise__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__JavaUploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise4__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__JavaUploadPhoto*)p = *(struct __PhotoOrganise4__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise4__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, const struct __PhotoOrganise4__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, &a->PhotoOrganise__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, const struct __PhotoOrganise4__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, "PhotoOrganise:DeviceUploadPhoto", -1, &a->PhotoOrganise__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__DeviceUploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise4__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__DeviceUploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise4__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeviceUploadPhoto, sizeof(struct __PhotoOrganise4__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, "PhotoOrganise:DeviceUploadPhoto", &a->PhotoOrganise__DeviceUploadPhoto, ""))
				{	soap_flag_PhotoOrganise__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__DeviceUploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise4__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__DeviceUploadPhoto*)p = *(struct __PhotoOrganise4__DeviceUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__UploadPhoto(struct soap *soap, struct __PhotoOrganise4__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__UploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__UploadPhoto(struct soap *soap, const struct __PhotoOrganise4__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__UploadPhoto(soap, &a->PhotoOrganise__UploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__UploadPhoto(struct soap *soap, const struct __PhotoOrganise4__UploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__UploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__UploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__UploadPhoto(soap, "PhotoOrganise:UploadPhoto", -1, &a->PhotoOrganise__UploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__UploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise4__UploadPhoto(struct soap *soap, struct __PhotoOrganise4__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__UploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise4__UploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise4__UploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__UploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__UploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__UploadPhoto, sizeof(struct __PhotoOrganise4__UploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__UploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__UploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__UploadPhoto(soap, "PhotoOrganise:UploadPhoto", &a->PhotoOrganise__UploadPhoto, ""))
				{	soap_flag_PhotoOrganise__UploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__UploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise4__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__UploadPhoto(struct soap *soap, struct __PhotoOrganise4__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__UploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__UploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__UploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__UploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__UploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__UploadPhoto*)p = *(struct __PhotoOrganise4__UploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise4__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__GetPhotosByCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, const struct __PhotoOrganise4__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, &a->PhotoOrganise__GetPhotosByCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, const struct __PhotoOrganise4__GetPhotosByCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__GetPhotosByCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, "PhotoOrganise:GetPhotosByCollection", -1, &a->PhotoOrganise__GetPhotosByCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__GetPhotosByCollection * SOAP_FMAC4 soap_get___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise4__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__GetPhotosByCollection * SOAP_FMAC4 soap_in___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, const char *tag, struct __PhotoOrganise4__GetPhotosByCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__GetPhotosByCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__GetPhotosByCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetPhotosByCollection, sizeof(struct __PhotoOrganise4__GetPhotosByCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__GetPhotosByCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__GetPhotosByCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, "PhotoOrganise:GetPhotosByCollection", &a->PhotoOrganise__GetPhotosByCollection, ""))
				{	soap_flag_PhotoOrganise__GetPhotosByCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__GetPhotosByCollection * SOAP_FMAC6 soap_new___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise4__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__GetPhotosByCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__GetPhotosByCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__GetPhotosByCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__GetPhotosByCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__GetPhotosByCollection*)p = *(struct __PhotoOrganise4__GetPhotosByCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__GetCollections(struct soap *soap, struct __PhotoOrganise4__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__GetCollections = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__GetCollections(struct soap *soap, const struct __PhotoOrganise4__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__GetCollections(soap, &a->PhotoOrganise__GetCollections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__GetCollections(struct soap *soap, const struct __PhotoOrganise4__GetCollections *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__GetCollections(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__GetCollections *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__GetCollections(soap, "PhotoOrganise:GetCollections", -1, &a->PhotoOrganise__GetCollections, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__GetCollections * SOAP_FMAC4 soap_get___PhotoOrganise4__GetCollections(struct soap *soap, struct __PhotoOrganise4__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__GetCollections * SOAP_FMAC4 soap_in___PhotoOrganise4__GetCollections(struct soap *soap, const char *tag, struct __PhotoOrganise4__GetCollections *a, const char *type)
{
	short soap_flag_PhotoOrganise__GetCollections = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__GetCollections *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetCollections, sizeof(struct __PhotoOrganise4__GetCollections), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__GetCollections(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__GetCollections && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__GetCollections(soap, "PhotoOrganise:GetCollections", &a->PhotoOrganise__GetCollections, ""))
				{	soap_flag_PhotoOrganise__GetCollections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__GetCollections * SOAP_FMAC6 soap_new___PhotoOrganise4__GetCollections(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__GetCollections(struct soap *soap, struct __PhotoOrganise4__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__GetCollections * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__GetCollections;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__GetCollections);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__GetCollections);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__GetCollections %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__GetCollections*)p = *(struct __PhotoOrganise4__GetCollections*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__CreateNewCollection(struct soap *soap, struct __PhotoOrganise4__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__CreateNewCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__CreateNewCollection(struct soap *soap, const struct __PhotoOrganise4__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__CreateNewCollection(soap, &a->PhotoOrganise__CreateNewCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__CreateNewCollection(struct soap *soap, const struct __PhotoOrganise4__CreateNewCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__CreateNewCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__CreateNewCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__CreateNewCollection(soap, "PhotoOrganise:CreateNewCollection", -1, &a->PhotoOrganise__CreateNewCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__CreateNewCollection * SOAP_FMAC4 soap_get___PhotoOrganise4__CreateNewCollection(struct soap *soap, struct __PhotoOrganise4__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__CreateNewCollection * SOAP_FMAC4 soap_in___PhotoOrganise4__CreateNewCollection(struct soap *soap, const char *tag, struct __PhotoOrganise4__CreateNewCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__CreateNewCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__CreateNewCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__CreateNewCollection, sizeof(struct __PhotoOrganise4__CreateNewCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__CreateNewCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__CreateNewCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__CreateNewCollection(soap, "PhotoOrganise:CreateNewCollection", &a->PhotoOrganise__CreateNewCollection, ""))
				{	soap_flag_PhotoOrganise__CreateNewCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__CreateNewCollection * SOAP_FMAC6 soap_new___PhotoOrganise4__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__CreateNewCollection(struct soap *soap, struct __PhotoOrganise4__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__CreateNewCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__CreateNewCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__CreateNewCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__CreateNewCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__CreateNewCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__CreateNewCollection*)p = *(struct __PhotoOrganise4__CreateNewCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise4__Login(struct soap *soap, struct __PhotoOrganise4__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise4__Login(struct soap *soap, const struct __PhotoOrganise4__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__Login(soap, &a->PhotoOrganise__Login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise4__Login(struct soap *soap, const struct __PhotoOrganise4__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise4__Login(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise4__Login(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise4__Login *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__Login(soap, "PhotoOrganise:Login", -1, &a->PhotoOrganise__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise4__Login * SOAP_FMAC4 soap_get___PhotoOrganise4__Login(struct soap *soap, struct __PhotoOrganise4__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise4__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise4__Login * SOAP_FMAC4 soap_in___PhotoOrganise4__Login(struct soap *soap, const char *tag, struct __PhotoOrganise4__Login *a, const char *type)
{
	short soap_flag_PhotoOrganise__Login = 1;
	short soap_flag;
	a = (struct __PhotoOrganise4__Login *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__Login, sizeof(struct __PhotoOrganise4__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise4__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__Login(soap, "PhotoOrganise:Login", &a->PhotoOrganise__Login, ""))
				{	soap_flag_PhotoOrganise__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise4__Login * SOAP_FMAC6 soap_new___PhotoOrganise4__Login(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise4__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise4__Login(struct soap *soap, struct __PhotoOrganise4__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise4__Login * SOAP_FMAC4 soap_instantiate___PhotoOrganise4__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise4__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise4__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise4__Login;
		if (size)
			*size = sizeof(struct __PhotoOrganise4__Login);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise4__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise4__Login);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise4__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise4__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise4__Login %p -> %p\n", q, p));
	*(struct __PhotoOrganise4__Login*)p = *(struct __PhotoOrganise4__Login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__DeletePhoto(struct soap *soap, struct __PhotoOrganise3__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__DeletePhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__DeletePhoto(struct soap *soap, const struct __PhotoOrganise3__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__DeletePhoto(soap, &a->PhotoOrganise__DeletePhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__DeletePhoto(struct soap *soap, const struct __PhotoOrganise3__DeletePhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__DeletePhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__DeletePhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__DeletePhoto(soap, "PhotoOrganise:DeletePhoto", -1, &a->PhotoOrganise__DeletePhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__DeletePhoto * SOAP_FMAC4 soap_get___PhotoOrganise3__DeletePhoto(struct soap *soap, struct __PhotoOrganise3__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__DeletePhoto * SOAP_FMAC4 soap_in___PhotoOrganise3__DeletePhoto(struct soap *soap, const char *tag, struct __PhotoOrganise3__DeletePhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__DeletePhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__DeletePhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeletePhoto, sizeof(struct __PhotoOrganise3__DeletePhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__DeletePhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__DeletePhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__DeletePhoto(soap, "PhotoOrganise:DeletePhoto", &a->PhotoOrganise__DeletePhoto, ""))
				{	soap_flag_PhotoOrganise__DeletePhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__DeletePhoto * SOAP_FMAC6 soap_new___PhotoOrganise3__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__DeletePhoto(struct soap *soap, struct __PhotoOrganise3__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__DeletePhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__DeletePhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__DeletePhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__DeletePhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__DeletePhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__DeletePhoto*)p = *(struct __PhotoOrganise3__DeletePhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__RenameCollection(struct soap *soap, struct __PhotoOrganise3__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__RenameCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__RenameCollection(struct soap *soap, const struct __PhotoOrganise3__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__RenameCollection(soap, &a->PhotoOrganise__RenameCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__RenameCollection(struct soap *soap, const struct __PhotoOrganise3__RenameCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__RenameCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__RenameCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__RenameCollection(soap, "PhotoOrganise:RenameCollection", -1, &a->PhotoOrganise__RenameCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__RenameCollection * SOAP_FMAC4 soap_get___PhotoOrganise3__RenameCollection(struct soap *soap, struct __PhotoOrganise3__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__RenameCollection * SOAP_FMAC4 soap_in___PhotoOrganise3__RenameCollection(struct soap *soap, const char *tag, struct __PhotoOrganise3__RenameCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__RenameCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__RenameCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__RenameCollection, sizeof(struct __PhotoOrganise3__RenameCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__RenameCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__RenameCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__RenameCollection(soap, "PhotoOrganise:RenameCollection", &a->PhotoOrganise__RenameCollection, ""))
				{	soap_flag_PhotoOrganise__RenameCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__RenameCollection * SOAP_FMAC6 soap_new___PhotoOrganise3__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__RenameCollection(struct soap *soap, struct __PhotoOrganise3__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__RenameCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__RenameCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__RenameCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__RenameCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__RenameCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__RenameCollection*)p = *(struct __PhotoOrganise3__RenameCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, const struct __PhotoOrganise3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, &a->PhotoOrganise__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, const struct __PhotoOrganise3__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, "PhotoOrganise:JavaUploadPhoto", -1, &a->PhotoOrganise__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__JavaUploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise3__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__JavaUploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise3__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__JavaUploadPhoto, sizeof(struct __PhotoOrganise3__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, "PhotoOrganise:JavaUploadPhoto", &a->PhotoOrganise__JavaUploadPhoto, ""))
				{	soap_flag_PhotoOrganise__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__JavaUploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, struct __PhotoOrganise3__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__JavaUploadPhoto*)p = *(struct __PhotoOrganise3__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, const struct __PhotoOrganise3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, &a->PhotoOrganise__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, const struct __PhotoOrganise3__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, "PhotoOrganise:DeviceUploadPhoto", -1, &a->PhotoOrganise__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__DeviceUploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise3__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__DeviceUploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise3__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeviceUploadPhoto, sizeof(struct __PhotoOrganise3__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, "PhotoOrganise:DeviceUploadPhoto", &a->PhotoOrganise__DeviceUploadPhoto, ""))
				{	soap_flag_PhotoOrganise__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__DeviceUploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, struct __PhotoOrganise3__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__DeviceUploadPhoto*)p = *(struct __PhotoOrganise3__DeviceUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__UploadPhoto(struct soap *soap, struct __PhotoOrganise3__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__UploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__UploadPhoto(struct soap *soap, const struct __PhotoOrganise3__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__UploadPhoto(soap, &a->PhotoOrganise__UploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__UploadPhoto(struct soap *soap, const struct __PhotoOrganise3__UploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__UploadPhoto(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__UploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__UploadPhoto(soap, "PhotoOrganise:UploadPhoto", -1, &a->PhotoOrganise__UploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__UploadPhoto * SOAP_FMAC4 soap_get___PhotoOrganise3__UploadPhoto(struct soap *soap, struct __PhotoOrganise3__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__UploadPhoto * SOAP_FMAC4 soap_in___PhotoOrganise3__UploadPhoto(struct soap *soap, const char *tag, struct __PhotoOrganise3__UploadPhoto *a, const char *type)
{
	short soap_flag_PhotoOrganise__UploadPhoto = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__UploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__UploadPhoto, sizeof(struct __PhotoOrganise3__UploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__UploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__UploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__UploadPhoto(soap, "PhotoOrganise:UploadPhoto", &a->PhotoOrganise__UploadPhoto, ""))
				{	soap_flag_PhotoOrganise__UploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__UploadPhoto * SOAP_FMAC6 soap_new___PhotoOrganise3__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__UploadPhoto(struct soap *soap, struct __PhotoOrganise3__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__UploadPhoto * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__UploadPhoto;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__UploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__UploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__UploadPhoto %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__UploadPhoto*)p = *(struct __PhotoOrganise3__UploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise3__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__GetPhotosByCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, const struct __PhotoOrganise3__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, &a->PhotoOrganise__GetPhotosByCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, const struct __PhotoOrganise3__GetPhotosByCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__GetPhotosByCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, "PhotoOrganise:GetPhotosByCollection", -1, &a->PhotoOrganise__GetPhotosByCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__GetPhotosByCollection * SOAP_FMAC4 soap_get___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise3__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__GetPhotosByCollection * SOAP_FMAC4 soap_in___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, const char *tag, struct __PhotoOrganise3__GetPhotosByCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__GetPhotosByCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__GetPhotosByCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetPhotosByCollection, sizeof(struct __PhotoOrganise3__GetPhotosByCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__GetPhotosByCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__GetPhotosByCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, "PhotoOrganise:GetPhotosByCollection", &a->PhotoOrganise__GetPhotosByCollection, ""))
				{	soap_flag_PhotoOrganise__GetPhotosByCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__GetPhotosByCollection * SOAP_FMAC6 soap_new___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, struct __PhotoOrganise3__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__GetPhotosByCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__GetPhotosByCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__GetPhotosByCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__GetPhotosByCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__GetPhotosByCollection*)p = *(struct __PhotoOrganise3__GetPhotosByCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__GetCollections(struct soap *soap, struct __PhotoOrganise3__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__GetCollections = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__GetCollections(struct soap *soap, const struct __PhotoOrganise3__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__GetCollections(soap, &a->PhotoOrganise__GetCollections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__GetCollections(struct soap *soap, const struct __PhotoOrganise3__GetCollections *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__GetCollections(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__GetCollections *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__GetCollections(soap, "PhotoOrganise:GetCollections", -1, &a->PhotoOrganise__GetCollections, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__GetCollections * SOAP_FMAC4 soap_get___PhotoOrganise3__GetCollections(struct soap *soap, struct __PhotoOrganise3__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__GetCollections * SOAP_FMAC4 soap_in___PhotoOrganise3__GetCollections(struct soap *soap, const char *tag, struct __PhotoOrganise3__GetCollections *a, const char *type)
{
	short soap_flag_PhotoOrganise__GetCollections = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__GetCollections *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetCollections, sizeof(struct __PhotoOrganise3__GetCollections), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__GetCollections(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__GetCollections && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__GetCollections(soap, "PhotoOrganise:GetCollections", &a->PhotoOrganise__GetCollections, ""))
				{	soap_flag_PhotoOrganise__GetCollections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__GetCollections * SOAP_FMAC6 soap_new___PhotoOrganise3__GetCollections(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__GetCollections(struct soap *soap, struct __PhotoOrganise3__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__GetCollections * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__GetCollections;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__GetCollections);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__GetCollections);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__GetCollections %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__GetCollections*)p = *(struct __PhotoOrganise3__GetCollections*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__CreateNewCollection(struct soap *soap, struct __PhotoOrganise3__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__CreateNewCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__CreateNewCollection(struct soap *soap, const struct __PhotoOrganise3__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__CreateNewCollection(soap, &a->PhotoOrganise__CreateNewCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__CreateNewCollection(struct soap *soap, const struct __PhotoOrganise3__CreateNewCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__CreateNewCollection(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__CreateNewCollection *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__CreateNewCollection(soap, "PhotoOrganise:CreateNewCollection", -1, &a->PhotoOrganise__CreateNewCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__CreateNewCollection * SOAP_FMAC4 soap_get___PhotoOrganise3__CreateNewCollection(struct soap *soap, struct __PhotoOrganise3__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__CreateNewCollection * SOAP_FMAC4 soap_in___PhotoOrganise3__CreateNewCollection(struct soap *soap, const char *tag, struct __PhotoOrganise3__CreateNewCollection *a, const char *type)
{
	short soap_flag_PhotoOrganise__CreateNewCollection = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__CreateNewCollection *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__CreateNewCollection, sizeof(struct __PhotoOrganise3__CreateNewCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__CreateNewCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__CreateNewCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__CreateNewCollection(soap, "PhotoOrganise:CreateNewCollection", &a->PhotoOrganise__CreateNewCollection, ""))
				{	soap_flag_PhotoOrganise__CreateNewCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__CreateNewCollection * SOAP_FMAC6 soap_new___PhotoOrganise3__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__CreateNewCollection(struct soap *soap, struct __PhotoOrganise3__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__CreateNewCollection * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__CreateNewCollection;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__CreateNewCollection);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__CreateNewCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__CreateNewCollection %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__CreateNewCollection*)p = *(struct __PhotoOrganise3__CreateNewCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___PhotoOrganise3__Login(struct soap *soap, struct __PhotoOrganise3__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->PhotoOrganise__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___PhotoOrganise3__Login(struct soap *soap, const struct __PhotoOrganise3__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_PhotoOrganise__Login(soap, &a->PhotoOrganise__Login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___PhotoOrganise3__Login(struct soap *soap, const struct __PhotoOrganise3__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___PhotoOrganise3__Login(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___PhotoOrganise3__Login(struct soap *soap, const char *tag, int id, const struct __PhotoOrganise3__Login *a, const char *type)
{
	if (soap_out_PointerTo_PhotoOrganise__Login(soap, "PhotoOrganise:Login", -1, &a->PhotoOrganise__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __PhotoOrganise3__Login * SOAP_FMAC4 soap_get___PhotoOrganise3__Login(struct soap *soap, struct __PhotoOrganise3__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___PhotoOrganise3__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __PhotoOrganise3__Login * SOAP_FMAC4 soap_in___PhotoOrganise3__Login(struct soap *soap, const char *tag, struct __PhotoOrganise3__Login *a, const char *type)
{
	short soap_flag_PhotoOrganise__Login = 1;
	short soap_flag;
	a = (struct __PhotoOrganise3__Login *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__Login, sizeof(struct __PhotoOrganise3__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___PhotoOrganise3__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoOrganise__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_PhotoOrganise__Login(soap, "PhotoOrganise:Login", &a->PhotoOrganise__Login, ""))
				{	soap_flag_PhotoOrganise__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __PhotoOrganise3__Login * SOAP_FMAC6 soap_new___PhotoOrganise3__Login(struct soap *soap, int n)
{	return soap_instantiate___PhotoOrganise3__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___PhotoOrganise3__Login(struct soap *soap, struct __PhotoOrganise3__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __PhotoOrganise3__Login * SOAP_FMAC4 soap_instantiate___PhotoOrganise3__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___PhotoOrganise3__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise___PhotoOrganise3__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __PhotoOrganise3__Login;
		if (size)
			*size = sizeof(struct __PhotoOrganise3__Login);
	}
	else
	{	cp->ptr = (void*)new struct __PhotoOrganise3__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __PhotoOrganise3__Login);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __PhotoOrganise3__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___PhotoOrganise3__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __PhotoOrganise3__Login %p -> %p\n", q, p));
	*(struct __PhotoOrganise3__Login*)p = *(struct __PhotoOrganise3__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__DeletePhotoResponse(struct soap *soap, _PhotoOrganise__DeletePhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__DeletePhotoResponse(struct soap *soap, _PhotoOrganise__DeletePhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhotoResponse);
	if (soap_out_PointerTo_PhotoOrganise__DeletePhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__DeletePhotoResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__DeletePhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__DeletePhotoResponse(struct soap *soap, _PhotoOrganise__DeletePhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__DeletePhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__DeletePhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__DeletePhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__DeletePhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__DeletePhotoResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__DeletePhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__DeletePhotoResponse *)soap_instantiate__PhotoOrganise__DeletePhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__DeletePhotoResponse ** p = (_PhotoOrganise__DeletePhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhotoResponse, sizeof(_PhotoOrganise__DeletePhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__DeletePhoto(struct soap *soap, _PhotoOrganise__DeletePhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__DeletePhoto(struct soap *soap, _PhotoOrganise__DeletePhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeletePhoto);
	if (soap_out_PointerTo_PhotoOrganise__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__DeletePhoto(struct soap *soap, const char *tag, int id, _PhotoOrganise__DeletePhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__DeletePhoto ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__DeletePhoto(struct soap *soap, _PhotoOrganise__DeletePhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__DeletePhoto ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__DeletePhoto(struct soap *soap, const char *tag, _PhotoOrganise__DeletePhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__DeletePhoto **)soap_malloc(soap, sizeof(_PhotoOrganise__DeletePhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__DeletePhoto *)soap_instantiate__PhotoOrganise__DeletePhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__DeletePhoto ** p = (_PhotoOrganise__DeletePhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeletePhoto, sizeof(_PhotoOrganise__DeletePhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__RenameCollectionResponse(struct soap *soap, _PhotoOrganise__RenameCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__RenameCollectionResponse(struct soap *soap, _PhotoOrganise__RenameCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollectionResponse);
	if (soap_out_PointerTo_PhotoOrganise__RenameCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__RenameCollectionResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__RenameCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__RenameCollectionResponse(struct soap *soap, _PhotoOrganise__RenameCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__RenameCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__RenameCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__RenameCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__RenameCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__RenameCollectionResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__RenameCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__RenameCollectionResponse *)soap_instantiate__PhotoOrganise__RenameCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__RenameCollectionResponse ** p = (_PhotoOrganise__RenameCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollectionResponse, sizeof(_PhotoOrganise__RenameCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__RenameCollection(struct soap *soap, _PhotoOrganise__RenameCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__RenameCollection(struct soap *soap, _PhotoOrganise__RenameCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__RenameCollection);
	if (soap_out_PointerTo_PhotoOrganise__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__RenameCollection(struct soap *soap, const char *tag, int id, _PhotoOrganise__RenameCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__RenameCollection ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__RenameCollection(struct soap *soap, _PhotoOrganise__RenameCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__RenameCollection ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__RenameCollection(struct soap *soap, const char *tag, _PhotoOrganise__RenameCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__RenameCollection **)soap_malloc(soap, sizeof(_PhotoOrganise__RenameCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__RenameCollection *)soap_instantiate__PhotoOrganise__RenameCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__RenameCollection ** p = (_PhotoOrganise__RenameCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__RenameCollection, sizeof(_PhotoOrganise__RenameCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, _PhotoOrganise__JavaUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, _PhotoOrganise__JavaUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhotoResponse);
	if (soap_out_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__JavaUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, _PhotoOrganise__JavaUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__JavaUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__JavaUploadPhotoResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__JavaUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__JavaUploadPhotoResponse *)soap_instantiate__PhotoOrganise__JavaUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__JavaUploadPhotoResponse ** p = (_PhotoOrganise__JavaUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhotoResponse, sizeof(_PhotoOrganise__JavaUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__JavaUploadPhoto(struct soap *soap, _PhotoOrganise__JavaUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__JavaUploadPhoto(struct soap *soap, _PhotoOrganise__JavaUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__JavaUploadPhoto);
	if (soap_out_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__JavaUploadPhoto(struct soap *soap, const char *tag, int id, _PhotoOrganise__JavaUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__JavaUploadPhoto(struct soap *soap, _PhotoOrganise__JavaUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__JavaUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__JavaUploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__JavaUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__JavaUploadPhoto **)soap_malloc(soap, sizeof(_PhotoOrganise__JavaUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__JavaUploadPhoto *)soap_instantiate__PhotoOrganise__JavaUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__JavaUploadPhoto ** p = (_PhotoOrganise__JavaUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__JavaUploadPhoto, sizeof(_PhotoOrganise__JavaUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, _PhotoOrganise__DeviceUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, _PhotoOrganise__DeviceUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse);
	if (soap_out_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__DeviceUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, _PhotoOrganise__DeviceUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__DeviceUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__DeviceUploadPhotoResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__DeviceUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__DeviceUploadPhotoResponse *)soap_instantiate__PhotoOrganise__DeviceUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__DeviceUploadPhotoResponse ** p = (_PhotoOrganise__DeviceUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhotoResponse, sizeof(_PhotoOrganise__DeviceUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__DeviceUploadPhoto(struct soap *soap, _PhotoOrganise__DeviceUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__DeviceUploadPhoto(struct soap *soap, _PhotoOrganise__DeviceUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__DeviceUploadPhoto);
	if (soap_out_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, _PhotoOrganise__DeviceUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__DeviceUploadPhoto(struct soap *soap, _PhotoOrganise__DeviceUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__DeviceUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__DeviceUploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__DeviceUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__DeviceUploadPhoto **)soap_malloc(soap, sizeof(_PhotoOrganise__DeviceUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__DeviceUploadPhoto *)soap_instantiate__PhotoOrganise__DeviceUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__DeviceUploadPhoto ** p = (_PhotoOrganise__DeviceUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__DeviceUploadPhoto, sizeof(_PhotoOrganise__DeviceUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__UploadPhotoResponse(struct soap *soap, _PhotoOrganise__UploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__UploadPhotoResponse(struct soap *soap, _PhotoOrganise__UploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhotoResponse);
	if (soap_out_PointerTo_PhotoOrganise__UploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__UploadPhotoResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__UploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__UploadPhotoResponse(struct soap *soap, _PhotoOrganise__UploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__UploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__UploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__UploadPhotoResponse(struct soap *soap, const char *tag, _PhotoOrganise__UploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__UploadPhotoResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__UploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__UploadPhotoResponse *)soap_instantiate__PhotoOrganise__UploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__UploadPhotoResponse ** p = (_PhotoOrganise__UploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhotoResponse, sizeof(_PhotoOrganise__UploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__UploadPhoto(struct soap *soap, _PhotoOrganise__UploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__UploadPhoto(struct soap *soap, _PhotoOrganise__UploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__UploadPhoto);
	if (soap_out_PointerTo_PhotoOrganise__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__UploadPhoto(struct soap *soap, const char *tag, int id, _PhotoOrganise__UploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__UploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__UploadPhoto(struct soap *soap, _PhotoOrganise__UploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__UploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__UploadPhoto(struct soap *soap, const char *tag, _PhotoOrganise__UploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__UploadPhoto **)soap_malloc(soap, sizeof(_PhotoOrganise__UploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__UploadPhoto *)soap_instantiate__PhotoOrganise__UploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__UploadPhoto ** p = (_PhotoOrganise__UploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__UploadPhoto, sizeof(_PhotoOrganise__UploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, _PhotoOrganise__GetPhotosByCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, _PhotoOrganise__GetPhotosByCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse);
	if (soap_out_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__GetPhotosByCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, _PhotoOrganise__GetPhotosByCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__GetPhotosByCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__GetPhotosByCollectionResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__GetPhotosByCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__GetPhotosByCollectionResponse *)soap_instantiate__PhotoOrganise__GetPhotosByCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__GetPhotosByCollectionResponse ** p = (_PhotoOrganise__GetPhotosByCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollectionResponse, sizeof(_PhotoOrganise__GetPhotosByCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__GetPhotosByCollection(struct soap *soap, _PhotoOrganise__GetPhotosByCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__GetPhotosByCollection(struct soap *soap, _PhotoOrganise__GetPhotosByCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetPhotosByCollection);
	if (soap_out_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__GetPhotosByCollection(struct soap *soap, const char *tag, int id, _PhotoOrganise__GetPhotosByCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollection ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__GetPhotosByCollection(struct soap *soap, _PhotoOrganise__GetPhotosByCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__GetPhotosByCollection ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__GetPhotosByCollection(struct soap *soap, const char *tag, _PhotoOrganise__GetPhotosByCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__GetPhotosByCollection **)soap_malloc(soap, sizeof(_PhotoOrganise__GetPhotosByCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__GetPhotosByCollection *)soap_instantiate__PhotoOrganise__GetPhotosByCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__GetPhotosByCollection ** p = (_PhotoOrganise__GetPhotosByCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetPhotosByCollection, sizeof(_PhotoOrganise__GetPhotosByCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__GetCollectionsResponse(struct soap *soap, _PhotoOrganise__GetCollectionsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__GetCollectionsResponse(struct soap *soap, _PhotoOrganise__GetCollectionsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollectionsResponse);
	if (soap_out_PointerTo_PhotoOrganise__GetCollectionsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__GetCollectionsResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__GetCollectionsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollectionsResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__GetCollectionsResponse(struct soap *soap, _PhotoOrganise__GetCollectionsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__GetCollectionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__GetCollectionsResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__GetCollectionsResponse(struct soap *soap, const char *tag, _PhotoOrganise__GetCollectionsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__GetCollectionsResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__GetCollectionsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__GetCollectionsResponse *)soap_instantiate__PhotoOrganise__GetCollectionsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__GetCollectionsResponse ** p = (_PhotoOrganise__GetCollectionsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollectionsResponse, sizeof(_PhotoOrganise__GetCollectionsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__GetCollections(struct soap *soap, _PhotoOrganise__GetCollections *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__GetCollections(struct soap *soap, _PhotoOrganise__GetCollections *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__GetCollections);
	if (soap_out_PointerTo_PhotoOrganise__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__GetCollections(struct soap *soap, const char *tag, int id, _PhotoOrganise__GetCollections *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__GetCollections ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__GetCollections(struct soap *soap, _PhotoOrganise__GetCollections **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__GetCollections ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__GetCollections(struct soap *soap, const char *tag, _PhotoOrganise__GetCollections **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__GetCollections **)soap_malloc(soap, sizeof(_PhotoOrganise__GetCollections *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__GetCollections *)soap_instantiate__PhotoOrganise__GetCollections(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__GetCollections ** p = (_PhotoOrganise__GetCollections **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__GetCollections, sizeof(_PhotoOrganise__GetCollections), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, _PhotoOrganise__CreateNewCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, _PhotoOrganise__CreateNewCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollectionResponse);
	if (soap_out_PointerTo_PhotoOrganise__CreateNewCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__CreateNewCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, _PhotoOrganise__CreateNewCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__CreateNewCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__CreateNewCollectionResponse(struct soap *soap, const char *tag, _PhotoOrganise__CreateNewCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__CreateNewCollectionResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__CreateNewCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__CreateNewCollectionResponse *)soap_instantiate__PhotoOrganise__CreateNewCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__CreateNewCollectionResponse ** p = (_PhotoOrganise__CreateNewCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollectionResponse, sizeof(_PhotoOrganise__CreateNewCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__CreateNewCollection(struct soap *soap, _PhotoOrganise__CreateNewCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__CreateNewCollection(struct soap *soap, _PhotoOrganise__CreateNewCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__CreateNewCollection);
	if (soap_out_PointerTo_PhotoOrganise__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__CreateNewCollection(struct soap *soap, const char *tag, int id, _PhotoOrganise__CreateNewCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollection ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__CreateNewCollection(struct soap *soap, _PhotoOrganise__CreateNewCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__CreateNewCollection ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__CreateNewCollection(struct soap *soap, const char *tag, _PhotoOrganise__CreateNewCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__CreateNewCollection **)soap_malloc(soap, sizeof(_PhotoOrganise__CreateNewCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__CreateNewCollection *)soap_instantiate__PhotoOrganise__CreateNewCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__CreateNewCollection ** p = (_PhotoOrganise__CreateNewCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__CreateNewCollection, sizeof(_PhotoOrganise__CreateNewCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__LoginResponse(struct soap *soap, _PhotoOrganise__LoginResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__LoginResponse(struct soap *soap, _PhotoOrganise__LoginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__LoginResponse);
	if (soap_out_PointerTo_PhotoOrganise__LoginResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__LoginResponse(struct soap *soap, const char *tag, int id, _PhotoOrganise__LoginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__LoginResponse ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__LoginResponse(struct soap *soap, _PhotoOrganise__LoginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__LoginResponse ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__LoginResponse(struct soap *soap, const char *tag, _PhotoOrganise__LoginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__LoginResponse **)soap_malloc(soap, sizeof(_PhotoOrganise__LoginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__LoginResponse *)soap_instantiate__PhotoOrganise__LoginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__LoginResponse ** p = (_PhotoOrganise__LoginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__LoginResponse, sizeof(_PhotoOrganise__LoginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_PhotoOrganise__Login(struct soap *soap, _PhotoOrganise__Login *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_PhotoOrganise__Login(struct soap *soap, _PhotoOrganise__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTo_PhotoOrganise__Login);
	if (soap_out_PointerTo_PhotoOrganise__Login(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_PhotoOrganise__Login(struct soap *soap, const char *tag, int id, _PhotoOrganise__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _PhotoOrganise__Login ** SOAP_FMAC4 soap_get_PointerTo_PhotoOrganise__Login(struct soap *soap, _PhotoOrganise__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_PhotoOrganise__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _PhotoOrganise__Login ** SOAP_FMAC4 soap_in_PointerTo_PhotoOrganise__Login(struct soap *soap, const char *tag, _PhotoOrganise__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_PhotoOrganise__Login **)soap_malloc(soap, sizeof(_PhotoOrganise__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_PhotoOrganise__Login *)soap_instantiate__PhotoOrganise__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_PhotoOrganise__Login ** p = (_PhotoOrganise__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise__PhotoOrganise__Login, sizeof(_PhotoOrganise__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPhotoOrganise__ArrayOfPhotoItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoItem);
	if (soap_out_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPhotoOrganise__ArrayOfPhotoItem(struct soap *soap, const char *tag, int id, PhotoOrganise__ArrayOfPhotoItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoItem ** SOAP_FMAC4 soap_get_PointerToPhotoOrganise__ArrayOfPhotoItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPhotoOrganise__ArrayOfPhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoItem ** SOAP_FMAC4 soap_in_PointerToPhotoOrganise__ArrayOfPhotoItem(struct soap *soap, const char *tag, PhotoOrganise__ArrayOfPhotoItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (PhotoOrganise__ArrayOfPhotoItem **)soap_malloc(soap, sizeof(PhotoOrganise__ArrayOfPhotoItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (PhotoOrganise__ArrayOfPhotoItem *)soap_instantiate_PhotoOrganise__ArrayOfPhotoItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	PhotoOrganise__ArrayOfPhotoItem ** p = (PhotoOrganise__ArrayOfPhotoItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoItem, sizeof(PhotoOrganise__ArrayOfPhotoItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoCollectionItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoCollectionItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem);
	if (soap_out_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, int id, PhotoOrganise__ArrayOfPhotoCollectionItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoCollectionItem ** SOAP_FMAC4 soap_get_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, PhotoOrganise__ArrayOfPhotoCollectionItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 PhotoOrganise__ArrayOfPhotoCollectionItem ** SOAP_FMAC4 soap_in_PointerToPhotoOrganise__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, PhotoOrganise__ArrayOfPhotoCollectionItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (PhotoOrganise__ArrayOfPhotoCollectionItem **)soap_malloc(soap, sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (PhotoOrganise__ArrayOfPhotoCollectionItem *)soap_instantiate_PhotoOrganise__ArrayOfPhotoCollectionItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	PhotoOrganise__ArrayOfPhotoCollectionItem ** p = (PhotoOrganise__ArrayOfPhotoCollectionItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__ArrayOfPhotoCollectionItem, sizeof(PhotoOrganise__ArrayOfPhotoCollectionItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPhotoOrganise__PhotoItem(struct soap *soap, PhotoOrganise__PhotoItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPhotoOrganise__PhotoItem(struct soap *soap, PhotoOrganise__PhotoItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoItem);
	if (soap_out_PointerToPhotoOrganise__PhotoItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPhotoOrganise__PhotoItem(struct soap *soap, const char *tag, int id, PhotoOrganise__PhotoItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoItem ** SOAP_FMAC4 soap_get_PointerToPhotoOrganise__PhotoItem(struct soap *soap, PhotoOrganise__PhotoItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPhotoOrganise__PhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 PhotoOrganise__PhotoItem ** SOAP_FMAC4 soap_in_PointerToPhotoOrganise__PhotoItem(struct soap *soap, const char *tag, PhotoOrganise__PhotoItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (PhotoOrganise__PhotoItem **)soap_malloc(soap, sizeof(PhotoOrganise__PhotoItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (PhotoOrganise__PhotoItem *)soap_instantiate_PhotoOrganise__PhotoItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	PhotoOrganise__PhotoItem ** p = (PhotoOrganise__PhotoItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem, sizeof(PhotoOrganise__PhotoItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, PhotoOrganise__PhotoCollectionItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, PhotoOrganise__PhotoCollectionItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerToPhotoOrganise__PhotoCollectionItem);
	if (soap_out_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, int id, PhotoOrganise__PhotoCollectionItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 PhotoOrganise__PhotoCollectionItem ** SOAP_FMAC4 soap_get_PointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, PhotoOrganise__PhotoCollectionItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 PhotoOrganise__PhotoCollectionItem ** SOAP_FMAC4 soap_in_PointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, PhotoOrganise__PhotoCollectionItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (PhotoOrganise__PhotoCollectionItem **)soap_malloc(soap, sizeof(PhotoOrganise__PhotoCollectionItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (PhotoOrganise__PhotoCollectionItem *)soap_instantiate_PhotoOrganise__PhotoCollectionItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	PhotoOrganise__PhotoCollectionItem ** p = (PhotoOrganise__PhotoCollectionItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem, sizeof(PhotoOrganise__PhotoCollectionItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_PhotoOrganise_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_PhotoOrganise_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_WS_PhotoOrganise_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_PhotoOrganise_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_PhotoOrganise_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_PhotoOrganise_string, 1, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, std::vector<PhotoOrganise__PhotoItem * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, const std::vector<PhotoOrganise__PhotoItem * >*a)
{
	for (std::vector<PhotoOrganise__PhotoItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToPhotoOrganise__PhotoItem(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, const char *tag, int id, const std::vector<PhotoOrganise__PhotoItem * >*a, const char *type)
{
	for (std::vector<PhotoOrganise__PhotoItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToPhotoOrganise__PhotoItem(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<PhotoOrganise__PhotoItem * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, const char *tag, std::vector<PhotoOrganise__PhotoItem * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, -1)))
		return NULL;
	PhotoOrganise__PhotoItem *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoItem, SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem, sizeof(PhotoOrganise__PhotoItem), 1))
				break;
			if (!soap_in_PointerToPhotoOrganise__PhotoItem(soap, tag, NULL, "PhotoOrganise:PhotoItem"))
				break;
		}
		else
		{
			if (!soap_in_PointerToPhotoOrganise__PhotoItem(soap, tag, &n, "PhotoOrganise:PhotoItem"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<PhotoOrganise__PhotoItem * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, std::vector<PhotoOrganise__PhotoItem * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<PhotoOrganise__PhotoItem * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<PhotoOrganise__PhotoItem * >;
		if (size)
			*size = sizeof(std::vector<PhotoOrganise__PhotoItem * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<PhotoOrganise__PhotoItem * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<PhotoOrganise__PhotoItem * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<PhotoOrganise__PhotoItem * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToPhotoOrganise__PhotoItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<PhotoOrganise__PhotoItem * > %p -> %p\n", q, p));
	*(std::vector<PhotoOrganise__PhotoItem * >*)p = *(std::vector<PhotoOrganise__PhotoItem * >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, std::vector<PhotoOrganise__PhotoCollectionItem * >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, const std::vector<PhotoOrganise__PhotoCollectionItem * >*a)
{
	for (std::vector<PhotoOrganise__PhotoCollectionItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
		soap_serialize_PointerToPhotoOrganise__PhotoCollectionItem(soap, &(*i));
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, int id, const std::vector<PhotoOrganise__PhotoCollectionItem * >*a, const char *type)
{
	for (std::vector<PhotoOrganise__PhotoCollectionItem * >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if (soap_out_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, id, &(*i), ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<PhotoOrganise__PhotoCollectionItem * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, const char *tag, std::vector<PhotoOrganise__PhotoCollectionItem * >*a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a && !(a = soap_new_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, -1)))
		return NULL;
	PhotoOrganise__PhotoCollectionItem *n;
	short soap_flag = 0;
	do
	{	soap_revert(soap);
		n = NULL;
		if (*soap->id || *soap->href)
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE_WS_PhotoOrganise_PhotoOrganise__PhotoCollectionItem, SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem, sizeof(PhotoOrganise__PhotoCollectionItem), 1))
				break;
			if (!soap_in_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, NULL, "PhotoOrganise:PhotoCollectionItem"))
				break;
		}
		else
		{
			if (!soap_in_PointerToPhotoOrganise__PhotoCollectionItem(soap, tag, &n, "PhotoOrganise:PhotoCollectionItem"))
				break;
		}
		a->push_back(n);
		soap_flag = 1;
	}
	while (!soap_element_begin_in(soap, tag, 1, NULL));
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC5 std::vector<PhotoOrganise__PhotoCollectionItem * > * SOAP_FMAC6 soap_new_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, int n)
{	return soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, std::vector<PhotoOrganise__PhotoCollectionItem * >*p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::vector<PhotoOrganise__PhotoCollectionItem * > * SOAP_FMAC4 soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_PhotoOrganise_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::vector<PhotoOrganise__PhotoCollectionItem * >;
		if (size)
			*size = sizeof(std::vector<PhotoOrganise__PhotoCollectionItem * >);
	}
	else
	{	cp->ptr = (void*)new std::vector<PhotoOrganise__PhotoCollectionItem * >[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::vector<PhotoOrganise__PhotoCollectionItem * >);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::vector<PhotoOrganise__PhotoCollectionItem * >*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerToPhotoOrganise__PhotoCollectionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<PhotoOrganise__PhotoCollectionItem * > %p -> %p\n", q, p));
	*(std::vector<PhotoOrganise__PhotoCollectionItem * >*)p = *(std::vector<PhotoOrganise__PhotoCollectionItem * >*)q;
}

} // namespace WS_PhotoOrganise


/* End of WS_PhotoOrganiseC.cpp */
