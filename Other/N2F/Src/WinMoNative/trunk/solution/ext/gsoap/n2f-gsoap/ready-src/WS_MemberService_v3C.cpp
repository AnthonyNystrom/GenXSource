/* WS_MemberService_v3C.cpp
   Generated by gSOAP 2.7.10 from .\wsdl-h\MemberService.v3.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "WS_MemberService_v3H.h"

namespace WS_MemberService_v3 {

SOAP_SOURCE_STAMP("@(#) WS_MemberService_v3C.cpp ver 2.7.10 2008-05-06 23:33:55 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_WS_MemberService_v3_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_WS_MemberService_v3_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_WS_MemberService_v3_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_WS_MemberService_v3_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPasswordResponse:
		return soap_in_PointerTo_MemberServiceV3__RemindPasswordResponse(soap, NULL, NULL, "MemberServiceV3:RemindPasswordResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPassword:
		return soap_in_PointerTo_MemberServiceV3__RemindPassword(soap, NULL, NULL, "MemberServiceV3:RemindPassword");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagIDResponse:
		return soap_in_PointerTo_MemberServiceV3__GetTagIDResponse(soap, NULL, NULL, "MemberServiceV3:GetTagIDResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagID:
		return soap_in_PointerTo_MemberServiceV3__GetTagID(soap, NULL, NULL, "MemberServiceV3:GetTagID");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberIDResponse:
		return soap_in_PointerTo_MemberServiceV3__GetMemberIDResponse(soap, NULL, NULL, "MemberServiceV3:GetMemberIDResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberID:
		return soap_in_PointerTo_MemberServiceV3__GetMemberID(soap, NULL, NULL, "MemberServiceV3:GetMemberID");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKeyResponse:
		return soap_in_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(soap, NULL, NULL, "MemberServiceV3:GetEncryptionKeyResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKey:
		return soap_in_PointerTo_MemberServiceV3__GetEncryptionKey(soap, NULL, NULL, "MemberServiceV3:GetEncryptionKey");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExistsResponse:
		return soap_in_PointerTo_MemberServiceV3__CheckUserExistsResponse(soap, NULL, NULL, "MemberServiceV3:CheckUserExistsResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExists:
		return soap_in_PointerTo_MemberServiceV3__CheckUserExists(soap, NULL, NULL, "MemberServiceV3:CheckUserExists");
	case SOAP_TYPE_WS_MemberService_v3_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_WS_MemberService_v3_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_WS_MemberService_v3_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_WS_MemberService_v3_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_WS_MemberService_v3_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_WS_MemberService_v3_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_WS_MemberService_v3_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "MemberServiceV3:RemindPasswordResponse"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse;
			return soap_in__MemberServiceV3__RemindPasswordResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:RemindPassword"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword;
			return soap_in__MemberServiceV3__RemindPassword(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetTagIDResponse"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse;
			return soap_in__MemberServiceV3__GetTagIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetTagID"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID;
			return soap_in__MemberServiceV3__GetTagID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetMemberIDResponse"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse;
			return soap_in__MemberServiceV3__GetMemberIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetMemberID"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID;
			return soap_in__MemberServiceV3__GetMemberID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetEncryptionKeyResponse"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse;
			return soap_in__MemberServiceV3__GetEncryptionKeyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:GetEncryptionKey"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey;
			return soap_in__MemberServiceV3__GetEncryptionKey(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:CheckUserExistsResponse"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse;
			return soap_in__MemberServiceV3__CheckUserExistsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "MemberServiceV3:CheckUserExists"))
		{	*type = SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists;
			return soap_in__MemberServiceV3__CheckUserExists(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE_WS_MemberService_v3__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_WS_MemberService_v3_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_WS_MemberService_v3_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_WS_MemberService_v3_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_WS_MemberService_v3_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse:
		return ((_MemberServiceV3__RemindPasswordResponse *)ptr)->soap_out(soap, "MemberServiceV3:RemindPasswordResponse", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword:
		return ((_MemberServiceV3__RemindPassword *)ptr)->soap_out(soap, "MemberServiceV3:RemindPassword", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse:
		return ((_MemberServiceV3__GetTagIDResponse *)ptr)->soap_out(soap, "MemberServiceV3:GetTagIDResponse", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID:
		return ((_MemberServiceV3__GetTagID *)ptr)->soap_out(soap, "MemberServiceV3:GetTagID", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse:
		return ((_MemberServiceV3__GetMemberIDResponse *)ptr)->soap_out(soap, "MemberServiceV3:GetMemberIDResponse", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID:
		return ((_MemberServiceV3__GetMemberID *)ptr)->soap_out(soap, "MemberServiceV3:GetMemberID", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse:
		return ((_MemberServiceV3__GetEncryptionKeyResponse *)ptr)->soap_out(soap, "MemberServiceV3:GetEncryptionKeyResponse", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey:
		return ((_MemberServiceV3__GetEncryptionKey *)ptr)->soap_out(soap, "MemberServiceV3:GetEncryptionKey", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse:
		return ((_MemberServiceV3__CheckUserExistsResponse *)ptr)->soap_out(soap, "MemberServiceV3:CheckUserExistsResponse", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists:
		return ((_MemberServiceV3__CheckUserExists *)ptr)->soap_out(soap, "MemberServiceV3:CheckUserExists", id, NULL);
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPasswordResponse:
		return soap_out_PointerTo_MemberServiceV3__RemindPasswordResponse(soap, tag, id, (_MemberServiceV3__RemindPasswordResponse *const*)ptr, "MemberServiceV3:RemindPasswordResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPassword:
		return soap_out_PointerTo_MemberServiceV3__RemindPassword(soap, tag, id, (_MemberServiceV3__RemindPassword *const*)ptr, "MemberServiceV3:RemindPassword");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagIDResponse:
		return soap_out_PointerTo_MemberServiceV3__GetTagIDResponse(soap, tag, id, (_MemberServiceV3__GetTagIDResponse *const*)ptr, "MemberServiceV3:GetTagIDResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagID:
		return soap_out_PointerTo_MemberServiceV3__GetTagID(soap, tag, id, (_MemberServiceV3__GetTagID *const*)ptr, "MemberServiceV3:GetTagID");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberIDResponse:
		return soap_out_PointerTo_MemberServiceV3__GetMemberIDResponse(soap, tag, id, (_MemberServiceV3__GetMemberIDResponse *const*)ptr, "MemberServiceV3:GetMemberIDResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberID:
		return soap_out_PointerTo_MemberServiceV3__GetMemberID(soap, tag, id, (_MemberServiceV3__GetMemberID *const*)ptr, "MemberServiceV3:GetMemberID");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKeyResponse:
		return soap_out_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(soap, tag, id, (_MemberServiceV3__GetEncryptionKeyResponse *const*)ptr, "MemberServiceV3:GetEncryptionKeyResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKey:
		return soap_out_PointerTo_MemberServiceV3__GetEncryptionKey(soap, tag, id, (_MemberServiceV3__GetEncryptionKey *const*)ptr, "MemberServiceV3:GetEncryptionKey");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExistsResponse:
		return soap_out_PointerTo_MemberServiceV3__CheckUserExistsResponse(soap, tag, id, (_MemberServiceV3__CheckUserExistsResponse *const*)ptr, "MemberServiceV3:CheckUserExistsResponse");
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExists:
		return soap_out_PointerTo_MemberServiceV3__CheckUserExists(soap, tag, id, (_MemberServiceV3__CheckUserExists *const*)ptr, "MemberServiceV3:CheckUserExists");
	case SOAP_TYPE_WS_MemberService_v3_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE_WS_MemberService_v3__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_WS_MemberService_v3_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_WS_MemberService_v3_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse:
		((_MemberServiceV3__RemindPasswordResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword:
		((_MemberServiceV3__RemindPassword *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse:
		((_MemberServiceV3__GetTagIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID:
		((_MemberServiceV3__GetTagID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse:
		((_MemberServiceV3__GetMemberIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID:
		((_MemberServiceV3__GetMemberID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse:
		((_MemberServiceV3__GetEncryptionKeyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey:
		((_MemberServiceV3__GetEncryptionKey *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse:
		((_MemberServiceV3__CheckUserExistsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists:
		((_MemberServiceV3__CheckUserExists *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__RemindPassword:
		soap_serialize___MemberServiceV33__RemindPassword(soap, (const struct __MemberServiceV33__RemindPassword *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetTagID:
		soap_serialize___MemberServiceV33__GetTagID(soap, (const struct __MemberServiceV33__GetTagID *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetMemberID:
		soap_serialize___MemberServiceV33__GetMemberID(soap, (const struct __MemberServiceV33__GetMemberID *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetEncryptionKey:
		soap_serialize___MemberServiceV33__GetEncryptionKey(soap, (const struct __MemberServiceV33__GetEncryptionKey *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__CheckUserExists:
		soap_serialize___MemberServiceV33__CheckUserExists(soap, (const struct __MemberServiceV33__CheckUserExists *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__RemindPassword:
		soap_serialize___MemberServiceV32__RemindPassword(soap, (const struct __MemberServiceV32__RemindPassword *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetTagID:
		soap_serialize___MemberServiceV32__GetTagID(soap, (const struct __MemberServiceV32__GetTagID *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetMemberID:
		soap_serialize___MemberServiceV32__GetMemberID(soap, (const struct __MemberServiceV32__GetMemberID *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetEncryptionKey:
		soap_serialize___MemberServiceV32__GetEncryptionKey(soap, (const struct __MemberServiceV32__GetEncryptionKey *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__CheckUserExists:
		soap_serialize___MemberServiceV32__CheckUserExists(soap, (const struct __MemberServiceV32__CheckUserExists *)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPasswordResponse:
		soap_serialize_PointerTo_MemberServiceV3__RemindPasswordResponse(soap, (_MemberServiceV3__RemindPasswordResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPassword:
		soap_serialize_PointerTo_MemberServiceV3__RemindPassword(soap, (_MemberServiceV3__RemindPassword *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagIDResponse:
		soap_serialize_PointerTo_MemberServiceV3__GetTagIDResponse(soap, (_MemberServiceV3__GetTagIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagID:
		soap_serialize_PointerTo_MemberServiceV3__GetTagID(soap, (_MemberServiceV3__GetTagID *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberIDResponse:
		soap_serialize_PointerTo_MemberServiceV3__GetMemberIDResponse(soap, (_MemberServiceV3__GetMemberIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberID:
		soap_serialize_PointerTo_MemberServiceV3__GetMemberID(soap, (_MemberServiceV3__GetMemberID *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKeyResponse:
		soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(soap, (_MemberServiceV3__GetEncryptionKeyResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKey:
		soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKey(soap, (_MemberServiceV3__GetEncryptionKey *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExistsResponse:
		soap_serialize_PointerTo_MemberServiceV3__CheckUserExistsResponse(soap, (_MemberServiceV3__CheckUserExistsResponse *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExists:
		soap_serialize_PointerTo_MemberServiceV3__CheckUserExists(soap, (_MemberServiceV3__CheckUserExists *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_WS_MemberService_v3_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_WS_MemberService_v3_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists:
		return (void*)soap_instantiate__MemberServiceV3__CheckUserExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse:
		return (void*)soap_instantiate__MemberServiceV3__CheckUserExistsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey:
		return (void*)soap_instantiate__MemberServiceV3__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse:
		return (void*)soap_instantiate__MemberServiceV3__GetEncryptionKeyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID:
		return (void*)soap_instantiate__MemberServiceV3__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse:
		return (void*)soap_instantiate__MemberServiceV3__GetMemberIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID:
		return (void*)soap_instantiate__MemberServiceV3__GetTagID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse:
		return (void*)soap_instantiate__MemberServiceV3__GetTagIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword:
		return (void*)soap_instantiate__MemberServiceV3__RemindPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse:
		return (void*)soap_instantiate__MemberServiceV3__RemindPasswordResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__CheckUserExists:
		return (void*)soap_instantiate___MemberServiceV32__CheckUserExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetEncryptionKey:
		return (void*)soap_instantiate___MemberServiceV32__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetMemberID:
		return (void*)soap_instantiate___MemberServiceV32__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetTagID:
		return (void*)soap_instantiate___MemberServiceV32__GetTagID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__RemindPassword:
		return (void*)soap_instantiate___MemberServiceV32__RemindPassword(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__CheckUserExists:
		return (void*)soap_instantiate___MemberServiceV33__CheckUserExists(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetEncryptionKey:
		return (void*)soap_instantiate___MemberServiceV33__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetMemberID:
		return (void*)soap_instantiate___MemberServiceV33__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetTagID:
		return (void*)soap_instantiate___MemberServiceV33__GetTagID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__RemindPassword:
		return (void*)soap_instantiate___MemberServiceV33__RemindPassword(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_WS_MemberService_v3_std__string:
		if (p->size < 0)
			delete (std::string*)p->ptr;
		else
			delete[] (std::string*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists:
		if (p->size < 0)
			delete (_MemberServiceV3__CheckUserExists*)p->ptr;
		else
			delete[] (_MemberServiceV3__CheckUserExists*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse:
		if (p->size < 0)
			delete (_MemberServiceV3__CheckUserExistsResponse*)p->ptr;
		else
			delete[] (_MemberServiceV3__CheckUserExistsResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey:
		if (p->size < 0)
			delete (_MemberServiceV3__GetEncryptionKey*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse:
		if (p->size < 0)
			delete (_MemberServiceV3__GetEncryptionKeyResponse*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetEncryptionKeyResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID:
		if (p->size < 0)
			delete (_MemberServiceV3__GetMemberID*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse:
		if (p->size < 0)
			delete (_MemberServiceV3__GetMemberIDResponse*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetMemberIDResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID:
		if (p->size < 0)
			delete (_MemberServiceV3__GetTagID*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse:
		if (p->size < 0)
			delete (_MemberServiceV3__GetTagIDResponse*)p->ptr;
		else
			delete[] (_MemberServiceV3__GetTagIDResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword:
		if (p->size < 0)
			delete (_MemberServiceV3__RemindPassword*)p->ptr;
		else
			delete[] (_MemberServiceV3__RemindPassword*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse:
		if (p->size < 0)
			delete (_MemberServiceV3__RemindPasswordResponse*)p->ptr;
		else
			delete[] (_MemberServiceV3__RemindPasswordResponse*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__CheckUserExists:
		if (p->size < 0)
			delete (struct __MemberServiceV32__CheckUserExists*)p->ptr;
		else
			delete[] (struct __MemberServiceV32__CheckUserExists*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetEncryptionKey:
		if (p->size < 0)
			delete (struct __MemberServiceV32__GetEncryptionKey*)p->ptr;
		else
			delete[] (struct __MemberServiceV32__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetMemberID:
		if (p->size < 0)
			delete (struct __MemberServiceV32__GetMemberID*)p->ptr;
		else
			delete[] (struct __MemberServiceV32__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetTagID:
		if (p->size < 0)
			delete (struct __MemberServiceV32__GetTagID*)p->ptr;
		else
			delete[] (struct __MemberServiceV32__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__RemindPassword:
		if (p->size < 0)
			delete (struct __MemberServiceV32__RemindPassword*)p->ptr;
		else
			delete[] (struct __MemberServiceV32__RemindPassword*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__CheckUserExists:
		if (p->size < 0)
			delete (struct __MemberServiceV33__CheckUserExists*)p->ptr;
		else
			delete[] (struct __MemberServiceV33__CheckUserExists*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetEncryptionKey:
		if (p->size < 0)
			delete (struct __MemberServiceV33__GetEncryptionKey*)p->ptr;
		else
			delete[] (struct __MemberServiceV33__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetMemberID:
		if (p->size < 0)
			delete (struct __MemberServiceV33__GetMemberID*)p->ptr;
		else
			delete[] (struct __MemberServiceV33__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetTagID:
		if (p->size < 0)
			delete (struct __MemberServiceV33__GetTagID*)p->ptr;
		else
			delete[] (struct __MemberServiceV33__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__RemindPassword:
		if (p->size < 0)
			delete (struct __MemberServiceV33__RemindPassword*)p->ptr;
		else
			delete[] (struct __MemberServiceV33__RemindPassword*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{	switch (tt)
	{
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_WS_MemberService_v3_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_WS_MemberService_v3_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_WS_MemberService_v3_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_WS_MemberService_v3_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_std__string);
	if (soap_out_std__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_WS_MemberService_v3_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_MemberService_v3_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
			if ((t = soap_string_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_WS_MemberService_v3_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_WS_MemberService_v3_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC5 std::string * SOAP_FMAC6 soap_new_std__string(struct soap *soap, int n)
{	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_std__string(struct soap *soap, std::string *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new std::string;
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)new std::string[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::string);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::string*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

void _MemberServiceV3__RemindPasswordResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _MemberServiceV3__RemindPasswordResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _MemberServiceV3__RemindPasswordResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__RemindPasswordResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__RemindPasswordResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__RemindPasswordResponse(struct soap *soap, const char *tag, int id, const _MemberServiceV3__RemindPasswordResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__RemindPasswordResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__RemindPasswordResponse(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPasswordResponse * SOAP_FMAC4 soap_get__MemberServiceV3__RemindPasswordResponse(struct soap *soap, _MemberServiceV3__RemindPasswordResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__RemindPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__RemindPasswordResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__RemindPasswordResponse(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPasswordResponse * SOAP_FMAC4 soap_in__MemberServiceV3__RemindPasswordResponse(struct soap *soap, const char *tag, _MemberServiceV3__RemindPasswordResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__RemindPasswordResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse, sizeof(_MemberServiceV3__RemindPasswordResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__RemindPasswordResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__RemindPasswordResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse, 0, sizeof(_MemberServiceV3__RemindPasswordResponse), 0, soap_copy__MemberServiceV3__RemindPasswordResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__RemindPasswordResponse * SOAP_FMAC6 soap_new__MemberServiceV3__RemindPasswordResponse(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__RemindPasswordResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__RemindPasswordResponse(struct soap *soap, _MemberServiceV3__RemindPasswordResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__RemindPasswordResponse * SOAP_FMAC4 soap_instantiate__MemberServiceV3__RemindPasswordResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__RemindPasswordResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__RemindPasswordResponse;
		if (size)
			*size = sizeof(_MemberServiceV3__RemindPasswordResponse);
		((_MemberServiceV3__RemindPasswordResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__RemindPasswordResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__RemindPasswordResponse);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__RemindPasswordResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__RemindPasswordResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__RemindPasswordResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__RemindPasswordResponse %p -> %p\n", q, p));
	*(_MemberServiceV3__RemindPasswordResponse*)p = *(_MemberServiceV3__RemindPasswordResponse*)q;
}

void _MemberServiceV3__RemindPassword::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__RemindPassword::emailAddress = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__RemindPassword::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__RemindPassword::emailAddress);
	/* transient soap skipped */
}

int _MemberServiceV3__RemindPassword::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__RemindPassword::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__RemindPassword(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__RemindPassword(struct soap *soap, const char *tag, int id, const _MemberServiceV3__RemindPassword *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:emailAddress", -1, &(a->_MemberServiceV3__RemindPassword::emailAddress), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__RemindPassword::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__RemindPassword(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPassword * SOAP_FMAC4 soap_get__MemberServiceV3__RemindPassword(struct soap *soap, _MemberServiceV3__RemindPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__RemindPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__RemindPassword::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__RemindPassword(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPassword * SOAP_FMAC4 soap_in__MemberServiceV3__RemindPassword(struct soap *soap, const char *tag, _MemberServiceV3__RemindPassword *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__RemindPassword *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword, sizeof(_MemberServiceV3__RemindPassword), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__RemindPassword *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_emailAddress1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_emailAddress1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:emailAddress", &(a->_MemberServiceV3__RemindPassword::emailAddress), "xsd:string"))
				{	soap_flag_emailAddress1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__RemindPassword *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword, 0, sizeof(_MemberServiceV3__RemindPassword), 0, soap_copy__MemberServiceV3__RemindPassword);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__RemindPassword * SOAP_FMAC6 soap_new__MemberServiceV3__RemindPassword(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__RemindPassword(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__RemindPassword(struct soap *soap, _MemberServiceV3__RemindPassword *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__RemindPassword * SOAP_FMAC4 soap_instantiate__MemberServiceV3__RemindPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__RemindPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__RemindPassword;
		if (size)
			*size = sizeof(_MemberServiceV3__RemindPassword);
		((_MemberServiceV3__RemindPassword*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__RemindPassword[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__RemindPassword);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__RemindPassword*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__RemindPassword*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__RemindPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__RemindPassword %p -> %p\n", q, p));
	*(_MemberServiceV3__RemindPassword*)p = *(_MemberServiceV3__RemindPassword*)q;
}

void _MemberServiceV3__GetTagIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetTagIDResponse::GetTagIDResult = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetTagIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetTagIDResponse::GetTagIDResult);
	/* transient soap skipped */
}

int _MemberServiceV3__GetTagIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetTagIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetTagIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetTagIDResponse(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetTagIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse), type))
		return soap->error;
	if (a->GetTagIDResult)
		soap_element_result(soap, "MemberServiceV3:GetTagIDResult");
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:GetTagIDResult", -1, &(a->_MemberServiceV3__GetTagIDResponse::GetTagIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetTagIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetTagIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagIDResponse * SOAP_FMAC4 soap_get__MemberServiceV3__GetTagIDResponse(struct soap *soap, _MemberServiceV3__GetTagIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetTagIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetTagIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetTagIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagIDResponse * SOAP_FMAC4 soap_in__MemberServiceV3__GetTagIDResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetTagIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetTagIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse, sizeof(_MemberServiceV3__GetTagIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetTagIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTagIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTagIDResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:GetTagIDResult", &(a->_MemberServiceV3__GetTagIDResponse::GetTagIDResult), "xsd:string"))
				{	soap_flag_GetTagIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "MemberServiceV3:GetTagIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetTagIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse, 0, sizeof(_MemberServiceV3__GetTagIDResponse), 0, soap_copy__MemberServiceV3__GetTagIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetTagIDResponse * SOAP_FMAC6 soap_new__MemberServiceV3__GetTagIDResponse(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetTagIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetTagIDResponse(struct soap *soap, _MemberServiceV3__GetTagIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetTagIDResponse * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetTagIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetTagIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetTagIDResponse;
		if (size)
			*size = sizeof(_MemberServiceV3__GetTagIDResponse);
		((_MemberServiceV3__GetTagIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetTagIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetTagIDResponse);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetTagIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetTagIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetTagIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetTagIDResponse %p -> %p\n", q, p));
	*(_MemberServiceV3__GetTagIDResponse*)p = *(_MemberServiceV3__GetTagIDResponse*)q;
}

void _MemberServiceV3__GetTagID::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetTagID::nickname = NULL;
	this->_MemberServiceV3__GetTagID::password = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetTagID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetTagID::nickname);
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetTagID::password);
	/* transient soap skipped */
}

int _MemberServiceV3__GetTagID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetTagID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetTagID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetTagID(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetTagID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:nickname", -1, &(a->_MemberServiceV3__GetTagID::nickname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:password", -1, &(a->_MemberServiceV3__GetTagID::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetTagID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetTagID(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagID * SOAP_FMAC4 soap_get__MemberServiceV3__GetTagID(struct soap *soap, _MemberServiceV3__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetTagID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetTagID(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagID * SOAP_FMAC4 soap_in__MemberServiceV3__GetTagID(struct soap *soap, const char *tag, _MemberServiceV3__GetTagID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetTagID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID, sizeof(_MemberServiceV3__GetTagID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetTagID *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_nickname1 = 1, soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nickname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:nickname", &(a->_MemberServiceV3__GetTagID::nickname), "xsd:string"))
				{	soap_flag_nickname1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:password", &(a->_MemberServiceV3__GetTagID::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetTagID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID, 0, sizeof(_MemberServiceV3__GetTagID), 0, soap_copy__MemberServiceV3__GetTagID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetTagID * SOAP_FMAC6 soap_new__MemberServiceV3__GetTagID(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetTagID(struct soap *soap, _MemberServiceV3__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetTagID * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetTagID;
		if (size)
			*size = sizeof(_MemberServiceV3__GetTagID);
		((_MemberServiceV3__GetTagID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetTagID);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetTagID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetTagID %p -> %p\n", q, p));
	*(_MemberServiceV3__GetTagID*)p = *(_MemberServiceV3__GetTagID*)q;
}

void _MemberServiceV3__GetMemberIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetMemberIDResponse::GetMemberIDResult = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetMemberIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetMemberIDResponse::GetMemberIDResult);
	/* transient soap skipped */
}

int _MemberServiceV3__GetMemberIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetMemberIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetMemberIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetMemberIDResponse(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetMemberIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse), type))
		return soap->error;
	if (a->GetMemberIDResult)
		soap_element_result(soap, "MemberServiceV3:GetMemberIDResult");
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:GetMemberIDResult", -1, &(a->_MemberServiceV3__GetMemberIDResponse::GetMemberIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetMemberIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetMemberIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberIDResponse * SOAP_FMAC4 soap_get__MemberServiceV3__GetMemberIDResponse(struct soap *soap, _MemberServiceV3__GetMemberIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetMemberIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetMemberIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetMemberIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberIDResponse * SOAP_FMAC4 soap_in__MemberServiceV3__GetMemberIDResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetMemberIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetMemberIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse, sizeof(_MemberServiceV3__GetMemberIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetMemberIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetMemberIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMemberIDResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:GetMemberIDResult", &(a->_MemberServiceV3__GetMemberIDResponse::GetMemberIDResult), "xsd:string"))
				{	soap_flag_GetMemberIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "MemberServiceV3:GetMemberIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetMemberIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse, 0, sizeof(_MemberServiceV3__GetMemberIDResponse), 0, soap_copy__MemberServiceV3__GetMemberIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetMemberIDResponse * SOAP_FMAC6 soap_new__MemberServiceV3__GetMemberIDResponse(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetMemberIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetMemberIDResponse(struct soap *soap, _MemberServiceV3__GetMemberIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberIDResponse * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetMemberIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetMemberIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetMemberIDResponse;
		if (size)
			*size = sizeof(_MemberServiceV3__GetMemberIDResponse);
		((_MemberServiceV3__GetMemberIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetMemberIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetMemberIDResponse);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetMemberIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetMemberIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetMemberIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetMemberIDResponse %p -> %p\n", q, p));
	*(_MemberServiceV3__GetMemberIDResponse*)p = *(_MemberServiceV3__GetMemberIDResponse*)q;
}

void _MemberServiceV3__GetMemberID::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetMemberID::nickname = NULL;
	this->_MemberServiceV3__GetMemberID::password = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetMemberID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetMemberID::nickname);
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetMemberID::password);
	/* transient soap skipped */
}

int _MemberServiceV3__GetMemberID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetMemberID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetMemberID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetMemberID(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetMemberID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:nickname", -1, &(a->_MemberServiceV3__GetMemberID::nickname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:password", -1, &(a->_MemberServiceV3__GetMemberID::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetMemberID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetMemberID(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberID * SOAP_FMAC4 soap_get__MemberServiceV3__GetMemberID(struct soap *soap, _MemberServiceV3__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetMemberID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetMemberID(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberID * SOAP_FMAC4 soap_in__MemberServiceV3__GetMemberID(struct soap *soap, const char *tag, _MemberServiceV3__GetMemberID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetMemberID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID, sizeof(_MemberServiceV3__GetMemberID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetMemberID *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_nickname1 = 1, soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nickname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:nickname", &(a->_MemberServiceV3__GetMemberID::nickname), "xsd:string"))
				{	soap_flag_nickname1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:password", &(a->_MemberServiceV3__GetMemberID::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetMemberID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID, 0, sizeof(_MemberServiceV3__GetMemberID), 0, soap_copy__MemberServiceV3__GetMemberID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetMemberID * SOAP_FMAC6 soap_new__MemberServiceV3__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetMemberID(struct soap *soap, _MemberServiceV3__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberID * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetMemberID;
		if (size)
			*size = sizeof(_MemberServiceV3__GetMemberID);
		((_MemberServiceV3__GetMemberID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetMemberID);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetMemberID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetMemberID %p -> %p\n", q, p));
	*(_MemberServiceV3__GetMemberID*)p = *(_MemberServiceV3__GetMemberID*)q;
}

void _MemberServiceV3__GetEncryptionKeyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetEncryptionKeyResponse::GetEncryptionKeyResult = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetEncryptionKeyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetEncryptionKeyResponse::GetEncryptionKeyResult);
	/* transient soap skipped */
}

int _MemberServiceV3__GetEncryptionKeyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetEncryptionKeyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetEncryptionKeyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetEncryptionKeyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse), type))
		return soap->error;
	if (a->GetEncryptionKeyResult)
		soap_element_result(soap, "MemberServiceV3:GetEncryptionKeyResult");
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:GetEncryptionKeyResult", -1, &(a->_MemberServiceV3__GetEncryptionKeyResponse::GetEncryptionKeyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetEncryptionKeyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetEncryptionKeyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKeyResponse * SOAP_FMAC4 soap_get__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, _MemberServiceV3__GetEncryptionKeyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetEncryptionKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetEncryptionKeyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetEncryptionKeyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKeyResponse * SOAP_FMAC4 soap_in__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetEncryptionKeyResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetEncryptionKeyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse, sizeof(_MemberServiceV3__GetEncryptionKeyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetEncryptionKeyResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetEncryptionKeyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetEncryptionKeyResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:GetEncryptionKeyResult", &(a->_MemberServiceV3__GetEncryptionKeyResponse::GetEncryptionKeyResult), "xsd:string"))
				{	soap_flag_GetEncryptionKeyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "MemberServiceV3:GetEncryptionKeyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetEncryptionKeyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse, 0, sizeof(_MemberServiceV3__GetEncryptionKeyResponse), 0, soap_copy__MemberServiceV3__GetEncryptionKeyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetEncryptionKeyResponse * SOAP_FMAC6 soap_new__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetEncryptionKeyResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, _MemberServiceV3__GetEncryptionKeyResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKeyResponse * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetEncryptionKeyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetEncryptionKeyResponse;
		if (size)
			*size = sizeof(_MemberServiceV3__GetEncryptionKeyResponse);
		((_MemberServiceV3__GetEncryptionKeyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetEncryptionKeyResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetEncryptionKeyResponse);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetEncryptionKeyResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetEncryptionKeyResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetEncryptionKeyResponse %p -> %p\n", q, p));
	*(_MemberServiceV3__GetEncryptionKeyResponse*)p = *(_MemberServiceV3__GetEncryptionKeyResponse*)q;
}

void _MemberServiceV3__GetEncryptionKey::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__GetEncryptionKey::nickname = NULL;
	this->_MemberServiceV3__GetEncryptionKey::password = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__GetEncryptionKey::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetEncryptionKey::nickname);
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__GetEncryptionKey::password);
	/* transient soap skipped */
}

int _MemberServiceV3__GetEncryptionKey::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__GetEncryptionKey::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__GetEncryptionKey(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__GetEncryptionKey(struct soap *soap, const char *tag, int id, const _MemberServiceV3__GetEncryptionKey *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:nickname", -1, &(a->_MemberServiceV3__GetEncryptionKey::nickname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:password", -1, &(a->_MemberServiceV3__GetEncryptionKey::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__GetEncryptionKey::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__GetEncryptionKey(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKey * SOAP_FMAC4 soap_get__MemberServiceV3__GetEncryptionKey(struct soap *soap, _MemberServiceV3__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__GetEncryptionKey::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__GetEncryptionKey(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKey * SOAP_FMAC4 soap_in__MemberServiceV3__GetEncryptionKey(struct soap *soap, const char *tag, _MemberServiceV3__GetEncryptionKey *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__GetEncryptionKey *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey, sizeof(_MemberServiceV3__GetEncryptionKey), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__GetEncryptionKey *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_nickname1 = 1, soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nickname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:nickname", &(a->_MemberServiceV3__GetEncryptionKey::nickname), "xsd:string"))
				{	soap_flag_nickname1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:password", &(a->_MemberServiceV3__GetEncryptionKey::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__GetEncryptionKey *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey, 0, sizeof(_MemberServiceV3__GetEncryptionKey), 0, soap_copy__MemberServiceV3__GetEncryptionKey);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__GetEncryptionKey * SOAP_FMAC6 soap_new__MemberServiceV3__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__GetEncryptionKey(struct soap *soap, _MemberServiceV3__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKey * SOAP_FMAC4 soap_instantiate__MemberServiceV3__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__GetEncryptionKey;
		if (size)
			*size = sizeof(_MemberServiceV3__GetEncryptionKey);
		((_MemberServiceV3__GetEncryptionKey*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__GetEncryptionKey);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__GetEncryptionKey*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__GetEncryptionKey %p -> %p\n", q, p));
	*(_MemberServiceV3__GetEncryptionKey*)p = *(_MemberServiceV3__GetEncryptionKey*)q;
}

void _MemberServiceV3__CheckUserExistsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_MemberServiceV3__CheckUserExistsResponse::CheckUserExistsResult);
	/* transient soap skipped */
}

void _MemberServiceV3__CheckUserExistsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _MemberServiceV3__CheckUserExistsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__CheckUserExistsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__CheckUserExistsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, const char *tag, int id, const _MemberServiceV3__CheckUserExistsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse), type))
		return soap->error;
	soap_element_result(soap, "MemberServiceV3:CheckUserExistsResult");
	if (soap_out_bool(soap, "MemberServiceV3:CheckUserExistsResult", -1, &(a->_MemberServiceV3__CheckUserExistsResponse::CheckUserExistsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__CheckUserExistsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__CheckUserExistsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExistsResponse * SOAP_FMAC4 soap_get__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, _MemberServiceV3__CheckUserExistsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__CheckUserExistsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__CheckUserExistsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__CheckUserExistsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExistsResponse * SOAP_FMAC4 soap_in__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, const char *tag, _MemberServiceV3__CheckUserExistsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__CheckUserExistsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse, sizeof(_MemberServiceV3__CheckUserExistsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__CheckUserExistsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CheckUserExistsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CheckUserExistsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "MemberServiceV3:CheckUserExistsResult", &(a->_MemberServiceV3__CheckUserExistsResponse::CheckUserExistsResult), "xsd:boolean"))
				{	soap_flag_CheckUserExistsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "MemberServiceV3:CheckUserExistsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__CheckUserExistsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse, 0, sizeof(_MemberServiceV3__CheckUserExistsResponse), 0, soap_copy__MemberServiceV3__CheckUserExistsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CheckUserExistsResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__CheckUserExistsResponse * SOAP_FMAC6 soap_new__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__CheckUserExistsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, _MemberServiceV3__CheckUserExistsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExistsResponse * SOAP_FMAC4 soap_instantiate__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__CheckUserExistsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__CheckUserExistsResponse;
		if (size)
			*size = sizeof(_MemberServiceV3__CheckUserExistsResponse);
		((_MemberServiceV3__CheckUserExistsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__CheckUserExistsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__CheckUserExistsResponse);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__CheckUserExistsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__CheckUserExistsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__CheckUserExistsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__CheckUserExistsResponse %p -> %p\n", q, p));
	*(_MemberServiceV3__CheckUserExistsResponse*)p = *(_MemberServiceV3__CheckUserExistsResponse*)q;
}

void _MemberServiceV3__CheckUserExists::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_MemberServiceV3__CheckUserExists::nickname = NULL;
	this->_MemberServiceV3__CheckUserExists::password = NULL;
	/* transient soap skipped */
}

void _MemberServiceV3__CheckUserExists::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__CheckUserExists::nickname);
	soap_serialize_PointerTostd__string(soap, &this->_MemberServiceV3__CheckUserExists::password);
	/* transient soap skipped */
}

int _MemberServiceV3__CheckUserExists::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _MemberServiceV3__CheckUserExists::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__MemberServiceV3__CheckUserExists(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__MemberServiceV3__CheckUserExists(struct soap *soap, const char *tag, int id, const _MemberServiceV3__CheckUserExists *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:nickname", -1, &(a->_MemberServiceV3__CheckUserExists::nickname), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "MemberServiceV3:password", -1, &(a->_MemberServiceV3__CheckUserExists::password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_MemberServiceV3__CheckUserExists::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__MemberServiceV3__CheckUserExists(soap, this, tag, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExists * SOAP_FMAC4 soap_get__MemberServiceV3__CheckUserExists(struct soap *soap, _MemberServiceV3__CheckUserExists *p, const char *tag, const char *type)
{
	if ((p = soap_in__MemberServiceV3__CheckUserExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_MemberServiceV3__CheckUserExists::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__MemberServiceV3__CheckUserExists(soap, tag, this, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExists * SOAP_FMAC4 soap_in__MemberServiceV3__CheckUserExists(struct soap *soap, const char *tag, _MemberServiceV3__CheckUserExists *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_MemberServiceV3__CheckUserExists *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists, sizeof(_MemberServiceV3__CheckUserExists), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_MemberServiceV3__CheckUserExists *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_nickname1 = 1, soap_flag_password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_nickname1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:nickname", &(a->_MemberServiceV3__CheckUserExists::nickname), "xsd:string"))
				{	soap_flag_nickname1--;
					continue;
				}
			if (soap_flag_password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "MemberServiceV3:password", &(a->_MemberServiceV3__CheckUserExists::password), "xsd:string"))
				{	soap_flag_password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_MemberServiceV3__CheckUserExists *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists, 0, sizeof(_MemberServiceV3__CheckUserExists), 0, soap_copy__MemberServiceV3__CheckUserExists);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _MemberServiceV3__CheckUserExists * SOAP_FMAC6 soap_new__MemberServiceV3__CheckUserExists(struct soap *soap, int n)
{	return soap_instantiate__MemberServiceV3__CheckUserExists(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__MemberServiceV3__CheckUserExists(struct soap *soap, _MemberServiceV3__CheckUserExists *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExists * SOAP_FMAC4 soap_instantiate__MemberServiceV3__CheckUserExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__MemberServiceV3__CheckUserExists(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _MemberServiceV3__CheckUserExists;
		if (size)
			*size = sizeof(_MemberServiceV3__CheckUserExists);
		((_MemberServiceV3__CheckUserExists*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _MemberServiceV3__CheckUserExists[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_MemberServiceV3__CheckUserExists);
		for (int i = 0; i < n; i++)
			((_MemberServiceV3__CheckUserExists*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_MemberServiceV3__CheckUserExists*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__MemberServiceV3__CheckUserExists(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _MemberServiceV3__CheckUserExists %p -> %p\n", q, p));
	*(_MemberServiceV3__CheckUserExists*)p = *(_MemberServiceV3__CheckUserExists*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV33__RemindPassword(struct soap *soap, struct __MemberServiceV33__RemindPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__RemindPassword = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV33__RemindPassword(struct soap *soap, const struct __MemberServiceV33__RemindPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__RemindPassword(soap, &a->MemberServiceV3__RemindPassword);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV33__RemindPassword(struct soap *soap, const struct __MemberServiceV33__RemindPassword *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV33__RemindPassword(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV33__RemindPassword(struct soap *soap, const char *tag, int id, const struct __MemberServiceV33__RemindPassword *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__RemindPassword(soap, "MemberServiceV3:RemindPassword", -1, &a->MemberServiceV3__RemindPassword, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV33__RemindPassword * SOAP_FMAC4 soap_get___MemberServiceV33__RemindPassword(struct soap *soap, struct __MemberServiceV33__RemindPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV33__RemindPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV33__RemindPassword * SOAP_FMAC4 soap_in___MemberServiceV33__RemindPassword(struct soap *soap, const char *tag, struct __MemberServiceV33__RemindPassword *a, const char *type)
{
	short soap_flag_MemberServiceV3__RemindPassword = 1;
	short soap_flag;
	a = (struct __MemberServiceV33__RemindPassword *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__RemindPassword, sizeof(struct __MemberServiceV33__RemindPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV33__RemindPassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__RemindPassword && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__RemindPassword(soap, "MemberServiceV3:RemindPassword", &a->MemberServiceV3__RemindPassword, ""))
				{	soap_flag_MemberServiceV3__RemindPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV33__RemindPassword * SOAP_FMAC6 soap_new___MemberServiceV33__RemindPassword(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV33__RemindPassword(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV33__RemindPassword(struct soap *soap, struct __MemberServiceV33__RemindPassword *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV33__RemindPassword * SOAP_FMAC4 soap_instantiate___MemberServiceV33__RemindPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV33__RemindPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__RemindPassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV33__RemindPassword;
		if (size)
			*size = sizeof(struct __MemberServiceV33__RemindPassword);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV33__RemindPassword[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV33__RemindPassword);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV33__RemindPassword*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV33__RemindPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV33__RemindPassword %p -> %p\n", q, p));
	*(struct __MemberServiceV33__RemindPassword*)p = *(struct __MemberServiceV33__RemindPassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV33__GetTagID(struct soap *soap, struct __MemberServiceV33__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetTagID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV33__GetTagID(struct soap *soap, const struct __MemberServiceV33__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetTagID(soap, &a->MemberServiceV3__GetTagID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV33__GetTagID(struct soap *soap, const struct __MemberServiceV33__GetTagID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV33__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV33__GetTagID(struct soap *soap, const char *tag, int id, const struct __MemberServiceV33__GetTagID *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetTagID(soap, "MemberServiceV3:GetTagID", -1, &a->MemberServiceV3__GetTagID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV33__GetTagID * SOAP_FMAC4 soap_get___MemberServiceV33__GetTagID(struct soap *soap, struct __MemberServiceV33__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV33__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV33__GetTagID * SOAP_FMAC4 soap_in___MemberServiceV33__GetTagID(struct soap *soap, const char *tag, struct __MemberServiceV33__GetTagID *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetTagID = 1;
	short soap_flag;
	a = (struct __MemberServiceV33__GetTagID *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetTagID, sizeof(struct __MemberServiceV33__GetTagID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV33__GetTagID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetTagID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetTagID(soap, "MemberServiceV3:GetTagID", &a->MemberServiceV3__GetTagID, ""))
				{	soap_flag_MemberServiceV3__GetTagID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV33__GetTagID * SOAP_FMAC6 soap_new___MemberServiceV33__GetTagID(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV33__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV33__GetTagID(struct soap *soap, struct __MemberServiceV33__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV33__GetTagID * SOAP_FMAC4 soap_instantiate___MemberServiceV33__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV33__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetTagID;
		if (size)
			*size = sizeof(struct __MemberServiceV33__GetTagID);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV33__GetTagID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV33__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV33__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV33__GetTagID %p -> %p\n", q, p));
	*(struct __MemberServiceV33__GetTagID*)p = *(struct __MemberServiceV33__GetTagID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV33__GetMemberID(struct soap *soap, struct __MemberServiceV33__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetMemberID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV33__GetMemberID(struct soap *soap, const struct __MemberServiceV33__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetMemberID(soap, &a->MemberServiceV3__GetMemberID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV33__GetMemberID(struct soap *soap, const struct __MemberServiceV33__GetMemberID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV33__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV33__GetMemberID(struct soap *soap, const char *tag, int id, const struct __MemberServiceV33__GetMemberID *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetMemberID(soap, "MemberServiceV3:GetMemberID", -1, &a->MemberServiceV3__GetMemberID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV33__GetMemberID * SOAP_FMAC4 soap_get___MemberServiceV33__GetMemberID(struct soap *soap, struct __MemberServiceV33__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV33__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV33__GetMemberID * SOAP_FMAC4 soap_in___MemberServiceV33__GetMemberID(struct soap *soap, const char *tag, struct __MemberServiceV33__GetMemberID *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetMemberID = 1;
	short soap_flag;
	a = (struct __MemberServiceV33__GetMemberID *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetMemberID, sizeof(struct __MemberServiceV33__GetMemberID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV33__GetMemberID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetMemberID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetMemberID(soap, "MemberServiceV3:GetMemberID", &a->MemberServiceV3__GetMemberID, ""))
				{	soap_flag_MemberServiceV3__GetMemberID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV33__GetMemberID * SOAP_FMAC6 soap_new___MemberServiceV33__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV33__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV33__GetMemberID(struct soap *soap, struct __MemberServiceV33__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV33__GetMemberID * SOAP_FMAC4 soap_instantiate___MemberServiceV33__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV33__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetMemberID;
		if (size)
			*size = sizeof(struct __MemberServiceV33__GetMemberID);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV33__GetMemberID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV33__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV33__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV33__GetMemberID %p -> %p\n", q, p));
	*(struct __MemberServiceV33__GetMemberID*)p = *(struct __MemberServiceV33__GetMemberID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV33__GetEncryptionKey(struct soap *soap, struct __MemberServiceV33__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetEncryptionKey = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV33__GetEncryptionKey(struct soap *soap, const struct __MemberServiceV33__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKey(soap, &a->MemberServiceV3__GetEncryptionKey);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV33__GetEncryptionKey(struct soap *soap, const struct __MemberServiceV33__GetEncryptionKey *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV33__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV33__GetEncryptionKey(struct soap *soap, const char *tag, int id, const struct __MemberServiceV33__GetEncryptionKey *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetEncryptionKey(soap, "MemberServiceV3:GetEncryptionKey", -1, &a->MemberServiceV3__GetEncryptionKey, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV33__GetEncryptionKey * SOAP_FMAC4 soap_get___MemberServiceV33__GetEncryptionKey(struct soap *soap, struct __MemberServiceV33__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV33__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV33__GetEncryptionKey * SOAP_FMAC4 soap_in___MemberServiceV33__GetEncryptionKey(struct soap *soap, const char *tag, struct __MemberServiceV33__GetEncryptionKey *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetEncryptionKey = 1;
	short soap_flag;
	a = (struct __MemberServiceV33__GetEncryptionKey *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetEncryptionKey, sizeof(struct __MemberServiceV33__GetEncryptionKey), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV33__GetEncryptionKey(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetEncryptionKey && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetEncryptionKey(soap, "MemberServiceV3:GetEncryptionKey", &a->MemberServiceV3__GetEncryptionKey, ""))
				{	soap_flag_MemberServiceV3__GetEncryptionKey--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV33__GetEncryptionKey * SOAP_FMAC6 soap_new___MemberServiceV33__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV33__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV33__GetEncryptionKey(struct soap *soap, struct __MemberServiceV33__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV33__GetEncryptionKey * SOAP_FMAC4 soap_instantiate___MemberServiceV33__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV33__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetEncryptionKey;
		if (size)
			*size = sizeof(struct __MemberServiceV33__GetEncryptionKey);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV33__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV33__GetEncryptionKey);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV33__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV33__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV33__GetEncryptionKey %p -> %p\n", q, p));
	*(struct __MemberServiceV33__GetEncryptionKey*)p = *(struct __MemberServiceV33__GetEncryptionKey*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV33__CheckUserExists(struct soap *soap, struct __MemberServiceV33__CheckUserExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__CheckUserExists = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV33__CheckUserExists(struct soap *soap, const struct __MemberServiceV33__CheckUserExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__CheckUserExists(soap, &a->MemberServiceV3__CheckUserExists);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV33__CheckUserExists(struct soap *soap, const struct __MemberServiceV33__CheckUserExists *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV33__CheckUserExists(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV33__CheckUserExists(struct soap *soap, const char *tag, int id, const struct __MemberServiceV33__CheckUserExists *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__CheckUserExists(soap, "MemberServiceV3:CheckUserExists", -1, &a->MemberServiceV3__CheckUserExists, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV33__CheckUserExists * SOAP_FMAC4 soap_get___MemberServiceV33__CheckUserExists(struct soap *soap, struct __MemberServiceV33__CheckUserExists *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV33__CheckUserExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV33__CheckUserExists * SOAP_FMAC4 soap_in___MemberServiceV33__CheckUserExists(struct soap *soap, const char *tag, struct __MemberServiceV33__CheckUserExists *a, const char *type)
{
	short soap_flag_MemberServiceV3__CheckUserExists = 1;
	short soap_flag;
	a = (struct __MemberServiceV33__CheckUserExists *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__CheckUserExists, sizeof(struct __MemberServiceV33__CheckUserExists), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV33__CheckUserExists(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__CheckUserExists && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__CheckUserExists(soap, "MemberServiceV3:CheckUserExists", &a->MemberServiceV3__CheckUserExists, ""))
				{	soap_flag_MemberServiceV3__CheckUserExists--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV33__CheckUserExists * SOAP_FMAC6 soap_new___MemberServiceV33__CheckUserExists(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV33__CheckUserExists(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV33__CheckUserExists(struct soap *soap, struct __MemberServiceV33__CheckUserExists *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV33__CheckUserExists * SOAP_FMAC4 soap_instantiate___MemberServiceV33__CheckUserExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV33__CheckUserExists(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV33__CheckUserExists, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV33__CheckUserExists;
		if (size)
			*size = sizeof(struct __MemberServiceV33__CheckUserExists);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV33__CheckUserExists[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV33__CheckUserExists);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV33__CheckUserExists*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV33__CheckUserExists(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV33__CheckUserExists %p -> %p\n", q, p));
	*(struct __MemberServiceV33__CheckUserExists*)p = *(struct __MemberServiceV33__CheckUserExists*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV32__RemindPassword(struct soap *soap, struct __MemberServiceV32__RemindPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__RemindPassword = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV32__RemindPassword(struct soap *soap, const struct __MemberServiceV32__RemindPassword *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__RemindPassword(soap, &a->MemberServiceV3__RemindPassword);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV32__RemindPassword(struct soap *soap, const struct __MemberServiceV32__RemindPassword *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV32__RemindPassword(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV32__RemindPassword(struct soap *soap, const char *tag, int id, const struct __MemberServiceV32__RemindPassword *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__RemindPassword(soap, "MemberServiceV3:RemindPassword", -1, &a->MemberServiceV3__RemindPassword, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV32__RemindPassword * SOAP_FMAC4 soap_get___MemberServiceV32__RemindPassword(struct soap *soap, struct __MemberServiceV32__RemindPassword *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV32__RemindPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV32__RemindPassword * SOAP_FMAC4 soap_in___MemberServiceV32__RemindPassword(struct soap *soap, const char *tag, struct __MemberServiceV32__RemindPassword *a, const char *type)
{
	short soap_flag_MemberServiceV3__RemindPassword = 1;
	short soap_flag;
	a = (struct __MemberServiceV32__RemindPassword *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__RemindPassword, sizeof(struct __MemberServiceV32__RemindPassword), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV32__RemindPassword(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__RemindPassword && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__RemindPassword(soap, "MemberServiceV3:RemindPassword", &a->MemberServiceV3__RemindPassword, ""))
				{	soap_flag_MemberServiceV3__RemindPassword--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV32__RemindPassword * SOAP_FMAC6 soap_new___MemberServiceV32__RemindPassword(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV32__RemindPassword(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV32__RemindPassword(struct soap *soap, struct __MemberServiceV32__RemindPassword *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV32__RemindPassword * SOAP_FMAC4 soap_instantiate___MemberServiceV32__RemindPassword(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV32__RemindPassword(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__RemindPassword, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV32__RemindPassword;
		if (size)
			*size = sizeof(struct __MemberServiceV32__RemindPassword);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV32__RemindPassword[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV32__RemindPassword);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV32__RemindPassword*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV32__RemindPassword(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV32__RemindPassword %p -> %p\n", q, p));
	*(struct __MemberServiceV32__RemindPassword*)p = *(struct __MemberServiceV32__RemindPassword*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV32__GetTagID(struct soap *soap, struct __MemberServiceV32__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetTagID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV32__GetTagID(struct soap *soap, const struct __MemberServiceV32__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetTagID(soap, &a->MemberServiceV3__GetTagID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV32__GetTagID(struct soap *soap, const struct __MemberServiceV32__GetTagID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV32__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV32__GetTagID(struct soap *soap, const char *tag, int id, const struct __MemberServiceV32__GetTagID *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetTagID(soap, "MemberServiceV3:GetTagID", -1, &a->MemberServiceV3__GetTagID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV32__GetTagID * SOAP_FMAC4 soap_get___MemberServiceV32__GetTagID(struct soap *soap, struct __MemberServiceV32__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV32__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV32__GetTagID * SOAP_FMAC4 soap_in___MemberServiceV32__GetTagID(struct soap *soap, const char *tag, struct __MemberServiceV32__GetTagID *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetTagID = 1;
	short soap_flag;
	a = (struct __MemberServiceV32__GetTagID *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetTagID, sizeof(struct __MemberServiceV32__GetTagID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV32__GetTagID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetTagID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetTagID(soap, "MemberServiceV3:GetTagID", &a->MemberServiceV3__GetTagID, ""))
				{	soap_flag_MemberServiceV3__GetTagID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV32__GetTagID * SOAP_FMAC6 soap_new___MemberServiceV32__GetTagID(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV32__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV32__GetTagID(struct soap *soap, struct __MemberServiceV32__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV32__GetTagID * SOAP_FMAC4 soap_instantiate___MemberServiceV32__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV32__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetTagID;
		if (size)
			*size = sizeof(struct __MemberServiceV32__GetTagID);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV32__GetTagID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV32__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV32__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV32__GetTagID %p -> %p\n", q, p));
	*(struct __MemberServiceV32__GetTagID*)p = *(struct __MemberServiceV32__GetTagID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV32__GetMemberID(struct soap *soap, struct __MemberServiceV32__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetMemberID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV32__GetMemberID(struct soap *soap, const struct __MemberServiceV32__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetMemberID(soap, &a->MemberServiceV3__GetMemberID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV32__GetMemberID(struct soap *soap, const struct __MemberServiceV32__GetMemberID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV32__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV32__GetMemberID(struct soap *soap, const char *tag, int id, const struct __MemberServiceV32__GetMemberID *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetMemberID(soap, "MemberServiceV3:GetMemberID", -1, &a->MemberServiceV3__GetMemberID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV32__GetMemberID * SOAP_FMAC4 soap_get___MemberServiceV32__GetMemberID(struct soap *soap, struct __MemberServiceV32__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV32__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV32__GetMemberID * SOAP_FMAC4 soap_in___MemberServiceV32__GetMemberID(struct soap *soap, const char *tag, struct __MemberServiceV32__GetMemberID *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetMemberID = 1;
	short soap_flag;
	a = (struct __MemberServiceV32__GetMemberID *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetMemberID, sizeof(struct __MemberServiceV32__GetMemberID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV32__GetMemberID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetMemberID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetMemberID(soap, "MemberServiceV3:GetMemberID", &a->MemberServiceV3__GetMemberID, ""))
				{	soap_flag_MemberServiceV3__GetMemberID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV32__GetMemberID * SOAP_FMAC6 soap_new___MemberServiceV32__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV32__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV32__GetMemberID(struct soap *soap, struct __MemberServiceV32__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV32__GetMemberID * SOAP_FMAC4 soap_instantiate___MemberServiceV32__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV32__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetMemberID;
		if (size)
			*size = sizeof(struct __MemberServiceV32__GetMemberID);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV32__GetMemberID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV32__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV32__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV32__GetMemberID %p -> %p\n", q, p));
	*(struct __MemberServiceV32__GetMemberID*)p = *(struct __MemberServiceV32__GetMemberID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV32__GetEncryptionKey(struct soap *soap, struct __MemberServiceV32__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__GetEncryptionKey = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV32__GetEncryptionKey(struct soap *soap, const struct __MemberServiceV32__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKey(soap, &a->MemberServiceV3__GetEncryptionKey);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV32__GetEncryptionKey(struct soap *soap, const struct __MemberServiceV32__GetEncryptionKey *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV32__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV32__GetEncryptionKey(struct soap *soap, const char *tag, int id, const struct __MemberServiceV32__GetEncryptionKey *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__GetEncryptionKey(soap, "MemberServiceV3:GetEncryptionKey", -1, &a->MemberServiceV3__GetEncryptionKey, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV32__GetEncryptionKey * SOAP_FMAC4 soap_get___MemberServiceV32__GetEncryptionKey(struct soap *soap, struct __MemberServiceV32__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV32__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV32__GetEncryptionKey * SOAP_FMAC4 soap_in___MemberServiceV32__GetEncryptionKey(struct soap *soap, const char *tag, struct __MemberServiceV32__GetEncryptionKey *a, const char *type)
{
	short soap_flag_MemberServiceV3__GetEncryptionKey = 1;
	short soap_flag;
	a = (struct __MemberServiceV32__GetEncryptionKey *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetEncryptionKey, sizeof(struct __MemberServiceV32__GetEncryptionKey), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV32__GetEncryptionKey(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__GetEncryptionKey && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__GetEncryptionKey(soap, "MemberServiceV3:GetEncryptionKey", &a->MemberServiceV3__GetEncryptionKey, ""))
				{	soap_flag_MemberServiceV3__GetEncryptionKey--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV32__GetEncryptionKey * SOAP_FMAC6 soap_new___MemberServiceV32__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV32__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV32__GetEncryptionKey(struct soap *soap, struct __MemberServiceV32__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV32__GetEncryptionKey * SOAP_FMAC4 soap_instantiate___MemberServiceV32__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV32__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetEncryptionKey;
		if (size)
			*size = sizeof(struct __MemberServiceV32__GetEncryptionKey);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV32__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV32__GetEncryptionKey);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV32__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV32__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV32__GetEncryptionKey %p -> %p\n", q, p));
	*(struct __MemberServiceV32__GetEncryptionKey*)p = *(struct __MemberServiceV32__GetEncryptionKey*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___MemberServiceV32__CheckUserExists(struct soap *soap, struct __MemberServiceV32__CheckUserExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->MemberServiceV3__CheckUserExists = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___MemberServiceV32__CheckUserExists(struct soap *soap, const struct __MemberServiceV32__CheckUserExists *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_MemberServiceV3__CheckUserExists(soap, &a->MemberServiceV3__CheckUserExists);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___MemberServiceV32__CheckUserExists(struct soap *soap, const struct __MemberServiceV32__CheckUserExists *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___MemberServiceV32__CheckUserExists(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___MemberServiceV32__CheckUserExists(struct soap *soap, const char *tag, int id, const struct __MemberServiceV32__CheckUserExists *a, const char *type)
{
	if (soap_out_PointerTo_MemberServiceV3__CheckUserExists(soap, "MemberServiceV3:CheckUserExists", -1, &a->MemberServiceV3__CheckUserExists, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __MemberServiceV32__CheckUserExists * SOAP_FMAC4 soap_get___MemberServiceV32__CheckUserExists(struct soap *soap, struct __MemberServiceV32__CheckUserExists *p, const char *tag, const char *type)
{
	if ((p = soap_in___MemberServiceV32__CheckUserExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __MemberServiceV32__CheckUserExists * SOAP_FMAC4 soap_in___MemberServiceV32__CheckUserExists(struct soap *soap, const char *tag, struct __MemberServiceV32__CheckUserExists *a, const char *type)
{
	short soap_flag_MemberServiceV3__CheckUserExists = 1;
	short soap_flag;
	a = (struct __MemberServiceV32__CheckUserExists *)soap_id_enter(soap, "", a, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__CheckUserExists, sizeof(struct __MemberServiceV32__CheckUserExists), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___MemberServiceV32__CheckUserExists(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_MemberServiceV3__CheckUserExists && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_MemberServiceV3__CheckUserExists(soap, "MemberServiceV3:CheckUserExists", &a->MemberServiceV3__CheckUserExists, ""))
				{	soap_flag_MemberServiceV3__CheckUserExists--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __MemberServiceV32__CheckUserExists * SOAP_FMAC6 soap_new___MemberServiceV32__CheckUserExists(struct soap *soap, int n)
{	return soap_instantiate___MemberServiceV32__CheckUserExists(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___MemberServiceV32__CheckUserExists(struct soap *soap, struct __MemberServiceV32__CheckUserExists *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __MemberServiceV32__CheckUserExists * SOAP_FMAC4 soap_instantiate___MemberServiceV32__CheckUserExists(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___MemberServiceV32__CheckUserExists(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_WS_MemberService_v3___MemberServiceV32__CheckUserExists, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __MemberServiceV32__CheckUserExists;
		if (size)
			*size = sizeof(struct __MemberServiceV32__CheckUserExists);
	}
	else
	{	cp->ptr = (void*)new struct __MemberServiceV32__CheckUserExists[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __MemberServiceV32__CheckUserExists);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __MemberServiceV32__CheckUserExists*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___MemberServiceV32__CheckUserExists(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __MemberServiceV32__CheckUserExists %p -> %p\n", q, p));
	*(struct __MemberServiceV32__CheckUserExists*)p = *(struct __MemberServiceV32__CheckUserExists*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__RemindPasswordResponse(struct soap *soap, _MemberServiceV3__RemindPasswordResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__RemindPasswordResponse(struct soap *soap, _MemberServiceV3__RemindPasswordResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPasswordResponse);
	if (soap_out_PointerTo_MemberServiceV3__RemindPasswordResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__RemindPasswordResponse(struct soap *soap, const char *tag, int id, _MemberServiceV3__RemindPasswordResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPasswordResponse ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__RemindPasswordResponse(struct soap *soap, _MemberServiceV3__RemindPasswordResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__RemindPasswordResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__RemindPasswordResponse ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__RemindPasswordResponse(struct soap *soap, const char *tag, _MemberServiceV3__RemindPasswordResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__RemindPasswordResponse **)soap_malloc(soap, sizeof(_MemberServiceV3__RemindPasswordResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__RemindPasswordResponse *)soap_instantiate__MemberServiceV3__RemindPasswordResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__RemindPasswordResponse ** p = (_MemberServiceV3__RemindPasswordResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPasswordResponse, sizeof(_MemberServiceV3__RemindPasswordResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__RemindPassword(struct soap *soap, _MemberServiceV3__RemindPassword *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__RemindPassword(struct soap *soap, _MemberServiceV3__RemindPassword *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__RemindPassword);
	if (soap_out_PointerTo_MemberServiceV3__RemindPassword(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__RemindPassword(struct soap *soap, const char *tag, int id, _MemberServiceV3__RemindPassword *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__RemindPassword ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__RemindPassword(struct soap *soap, _MemberServiceV3__RemindPassword **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__RemindPassword(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__RemindPassword ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__RemindPassword(struct soap *soap, const char *tag, _MemberServiceV3__RemindPassword **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__RemindPassword **)soap_malloc(soap, sizeof(_MemberServiceV3__RemindPassword *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__RemindPassword *)soap_instantiate__MemberServiceV3__RemindPassword(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__RemindPassword ** p = (_MemberServiceV3__RemindPassword **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__RemindPassword, sizeof(_MemberServiceV3__RemindPassword), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetTagIDResponse(struct soap *soap, _MemberServiceV3__GetTagIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetTagIDResponse(struct soap *soap, _MemberServiceV3__GetTagIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagIDResponse);
	if (soap_out_PointerTo_MemberServiceV3__GetTagIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetTagIDResponse(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetTagIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagIDResponse ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetTagIDResponse(struct soap *soap, _MemberServiceV3__GetTagIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetTagIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetTagIDResponse ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetTagIDResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetTagIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetTagIDResponse **)soap_malloc(soap, sizeof(_MemberServiceV3__GetTagIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetTagIDResponse *)soap_instantiate__MemberServiceV3__GetTagIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetTagIDResponse ** p = (_MemberServiceV3__GetTagIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagIDResponse, sizeof(_MemberServiceV3__GetTagIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetTagID(struct soap *soap, _MemberServiceV3__GetTagID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetTagID(struct soap *soap, _MemberServiceV3__GetTagID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetTagID);
	if (soap_out_PointerTo_MemberServiceV3__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetTagID(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetTagID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetTagID ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetTagID(struct soap *soap, _MemberServiceV3__GetTagID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetTagID ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetTagID(struct soap *soap, const char *tag, _MemberServiceV3__GetTagID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetTagID **)soap_malloc(soap, sizeof(_MemberServiceV3__GetTagID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetTagID *)soap_instantiate__MemberServiceV3__GetTagID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetTagID ** p = (_MemberServiceV3__GetTagID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetTagID, sizeof(_MemberServiceV3__GetTagID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetMemberIDResponse(struct soap *soap, _MemberServiceV3__GetMemberIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetMemberIDResponse(struct soap *soap, _MemberServiceV3__GetMemberIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberIDResponse);
	if (soap_out_PointerTo_MemberServiceV3__GetMemberIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetMemberIDResponse(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetMemberIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberIDResponse ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetMemberIDResponse(struct soap *soap, _MemberServiceV3__GetMemberIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetMemberIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetMemberIDResponse ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetMemberIDResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetMemberIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetMemberIDResponse **)soap_malloc(soap, sizeof(_MemberServiceV3__GetMemberIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetMemberIDResponse *)soap_instantiate__MemberServiceV3__GetMemberIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetMemberIDResponse ** p = (_MemberServiceV3__GetMemberIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberIDResponse, sizeof(_MemberServiceV3__GetMemberIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetMemberID(struct soap *soap, _MemberServiceV3__GetMemberID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetMemberID(struct soap *soap, _MemberServiceV3__GetMemberID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetMemberID);
	if (soap_out_PointerTo_MemberServiceV3__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetMemberID(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetMemberID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetMemberID ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetMemberID(struct soap *soap, _MemberServiceV3__GetMemberID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetMemberID ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetMemberID(struct soap *soap, const char *tag, _MemberServiceV3__GetMemberID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetMemberID **)soap_malloc(soap, sizeof(_MemberServiceV3__GetMemberID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetMemberID *)soap_instantiate__MemberServiceV3__GetMemberID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetMemberID ** p = (_MemberServiceV3__GetMemberID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetMemberID, sizeof(_MemberServiceV3__GetMemberID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, _MemberServiceV3__GetEncryptionKeyResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, _MemberServiceV3__GetEncryptionKeyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKeyResponse);
	if (soap_out_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetEncryptionKeyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKeyResponse ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, _MemberServiceV3__GetEncryptionKeyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKeyResponse ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetEncryptionKeyResponse(struct soap *soap, const char *tag, _MemberServiceV3__GetEncryptionKeyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetEncryptionKeyResponse **)soap_malloc(soap, sizeof(_MemberServiceV3__GetEncryptionKeyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetEncryptionKeyResponse *)soap_instantiate__MemberServiceV3__GetEncryptionKeyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetEncryptionKeyResponse ** p = (_MemberServiceV3__GetEncryptionKeyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKeyResponse, sizeof(_MemberServiceV3__GetEncryptionKeyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__GetEncryptionKey(struct soap *soap, _MemberServiceV3__GetEncryptionKey *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__GetEncryptionKey(struct soap *soap, _MemberServiceV3__GetEncryptionKey *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__GetEncryptionKey);
	if (soap_out_PointerTo_MemberServiceV3__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__GetEncryptionKey(struct soap *soap, const char *tag, int id, _MemberServiceV3__GetEncryptionKey *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKey ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__GetEncryptionKey(struct soap *soap, _MemberServiceV3__GetEncryptionKey **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__GetEncryptionKey ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__GetEncryptionKey(struct soap *soap, const char *tag, _MemberServiceV3__GetEncryptionKey **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__GetEncryptionKey **)soap_malloc(soap, sizeof(_MemberServiceV3__GetEncryptionKey *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__GetEncryptionKey *)soap_instantiate__MemberServiceV3__GetEncryptionKey(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__GetEncryptionKey ** p = (_MemberServiceV3__GetEncryptionKey **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__GetEncryptionKey, sizeof(_MemberServiceV3__GetEncryptionKey), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__CheckUserExistsResponse(struct soap *soap, _MemberServiceV3__CheckUserExistsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__CheckUserExistsResponse(struct soap *soap, _MemberServiceV3__CheckUserExistsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExistsResponse);
	if (soap_out_PointerTo_MemberServiceV3__CheckUserExistsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__CheckUserExistsResponse(struct soap *soap, const char *tag, int id, _MemberServiceV3__CheckUserExistsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExistsResponse ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__CheckUserExistsResponse(struct soap *soap, _MemberServiceV3__CheckUserExistsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__CheckUserExistsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExistsResponse ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__CheckUserExistsResponse(struct soap *soap, const char *tag, _MemberServiceV3__CheckUserExistsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__CheckUserExistsResponse **)soap_malloc(soap, sizeof(_MemberServiceV3__CheckUserExistsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__CheckUserExistsResponse *)soap_instantiate__MemberServiceV3__CheckUserExistsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__CheckUserExistsResponse ** p = (_MemberServiceV3__CheckUserExistsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExistsResponse, sizeof(_MemberServiceV3__CheckUserExistsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_MemberServiceV3__CheckUserExists(struct soap *soap, _MemberServiceV3__CheckUserExists *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_MemberServiceV3__CheckUserExists(struct soap *soap, _MemberServiceV3__CheckUserExists *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTo_MemberServiceV3__CheckUserExists);
	if (soap_out_PointerTo_MemberServiceV3__CheckUserExists(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_MemberServiceV3__CheckUserExists(struct soap *soap, const char *tag, int id, _MemberServiceV3__CheckUserExists *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExists ** SOAP_FMAC4 soap_get_PointerTo_MemberServiceV3__CheckUserExists(struct soap *soap, _MemberServiceV3__CheckUserExists **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_MemberServiceV3__CheckUserExists(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _MemberServiceV3__CheckUserExists ** SOAP_FMAC4 soap_in_PointerTo_MemberServiceV3__CheckUserExists(struct soap *soap, const char *tag, _MemberServiceV3__CheckUserExists **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_MemberServiceV3__CheckUserExists **)soap_malloc(soap, sizeof(_MemberServiceV3__CheckUserExists *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_MemberServiceV3__CheckUserExists *)soap_instantiate__MemberServiceV3__CheckUserExists(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_MemberServiceV3__CheckUserExists ** p = (_MemberServiceV3__CheckUserExists **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3__MemberServiceV3__CheckUserExists, sizeof(_MemberServiceV3__CheckUserExists), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3_std__string))
		soap_serialize_std__string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_WS_MemberService_v3_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_WS_MemberService_v3_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_MemberService_v3__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_MemberService_v3__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_WS_MemberService_v3_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_WS_MemberService_v3_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_WS_MemberService_v3_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_WS_MemberService_v3_string, 1, -1, -1);
}

} // namespace WS_MemberService_v3


/* End of WS_MemberService_v3C.cpp */
