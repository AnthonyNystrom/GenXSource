namespace WS_MemberServices {

/* .\wsdl-h\MemberServices.h
   Generated by wsdl2h 1.2.10 from .\wsdl\MemberServices.wsdl and typemap.dat
   2008-04-13 12:50:24 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.next2friends.com/                                               *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

Provides functionality to retrieve member-related data.
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import ".\..\gsoap-2.7.10\gsoap\import/stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

MemberServices = "http://www.next2friends.com/"

*/

//gsoap MemberServices schema namespace:	http://www.next2friends.com/
//gsoap MemberServices schema elementForm:	qualified
//gsoap MemberServices schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _MemberServices__GetEncryptionKey.
class _MemberServices__GetEncryptionKey;

//  Forward declaration of class _MemberServices__GetEncryptionKeyResponse.
class _MemberServices__GetEncryptionKeyResponse;

//  Forward declaration of class _MemberServices__GetMemberID.
class _MemberServices__GetMemberID;

//  Forward declaration of class _MemberServices__GetMemberIDResponse.
class _MemberServices__GetMemberIDResponse;

//  Forward declaration of class _MemberServices__GetTagID.
class _MemberServices__GetTagID;

//  Forward declaration of class _MemberServices__GetTagIDResponse.
class _MemberServices__GetTagIDResponse;

//  Forward declaration of class _MemberServices__CheckUserExists.
class _MemberServices__CheckUserExists;

//  Forward declaration of class _MemberServices__CheckUserExistsResponse.
class _MemberServices__CheckUserExistsResponse;


/// Element "http://www.next2friends.com/":GetEncryptionKey of complexType.

/// "http://www.next2friends.com/":GetEncryptionKey is a complexType.
class _MemberServices__GetEncryptionKey
{ public:
/// Element WebMemberID of type xs:string.
    std::string*                         WebMemberID                    0;	///< Optional element.
/// Element Password of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetEncryptionKeyResponse of complexType.

/// "http://www.next2friends.com/":GetEncryptionKeyResponse is a complexType.
class _MemberServices__GetEncryptionKeyResponse
{ public:
/// Element GetEncryptionKeyResult of type xs:string.
    std::string*                         GetEncryptionKeyResult         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetMemberID of complexType.

/// "http://www.next2friends.com/":GetMemberID is a complexType.
class _MemberServices__GetMemberID
{ public:
/// Element NickName of type xs:string.
    std::string*                         NickName                       0;	///< Optional element.
/// Element Password of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetMemberIDResponse of complexType.

/// "http://www.next2friends.com/":GetMemberIDResponse is a complexType.
class _MemberServices__GetMemberIDResponse
{ public:
/// Element GetMemberIDResult of type xs:string.
    std::string*                         GetMemberIDResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetTagID of complexType.

/// "http://www.next2friends.com/":GetTagID is a complexType.
class _MemberServices__GetTagID
{ public:
/// Element WebMemberID of type xs:string.
    std::string*                         WebMemberID                    0;	///< Optional element.
/// Element Password of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetTagIDResponse of complexType.

/// "http://www.next2friends.com/":GetTagIDResponse is a complexType.
class _MemberServices__GetTagIDResponse
{ public:
/// Element GetTagIDResult of type xs:string.
    std::string*                         GetTagIDResult                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":CheckUserExists of complexType.

/// "http://www.next2friends.com/":CheckUserExists is a complexType.
class _MemberServices__CheckUserExists
{ public:
/// Element NickName of type xs:string.
    std::string*                         NickName                       0;	///< Optional element.
/// Element Password of type xs:string.
    std::string*                         Password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":CheckUserExistsResponse of complexType.

/// "http://www.next2friends.com/":CheckUserExistsResponse is a complexType.
class _MemberServices__CheckUserExistsResponse
{ public:
/// Element CheckUserExistsResult of type xs:boolean.
    bool                                 CheckUserExistsResult          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// Element "http://www.next2friends.com/":string of type xs:string.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://www.next2friends.com/":boolean of type xs:boolean.
/// Note: use wsdl2h option -g to generate this global element declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap MemberServices2 service name:	MemberServicesSoap 
//gsoap MemberServices2 service type:	MemberServicesSoap 
//gsoap MemberServices2 service port:	http://next2friends.com:90/MemberServices.asmx 
//gsoap MemberServices2 service namespace:	http://www.next2friends.com/MemberServicesSoap 
//gsoap MemberServices2 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap MemberServices3 service name:	MemberServicesSoap12 
//gsoap MemberServices3 service type:	MemberServicesSoap 
//gsoap MemberServices3 service port:	http://next2friends.com:90/MemberServices.asmx 
//gsoap MemberServices3 service namespace:	http://www.next2friends.com/MemberServicesSoap12 
//gsoap MemberServices3 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
Provides functionality to retrieve member-related data.

@section Service_bindings Bindings
  - @ref MemberServicesSoap
  - @ref MemberServicesSoap12

*/

/**

@page MemberServicesSoap Binding "MemberServicesSoap"

@section MemberServices_service Service Documentation "MemberServices"
Provides functionality to retrieve member-related data.

@section MemberServicesSoap_operations Operations of Binding  "MemberServicesSoap"
  - @ref __MemberServices2__GetEncryptionKey
  - @ref __MemberServices2__GetMemberID
  - @ref __MemberServices2__GetTagID
  - @ref __MemberServices2__CheckUserExists

@section MemberServicesSoap_ports Endpoints of Binding  "MemberServicesSoap"
  - http://next2friends.com:90/MemberServices.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page MemberServicesSoap12 Binding "MemberServicesSoap12"

@section MemberServices_service Service Documentation "MemberServices"
Provides functionality to retrieve member-related data.

@section MemberServicesSoap12_operations Operations of Binding  "MemberServicesSoap12"
  - @ref __MemberServices3__GetEncryptionKey
  - @ref __MemberServices3__GetMemberID
  - @ref __MemberServices3__GetTagID
  - @ref __MemberServices3__CheckUserExists

@section MemberServicesSoap12_ports Endpoints of Binding  "MemberServicesSoap12"
  - http://next2friends.com:90/MemberServices.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * MemberServicesSoap                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __MemberServices2__GetEncryptionKey                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices2__GetEncryptionKey" of service binding "MemberServicesSoap"

/**

Operation details:

<p>Returns personal encryption key for the specified user.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>WebMemberID</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetEncryptionKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices2__GetEncryptionKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,
    // response parameters:
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices2__GetEncryptionKey(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,
    // response parameters:
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoapProxy.h):
  class MemberServicesSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices2 service method-style:	GetEncryptionKey document
//gsoap MemberServices2 service method-encoding:	GetEncryptionKey literal
//gsoap MemberServices2 service method-action:	GetEncryptionKey http://www.next2friends.com/GetEncryptionKey
int __MemberServices2__GetEncryptionKey(
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,	///< Request parameter
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices2__GetMemberID                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices2__GetMemberID" of service binding "MemberServicesSoap"

/**

Operation details:

<p>Returns the unique identifier for the specified user.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>NickName</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetMemberID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices2__GetMemberID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,
    // response parameters:
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices2__GetMemberID(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,
    // response parameters:
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoapProxy.h):
  class MemberServicesSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices2 service method-style:	GetMemberID document
//gsoap MemberServices2 service method-encoding:	GetMemberID literal
//gsoap MemberServices2 service method-action:	GetMemberID http://www.next2friends.com/GetMemberID
int __MemberServices2__GetMemberID(
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,	///< Request parameter
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices2__GetTagID                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices2__GetTagID" of service binding "MemberServicesSoap"

/**

Operation details:

<p>Returns the unique user identifier that used during tagging process.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>WebMemberID</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetTagID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices2__GetTagID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetTagID*          MemberServices__GetTagID,
    // response parameters:
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices2__GetTagID(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetTagID*          MemberServices__GetTagID,
    // response parameters:
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoapProxy.h):
  class MemberServicesSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices2 service method-style:	GetTagID document
//gsoap MemberServices2 service method-encoding:	GetTagID literal
//gsoap MemberServices2 service method-action:	GetTagID http://www.next2friends.com/GetTagID
int __MemberServices2__GetTagID(
    _MemberServices__GetTagID*          MemberServices__GetTagID,	///< Request parameter
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices2__CheckUserExists                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices2__CheckUserExists" of service binding "MemberServicesSoap"

/**

Operation details:

<p>Returns <tt>true</tt> if the user with the specified <tt>NickName</tt> and <tt>Password</tt> exists; otherwise, returns <tt>false</tt>.</p>
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/CheckUserExists"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices2__CheckUserExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,
    // response parameters:
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices2__CheckUserExists(
    struct soap *soap,
    // request parameters:
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,
    // response parameters:
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoapProxy.h):
  class MemberServicesSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices2 service method-style:	CheckUserExists document
//gsoap MemberServices2 service method-encoding:	CheckUserExists literal
//gsoap MemberServices2 service method-action:	CheckUserExists http://www.next2friends.com/CheckUserExists
int __MemberServices2__CheckUserExists(
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,	///< Request parameter
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * MemberServicesSoap12                                                       *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __MemberServices3__GetEncryptionKey                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices3__GetEncryptionKey" of service binding "MemberServicesSoap12"

/**

Operation details:

<p>Returns personal encryption key for the specified user.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>WebMemberID</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetEncryptionKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices3__GetEncryptionKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,
    // response parameters:
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices3__GetEncryptionKey(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,
    // response parameters:
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoap12Proxy.h):
  class MemberServicesSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices3 service method-style:	GetEncryptionKey document
//gsoap MemberServices3 service method-encoding:	GetEncryptionKey literal
//gsoap MemberServices3 service method-action:	GetEncryptionKey http://www.next2friends.com/GetEncryptionKey
int __MemberServices3__GetEncryptionKey(
    _MemberServices__GetEncryptionKey*  MemberServices__GetEncryptionKey,	///< Request parameter
    _MemberServices__GetEncryptionKeyResponse* MemberServices__GetEncryptionKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices3__GetMemberID                                             *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices3__GetMemberID" of service binding "MemberServicesSoap12"

/**

Operation details:

<p>Returns the unique identifier for the specified user.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>NickName</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetMemberID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices3__GetMemberID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,
    // response parameters:
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices3__GetMemberID(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,
    // response parameters:
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoap12Proxy.h):
  class MemberServicesSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices3 service method-style:	GetMemberID document
//gsoap MemberServices3 service method-encoding:	GetMemberID literal
//gsoap MemberServices3 service method-action:	GetMemberID http://www.next2friends.com/GetMemberID
int __MemberServices3__GetMemberID(
    _MemberServices__GetMemberID*       MemberServices__GetMemberID,	///< Request parameter
    _MemberServices__GetMemberIDResponse* MemberServices__GetMemberIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices3__GetTagID                                                *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices3__GetTagID" of service binding "MemberServicesSoap12"

/**

Operation details:

<p>Returns the unique user identifier that used during tagging process.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>WebMemberID</tt> is <tt>null</tt>, or if the specified <tt>Password</tt> is <tt>null</tt>.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetTagID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices3__GetTagID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__GetTagID*          MemberServices__GetTagID,
    // response parameters:
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices3__GetTagID(
    struct soap *soap,
    // request parameters:
    _MemberServices__GetTagID*          MemberServices__GetTagID,
    // response parameters:
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoap12Proxy.h):
  class MemberServicesSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices3 service method-style:	GetTagID document
//gsoap MemberServices3 service method-encoding:	GetTagID literal
//gsoap MemberServices3 service method-action:	GetTagID http://www.next2friends.com/GetTagID
int __MemberServices3__GetTagID(
    _MemberServices__GetTagID*          MemberServices__GetTagID,	///< Request parameter
    _MemberServices__GetTagIDResponse*  MemberServices__GetTagIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServices3__CheckUserExists                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServices3__CheckUserExists" of service binding "MemberServicesSoap12"

/**

Operation details:

<p>Returns <tt>true</tt> if the user with the specified <tt>NickName</tt> and <tt>Password</tt> exists; otherwise, returns <tt>false</tt>.</p>
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/CheckUserExists"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServices3__CheckUserExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,
    // response parameters:
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServices3__CheckUserExists(
    struct soap *soap,
    // request parameters:
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,
    // response parameters:
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse
  );
@endcode

C++ proxy class (defined in soapMemberServicesSoap12Proxy.h):
  class MemberServicesSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServices3 service method-style:	CheckUserExists document
//gsoap MemberServices3 service method-encoding:	CheckUserExists literal
//gsoap MemberServices3 service method-action:	CheckUserExists http://www.next2friends.com/CheckUserExists
int __MemberServices3__CheckUserExists(
    _MemberServices__CheckUserExists*   MemberServices__CheckUserExists,	///< Request parameter
    _MemberServices__CheckUserExistsResponse* MemberServices__CheckUserExistsResponse	///< Response parameter
);

/* End of .\wsdl-h\MemberServices.h */

}	// end of WS_MemberServices namespace

