namespace WS_MemberService_v3 {

/* .\wsdl-h\MemberService.V3.h
   Generated by wsdl2h 1.2.10 from .\wsdl\MemberService.V3.wsdl and typemap.dat
   2008-05-06 23:27:55 GMT
   Copyright (C) 2001-2008 Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL or Genivia's license for commercial use.
*/

/* NOTE:

 - Compile this file with soapcpp2 to complete the code generation process.
 - Use soapcpp2 option -I to specify paths for #import
   To build with STL, 'stlvector.h' is imported from 'import' dir in package.
 - Use wsdl2h options -c and -s to generate pure C code or C++ code without STL.
 - Use 'WS/typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Use Doxygen (www.doxygen.org) to browse this file.
 - Use wsdl2h option -l to view the software license terms.

   DO NOT include this file directly into your project.
   Include only the soapcpp2-generated headers and source code files.
*/

//gsoapopt w

/******************************************************************************\
 *                                                                            *
 * http://www.next2friends.com/                                               *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

Provides functionality to retrieve member-related data.
*/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


// STL vector containers (use option -s to disable)
#import ".\..\gsoap-2.7.10\gsoap\import/stlvector.h"

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

MemberServiceV3 = "http://www.next2friends.com/"

*/

//gsoap MemberServiceV3 schema namespace:	http://www.next2friends.com/
//gsoap MemberServiceV3 schema elementForm:	qualified
//gsoap MemberServiceV3 schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Schema Types                                                               *
 *                                                                            *
\******************************************************************************/



//  Forward declaration of class _MemberServiceV3__CheckUserExists.
class _MemberServiceV3__CheckUserExists;

//  Forward declaration of class _MemberServiceV3__CheckUserExistsResponse.
class _MemberServiceV3__CheckUserExistsResponse;

//  Forward declaration of class _MemberServiceV3__GetEncryptionKey.
class _MemberServiceV3__GetEncryptionKey;

//  Forward declaration of class _MemberServiceV3__GetEncryptionKeyResponse.
class _MemberServiceV3__GetEncryptionKeyResponse;

//  Forward declaration of class _MemberServiceV3__GetMemberID.
class _MemberServiceV3__GetMemberID;

//  Forward declaration of class _MemberServiceV3__GetMemberIDResponse.
class _MemberServiceV3__GetMemberIDResponse;

//  Forward declaration of class _MemberServiceV3__GetTagID.
class _MemberServiceV3__GetTagID;

//  Forward declaration of class _MemberServiceV3__GetTagIDResponse.
class _MemberServiceV3__GetTagIDResponse;

//  Forward declaration of class _MemberServiceV3__RemindPassword.
class _MemberServiceV3__RemindPassword;

//  Forward declaration of class _MemberServiceV3__RemindPasswordResponse.
class _MemberServiceV3__RemindPasswordResponse;


/// Element "http://www.next2friends.com/":CheckUserExists of complexType.

/// "http://www.next2friends.com/":CheckUserExists is a complexType.
class _MemberServiceV3__CheckUserExists
{ public:
/// Element nickname of type xs:string.
    std::string*                         nickname                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":CheckUserExistsResponse of complexType.

/// "http://www.next2friends.com/":CheckUserExistsResponse is a complexType.
class _MemberServiceV3__CheckUserExistsResponse
{ public:
/// Element CheckUserExistsResult of type xs:boolean.
    bool                                 CheckUserExistsResult          1;	///< Required element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetEncryptionKey of complexType.

/// "http://www.next2friends.com/":GetEncryptionKey is a complexType.
class _MemberServiceV3__GetEncryptionKey
{ public:
/// Element nickname of type xs:string.
    std::string*                         nickname                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetEncryptionKeyResponse of complexType.

/// "http://www.next2friends.com/":GetEncryptionKeyResponse is a complexType.
class _MemberServiceV3__GetEncryptionKeyResponse
{ public:
/// Element GetEncryptionKeyResult of type xs:string.
    std::string*                         GetEncryptionKeyResult         0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetMemberID of complexType.

/// "http://www.next2friends.com/":GetMemberID is a complexType.
class _MemberServiceV3__GetMemberID
{ public:
/// Element nickname of type xs:string.
    std::string*                         nickname                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetMemberIDResponse of complexType.

/// "http://www.next2friends.com/":GetMemberIDResponse is a complexType.
class _MemberServiceV3__GetMemberIDResponse
{ public:
/// Element GetMemberIDResult of type xs:string.
    std::string*                         GetMemberIDResult              0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetTagID of complexType.

/// "http://www.next2friends.com/":GetTagID is a complexType.
class _MemberServiceV3__GetTagID
{ public:
/// Element nickname of type xs:string.
    std::string*                         nickname                       0;	///< Optional element.
/// Element password of type xs:string.
    std::string*                         password                       0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":GetTagIDResponse of complexType.

/// "http://www.next2friends.com/":GetTagIDResponse is a complexType.
class _MemberServiceV3__GetTagIDResponse
{ public:
/// Element GetTagIDResult of type xs:string.
    std::string*                         GetTagIDResult                 0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":RemindPassword of complexType.

/// "http://www.next2friends.com/":RemindPassword is a complexType.
class _MemberServiceV3__RemindPassword
{ public:
/// Element emailAddress of type xs:string.
    std::string*                         emailAddress                   0;	///< Optional element.
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};


/// Element "http://www.next2friends.com/":RemindPasswordResponse of complexType.

/// "http://www.next2friends.com/":RemindPasswordResponse is a complexType.
class _MemberServiceV3__RemindPasswordResponse
{ public:
/// A handle to the soap struct that manages this instance (automatically set)
    struct soap                         *soap                          ;
};

/// Element "http://www.next2friends.com/":boolean of type xs:boolean.
/// Note: use wsdl2h option -g to generate this global element declaration.

/// Element "http://www.next2friends.com/":string of type xs:string.
/// Note: use wsdl2h option -g to generate this global element declaration.

/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/


//gsoap MemberServiceV32 service name:	MemberServiceSoap 
//gsoap MemberServiceV32 service type:	MemberServiceSoap 
//gsoap MemberServiceV32 service port:	http://next2friends.com:90/MemberService.asmx 
//gsoap MemberServiceV32 service namespace:	http://www.next2friends.com/MemberServiceSoap 
//gsoap MemberServiceV32 service transport:	http://schemas.xmlsoap.org/soap/http 

//gsoap MemberServiceV33 service name:	MemberServiceSoap12 
//gsoap MemberServiceV33 service type:	MemberServiceSoap 
//gsoap MemberServiceV33 service port:	http://next2friends.com:90/MemberService.asmx 
//gsoap MemberServiceV33 service namespace:	http://www.next2friends.com/MemberServiceSoap12 
//gsoap MemberServiceV33 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
Provides functionality to retrieve member-related data.

@section Service_bindings Bindings
  - @ref MemberServiceSoap
  - @ref MemberServiceSoap12

*/

/**

@page MemberServiceSoap Binding "MemberServiceSoap"

@section MemberService_service Service Documentation "MemberService"
Provides functionality to retrieve member-related data.

@section MemberServiceSoap_operations Operations of Binding  "MemberServiceSoap"
  - @ref __MemberServiceV32__CheckUserExists
  - @ref __MemberServiceV32__GetEncryptionKey
  - @ref __MemberServiceV32__GetMemberID
  - @ref __MemberServiceV32__GetTagID
  - @ref __MemberServiceV32__RemindPassword

@section MemberServiceSoap_ports Endpoints of Binding  "MemberServiceSoap"
  - http://next2friends.com:90/MemberService.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/**

@page MemberServiceSoap12 Binding "MemberServiceSoap12"

@section MemberService_service Service Documentation "MemberService"
Provides functionality to retrieve member-related data.

@section MemberServiceSoap12_operations Operations of Binding  "MemberServiceSoap12"
  - @ref __MemberServiceV33__CheckUserExists
  - @ref __MemberServiceV33__GetEncryptionKey
  - @ref __MemberServiceV33__GetMemberID
  - @ref __MemberServiceV33__GetTagID
  - @ref __MemberServiceV33__RemindPassword

@section MemberServiceSoap12_ports Endpoints of Binding  "MemberServiceSoap12"
  - http://next2friends.com:90/MemberService.asmx

Note: use wsdl2h option -N to change the service binding prefix name

*/

/******************************************************************************\
 *                                                                            *
 * MemberServiceSoap                                                          *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __MemberServiceV32__CheckUserExists                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV32__CheckUserExists" of service binding "MemberServiceSoap"

/**

Operation details:

<p>Returns <tt>true</tt> if the user with the specified <tt>nickname</tt> and <tt>password</tt> exists; otherwise, returns <tt>false</tt>.</p>
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/CheckUserExists"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV32__CheckUserExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,
    // response parameters:
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV32__CheckUserExists(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,
    // response parameters:
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoapProxy.h):
  class MemberServiceSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV32 service method-style:	CheckUserExists document
//gsoap MemberServiceV32 service method-encoding:	CheckUserExists literal
//gsoap MemberServiceV32 service method-action:	CheckUserExists http://www.next2friends.com/CheckUserExists
int __MemberServiceV32__CheckUserExists(
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,	///< Request parameter
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV32__GetEncryptionKey                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV32__GetEncryptionKey" of service binding "MemberServiceSoap"

/**

Operation details:

<p>Returns personal encryption key for the specified user.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetEncryptionKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV32__GetEncryptionKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,
    // response parameters:
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV32__GetEncryptionKey(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,
    // response parameters:
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoapProxy.h):
  class MemberServiceSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV32 service method-style:	GetEncryptionKey document
//gsoap MemberServiceV32 service method-encoding:	GetEncryptionKey literal
//gsoap MemberServiceV32 service method-action:	GetEncryptionKey http://www.next2friends.com/GetEncryptionKey
int __MemberServiceV32__GetEncryptionKey(
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,	///< Request parameter
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV32__GetMemberID                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV32__GetMemberID" of service binding "MemberServiceSoap"

/**

Operation details:

<p>Returns the unique identifier for the specified user.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetMemberID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV32__GetMemberID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,
    // response parameters:
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV32__GetMemberID(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,
    // response parameters:
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoapProxy.h):
  class MemberServiceSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV32 service method-style:	GetMemberID document
//gsoap MemberServiceV32 service method-encoding:	GetMemberID literal
//gsoap MemberServiceV32 service method-action:	GetMemberID http://www.next2friends.com/GetMemberID
int __MemberServiceV32__GetMemberID(
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,	///< Request parameter
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV32__GetTagID                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV32__GetTagID" of service binding "MemberServiceSoap"

/**

Operation details:

<p>Returns the unique user identifier that used during tagging process.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetTagID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV32__GetTagID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,
    // response parameters:
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV32__GetTagID(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,
    // response parameters:
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoapProxy.h):
  class MemberServiceSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV32 service method-style:	GetTagID document
//gsoap MemberServiceV32 service method-encoding:	GetTagID literal
//gsoap MemberServiceV32 service method-action:	GetTagID http://www.next2friends.com/GetTagID
int __MemberServiceV32__GetTagID(
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,	///< Request parameter
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV32__RemindPassword                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV32__RemindPassword" of service binding "MemberServiceSoap"

/**

Operation details:

<p>Sends the password to the user with the specified email.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>emailAddress</tt> is <tt>null</tt> or an empty string.<br/><tt>ArgumentException</tt> - If the user with the specified <tt>emailAddress</tt> does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/RemindPassword"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV32__RemindPassword(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,
    // response parameters:
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV32__RemindPassword(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,
    // response parameters:
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoapProxy.h):
  class MemberServiceSoap;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV32 service method-style:	RemindPassword document
//gsoap MemberServiceV32 service method-encoding:	RemindPassword literal
//gsoap MemberServiceV32 service method-action:	RemindPassword http://www.next2friends.com/RemindPassword
int __MemberServiceV32__RemindPassword(
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,	///< Request parameter
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * MemberServiceSoap12                                                        *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * __MemberServiceV33__CheckUserExists                                        *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV33__CheckUserExists" of service binding "MemberServiceSoap12"

/**

Operation details:

<p>Returns <tt>true</tt> if the user with the specified <tt>nickname</tt> and <tt>password</tt> exists; otherwise, returns <tt>false</tt>.</p>
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/CheckUserExists"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV33__CheckUserExists(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,
    // response parameters:
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV33__CheckUserExists(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,
    // response parameters:
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoap12Proxy.h):
  class MemberServiceSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV33 service method-style:	CheckUserExists document
//gsoap MemberServiceV33 service method-encoding:	CheckUserExists literal
//gsoap MemberServiceV33 service method-action:	CheckUserExists http://www.next2friends.com/CheckUserExists
int __MemberServiceV33__CheckUserExists(
    _MemberServiceV3__CheckUserExists*  MemberServiceV3__CheckUserExists,	///< Request parameter
    _MemberServiceV3__CheckUserExistsResponse* MemberServiceV3__CheckUserExistsResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV33__GetEncryptionKey                                       *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV33__GetEncryptionKey" of service binding "MemberServiceSoap12"

/**

Operation details:

<p>Returns personal encryption key for the specified user.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetEncryptionKey"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV33__GetEncryptionKey(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,
    // response parameters:
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV33__GetEncryptionKey(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,
    // response parameters:
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoap12Proxy.h):
  class MemberServiceSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV33 service method-style:	GetEncryptionKey document
//gsoap MemberServiceV33 service method-encoding:	GetEncryptionKey literal
//gsoap MemberServiceV33 service method-action:	GetEncryptionKey http://www.next2friends.com/GetEncryptionKey
int __MemberServiceV33__GetEncryptionKey(
    _MemberServiceV3__GetEncryptionKey* MemberServiceV3__GetEncryptionKey,	///< Request parameter
    _MemberServiceV3__GetEncryptionKeyResponse* MemberServiceV3__GetEncryptionKeyResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV33__GetMemberID                                            *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV33__GetMemberID" of service binding "MemberServiceSoap12"

/**

Operation details:

<p>Returns the unique identifier for the specified user.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetMemberID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV33__GetMemberID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,
    // response parameters:
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV33__GetMemberID(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,
    // response parameters:
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoap12Proxy.h):
  class MemberServiceSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV33 service method-style:	GetMemberID document
//gsoap MemberServiceV33 service method-encoding:	GetMemberID literal
//gsoap MemberServiceV33 service method-action:	GetMemberID http://www.next2friends.com/GetMemberID
int __MemberServiceV33__GetMemberID(
    _MemberServiceV3__GetMemberID*      MemberServiceV3__GetMemberID,	///< Request parameter
    _MemberServiceV3__GetMemberIDResponse* MemberServiceV3__GetMemberIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV33__GetTagID                                               *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV33__GetTagID" of service binding "MemberServiceSoap12"

/**

Operation details:

<p>Returns the unique user identifier that used during tagging process.</p><b>Throws:</b><br/><tt>Exception</tt> - If the user with the specified credentials does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/GetTagID"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV33__GetTagID(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,
    // response parameters:
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV33__GetTagID(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,
    // response parameters:
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoap12Proxy.h):
  class MemberServiceSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV33 service method-style:	GetTagID document
//gsoap MemberServiceV33 service method-encoding:	GetTagID literal
//gsoap MemberServiceV33 service method-action:	GetTagID http://www.next2friends.com/GetTagID
int __MemberServiceV33__GetTagID(
    _MemberServiceV3__GetTagID*         MemberServiceV3__GetTagID,	///< Request parameter
    _MemberServiceV3__GetTagIDResponse* MemberServiceV3__GetTagIDResponse	///< Response parameter
);

/******************************************************************************\
 *                                                                            *
 * __MemberServiceV33__RemindPassword                                         *
 *                                                                            *
\******************************************************************************/


/// Operation "__MemberServiceV33__RemindPassword" of service binding "MemberServiceSoap12"

/**

Operation details:

<p>Sends the password to the user with the specified email.</p><b>Throws:</b><br/><tt>ArgumentNullException</tt> - If the specified <tt>emailAddress</tt> is <tt>null</tt> or an empty string.<br/><tt>ArgumentException</tt> - If the user with the specified <tt>emailAddress</tt> does not exist.
  - SOAP document/literal style
  - SOAP action="http://www.next2friends.com/RemindPassword"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___MemberServiceV33__RemindPassword(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // request parameters:
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,
    // response parameters:
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __MemberServiceV33__RemindPassword(
    struct soap *soap,
    // request parameters:
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,
    // response parameters:
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse
  );
@endcode

C++ proxy class (defined in soapMemberServiceSoap12Proxy.h):
  class MemberServiceSoap12;

Note: use soapcpp2 option '-i' to generate improved proxy and service classes;

*/

//gsoap MemberServiceV33 service method-style:	RemindPassword document
//gsoap MemberServiceV33 service method-encoding:	RemindPassword literal
//gsoap MemberServiceV33 service method-action:	RemindPassword http://www.next2friends.com/RemindPassword
int __MemberServiceV33__RemindPassword(
    _MemberServiceV3__RemindPassword*   MemberServiceV3__RemindPassword,	///< Request parameter
    _MemberServiceV3__RemindPasswordResponse* MemberServiceV3__RemindPasswordResponse	///< Response parameter
);

/* End of .\wsdl-h\MemberService.V3.h */
}	//	namespace WS_MemberService_v3
