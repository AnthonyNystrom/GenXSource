/* soapC.cpp
   Generated by gSOAP 2.7.10 from output\photoorganiseservice.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-05-06 20:58:07 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_StringArray:
		return soap_in_StringArray(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__PhotoItem:
		return soap_in_ns1__PhotoItem(soap, NULL, NULL, "ns1:PhotoItem");
	case SOAP_TYPE_ns1__ArrayOfPhotoItem:
		return soap_in_ns1__ArrayOfPhotoItem(soap, NULL, NULL, "ns1:ArrayOfPhotoItem");
	case SOAP_TYPE_ns1__PhotoCollectionItem:
		return soap_in_ns1__PhotoCollectionItem(soap, NULL, NULL, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem:
		return soap_in_ns1__ArrayOfPhotoCollectionItem(soap, NULL, NULL, "ns1:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__DeletePhotoResponse:
		return soap_in_PointerTo_ns1__DeletePhotoResponse(soap, NULL, NULL, "ns1:DeletePhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__DeletePhoto:
		return soap_in_PointerTo_ns1__DeletePhoto(soap, NULL, NULL, "ns1:DeletePhoto");
	case SOAP_TYPE_PointerTo_ns1__RenameCollectionResponse:
		return soap_in_PointerTo_ns1__RenameCollectionResponse(soap, NULL, NULL, "ns1:RenameCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__RenameCollection:
		return soap_in_PointerTo_ns1__RenameCollection(soap, NULL, NULL, "ns1:RenameCollection");
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhotoResponse:
		return soap_in_PointerTo_ns1__JavaUploadPhotoResponse(soap, NULL, NULL, "ns1:JavaUploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhoto:
		return soap_in_PointerTo_ns1__JavaUploadPhoto(soap, NULL, NULL, "ns1:JavaUploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhotoResponse:
		return soap_in_PointerTo_ns1__DeviceUploadPhotoResponse(soap, NULL, NULL, "ns1:DeviceUploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhoto:
		return soap_in_PointerTo_ns1__DeviceUploadPhoto(soap, NULL, NULL, "ns1:DeviceUploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__UploadPhotoResponse:
		return soap_in_PointerTo_ns1__UploadPhotoResponse(soap, NULL, NULL, "ns1:UploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__UploadPhoto:
		return soap_in_PointerTo_ns1__UploadPhoto(soap, NULL, NULL, "ns1:UploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollectionResponse:
		return soap_in_PointerTo_ns1__GetPhotosByCollectionResponse(soap, NULL, NULL, "ns1:GetPhotosByCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollection:
		return soap_in_PointerTo_ns1__GetPhotosByCollection(soap, NULL, NULL, "ns1:GetPhotosByCollection");
	case SOAP_TYPE_PointerTo_ns1__GetCollectionsResponse:
		return soap_in_PointerTo_ns1__GetCollectionsResponse(soap, NULL, NULL, "ns1:GetCollectionsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetCollections:
		return soap_in_PointerTo_ns1__GetCollections(soap, NULL, NULL, "ns1:GetCollections");
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollectionResponse:
		return soap_in_PointerTo_ns1__CreateNewCollectionResponse(soap, NULL, NULL, "ns1:CreateNewCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollection:
		return soap_in_PointerTo_ns1__CreateNewCollection(soap, NULL, NULL, "ns1:CreateNewCollection");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_in_PointerTo_ns1__LoginResponse(soap, NULL, NULL, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_in_PointerTo_ns1__Login(soap, NULL, NULL, "ns1:Login");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_in_PointerToxsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoItem:
		return soap_in_PointerTons1__ArrayOfPhotoItem(soap, NULL, NULL, "ns1:ArrayOfPhotoItem");
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoCollectionItem:
		return soap_in_PointerTons1__ArrayOfPhotoCollectionItem(soap, NULL, NULL, "ns1:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_PointerToPointerTons1__PhotoItem:
		return soap_in_PointerToPointerTons1__PhotoItem(soap, NULL, NULL, "ns1:PhotoItem");
	case SOAP_TYPE_PointerTons1__PhotoItem:
		return soap_in_PointerTons1__PhotoItem(soap, NULL, NULL, "ns1:PhotoItem");
	case SOAP_TYPE_PointerToPointerTons1__PhotoCollectionItem:
		return soap_in_PointerToPointerTons1__PhotoCollectionItem(soap, NULL, NULL, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_PointerTons1__PhotoCollectionItem:
		return soap_in_PointerTons1__PhotoCollectionItem(soap, NULL, NULL, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_StringArray;
			return soap_in_StringArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PhotoItem"))
		{	*type = SOAP_TYPE_ns1__PhotoItem;
			return soap_in_ns1__PhotoItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfPhotoItem"))
		{	*type = SOAP_TYPE_ns1__ArrayOfPhotoItem;
			return soap_in_ns1__ArrayOfPhotoItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PhotoCollectionItem"))
		{	*type = SOAP_TYPE_ns1__PhotoCollectionItem;
			return soap_in_ns1__PhotoCollectionItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfPhotoCollectionItem"))
		{	*type = SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem;
			return soap_in_ns1__ArrayOfPhotoCollectionItem(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:DeletePhotoResponse"))
		{	*type = SOAP_TYPE__ns1__DeletePhotoResponse;
			return soap_in__ns1__DeletePhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeletePhoto"))
		{	*type = SOAP_TYPE__ns1__DeletePhoto;
			return soap_in__ns1__DeletePhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RenameCollectionResponse"))
		{	*type = SOAP_TYPE__ns1__RenameCollectionResponse;
			return soap_in__ns1__RenameCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:RenameCollection"))
		{	*type = SOAP_TYPE__ns1__RenameCollection;
			return soap_in__ns1__RenameCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:JavaUploadPhotoResponse"))
		{	*type = SOAP_TYPE__ns1__JavaUploadPhotoResponse;
			return soap_in__ns1__JavaUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:JavaUploadPhoto"))
		{	*type = SOAP_TYPE__ns1__JavaUploadPhoto;
			return soap_in__ns1__JavaUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeviceUploadPhotoResponse"))
		{	*type = SOAP_TYPE__ns1__DeviceUploadPhotoResponse;
			return soap_in__ns1__DeviceUploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DeviceUploadPhoto"))
		{	*type = SOAP_TYPE__ns1__DeviceUploadPhoto;
			return soap_in__ns1__DeviceUploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadPhotoResponse"))
		{	*type = SOAP_TYPE__ns1__UploadPhotoResponse;
			return soap_in__ns1__UploadPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:UploadPhoto"))
		{	*type = SOAP_TYPE__ns1__UploadPhoto;
			return soap_in__ns1__UploadPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPhotosByCollectionResponse"))
		{	*type = SOAP_TYPE__ns1__GetPhotosByCollectionResponse;
			return soap_in__ns1__GetPhotosByCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPhotosByCollection"))
		{	*type = SOAP_TYPE__ns1__GetPhotosByCollection;
			return soap_in__ns1__GetPhotosByCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetCollectionsResponse"))
		{	*type = SOAP_TYPE__ns1__GetCollectionsResponse;
			return soap_in__ns1__GetCollectionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetCollections"))
		{	*type = SOAP_TYPE__ns1__GetCollections;
			return soap_in__ns1__GetCollections(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CreateNewCollectionResponse"))
		{	*type = SOAP_TYPE__ns1__CreateNewCollectionResponse;
			return soap_in__ns1__CreateNewCollectionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CreateNewCollection"))
		{	*type = SOAP_TYPE__ns1__CreateNewCollection;
			return soap_in__ns1__CreateNewCollection(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:LoginResponse"))
		{	*type = SOAP_TYPE__ns1__LoginResponse;
			return soap_in__ns1__LoginResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Login"))
		{	*type = SOAP_TYPE__ns1__Login;
			return soap_in__ns1__Login(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_StringArray:
		return ((StringArray *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE__ns1__DeletePhotoResponse:
		return ((_ns1__DeletePhotoResponse *)ptr)->soap_out(soap, "ns1:DeletePhotoResponse", id, NULL);
	case SOAP_TYPE__ns1__DeletePhoto:
		return ((_ns1__DeletePhoto *)ptr)->soap_out(soap, "ns1:DeletePhoto", id, NULL);
	case SOAP_TYPE__ns1__RenameCollectionResponse:
		return ((_ns1__RenameCollectionResponse *)ptr)->soap_out(soap, "ns1:RenameCollectionResponse", id, NULL);
	case SOAP_TYPE__ns1__RenameCollection:
		return ((_ns1__RenameCollection *)ptr)->soap_out(soap, "ns1:RenameCollection", id, NULL);
	case SOAP_TYPE__ns1__JavaUploadPhotoResponse:
		return ((_ns1__JavaUploadPhotoResponse *)ptr)->soap_out(soap, "ns1:JavaUploadPhotoResponse", id, NULL);
	case SOAP_TYPE__ns1__JavaUploadPhoto:
		return ((_ns1__JavaUploadPhoto *)ptr)->soap_out(soap, "ns1:JavaUploadPhoto", id, NULL);
	case SOAP_TYPE__ns1__DeviceUploadPhotoResponse:
		return ((_ns1__DeviceUploadPhotoResponse *)ptr)->soap_out(soap, "ns1:DeviceUploadPhotoResponse", id, NULL);
	case SOAP_TYPE__ns1__DeviceUploadPhoto:
		return ((_ns1__DeviceUploadPhoto *)ptr)->soap_out(soap, "ns1:DeviceUploadPhoto", id, NULL);
	case SOAP_TYPE__ns1__UploadPhotoResponse:
		return ((_ns1__UploadPhotoResponse *)ptr)->soap_out(soap, "ns1:UploadPhotoResponse", id, NULL);
	case SOAP_TYPE__ns1__UploadPhoto:
		return ((_ns1__UploadPhoto *)ptr)->soap_out(soap, "ns1:UploadPhoto", id, NULL);
	case SOAP_TYPE__ns1__GetPhotosByCollectionResponse:
		return ((_ns1__GetPhotosByCollectionResponse *)ptr)->soap_out(soap, "ns1:GetPhotosByCollectionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetPhotosByCollection:
		return ((_ns1__GetPhotosByCollection *)ptr)->soap_out(soap, "ns1:GetPhotosByCollection", id, NULL);
	case SOAP_TYPE__ns1__GetCollectionsResponse:
		return ((_ns1__GetCollectionsResponse *)ptr)->soap_out(soap, "ns1:GetCollectionsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetCollections:
		return ((_ns1__GetCollections *)ptr)->soap_out(soap, "ns1:GetCollections", id, NULL);
	case SOAP_TYPE__ns1__CreateNewCollectionResponse:
		return ((_ns1__CreateNewCollectionResponse *)ptr)->soap_out(soap, "ns1:CreateNewCollectionResponse", id, NULL);
	case SOAP_TYPE__ns1__CreateNewCollection:
		return ((_ns1__CreateNewCollection *)ptr)->soap_out(soap, "ns1:CreateNewCollection", id, NULL);
	case SOAP_TYPE__ns1__LoginResponse:
		return ((_ns1__LoginResponse *)ptr)->soap_out(soap, "ns1:LoginResponse", id, NULL);
	case SOAP_TYPE__ns1__Login:
		return ((_ns1__Login *)ptr)->soap_out(soap, "ns1:Login", id, NULL);
	case SOAP_TYPE_ns1__PhotoItem:
		return ((ns1__PhotoItem *)ptr)->soap_out(soap, tag, id, "ns1:PhotoItem");
	case SOAP_TYPE_ns1__ArrayOfPhotoItem:
		return ((ns1__ArrayOfPhotoItem *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfPhotoItem");
	case SOAP_TYPE_ns1__PhotoCollectionItem:
		return ((ns1__PhotoCollectionItem *)ptr)->soap_out(soap, tag, id, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem:
		return ((ns1__ArrayOfPhotoCollectionItem *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_PointerTo_ns1__DeletePhotoResponse:
		return soap_out_PointerTo_ns1__DeletePhotoResponse(soap, tag, id, (_ns1__DeletePhotoResponse *const*)ptr, "ns1:DeletePhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__DeletePhoto:
		return soap_out_PointerTo_ns1__DeletePhoto(soap, tag, id, (_ns1__DeletePhoto *const*)ptr, "ns1:DeletePhoto");
	case SOAP_TYPE_PointerTo_ns1__RenameCollectionResponse:
		return soap_out_PointerTo_ns1__RenameCollectionResponse(soap, tag, id, (_ns1__RenameCollectionResponse *const*)ptr, "ns1:RenameCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__RenameCollection:
		return soap_out_PointerTo_ns1__RenameCollection(soap, tag, id, (_ns1__RenameCollection *const*)ptr, "ns1:RenameCollection");
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhotoResponse:
		return soap_out_PointerTo_ns1__JavaUploadPhotoResponse(soap, tag, id, (_ns1__JavaUploadPhotoResponse *const*)ptr, "ns1:JavaUploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhoto:
		return soap_out_PointerTo_ns1__JavaUploadPhoto(soap, tag, id, (_ns1__JavaUploadPhoto *const*)ptr, "ns1:JavaUploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhotoResponse:
		return soap_out_PointerTo_ns1__DeviceUploadPhotoResponse(soap, tag, id, (_ns1__DeviceUploadPhotoResponse *const*)ptr, "ns1:DeviceUploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhoto:
		return soap_out_PointerTo_ns1__DeviceUploadPhoto(soap, tag, id, (_ns1__DeviceUploadPhoto *const*)ptr, "ns1:DeviceUploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__UploadPhotoResponse:
		return soap_out_PointerTo_ns1__UploadPhotoResponse(soap, tag, id, (_ns1__UploadPhotoResponse *const*)ptr, "ns1:UploadPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__UploadPhoto:
		return soap_out_PointerTo_ns1__UploadPhoto(soap, tag, id, (_ns1__UploadPhoto *const*)ptr, "ns1:UploadPhoto");
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollectionResponse:
		return soap_out_PointerTo_ns1__GetPhotosByCollectionResponse(soap, tag, id, (_ns1__GetPhotosByCollectionResponse *const*)ptr, "ns1:GetPhotosByCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollection:
		return soap_out_PointerTo_ns1__GetPhotosByCollection(soap, tag, id, (_ns1__GetPhotosByCollection *const*)ptr, "ns1:GetPhotosByCollection");
	case SOAP_TYPE_PointerTo_ns1__GetCollectionsResponse:
		return soap_out_PointerTo_ns1__GetCollectionsResponse(soap, tag, id, (_ns1__GetCollectionsResponse *const*)ptr, "ns1:GetCollectionsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetCollections:
		return soap_out_PointerTo_ns1__GetCollections(soap, tag, id, (_ns1__GetCollections *const*)ptr, "ns1:GetCollections");
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollectionResponse:
		return soap_out_PointerTo_ns1__CreateNewCollectionResponse(soap, tag, id, (_ns1__CreateNewCollectionResponse *const*)ptr, "ns1:CreateNewCollectionResponse");
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollection:
		return soap_out_PointerTo_ns1__CreateNewCollection(soap, tag, id, (_ns1__CreateNewCollection *const*)ptr, "ns1:CreateNewCollection");
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		return soap_out_PointerTo_ns1__LoginResponse(soap, tag, id, (_ns1__LoginResponse *const*)ptr, "ns1:LoginResponse");
	case SOAP_TYPE_PointerTo_ns1__Login:
		return soap_out_PointerTo_ns1__Login(soap, tag, id, (_ns1__Login *const*)ptr, "ns1:Login");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerToxsd__base64Binary:
		return soap_out_PointerToxsd__base64Binary(soap, tag, id, (xsd__base64Binary *const*)ptr, "xsd:base64Binary");
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoItem:
		return soap_out_PointerTons1__ArrayOfPhotoItem(soap, tag, id, (ns1__ArrayOfPhotoItem *const*)ptr, "ns1:ArrayOfPhotoItem");
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoCollectionItem:
		return soap_out_PointerTons1__ArrayOfPhotoCollectionItem(soap, tag, id, (ns1__ArrayOfPhotoCollectionItem *const*)ptr, "ns1:ArrayOfPhotoCollectionItem");
	case SOAP_TYPE_PointerToPointerTons1__PhotoItem:
		return soap_out_PointerToPointerTons1__PhotoItem(soap, tag, id, (ns1__PhotoItem **const*)ptr, "ns1:PhotoItem");
	case SOAP_TYPE_PointerTons1__PhotoItem:
		return soap_out_PointerTons1__PhotoItem(soap, tag, id, (ns1__PhotoItem *const*)ptr, "ns1:PhotoItem");
	case SOAP_TYPE_PointerToPointerTons1__PhotoCollectionItem:
		return soap_out_PointerToPointerTons1__PhotoCollectionItem(soap, tag, id, (ns1__PhotoCollectionItem **const*)ptr, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_PointerTons1__PhotoCollectionItem:
		return soap_out_PointerTons1__PhotoCollectionItem(soap, tag, id, (ns1__PhotoCollectionItem *const*)ptr, "ns1:PhotoCollectionItem");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_StringArray:
		((StringArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeletePhotoResponse:
		((_ns1__DeletePhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeletePhoto:
		((_ns1__DeletePhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RenameCollectionResponse:
		((_ns1__RenameCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__RenameCollection:
		((_ns1__RenameCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__JavaUploadPhotoResponse:
		((_ns1__JavaUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__JavaUploadPhoto:
		((_ns1__JavaUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeviceUploadPhotoResponse:
		((_ns1__DeviceUploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DeviceUploadPhoto:
		((_ns1__DeviceUploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadPhotoResponse:
		((_ns1__UploadPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__UploadPhoto:
		((_ns1__UploadPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPhotosByCollectionResponse:
		((_ns1__GetPhotosByCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPhotosByCollection:
		((_ns1__GetPhotosByCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetCollectionsResponse:
		((_ns1__GetCollectionsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetCollections:
		((_ns1__GetCollections *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CreateNewCollectionResponse:
		((_ns1__CreateNewCollectionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CreateNewCollection:
		((_ns1__CreateNewCollection *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		((_ns1__LoginResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Login:
		((_ns1__Login *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__PhotoItem:
		((ns1__PhotoItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfPhotoItem:
		((ns1__ArrayOfPhotoItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__PhotoCollectionItem:
		((ns1__PhotoCollectionItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem:
		((ns1__ArrayOfPhotoCollectionItem *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns4__DeletePhoto:
		soap_serialize___ns4__DeletePhoto(soap, (const struct __ns4__DeletePhoto *)ptr);
		break;
	case SOAP_TYPE___ns4__RenameCollection:
		soap_serialize___ns4__RenameCollection(soap, (const struct __ns4__RenameCollection *)ptr);
		break;
	case SOAP_TYPE___ns4__JavaUploadPhoto:
		soap_serialize___ns4__JavaUploadPhoto(soap, (const struct __ns4__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns4__DeviceUploadPhoto:
		soap_serialize___ns4__DeviceUploadPhoto(soap, (const struct __ns4__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns4__UploadPhoto:
		soap_serialize___ns4__UploadPhoto(soap, (const struct __ns4__UploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns4__GetPhotosByCollection:
		soap_serialize___ns4__GetPhotosByCollection(soap, (const struct __ns4__GetPhotosByCollection *)ptr);
		break;
	case SOAP_TYPE___ns4__GetCollections:
		soap_serialize___ns4__GetCollections(soap, (const struct __ns4__GetCollections *)ptr);
		break;
	case SOAP_TYPE___ns4__CreateNewCollection:
		soap_serialize___ns4__CreateNewCollection(soap, (const struct __ns4__CreateNewCollection *)ptr);
		break;
	case SOAP_TYPE___ns4__Login:
		soap_serialize___ns4__Login(soap, (const struct __ns4__Login *)ptr);
		break;
	case SOAP_TYPE___ns3__DeletePhoto:
		soap_serialize___ns3__DeletePhoto(soap, (const struct __ns3__DeletePhoto *)ptr);
		break;
	case SOAP_TYPE___ns3__RenameCollection:
		soap_serialize___ns3__RenameCollection(soap, (const struct __ns3__RenameCollection *)ptr);
		break;
	case SOAP_TYPE___ns3__JavaUploadPhoto:
		soap_serialize___ns3__JavaUploadPhoto(soap, (const struct __ns3__JavaUploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns3__DeviceUploadPhoto:
		soap_serialize___ns3__DeviceUploadPhoto(soap, (const struct __ns3__DeviceUploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns3__UploadPhoto:
		soap_serialize___ns3__UploadPhoto(soap, (const struct __ns3__UploadPhoto *)ptr);
		break;
	case SOAP_TYPE___ns3__GetPhotosByCollection:
		soap_serialize___ns3__GetPhotosByCollection(soap, (const struct __ns3__GetPhotosByCollection *)ptr);
		break;
	case SOAP_TYPE___ns3__GetCollections:
		soap_serialize___ns3__GetCollections(soap, (const struct __ns3__GetCollections *)ptr);
		break;
	case SOAP_TYPE___ns3__CreateNewCollection:
		soap_serialize___ns3__CreateNewCollection(soap, (const struct __ns3__CreateNewCollection *)ptr);
		break;
	case SOAP_TYPE___ns3__Login:
		soap_serialize___ns3__Login(soap, (const struct __ns3__Login *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeletePhotoResponse:
		soap_serialize_PointerTo_ns1__DeletePhotoResponse(soap, (_ns1__DeletePhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeletePhoto:
		soap_serialize_PointerTo_ns1__DeletePhoto(soap, (_ns1__DeletePhoto *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RenameCollectionResponse:
		soap_serialize_PointerTo_ns1__RenameCollectionResponse(soap, (_ns1__RenameCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__RenameCollection:
		soap_serialize_PointerTo_ns1__RenameCollection(soap, (_ns1__RenameCollection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhotoResponse:
		soap_serialize_PointerTo_ns1__JavaUploadPhotoResponse(soap, (_ns1__JavaUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__JavaUploadPhoto:
		soap_serialize_PointerTo_ns1__JavaUploadPhoto(soap, (_ns1__JavaUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhotoResponse:
		soap_serialize_PointerTo_ns1__DeviceUploadPhotoResponse(soap, (_ns1__DeviceUploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DeviceUploadPhoto:
		soap_serialize_PointerTo_ns1__DeviceUploadPhoto(soap, (_ns1__DeviceUploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__UploadPhotoResponse:
		soap_serialize_PointerTo_ns1__UploadPhotoResponse(soap, (_ns1__UploadPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__UploadPhoto:
		soap_serialize_PointerTo_ns1__UploadPhoto(soap, (_ns1__UploadPhoto *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollectionResponse:
		soap_serialize_PointerTo_ns1__GetPhotosByCollectionResponse(soap, (_ns1__GetPhotosByCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetPhotosByCollection:
		soap_serialize_PointerTo_ns1__GetPhotosByCollection(soap, (_ns1__GetPhotosByCollection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetCollectionsResponse:
		soap_serialize_PointerTo_ns1__GetCollectionsResponse(soap, (_ns1__GetCollectionsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetCollections:
		soap_serialize_PointerTo_ns1__GetCollections(soap, (_ns1__GetCollections *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollectionResponse:
		soap_serialize_PointerTo_ns1__CreateNewCollectionResponse(soap, (_ns1__CreateNewCollectionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CreateNewCollection:
		soap_serialize_PointerTo_ns1__CreateNewCollection(soap, (_ns1__CreateNewCollection *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__LoginResponse:
		soap_serialize_PointerTo_ns1__LoginResponse(soap, (_ns1__LoginResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Login:
		soap_serialize_PointerTo_ns1__Login(soap, (_ns1__Login *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE_PointerToxsd__base64Binary:
		soap_serialize_PointerToxsd__base64Binary(soap, (xsd__base64Binary *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoItem:
		soap_serialize_PointerTons1__ArrayOfPhotoItem(soap, (ns1__ArrayOfPhotoItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfPhotoCollectionItem:
		soap_serialize_PointerTons1__ArrayOfPhotoCollectionItem(soap, (ns1__ArrayOfPhotoCollectionItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__PhotoItem:
		soap_serialize_PointerToPointerTons1__PhotoItem(soap, (ns1__PhotoItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__PhotoItem:
		soap_serialize_PointerTons1__PhotoItem(soap, (ns1__PhotoItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__PhotoCollectionItem:
		soap_serialize_PointerToPointerTons1__PhotoCollectionItem(soap, (ns1__PhotoCollectionItem **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__PhotoCollectionItem:
		soap_serialize_PointerTons1__PhotoCollectionItem(soap, (ns1__PhotoCollectionItem *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem:
		return (void*)soap_instantiate_ns1__ArrayOfPhotoCollectionItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__PhotoCollectionItem:
		return (void*)soap_instantiate_ns1__PhotoCollectionItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfPhotoItem:
		return (void*)soap_instantiate_ns1__ArrayOfPhotoItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__PhotoItem:
		return (void*)soap_instantiate_ns1__PhotoItem(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Login:
		return (void*)soap_instantiate__ns1__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__LoginResponse:
		return (void*)soap_instantiate__ns1__LoginResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CreateNewCollection:
		return (void*)soap_instantiate__ns1__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CreateNewCollectionResponse:
		return (void*)soap_instantiate__ns1__CreateNewCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetCollections:
		return (void*)soap_instantiate__ns1__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetCollectionsResponse:
		return (void*)soap_instantiate__ns1__GetCollectionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPhotosByCollection:
		return (void*)soap_instantiate__ns1__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPhotosByCollectionResponse:
		return (void*)soap_instantiate__ns1__GetPhotosByCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadPhoto:
		return (void*)soap_instantiate__ns1__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__UploadPhotoResponse:
		return (void*)soap_instantiate__ns1__UploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeviceUploadPhoto:
		return (void*)soap_instantiate__ns1__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeviceUploadPhotoResponse:
		return (void*)soap_instantiate__ns1__DeviceUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__JavaUploadPhoto:
		return (void*)soap_instantiate__ns1__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__JavaUploadPhotoResponse:
		return (void*)soap_instantiate__ns1__JavaUploadPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RenameCollection:
		return (void*)soap_instantiate__ns1__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__RenameCollectionResponse:
		return (void*)soap_instantiate__ns1__RenameCollectionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeletePhoto:
		return (void*)soap_instantiate__ns1__DeletePhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DeletePhotoResponse:
		return (void*)soap_instantiate__ns1__DeletePhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StringArray:
		return (void*)soap_instantiate_StringArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__Login:
		return (void*)soap_instantiate___ns3__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CreateNewCollection:
		return (void*)soap_instantiate___ns3__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetCollections:
		return (void*)soap_instantiate___ns3__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetPhotosByCollection:
		return (void*)soap_instantiate___ns3__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__UploadPhoto:
		return (void*)soap_instantiate___ns3__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DeviceUploadPhoto:
		return (void*)soap_instantiate___ns3__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__JavaUploadPhoto:
		return (void*)soap_instantiate___ns3__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__RenameCollection:
		return (void*)soap_instantiate___ns3__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__DeletePhoto:
		return (void*)soap_instantiate___ns3__DeletePhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__Login:
		return (void*)soap_instantiate___ns4__Login(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__CreateNewCollection:
		return (void*)soap_instantiate___ns4__CreateNewCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetCollections:
		return (void*)soap_instantiate___ns4__GetCollections(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetPhotosByCollection:
		return (void*)soap_instantiate___ns4__GetPhotosByCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__UploadPhoto:
		return (void*)soap_instantiate___ns4__UploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__DeviceUploadPhoto:
		return (void*)soap_instantiate___ns4__DeviceUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__JavaUploadPhoto:
		return (void*)soap_instantiate___ns4__JavaUploadPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__RenameCollection:
		return (void*)soap_instantiate___ns4__RenameCollection(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__DeletePhoto:
		return (void*)soap_instantiate___ns4__DeletePhoto(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			delete (xsd__base64Binary*)p->ptr;
		else
			delete[] (xsd__base64Binary*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem:
		if (p->size < 0)
			delete (ns1__ArrayOfPhotoCollectionItem*)p->ptr;
		else
			delete[] (ns1__ArrayOfPhotoCollectionItem*)p->ptr;
		break;
	case SOAP_TYPE_ns1__PhotoCollectionItem:
		if (p->size < 0)
			delete (ns1__PhotoCollectionItem*)p->ptr;
		else
			delete[] (ns1__PhotoCollectionItem*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfPhotoItem:
		if (p->size < 0)
			delete (ns1__ArrayOfPhotoItem*)p->ptr;
		else
			delete[] (ns1__ArrayOfPhotoItem*)p->ptr;
		break;
	case SOAP_TYPE_ns1__PhotoItem:
		if (p->size < 0)
			delete (ns1__PhotoItem*)p->ptr;
		else
			delete[] (ns1__PhotoItem*)p->ptr;
		break;
	case SOAP_TYPE__ns1__Login:
		if (p->size < 0)
			delete (_ns1__Login*)p->ptr;
		else
			delete[] (_ns1__Login*)p->ptr;
		break;
	case SOAP_TYPE__ns1__LoginResponse:
		if (p->size < 0)
			delete (_ns1__LoginResponse*)p->ptr;
		else
			delete[] (_ns1__LoginResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CreateNewCollection:
		if (p->size < 0)
			delete (_ns1__CreateNewCollection*)p->ptr;
		else
			delete[] (_ns1__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CreateNewCollectionResponse:
		if (p->size < 0)
			delete (_ns1__CreateNewCollectionResponse*)p->ptr;
		else
			delete[] (_ns1__CreateNewCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetCollections:
		if (p->size < 0)
			delete (_ns1__GetCollections*)p->ptr;
		else
			delete[] (_ns1__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetCollectionsResponse:
		if (p->size < 0)
			delete (_ns1__GetCollectionsResponse*)p->ptr;
		else
			delete[] (_ns1__GetCollectionsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetPhotosByCollection:
		if (p->size < 0)
			delete (_ns1__GetPhotosByCollection*)p->ptr;
		else
			delete[] (_ns1__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetPhotosByCollectionResponse:
		if (p->size < 0)
			delete (_ns1__GetPhotosByCollectionResponse*)p->ptr;
		else
			delete[] (_ns1__GetPhotosByCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__UploadPhoto:
		if (p->size < 0)
			delete (_ns1__UploadPhoto*)p->ptr;
		else
			delete[] (_ns1__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE__ns1__UploadPhotoResponse:
		if (p->size < 0)
			delete (_ns1__UploadPhotoResponse*)p->ptr;
		else
			delete[] (_ns1__UploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeviceUploadPhoto:
		if (p->size < 0)
			delete (_ns1__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (_ns1__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeviceUploadPhotoResponse:
		if (p->size < 0)
			delete (_ns1__DeviceUploadPhotoResponse*)p->ptr;
		else
			delete[] (_ns1__DeviceUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__JavaUploadPhoto:
		if (p->size < 0)
			delete (_ns1__JavaUploadPhoto*)p->ptr;
		else
			delete[] (_ns1__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE__ns1__JavaUploadPhotoResponse:
		if (p->size < 0)
			delete (_ns1__JavaUploadPhotoResponse*)p->ptr;
		else
			delete[] (_ns1__JavaUploadPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RenameCollection:
		if (p->size < 0)
			delete (_ns1__RenameCollection*)p->ptr;
		else
			delete[] (_ns1__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE__ns1__RenameCollectionResponse:
		if (p->size < 0)
			delete (_ns1__RenameCollectionResponse*)p->ptr;
		else
			delete[] (_ns1__RenameCollectionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeletePhoto:
		if (p->size < 0)
			delete (_ns1__DeletePhoto*)p->ptr;
		else
			delete[] (_ns1__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE__ns1__DeletePhotoResponse:
		if (p->size < 0)
			delete (_ns1__DeletePhotoResponse*)p->ptr;
		else
			delete[] (_ns1__DeletePhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE_StringArray:
		if (p->size < 0)
			delete (StringArray*)p->ptr;
		else
			delete[] (StringArray*)p->ptr;
		break;
	case SOAP_TYPE___ns3__Login:
		if (p->size < 0)
			delete (struct __ns3__Login*)p->ptr;
		else
			delete[] (struct __ns3__Login*)p->ptr;
		break;
	case SOAP_TYPE___ns3__CreateNewCollection:
		if (p->size < 0)
			delete (struct __ns3__CreateNewCollection*)p->ptr;
		else
			delete[] (struct __ns3__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetCollections:
		if (p->size < 0)
			delete (struct __ns3__GetCollections*)p->ptr;
		else
			delete[] (struct __ns3__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetPhotosByCollection:
		if (p->size < 0)
			delete (struct __ns3__GetPhotosByCollection*)p->ptr;
		else
			delete[] (struct __ns3__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns3__UploadPhoto:
		if (p->size < 0)
			delete (struct __ns3__UploadPhoto*)p->ptr;
		else
			delete[] (struct __ns3__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __ns3__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __ns3__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns3__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __ns3__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __ns3__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns3__RenameCollection:
		if (p->size < 0)
			delete (struct __ns3__RenameCollection*)p->ptr;
		else
			delete[] (struct __ns3__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns3__DeletePhoto:
		if (p->size < 0)
			delete (struct __ns3__DeletePhoto*)p->ptr;
		else
			delete[] (struct __ns3__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns4__Login:
		if (p->size < 0)
			delete (struct __ns4__Login*)p->ptr;
		else
			delete[] (struct __ns4__Login*)p->ptr;
		break;
	case SOAP_TYPE___ns4__CreateNewCollection:
		if (p->size < 0)
			delete (struct __ns4__CreateNewCollection*)p->ptr;
		else
			delete[] (struct __ns4__CreateNewCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetCollections:
		if (p->size < 0)
			delete (struct __ns4__GetCollections*)p->ptr;
		else
			delete[] (struct __ns4__GetCollections*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetPhotosByCollection:
		if (p->size < 0)
			delete (struct __ns4__GetPhotosByCollection*)p->ptr;
		else
			delete[] (struct __ns4__GetPhotosByCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns4__UploadPhoto:
		if (p->size < 0)
			delete (struct __ns4__UploadPhoto*)p->ptr;
		else
			delete[] (struct __ns4__UploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns4__DeviceUploadPhoto:
		if (p->size < 0)
			delete (struct __ns4__DeviceUploadPhoto*)p->ptr;
		else
			delete[] (struct __ns4__DeviceUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns4__JavaUploadPhoto:
		if (p->size < 0)
			delete (struct __ns4__JavaUploadPhoto*)p->ptr;
		else
			delete[] (struct __ns4__JavaUploadPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns4__RenameCollection:
		if (p->size < 0)
			delete (struct __ns4__RenameCollection*)p->ptr;
		else
			delete[] (struct __ns4__RenameCollection*)p->ptr;
		break;
	case SOAP_TYPE___ns4__DeletePhoto:
		if (p->size < 0)
			delete (struct __ns4__DeletePhoto*)p->ptr;
		else
			delete[] (struct __ns4__DeletePhoto*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{
	return soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{
	return soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{
	return soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void StringArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrString = NULL;
}

void StringArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptrString && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrString, 1, SOAP_TYPE_StringArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_string(soap, this->__ptrString + i);
		}
}

int StringArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrString, 1, tag, SOAP_TYPE_StringArray);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int StringArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_StringArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StringArray(struct soap *soap, const char *tag, int id, const StringArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:string", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrString, 1, type, SOAP_TYPE_StringArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_string(soap, "String", -1, &a->__ptrString[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *StringArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_StringArray(soap, this, tag, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_get_StringArray(struct soap *soap, StringArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_StringArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *StringArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_StringArray(soap, tag, this, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_in_StringArray(struct soap *soap, const char *tag, StringArray *a, const char *type)
{	int i, j;
	char **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (StringArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_StringArray, sizeof(StringArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrString = (char **)soap_malloc(soap, sizeof(char *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrString[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_string(soap, NULL, a->__ptrString + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (char **)soap_push_block(soap, sizeof(char *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptrString = (char **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptrString, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (StringArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_StringArray, 0, sizeof(StringArray), 0, soap_copy_StringArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 StringArray * SOAP_FMAC6 soap_new_StringArray(struct soap *soap, int n)
{	return soap_instantiate_StringArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_StringArray(struct soap *soap, StringArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_instantiate_StringArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_StringArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_StringArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new StringArray;
		if (size)
			*size = sizeof(StringArray);
		((StringArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new StringArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(StringArray);
		for (int i = 0; i < n; i++)
			((StringArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (StringArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StringArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying StringArray %p -> %p\n", q, p));
	*(StringArray*)p = *(StringArray*)q;
}

void _ns1__DeletePhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__DeletePhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__DeletePhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeletePhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeletePhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeletePhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeletePhotoResponse(struct soap *soap, const char *tag, int id, const _ns1__DeletePhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeletePhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeletePhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeletePhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeletePhotoResponse * SOAP_FMAC4 soap_get__ns1__DeletePhotoResponse(struct soap *soap, _ns1__DeletePhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeletePhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeletePhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeletePhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeletePhotoResponse * SOAP_FMAC4 soap_in__ns1__DeletePhotoResponse(struct soap *soap, const char *tag, _ns1__DeletePhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeletePhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeletePhotoResponse, sizeof(_ns1__DeletePhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeletePhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeletePhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeletePhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeletePhotoResponse, 0, sizeof(_ns1__DeletePhotoResponse), 0, soap_copy__ns1__DeletePhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeletePhotoResponse * SOAP_FMAC6 soap_new__ns1__DeletePhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeletePhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeletePhotoResponse(struct soap *soap, _ns1__DeletePhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeletePhotoResponse * SOAP_FMAC4 soap_instantiate__ns1__DeletePhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeletePhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeletePhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeletePhotoResponse;
		if (size)
			*size = sizeof(_ns1__DeletePhotoResponse);
		((_ns1__DeletePhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeletePhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeletePhotoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DeletePhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeletePhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeletePhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeletePhotoResponse %p -> %p\n", q, p));
	*(_ns1__DeletePhotoResponse*)p = *(_ns1__DeletePhotoResponse*)q;
}

void _ns1__DeletePhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__DeletePhoto::WebPhotoID);
	/* transient soap skipped */
}

void _ns1__DeletePhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__DeletePhoto::WebPhotoID);
	/* transient soap skipped */
}

int _ns1__DeletePhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeletePhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeletePhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeletePhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeletePhoto(struct soap *soap, const char *tag, int id, const _ns1__DeletePhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeletePhoto), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoID", -1, &(a->_ns1__DeletePhoto::WebPhotoID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeletePhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeletePhoto(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeletePhoto * SOAP_FMAC4 soap_get__ns1__DeletePhoto(struct soap *soap, _ns1__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeletePhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeletePhoto(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeletePhoto * SOAP_FMAC4 soap_in__ns1__DeletePhoto(struct soap *soap, const char *tag, _ns1__DeletePhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeletePhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeletePhoto, sizeof(_ns1__DeletePhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeletePhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeletePhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoID", &(a->_ns1__DeletePhoto::WebPhotoID), "xsd:string"))
				{	soap_flag_WebPhotoID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeletePhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeletePhoto, 0, sizeof(_ns1__DeletePhoto), 0, soap_copy__ns1__DeletePhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeletePhoto * SOAP_FMAC6 soap_new__ns1__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeletePhoto(struct soap *soap, _ns1__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeletePhoto * SOAP_FMAC4 soap_instantiate__ns1__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeletePhoto;
		if (size)
			*size = sizeof(_ns1__DeletePhoto);
		((_ns1__DeletePhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeletePhoto);
		for (int i = 0; i < n; i++)
			((_ns1__DeletePhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeletePhoto %p -> %p\n", q, p));
	*(_ns1__DeletePhoto*)p = *(_ns1__DeletePhoto*)q;
}

void _ns1__RenameCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__RenameCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__RenameCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RenameCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RenameCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RenameCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenameCollectionResponse(struct soap *soap, const char *tag, int id, const _ns1__RenameCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RenameCollectionResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RenameCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RenameCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RenameCollectionResponse * SOAP_FMAC4 soap_get__ns1__RenameCollectionResponse(struct soap *soap, _ns1__RenameCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RenameCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RenameCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RenameCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RenameCollectionResponse * SOAP_FMAC4 soap_in__ns1__RenameCollectionResponse(struct soap *soap, const char *tag, _ns1__RenameCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RenameCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RenameCollectionResponse, sizeof(_ns1__RenameCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RenameCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RenameCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RenameCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RenameCollectionResponse, 0, sizeof(_ns1__RenameCollectionResponse), 0, soap_copy__ns1__RenameCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RenameCollectionResponse * SOAP_FMAC6 soap_new__ns1__RenameCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__RenameCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RenameCollectionResponse(struct soap *soap, _ns1__RenameCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RenameCollectionResponse * SOAP_FMAC4 soap_instantiate__ns1__RenameCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RenameCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RenameCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RenameCollectionResponse;
		if (size)
			*size = sizeof(_ns1__RenameCollectionResponse);
		((_ns1__RenameCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RenameCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RenameCollectionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__RenameCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RenameCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RenameCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RenameCollectionResponse %p -> %p\n", q, p));
	*(_ns1__RenameCollectionResponse*)p = *(_ns1__RenameCollectionResponse*)q;
}

void _ns1__RenameCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__RenameCollection::WebPhotoCollectionID);
	soap_default_string(soap, &this->_ns1__RenameCollection::NewName);
	/* transient soap skipped */
}

void _ns1__RenameCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__RenameCollection::WebPhotoCollectionID);
	soap_serialize_string(soap, &this->_ns1__RenameCollection::NewName);
	/* transient soap skipped */
}

int _ns1__RenameCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__RenameCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__RenameCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__RenameCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__RenameCollection(struct soap *soap, const char *tag, int id, const _ns1__RenameCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__RenameCollection), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoCollectionID", -1, &(a->_ns1__RenameCollection::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:NewName", -1, &(a->_ns1__RenameCollection::NewName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__RenameCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__RenameCollection(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__RenameCollection * SOAP_FMAC4 soap_get__ns1__RenameCollection(struct soap *soap, _ns1__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__RenameCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__RenameCollection(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__RenameCollection * SOAP_FMAC4 soap_in__ns1__RenameCollection(struct soap *soap, const char *tag, _ns1__RenameCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__RenameCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__RenameCollection, sizeof(_ns1__RenameCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__RenameCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__RenameCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_NewName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoCollectionID", &(a->_ns1__RenameCollection::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_NewName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:NewName", &(a->_ns1__RenameCollection::NewName), "xsd:string"))
				{	soap_flag_NewName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__RenameCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__RenameCollection, 0, sizeof(_ns1__RenameCollection), 0, soap_copy__ns1__RenameCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__RenameCollection * SOAP_FMAC6 soap_new__ns1__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate__ns1__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__RenameCollection(struct soap *soap, _ns1__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__RenameCollection * SOAP_FMAC4 soap_instantiate__ns1__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__RenameCollection;
		if (size)
			*size = sizeof(_ns1__RenameCollection);
		((_ns1__RenameCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__RenameCollection);
		for (int i = 0; i < n; i++)
			((_ns1__RenameCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__RenameCollection %p -> %p\n", q, p));
	*(_ns1__RenameCollection*)p = *(_ns1__RenameCollection*)q;
}

void _ns1__JavaUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__JavaUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__JavaUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__JavaUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__JavaUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__JavaUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _ns1__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__JavaUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__JavaUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__JavaUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhotoResponse * SOAP_FMAC4 soap_get__ns1__JavaUploadPhotoResponse(struct soap *soap, _ns1__JavaUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__JavaUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__JavaUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhotoResponse * SOAP_FMAC4 soap_in__ns1__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _ns1__JavaUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__JavaUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__JavaUploadPhotoResponse, sizeof(_ns1__JavaUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__JavaUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__JavaUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__JavaUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__JavaUploadPhotoResponse, 0, sizeof(_ns1__JavaUploadPhotoResponse), 0, soap_copy__ns1__JavaUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__JavaUploadPhotoResponse * SOAP_FMAC6 soap_new__ns1__JavaUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__JavaUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__JavaUploadPhotoResponse(struct soap *soap, _ns1__JavaUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__JavaUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__ns1__JavaUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__JavaUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__JavaUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__JavaUploadPhotoResponse;
		if (size)
			*size = sizeof(_ns1__JavaUploadPhotoResponse);
		((_ns1__JavaUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__JavaUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__JavaUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__JavaUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__JavaUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__JavaUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__JavaUploadPhotoResponse %p -> %p\n", q, p));
	*(_ns1__JavaUploadPhotoResponse*)p = *(_ns1__JavaUploadPhotoResponse*)q;
}

void _ns1__JavaUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__JavaUploadPhoto::EncryptedWebMemberID);
	soap_default_string(soap, &this->_ns1__JavaUploadPhoto::WebPhotoCollectionID);
	soap_default_string(soap, &this->_ns1__JavaUploadPhoto::Base64StringPhoto);
	soap_default_string(soap, &this->_ns1__JavaUploadPhoto::DateTime);
	/* transient soap skipped */
}

void _ns1__JavaUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__JavaUploadPhoto::EncryptedWebMemberID);
	soap_serialize_string(soap, &this->_ns1__JavaUploadPhoto::WebPhotoCollectionID);
	soap_serialize_string(soap, &this->_ns1__JavaUploadPhoto::Base64StringPhoto);
	soap_serialize_string(soap, &this->_ns1__JavaUploadPhoto::DateTime);
	/* transient soap skipped */
}

int _ns1__JavaUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__JavaUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__JavaUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__JavaUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const _ns1__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__JavaUploadPhoto), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:EncryptedWebMemberID", -1, &(a->_ns1__JavaUploadPhoto::EncryptedWebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoCollectionID", -1, &(a->_ns1__JavaUploadPhoto::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Base64StringPhoto", -1, &(a->_ns1__JavaUploadPhoto::Base64StringPhoto), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:DateTime", -1, &(a->_ns1__JavaUploadPhoto::DateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__JavaUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__JavaUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhoto * SOAP_FMAC4 soap_get__ns1__JavaUploadPhoto(struct soap *soap, _ns1__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__JavaUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__JavaUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhoto * SOAP_FMAC4 soap_in__ns1__JavaUploadPhoto(struct soap *soap, const char *tag, _ns1__JavaUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__JavaUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__JavaUploadPhoto, sizeof(_ns1__JavaUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__JavaUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__JavaUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_EncryptedWebMemberID1 = 1, soap_flag_WebPhotoCollectionID1 = 1, soap_flag_Base64StringPhoto1 = 1, soap_flag_DateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_EncryptedWebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:EncryptedWebMemberID", &(a->_ns1__JavaUploadPhoto::EncryptedWebMemberID), "xsd:string"))
				{	soap_flag_EncryptedWebMemberID1--;
					continue;
				}
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoCollectionID", &(a->_ns1__JavaUploadPhoto::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_Base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Base64StringPhoto", &(a->_ns1__JavaUploadPhoto::Base64StringPhoto), "xsd:string"))
				{	soap_flag_Base64StringPhoto1--;
					continue;
				}
			if (soap_flag_DateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:DateTime", &(a->_ns1__JavaUploadPhoto::DateTime), "xsd:string"))
				{	soap_flag_DateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__JavaUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__JavaUploadPhoto, 0, sizeof(_ns1__JavaUploadPhoto), 0, soap_copy__ns1__JavaUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__JavaUploadPhoto * SOAP_FMAC6 soap_new__ns1__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__ns1__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__JavaUploadPhoto(struct soap *soap, _ns1__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate__ns1__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__JavaUploadPhoto;
		if (size)
			*size = sizeof(_ns1__JavaUploadPhoto);
		((_ns1__JavaUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__JavaUploadPhoto);
		for (int i = 0; i < n; i++)
			((_ns1__JavaUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__JavaUploadPhoto %p -> %p\n", q, p));
	*(_ns1__JavaUploadPhoto*)p = *(_ns1__JavaUploadPhoto*)q;
}

void _ns1__DeviceUploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__DeviceUploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__DeviceUploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeviceUploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeviceUploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeviceUploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, const _ns1__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeviceUploadPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeviceUploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeviceUploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_get__ns1__DeviceUploadPhotoResponse(struct soap *soap, _ns1__DeviceUploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeviceUploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeviceUploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_in__ns1__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _ns1__DeviceUploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeviceUploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeviceUploadPhotoResponse, sizeof(_ns1__DeviceUploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeviceUploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeviceUploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeviceUploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeviceUploadPhotoResponse, 0, sizeof(_ns1__DeviceUploadPhotoResponse), 0, soap_copy__ns1__DeviceUploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeviceUploadPhotoResponse * SOAP_FMAC6 soap_new__ns1__DeviceUploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeviceUploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeviceUploadPhotoResponse(struct soap *soap, _ns1__DeviceUploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeviceUploadPhotoResponse * SOAP_FMAC4 soap_instantiate__ns1__DeviceUploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeviceUploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeviceUploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeviceUploadPhotoResponse;
		if (size)
			*size = sizeof(_ns1__DeviceUploadPhotoResponse);
		((_ns1__DeviceUploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeviceUploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeviceUploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__DeviceUploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeviceUploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeviceUploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeviceUploadPhotoResponse %p -> %p\n", q, p));
	*(_ns1__DeviceUploadPhotoResponse*)p = *(_ns1__DeviceUploadPhotoResponse*)q;
}

void _ns1__DeviceUploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__DeviceUploadPhoto::WebMemberID);
	soap_default_string(soap, &this->_ns1__DeviceUploadPhoto::WebPassword);
	soap_default_string(soap, &this->_ns1__DeviceUploadPhoto::Base64StringPhoto);
	soap_default_string(soap, &this->_ns1__DeviceUploadPhoto::DateTime);
	/* transient soap skipped */
}

void _ns1__DeviceUploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__DeviceUploadPhoto::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__DeviceUploadPhoto::WebPassword);
	soap_serialize_string(soap, &this->_ns1__DeviceUploadPhoto::Base64StringPhoto);
	soap_serialize_string(soap, &this->_ns1__DeviceUploadPhoto::DateTime);
	/* transient soap skipped */
}

int _ns1__DeviceUploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__DeviceUploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__DeviceUploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DeviceUploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const _ns1__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DeviceUploadPhoto), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__DeviceUploadPhoto::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__DeviceUploadPhoto::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Base64StringPhoto", -1, &(a->_ns1__DeviceUploadPhoto::Base64StringPhoto), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:DateTime", -1, &(a->_ns1__DeviceUploadPhoto::DateTime), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__DeviceUploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DeviceUploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhoto * SOAP_FMAC4 soap_get__ns1__DeviceUploadPhoto(struct soap *soap, _ns1__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__DeviceUploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__DeviceUploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhoto * SOAP_FMAC4 soap_in__ns1__DeviceUploadPhoto(struct soap *soap, const char *tag, _ns1__DeviceUploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DeviceUploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DeviceUploadPhoto, sizeof(_ns1__DeviceUploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__DeviceUploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__DeviceUploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_Base64StringPhoto1 = 1, soap_flag_DateTime1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__DeviceUploadPhoto::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__DeviceUploadPhoto::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_Base64StringPhoto1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Base64StringPhoto", &(a->_ns1__DeviceUploadPhoto::Base64StringPhoto), "xsd:string"))
				{	soap_flag_Base64StringPhoto1--;
					continue;
				}
			if (soap_flag_DateTime1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:DateTime", &(a->_ns1__DeviceUploadPhoto::DateTime), "xsd:string"))
				{	soap_flag_DateTime1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DeviceUploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DeviceUploadPhoto, 0, sizeof(_ns1__DeviceUploadPhoto), 0, soap_copy__ns1__DeviceUploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__DeviceUploadPhoto * SOAP_FMAC6 soap_new__ns1__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__ns1__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__DeviceUploadPhoto(struct soap *soap, _ns1__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate__ns1__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__DeviceUploadPhoto;
		if (size)
			*size = sizeof(_ns1__DeviceUploadPhoto);
		((_ns1__DeviceUploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__DeviceUploadPhoto);
		for (int i = 0; i < n; i++)
			((_ns1__DeviceUploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__DeviceUploadPhoto %p -> %p\n", q, p));
	*(_ns1__DeviceUploadPhoto*)p = *(_ns1__DeviceUploadPhoto*)q;
}

void _ns1__UploadPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__UploadPhotoResponse::UploadPhotoResult);
	/* transient soap skipped */
}

void _ns1__UploadPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__UploadPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__UploadPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__UploadPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadPhotoResponse(struct soap *soap, const char *tag, int id, const _ns1__UploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadPhotoResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:UploadPhotoResult");
	if (soap_out_bool(soap, "ns1:UploadPhotoResult", -1, &(a->_ns1__UploadPhotoResponse::UploadPhotoResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadPhotoResponse * SOAP_FMAC4 soap_get__ns1__UploadPhotoResponse(struct soap *soap, _ns1__UploadPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__UploadPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadPhotoResponse * SOAP_FMAC4 soap_in__ns1__UploadPhotoResponse(struct soap *soap, const char *tag, _ns1__UploadPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadPhotoResponse, sizeof(_ns1__UploadPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_UploadPhotoResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_UploadPhotoResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:UploadPhotoResult", &(a->_ns1__UploadPhotoResponse::UploadPhotoResult), "xsd:boolean"))
				{	soap_flag_UploadPhotoResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:UploadPhotoResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadPhotoResponse, 0, sizeof(_ns1__UploadPhotoResponse), 0, soap_copy__ns1__UploadPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_UploadPhotoResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__UploadPhotoResponse * SOAP_FMAC6 soap_new__ns1__UploadPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__UploadPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__UploadPhotoResponse(struct soap *soap, _ns1__UploadPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__UploadPhotoResponse * SOAP_FMAC4 soap_instantiate__ns1__UploadPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__UploadPhotoResponse;
		if (size)
			*size = sizeof(_ns1__UploadPhotoResponse);
		((_ns1__UploadPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__UploadPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__UploadPhotoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__UploadPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__UploadPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadPhotoResponse %p -> %p\n", q, p));
	*(_ns1__UploadPhotoResponse*)p = *(_ns1__UploadPhotoResponse*)q;
}

void _ns1__UploadPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__UploadPhoto::WebPhotoCollectionID);
	this->_ns1__UploadPhoto::MainPhotoFilebytes = NULL;
	soap_default_time(soap, &this->_ns1__UploadPhoto::TakenDT);
	/* transient soap skipped */
}

void _ns1__UploadPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__UploadPhoto::WebPhotoCollectionID);
	soap_serialize_PointerToxsd__base64Binary(soap, &this->_ns1__UploadPhoto::MainPhotoFilebytes);
	/* transient soap skipped */
}

int _ns1__UploadPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__UploadPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__UploadPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__UploadPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__UploadPhoto(struct soap *soap, const char *tag, int id, const _ns1__UploadPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__UploadPhoto), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoCollectionID", -1, &(a->_ns1__UploadPhoto::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_PointerToxsd__base64Binary(soap, "ns1:MainPhotoFilebytes", -1, &(a->_ns1__UploadPhoto::MainPhotoFilebytes), ""))
		return soap->error;
	if (soap_out_time(soap, "ns1:TakenDT", -1, &(a->_ns1__UploadPhoto::TakenDT), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__UploadPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__UploadPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__UploadPhoto * SOAP_FMAC4 soap_get__ns1__UploadPhoto(struct soap *soap, _ns1__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__UploadPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__UploadPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__UploadPhoto * SOAP_FMAC4 soap_in__ns1__UploadPhoto(struct soap *soap, const char *tag, _ns1__UploadPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__UploadPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__UploadPhoto, sizeof(_ns1__UploadPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__UploadPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__UploadPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_MainPhotoFilebytes1 = 1, soap_flag_TakenDT1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoCollectionID", &(a->_ns1__UploadPhoto::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_MainPhotoFilebytes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToxsd__base64Binary(soap, "ns1:MainPhotoFilebytes", &(a->_ns1__UploadPhoto::MainPhotoFilebytes), "xsd:base64Binary"))
				{	soap_flag_MainPhotoFilebytes1--;
					continue;
				}
			if (soap_flag_TakenDT1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_time(soap, "ns1:TakenDT", &(a->_ns1__UploadPhoto::TakenDT), "xsd:dateTime"))
				{	soap_flag_TakenDT1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__UploadPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__UploadPhoto, 0, sizeof(_ns1__UploadPhoto), 0, soap_copy__ns1__UploadPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_TakenDT1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__UploadPhoto * SOAP_FMAC6 soap_new__ns1__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate__ns1__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__UploadPhoto(struct soap *soap, _ns1__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__UploadPhoto * SOAP_FMAC4 soap_instantiate__ns1__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__UploadPhoto;
		if (size)
			*size = sizeof(_ns1__UploadPhoto);
		((_ns1__UploadPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__UploadPhoto);
		for (int i = 0; i < n; i++)
			((_ns1__UploadPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__UploadPhoto %p -> %p\n", q, p));
	*(_ns1__UploadPhoto*)p = *(_ns1__UploadPhoto*)q;
}

void _ns1__GetPhotosByCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetPhotosByCollectionResponse::GetPhotosByCollectionResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetPhotosByCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfPhotoItem(soap, &this->_ns1__GetPhotosByCollectionResponse::GetPhotosByCollectionResult);
	/* transient soap skipped */
}

int _ns1__GetPhotosByCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetPhotosByCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetPhotosByCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPhotosByCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetPhotosByCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPhotosByCollectionResponse), type))
		return soap->error;
	if (a->GetPhotosByCollectionResult)
		soap_element_result(soap, "ns1:GetPhotosByCollectionResult");
	if (soap_out_PointerTons1__ArrayOfPhotoItem(soap, "ns1:GetPhotosByCollectionResult", -1, &(a->_ns1__GetPhotosByCollectionResponse::GetPhotosByCollectionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPhotosByCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPhotosByCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_get__ns1__GetPhotosByCollectionResponse(struct soap *soap, _ns1__GetPhotosByCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPhotosByCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetPhotosByCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPhotosByCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_in__ns1__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, _ns1__GetPhotosByCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPhotosByCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPhotosByCollectionResponse, sizeof(_ns1__GetPhotosByCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPhotosByCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPhotosByCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetPhotosByCollectionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPhotosByCollectionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfPhotoItem(soap, "ns1:GetPhotosByCollectionResult", &(a->_ns1__GetPhotosByCollectionResponse::GetPhotosByCollectionResult), "ns1:ArrayOfPhotoItem"))
				{	soap_flag_GetPhotosByCollectionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetPhotosByCollectionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPhotosByCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPhotosByCollectionResponse, 0, sizeof(_ns1__GetPhotosByCollectionResponse), 0, soap_copy__ns1__GetPhotosByCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetPhotosByCollectionResponse * SOAP_FMAC6 soap_new__ns1__GetPhotosByCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetPhotosByCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetPhotosByCollectionResponse(struct soap *soap, _ns1__GetPhotosByCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetPhotosByCollectionResponse * SOAP_FMAC4 soap_instantiate__ns1__GetPhotosByCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPhotosByCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPhotosByCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetPhotosByCollectionResponse;
		if (size)
			*size = sizeof(_ns1__GetPhotosByCollectionResponse);
		((_ns1__GetPhotosByCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetPhotosByCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetPhotosByCollectionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetPhotosByCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetPhotosByCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPhotosByCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPhotosByCollectionResponse %p -> %p\n", q, p));
	*(_ns1__GetPhotosByCollectionResponse*)p = *(_ns1__GetPhotosByCollectionResponse*)q;
}

void _ns1__GetPhotosByCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetPhotosByCollection::WebPhotoCollectionID);
	/* transient soap skipped */
}

void _ns1__GetPhotosByCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetPhotosByCollection::WebPhotoCollectionID);
	/* transient soap skipped */
}

int _ns1__GetPhotosByCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetPhotosByCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetPhotosByCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPhotosByCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const _ns1__GetPhotosByCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPhotosByCollection), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoCollectionID", -1, &(a->_ns1__GetPhotosByCollection::WebPhotoCollectionID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPhotosByCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPhotosByCollection(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollection * SOAP_FMAC4 soap_get__ns1__GetPhotosByCollection(struct soap *soap, _ns1__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetPhotosByCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPhotosByCollection(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollection * SOAP_FMAC4 soap_in__ns1__GetPhotosByCollection(struct soap *soap, const char *tag, _ns1__GetPhotosByCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPhotosByCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPhotosByCollection, sizeof(_ns1__GetPhotosByCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPhotosByCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPhotosByCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoCollectionID", &(a->_ns1__GetPhotosByCollection::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPhotosByCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPhotosByCollection, 0, sizeof(_ns1__GetPhotosByCollection), 0, soap_copy__ns1__GetPhotosByCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetPhotosByCollection * SOAP_FMAC6 soap_new__ns1__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetPhotosByCollection(struct soap *soap, _ns1__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate__ns1__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetPhotosByCollection;
		if (size)
			*size = sizeof(_ns1__GetPhotosByCollection);
		((_ns1__GetPhotosByCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetPhotosByCollection);
		for (int i = 0; i < n; i++)
			((_ns1__GetPhotosByCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPhotosByCollection %p -> %p\n", q, p));
	*(_ns1__GetPhotosByCollection*)p = *(_ns1__GetPhotosByCollection*)q;
}

void _ns1__GetCollectionsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetCollectionsResponse::GetCollectionsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetCollectionsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfPhotoCollectionItem(soap, &this->_ns1__GetCollectionsResponse::GetCollectionsResult);
	/* transient soap skipped */
}

int _ns1__GetCollectionsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetCollectionsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetCollectionsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetCollectionsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCollectionsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetCollectionsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetCollectionsResponse), type))
		return soap->error;
	if (a->GetCollectionsResult)
		soap_element_result(soap, "ns1:GetCollectionsResult");
	if (soap_out_PointerTons1__ArrayOfPhotoCollectionItem(soap, "ns1:GetCollectionsResult", -1, &(a->_ns1__GetCollectionsResponse::GetCollectionsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetCollectionsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetCollectionsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetCollectionsResponse * SOAP_FMAC4 soap_get__ns1__GetCollectionsResponse(struct soap *soap, _ns1__GetCollectionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetCollectionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetCollectionsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetCollectionsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetCollectionsResponse * SOAP_FMAC4 soap_in__ns1__GetCollectionsResponse(struct soap *soap, const char *tag, _ns1__GetCollectionsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetCollectionsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetCollectionsResponse, sizeof(_ns1__GetCollectionsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetCollectionsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetCollectionsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetCollectionsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetCollectionsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfPhotoCollectionItem(soap, "ns1:GetCollectionsResult", &(a->_ns1__GetCollectionsResponse::GetCollectionsResult), "ns1:ArrayOfPhotoCollectionItem"))
				{	soap_flag_GetCollectionsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetCollectionsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetCollectionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetCollectionsResponse, 0, sizeof(_ns1__GetCollectionsResponse), 0, soap_copy__ns1__GetCollectionsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetCollectionsResponse * SOAP_FMAC6 soap_new__ns1__GetCollectionsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetCollectionsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetCollectionsResponse(struct soap *soap, _ns1__GetCollectionsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetCollectionsResponse * SOAP_FMAC4 soap_instantiate__ns1__GetCollectionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetCollectionsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetCollectionsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetCollectionsResponse;
		if (size)
			*size = sizeof(_ns1__GetCollectionsResponse);
		((_ns1__GetCollectionsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetCollectionsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetCollectionsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetCollectionsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetCollectionsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCollectionsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetCollectionsResponse %p -> %p\n", q, p));
	*(_ns1__GetCollectionsResponse*)p = *(_ns1__GetCollectionsResponse*)q;
}

void _ns1__GetCollections::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__GetCollections::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__GetCollections::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetCollections);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetCollections::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetCollections(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetCollections(struct soap *soap, const char *tag, int id, const _ns1__GetCollections *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetCollections), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetCollections::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetCollections(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetCollections * SOAP_FMAC4 soap_get__ns1__GetCollections(struct soap *soap, _ns1__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetCollections::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetCollections(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetCollections * SOAP_FMAC4 soap_in__ns1__GetCollections(struct soap *soap, const char *tag, _ns1__GetCollections *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetCollections *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetCollections, sizeof(_ns1__GetCollections), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetCollections)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetCollections *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetCollections *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetCollections, 0, sizeof(_ns1__GetCollections), 0, soap_copy__ns1__GetCollections);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetCollections * SOAP_FMAC6 soap_new__ns1__GetCollections(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetCollections(struct soap *soap, _ns1__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetCollections * SOAP_FMAC4 soap_instantiate__ns1__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetCollections;
		if (size)
			*size = sizeof(_ns1__GetCollections);
		((_ns1__GetCollections*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetCollections);
		for (int i = 0; i < n; i++)
			((_ns1__GetCollections*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetCollections %p -> %p\n", q, p));
	*(_ns1__GetCollections*)p = *(_ns1__GetCollections*)q;
}

void _ns1__CreateNewCollectionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->_ns1__CreateNewCollectionResponse::CreateNewCollectionResult);
	/* transient soap skipped */
}

void _ns1__CreateNewCollectionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CreateNewCollectionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CreateNewCollectionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CreateNewCollectionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CreateNewCollectionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateNewCollectionResponse(struct soap *soap, const char *tag, int id, const _ns1__CreateNewCollectionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CreateNewCollectionResponse), type))
		return soap->error;
	soap_element_result(soap, "ns1:CreateNewCollectionResult");
	if (soap_out_bool(soap, "ns1:CreateNewCollectionResult", -1, &(a->_ns1__CreateNewCollectionResponse::CreateNewCollectionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CreateNewCollectionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CreateNewCollectionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CreateNewCollectionResponse * SOAP_FMAC4 soap_get__ns1__CreateNewCollectionResponse(struct soap *soap, _ns1__CreateNewCollectionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CreateNewCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CreateNewCollectionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CreateNewCollectionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CreateNewCollectionResponse * SOAP_FMAC4 soap_in__ns1__CreateNewCollectionResponse(struct soap *soap, const char *tag, _ns1__CreateNewCollectionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CreateNewCollectionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CreateNewCollectionResponse, sizeof(_ns1__CreateNewCollectionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CreateNewCollectionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CreateNewCollectionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_CreateNewCollectionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_CreateNewCollectionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:CreateNewCollectionResult", &(a->_ns1__CreateNewCollectionResponse::CreateNewCollectionResult), "xsd:boolean"))
				{	soap_flag_CreateNewCollectionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:CreateNewCollectionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CreateNewCollectionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CreateNewCollectionResponse, 0, sizeof(_ns1__CreateNewCollectionResponse), 0, soap_copy__ns1__CreateNewCollectionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_CreateNewCollectionResult1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CreateNewCollectionResponse * SOAP_FMAC6 soap_new__ns1__CreateNewCollectionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__CreateNewCollectionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CreateNewCollectionResponse(struct soap *soap, _ns1__CreateNewCollectionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CreateNewCollectionResponse * SOAP_FMAC4 soap_instantiate__ns1__CreateNewCollectionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CreateNewCollectionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CreateNewCollectionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CreateNewCollectionResponse;
		if (size)
			*size = sizeof(_ns1__CreateNewCollectionResponse);
		((_ns1__CreateNewCollectionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CreateNewCollectionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CreateNewCollectionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CreateNewCollectionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CreateNewCollectionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateNewCollectionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CreateNewCollectionResponse %p -> %p\n", q, p));
	*(_ns1__CreateNewCollectionResponse*)p = *(_ns1__CreateNewCollectionResponse*)q;
}

void _ns1__CreateNewCollection::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__CreateNewCollection::NewFolderName);
	/* transient soap skipped */
}

void _ns1__CreateNewCollection::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__CreateNewCollection::NewFolderName);
	/* transient soap skipped */
}

int _ns1__CreateNewCollection::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CreateNewCollection);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CreateNewCollection::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CreateNewCollection(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CreateNewCollection(struct soap *soap, const char *tag, int id, const _ns1__CreateNewCollection *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CreateNewCollection), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:NewFolderName", -1, &(a->_ns1__CreateNewCollection::NewFolderName), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CreateNewCollection::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CreateNewCollection(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CreateNewCollection * SOAP_FMAC4 soap_get__ns1__CreateNewCollection(struct soap *soap, _ns1__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CreateNewCollection::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CreateNewCollection(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CreateNewCollection * SOAP_FMAC4 soap_in__ns1__CreateNewCollection(struct soap *soap, const char *tag, _ns1__CreateNewCollection *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CreateNewCollection *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CreateNewCollection, sizeof(_ns1__CreateNewCollection), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CreateNewCollection)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CreateNewCollection *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_NewFolderName1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NewFolderName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:NewFolderName", &(a->_ns1__CreateNewCollection::NewFolderName), "xsd:string"))
				{	soap_flag_NewFolderName1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CreateNewCollection *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CreateNewCollection, 0, sizeof(_ns1__CreateNewCollection), 0, soap_copy__ns1__CreateNewCollection);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CreateNewCollection * SOAP_FMAC6 soap_new__ns1__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate__ns1__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CreateNewCollection(struct soap *soap, _ns1__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CreateNewCollection * SOAP_FMAC4 soap_instantiate__ns1__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CreateNewCollection;
		if (size)
			*size = sizeof(_ns1__CreateNewCollection);
		((_ns1__CreateNewCollection*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CreateNewCollection);
		for (int i = 0; i < n; i++)
			((_ns1__CreateNewCollection*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CreateNewCollection %p -> %p\n", q, p));
	*(_ns1__CreateNewCollection*)p = *(_ns1__CreateNewCollection*)q;
}

void _ns1__LoginResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
}

void _ns1__LoginResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__LoginResponse::LoginResult);
	/* transient soap skipped */
}

int _ns1__LoginResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__LoginResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__LoginResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__LoginResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__LoginResponse(struct soap *soap, const char *tag, int id, const _ns1__LoginResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__LoginResponse), type))
		return soap->error;
	if (a->LoginResult)
		soap_element_result(soap, "ns1:LoginResult");
	if (soap_out_string(soap, "ns1:LoginResult", -1, &(a->_ns1__LoginResponse::LoginResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__LoginResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__LoginResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_get__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__LoginResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__LoginResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_in__ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__LoginResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__LoginResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__LoginResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_LoginResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_LoginResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:LoginResult", &(a->_ns1__LoginResponse::LoginResult), "xsd:string"))
				{	soap_flag_LoginResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:LoginResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__LoginResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__LoginResponse, 0, sizeof(_ns1__LoginResponse), 0, soap_copy__ns1__LoginResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__LoginResponse * SOAP_FMAC6 soap_new__ns1__LoginResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__LoginResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__LoginResponse * SOAP_FMAC4 soap_instantiate__ns1__LoginResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__LoginResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__LoginResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__LoginResponse;
		if (size)
			*size = sizeof(_ns1__LoginResponse);
		((_ns1__LoginResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__LoginResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__LoginResponse);
		for (int i = 0; i < n; i++)
			((_ns1__LoginResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__LoginResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__LoginResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__LoginResponse %p -> %p\n", q, p));
	*(_ns1__LoginResponse*)p = *(_ns1__LoginResponse*)q;
}

void _ns1__Login::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__Login::Email);
	soap_default_string(soap, &this->_ns1__Login::Password);
	/* transient soap skipped */
}

void _ns1__Login::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__Login::Email);
	soap_serialize_string(soap, &this->_ns1__Login::Password);
	/* transient soap skipped */
}

int _ns1__Login::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__Login);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__Login::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Login(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Login(struct soap *soap, const char *tag, int id, const _ns1__Login *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Login), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:Email", -1, &(a->_ns1__Login::Email), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Password", -1, &(a->_ns1__Login::Password), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__Login::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Login(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_get__ns1__Login(struct soap *soap, _ns1__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__Login::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__Login(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_in__ns1__Login(struct soap *soap, const char *tag, _ns1__Login *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Login *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__Login)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__Login *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_Email1 = 1, soap_flag_Password1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Email1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Email", &(a->_ns1__Login::Email), "xsd:string"))
				{	soap_flag_Email1--;
					continue;
				}
			if (soap_flag_Password1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Password", &(a->_ns1__Login::Password), "xsd:string"))
				{	soap_flag_Password1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Login *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Login, 0, sizeof(_ns1__Login), 0, soap_copy__ns1__Login);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__Login * SOAP_FMAC6 soap_new__ns1__Login(struct soap *soap, int n)
{	return soap_instantiate__ns1__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__Login(struct soap *soap, _ns1__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__Login * SOAP_FMAC4 soap_instantiate__ns1__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__Login;
		if (size)
			*size = sizeof(_ns1__Login);
		((_ns1__Login*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__Login);
		for (int i = 0; i < n; i++)
			((_ns1__Login*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__Login %p -> %p\n", q, p));
	*(_ns1__Login*)p = *(_ns1__Login*)q;
}

void ns1__PhotoItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__PhotoItem::WebPhotoID);
	soap_default_string(soap, &this->ns1__PhotoItem::MainPhotoURL);
	soap_default_string(soap, &this->ns1__PhotoItem::ThumbnailURL);
	/* transient soap skipped */
}

void ns1__PhotoItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__PhotoItem::WebPhotoID);
	soap_serialize_string(soap, &this->ns1__PhotoItem::MainPhotoURL);
	soap_serialize_string(soap, &this->ns1__PhotoItem::ThumbnailURL);
	/* transient soap skipped */
}

int ns1__PhotoItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__PhotoItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__PhotoItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PhotoItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PhotoItem(struct soap *soap, const char *tag, int id, const ns1__PhotoItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__PhotoItem), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoID", -1, &(a->ns1__PhotoItem::WebPhotoID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:MainPhotoURL", -1, &(a->ns1__PhotoItem::MainPhotoURL), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:ThumbnailURL", -1, &(a->ns1__PhotoItem::ThumbnailURL), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__PhotoItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PhotoItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PhotoItem * SOAP_FMAC4 soap_get_ns1__PhotoItem(struct soap *soap, ns1__PhotoItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__PhotoItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__PhotoItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PhotoItem * SOAP_FMAC4 soap_in_ns1__PhotoItem(struct soap *soap, const char *tag, ns1__PhotoItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PhotoItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__PhotoItem, sizeof(ns1__PhotoItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__PhotoItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__PhotoItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoID1 = 1, soap_flag_MainPhotoURL1 = 1, soap_flag_ThumbnailURL1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoID", &(a->ns1__PhotoItem::WebPhotoID), "xsd:string"))
				{	soap_flag_WebPhotoID1--;
					continue;
				}
			if (soap_flag_MainPhotoURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:MainPhotoURL", &(a->ns1__PhotoItem::MainPhotoURL), "xsd:string"))
				{	soap_flag_MainPhotoURL1--;
					continue;
				}
			if (soap_flag_ThumbnailURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:ThumbnailURL", &(a->ns1__PhotoItem::ThumbnailURL), "xsd:string"))
				{	soap_flag_ThumbnailURL1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__PhotoItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__PhotoItem, 0, sizeof(ns1__PhotoItem), 0, soap_copy_ns1__PhotoItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__PhotoItem * SOAP_FMAC6 soap_new_ns1__PhotoItem(struct soap *soap, int n)
{	return soap_instantiate_ns1__PhotoItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__PhotoItem(struct soap *soap, ns1__PhotoItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__PhotoItem * SOAP_FMAC4 soap_instantiate_ns1__PhotoItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PhotoItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__PhotoItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__PhotoItem;
		if (size)
			*size = sizeof(ns1__PhotoItem);
		((ns1__PhotoItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__PhotoItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__PhotoItem);
		for (int i = 0; i < n; i++)
			((ns1__PhotoItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__PhotoItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PhotoItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__PhotoItem %p -> %p\n", q, p));
	*(ns1__PhotoItem*)p = *(ns1__PhotoItem*)q;
}

void ns1__ArrayOfPhotoItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfPhotoItem::__sizePhotoItem = 0;
	this->ns1__ArrayOfPhotoItem::PhotoItem = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfPhotoItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfPhotoItem::PhotoItem)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfPhotoItem::__sizePhotoItem; i++)
		{
			soap_serialize_PointerTons1__PhotoItem(soap, this->ns1__ArrayOfPhotoItem::PhotoItem + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfPhotoItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfPhotoItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfPhotoItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfPhotoItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfPhotoItem(struct soap *soap, const char *tag, int id, const ns1__ArrayOfPhotoItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfPhotoItem), type))
		return soap->error;
	if (a->ns1__ArrayOfPhotoItem::PhotoItem)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfPhotoItem::__sizePhotoItem; i++)
			if (soap_out_PointerTons1__PhotoItem(soap, "ns1:PhotoItem", -1, a->ns1__ArrayOfPhotoItem::PhotoItem + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfPhotoItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfPhotoItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoItem * SOAP_FMAC4 soap_get_ns1__ArrayOfPhotoItem(struct soap *soap, ns1__ArrayOfPhotoItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfPhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfPhotoItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfPhotoItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoItem * SOAP_FMAC4 soap_in_ns1__ArrayOfPhotoItem(struct soap *soap, const char *tag, ns1__ArrayOfPhotoItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfPhotoItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfPhotoItem, sizeof(ns1__ArrayOfPhotoItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfPhotoItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfPhotoItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_PhotoItem1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoItem1 && soap->error == SOAP_TAG_MISMATCH)
			{	ns1__PhotoItem **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfPhotoItem::__sizePhotoItem = 0; !soap_element_begin_in(soap, "ns1:PhotoItem", 1, NULL); a->ns1__ArrayOfPhotoItem::__sizePhotoItem++)
				{	p = (ns1__PhotoItem **)soap_push_block(soap, sizeof(ns1__PhotoItem *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_PointerTons1__PhotoItem(soap, "ns1:PhotoItem", p, "ns1:PhotoItem"))
						break;
					soap_flag_PhotoItem1 = 0;
				}
				a->ns1__ArrayOfPhotoItem::PhotoItem = (ns1__PhotoItem **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_PhotoItem1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfPhotoItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfPhotoItem, 0, sizeof(ns1__ArrayOfPhotoItem), 0, soap_copy_ns1__ArrayOfPhotoItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfPhotoItem * SOAP_FMAC6 soap_new_ns1__ArrayOfPhotoItem(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfPhotoItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfPhotoItem(struct soap *soap, ns1__ArrayOfPhotoItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfPhotoItem * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfPhotoItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfPhotoItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfPhotoItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfPhotoItem;
		if (size)
			*size = sizeof(ns1__ArrayOfPhotoItem);
		((ns1__ArrayOfPhotoItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfPhotoItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfPhotoItem);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfPhotoItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfPhotoItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfPhotoItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfPhotoItem %p -> %p\n", q, p));
	*(ns1__ArrayOfPhotoItem*)p = *(ns1__ArrayOfPhotoItem*)q;
}

void ns1__PhotoCollectionItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__PhotoCollectionItem::WebPhotoCollectionID);
	soap_default_string(soap, &this->ns1__PhotoCollectionItem::Name);
	/* transient soap skipped */
}

void ns1__PhotoCollectionItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__PhotoCollectionItem::WebPhotoCollectionID);
	soap_serialize_string(soap, &this->ns1__PhotoCollectionItem::Name);
	/* transient soap skipped */
}

int ns1__PhotoCollectionItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__PhotoCollectionItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__PhotoCollectionItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PhotoCollectionItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PhotoCollectionItem(struct soap *soap, const char *tag, int id, const ns1__PhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__PhotoCollectionItem), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPhotoCollectionID", -1, &(a->ns1__PhotoCollectionItem::WebPhotoCollectionID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Name", -1, &(a->ns1__PhotoCollectionItem::Name), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__PhotoCollectionItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PhotoCollectionItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PhotoCollectionItem * SOAP_FMAC4 soap_get_ns1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__PhotoCollectionItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__PhotoCollectionItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PhotoCollectionItem * SOAP_FMAC4 soap_in_ns1__PhotoCollectionItem(struct soap *soap, const char *tag, ns1__PhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PhotoCollectionItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__PhotoCollectionItem, sizeof(ns1__PhotoCollectionItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__PhotoCollectionItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__PhotoCollectionItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebPhotoCollectionID1 = 1, soap_flag_Name1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebPhotoCollectionID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPhotoCollectionID", &(a->ns1__PhotoCollectionItem::WebPhotoCollectionID), "xsd:string"))
				{	soap_flag_WebPhotoCollectionID1--;
					continue;
				}
			if (soap_flag_Name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Name", &(a->ns1__PhotoCollectionItem::Name), "xsd:string"))
				{	soap_flag_Name1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__PhotoCollectionItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__PhotoCollectionItem, 0, sizeof(ns1__PhotoCollectionItem), 0, soap_copy_ns1__PhotoCollectionItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__PhotoCollectionItem * SOAP_FMAC6 soap_new_ns1__PhotoCollectionItem(struct soap *soap, int n)
{	return soap_instantiate_ns1__PhotoCollectionItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__PhotoCollectionItem * SOAP_FMAC4 soap_instantiate_ns1__PhotoCollectionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PhotoCollectionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__PhotoCollectionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__PhotoCollectionItem;
		if (size)
			*size = sizeof(ns1__PhotoCollectionItem);
		((ns1__PhotoCollectionItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__PhotoCollectionItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__PhotoCollectionItem);
		for (int i = 0; i < n; i++)
			((ns1__PhotoCollectionItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__PhotoCollectionItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PhotoCollectionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__PhotoCollectionItem %p -> %p\n", q, p));
	*(ns1__PhotoCollectionItem*)p = *(ns1__PhotoCollectionItem*)q;
}

void ns1__ArrayOfPhotoCollectionItem::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfPhotoCollectionItem::__sizePhotoCollectionItem = 0;
	this->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfPhotoCollectionItem::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfPhotoCollectionItem::__sizePhotoCollectionItem; i++)
		{
			soap_serialize_PointerTons1__PhotoCollectionItem(soap, this->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfPhotoCollectionItem::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfPhotoCollectionItem::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfPhotoCollectionItem(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, int id, const ns1__ArrayOfPhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem), type))
		return soap->error;
	if (a->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfPhotoCollectionItem::__sizePhotoCollectionItem; i++)
			if (soap_out_PointerTons1__PhotoCollectionItem(soap, "ns1:PhotoCollectionItem", -1, a->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfPhotoCollectionItem::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfPhotoCollectionItem(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_get_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, ns1__ArrayOfPhotoCollectionItem *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfPhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfPhotoCollectionItem::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfPhotoCollectionItem(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_in_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, ns1__ArrayOfPhotoCollectionItem *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfPhotoCollectionItem *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem, sizeof(ns1__ArrayOfPhotoCollectionItem), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfPhotoCollectionItem *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_PhotoCollectionItem1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PhotoCollectionItem1 && soap->error == SOAP_TAG_MISMATCH)
			{	ns1__PhotoCollectionItem **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfPhotoCollectionItem::__sizePhotoCollectionItem = 0; !soap_element_begin_in(soap, "ns1:PhotoCollectionItem", 1, NULL); a->ns1__ArrayOfPhotoCollectionItem::__sizePhotoCollectionItem++)
				{	p = (ns1__PhotoCollectionItem **)soap_push_block(soap, sizeof(ns1__PhotoCollectionItem *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_PointerTons1__PhotoCollectionItem(soap, "ns1:PhotoCollectionItem", p, "ns1:PhotoCollectionItem"))
						break;
					soap_flag_PhotoCollectionItem1 = 0;
				}
				a->ns1__ArrayOfPhotoCollectionItem::PhotoCollectionItem = (ns1__PhotoCollectionItem **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_PhotoCollectionItem1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfPhotoCollectionItem *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem, 0, sizeof(ns1__ArrayOfPhotoCollectionItem), 0, soap_copy_ns1__ArrayOfPhotoCollectionItem);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfPhotoCollectionItem * SOAP_FMAC6 soap_new_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfPhotoCollectionItem(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, ns1__ArrayOfPhotoCollectionItem *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfPhotoCollectionItem * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfPhotoCollectionItem(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfPhotoCollectionItem;
		if (size)
			*size = sizeof(ns1__ArrayOfPhotoCollectionItem);
		((ns1__ArrayOfPhotoCollectionItem*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfPhotoCollectionItem[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfPhotoCollectionItem);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfPhotoCollectionItem*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfPhotoCollectionItem*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfPhotoCollectionItem(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfPhotoCollectionItem %p -> %p\n", q, p));
	*(ns1__ArrayOfPhotoCollectionItem*)p = *(ns1__ArrayOfPhotoCollectionItem*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 xsd__base64Binary * SOAP_FMAC6 soap_new_xsd__base64Binary(struct soap *soap, int n)
{	return soap_instantiate_xsd__base64Binary(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new xsd__base64Binary;
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new xsd__base64Binary[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__DeletePhoto(struct soap *soap, struct __ns4__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeletePhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__DeletePhoto(struct soap *soap, const struct __ns4__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeletePhoto(soap, &a->ns1__DeletePhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__DeletePhoto(struct soap *soap, const struct __ns4__DeletePhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__DeletePhoto(struct soap *soap, const char *tag, int id, const struct __ns4__DeletePhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeletePhoto(soap, "ns1:DeletePhoto", -1, &a->ns1__DeletePhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__DeletePhoto * SOAP_FMAC4 soap_get___ns4__DeletePhoto(struct soap *soap, struct __ns4__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__DeletePhoto * SOAP_FMAC4 soap_in___ns4__DeletePhoto(struct soap *soap, const char *tag, struct __ns4__DeletePhoto *a, const char *type)
{
	short soap_flag_ns1__DeletePhoto = 1;
	short soap_flag;
	a = (struct __ns4__DeletePhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__DeletePhoto, sizeof(struct __ns4__DeletePhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__DeletePhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeletePhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeletePhoto(soap, "ns1:DeletePhoto", &a->ns1__DeletePhoto, ""))
				{	soap_flag_ns1__DeletePhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__DeletePhoto * SOAP_FMAC6 soap_new___ns4__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate___ns4__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__DeletePhoto(struct soap *soap, struct __ns4__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__DeletePhoto * SOAP_FMAC4 soap_instantiate___ns4__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__DeletePhoto;
		if (size)
			*size = sizeof(struct __ns4__DeletePhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__DeletePhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__DeletePhoto %p -> %p\n", q, p));
	*(struct __ns4__DeletePhoto*)p = *(struct __ns4__DeletePhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__RenameCollection(struct soap *soap, struct __ns4__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RenameCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__RenameCollection(struct soap *soap, const struct __ns4__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RenameCollection(soap, &a->ns1__RenameCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__RenameCollection(struct soap *soap, const struct __ns4__RenameCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__RenameCollection(struct soap *soap, const char *tag, int id, const struct __ns4__RenameCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RenameCollection(soap, "ns1:RenameCollection", -1, &a->ns1__RenameCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__RenameCollection * SOAP_FMAC4 soap_get___ns4__RenameCollection(struct soap *soap, struct __ns4__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__RenameCollection * SOAP_FMAC4 soap_in___ns4__RenameCollection(struct soap *soap, const char *tag, struct __ns4__RenameCollection *a, const char *type)
{
	short soap_flag_ns1__RenameCollection = 1;
	short soap_flag;
	a = (struct __ns4__RenameCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__RenameCollection, sizeof(struct __ns4__RenameCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__RenameCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RenameCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RenameCollection(soap, "ns1:RenameCollection", &a->ns1__RenameCollection, ""))
				{	soap_flag_ns1__RenameCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__RenameCollection * SOAP_FMAC6 soap_new___ns4__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate___ns4__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__RenameCollection(struct soap *soap, struct __ns4__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__RenameCollection * SOAP_FMAC4 soap_instantiate___ns4__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__RenameCollection;
		if (size)
			*size = sizeof(struct __ns4__RenameCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__RenameCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__RenameCollection %p -> %p\n", q, p));
	*(struct __ns4__RenameCollection*)p = *(struct __ns4__RenameCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__JavaUploadPhoto(struct soap *soap, struct __ns4__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__JavaUploadPhoto(struct soap *soap, const struct __ns4__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__JavaUploadPhoto(soap, &a->ns1__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__JavaUploadPhoto(struct soap *soap, const struct __ns4__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns4__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__JavaUploadPhoto(soap, "ns1:JavaUploadPhoto", -1, &a->ns1__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__JavaUploadPhoto * SOAP_FMAC4 soap_get___ns4__JavaUploadPhoto(struct soap *soap, struct __ns4__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__JavaUploadPhoto * SOAP_FMAC4 soap_in___ns4__JavaUploadPhoto(struct soap *soap, const char *tag, struct __ns4__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_ns1__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __ns4__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__JavaUploadPhoto, sizeof(struct __ns4__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__JavaUploadPhoto(soap, "ns1:JavaUploadPhoto", &a->ns1__JavaUploadPhoto, ""))
				{	soap_flag_ns1__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__JavaUploadPhoto * SOAP_FMAC6 soap_new___ns4__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns4__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__JavaUploadPhoto(struct soap *soap, struct __ns4__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___ns4__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __ns4__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __ns4__JavaUploadPhoto*)p = *(struct __ns4__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__DeviceUploadPhoto(struct soap *soap, struct __ns4__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__DeviceUploadPhoto(struct soap *soap, const struct __ns4__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeviceUploadPhoto(soap, &a->ns1__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__DeviceUploadPhoto(struct soap *soap, const struct __ns4__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns4__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeviceUploadPhoto(soap, "ns1:DeviceUploadPhoto", -1, &a->ns1__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__DeviceUploadPhoto * SOAP_FMAC4 soap_get___ns4__DeviceUploadPhoto(struct soap *soap, struct __ns4__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__DeviceUploadPhoto * SOAP_FMAC4 soap_in___ns4__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __ns4__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_ns1__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __ns4__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__DeviceUploadPhoto, sizeof(struct __ns4__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeviceUploadPhoto(soap, "ns1:DeviceUploadPhoto", &a->ns1__DeviceUploadPhoto, ""))
				{	soap_flag_ns1__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__DeviceUploadPhoto * SOAP_FMAC6 soap_new___ns4__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns4__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__DeviceUploadPhoto(struct soap *soap, struct __ns4__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___ns4__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __ns4__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __ns4__DeviceUploadPhoto*)p = *(struct __ns4__DeviceUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__UploadPhoto(struct soap *soap, struct __ns4__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__UploadPhoto(struct soap *soap, const struct __ns4__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__UploadPhoto(soap, &a->ns1__UploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__UploadPhoto(struct soap *soap, const struct __ns4__UploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__UploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns4__UploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__UploadPhoto(soap, "ns1:UploadPhoto", -1, &a->ns1__UploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__UploadPhoto * SOAP_FMAC4 soap_get___ns4__UploadPhoto(struct soap *soap, struct __ns4__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__UploadPhoto * SOAP_FMAC4 soap_in___ns4__UploadPhoto(struct soap *soap, const char *tag, struct __ns4__UploadPhoto *a, const char *type)
{
	short soap_flag_ns1__UploadPhoto = 1;
	short soap_flag;
	a = (struct __ns4__UploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__UploadPhoto, sizeof(struct __ns4__UploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__UploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadPhoto(soap, "ns1:UploadPhoto", &a->ns1__UploadPhoto, ""))
				{	soap_flag_ns1__UploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__UploadPhoto * SOAP_FMAC6 soap_new___ns4__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns4__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__UploadPhoto(struct soap *soap, struct __ns4__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__UploadPhoto * SOAP_FMAC4 soap_instantiate___ns4__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__UploadPhoto;
		if (size)
			*size = sizeof(struct __ns4__UploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__UploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__UploadPhoto %p -> %p\n", q, p));
	*(struct __ns4__UploadPhoto*)p = *(struct __ns4__UploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetPhotosByCollection(struct soap *soap, struct __ns4__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetPhotosByCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetPhotosByCollection(struct soap *soap, const struct __ns4__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetPhotosByCollection(soap, &a->ns1__GetPhotosByCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetPhotosByCollection(struct soap *soap, const struct __ns4__GetPhotosByCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const struct __ns4__GetPhotosByCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetPhotosByCollection(soap, "ns1:GetPhotosByCollection", -1, &a->ns1__GetPhotosByCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetPhotosByCollection * SOAP_FMAC4 soap_get___ns4__GetPhotosByCollection(struct soap *soap, struct __ns4__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetPhotosByCollection * SOAP_FMAC4 soap_in___ns4__GetPhotosByCollection(struct soap *soap, const char *tag, struct __ns4__GetPhotosByCollection *a, const char *type)
{
	short soap_flag_ns1__GetPhotosByCollection = 1;
	short soap_flag;
	a = (struct __ns4__GetPhotosByCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetPhotosByCollection, sizeof(struct __ns4__GetPhotosByCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetPhotosByCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetPhotosByCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetPhotosByCollection(soap, "ns1:GetPhotosByCollection", &a->ns1__GetPhotosByCollection, ""))
				{	soap_flag_ns1__GetPhotosByCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetPhotosByCollection * SOAP_FMAC6 soap_new___ns4__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetPhotosByCollection(struct soap *soap, struct __ns4__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate___ns4__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetPhotosByCollection;
		if (size)
			*size = sizeof(struct __ns4__GetPhotosByCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetPhotosByCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetPhotosByCollection %p -> %p\n", q, p));
	*(struct __ns4__GetPhotosByCollection*)p = *(struct __ns4__GetPhotosByCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetCollections(struct soap *soap, struct __ns4__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetCollections = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetCollections(struct soap *soap, const struct __ns4__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetCollections(soap, &a->ns1__GetCollections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetCollections(struct soap *soap, const struct __ns4__GetCollections *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetCollections(struct soap *soap, const char *tag, int id, const struct __ns4__GetCollections *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetCollections(soap, "ns1:GetCollections", -1, &a->ns1__GetCollections, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetCollections * SOAP_FMAC4 soap_get___ns4__GetCollections(struct soap *soap, struct __ns4__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetCollections * SOAP_FMAC4 soap_in___ns4__GetCollections(struct soap *soap, const char *tag, struct __ns4__GetCollections *a, const char *type)
{
	short soap_flag_ns1__GetCollections = 1;
	short soap_flag;
	a = (struct __ns4__GetCollections *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetCollections, sizeof(struct __ns4__GetCollections), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetCollections(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetCollections && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetCollections(soap, "ns1:GetCollections", &a->ns1__GetCollections, ""))
				{	soap_flag_ns1__GetCollections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetCollections * SOAP_FMAC6 soap_new___ns4__GetCollections(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetCollections(struct soap *soap, struct __ns4__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetCollections * SOAP_FMAC4 soap_instantiate___ns4__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetCollections;
		if (size)
			*size = sizeof(struct __ns4__GetCollections);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetCollections);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetCollections %p -> %p\n", q, p));
	*(struct __ns4__GetCollections*)p = *(struct __ns4__GetCollections*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__CreateNewCollection(struct soap *soap, struct __ns4__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CreateNewCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__CreateNewCollection(struct soap *soap, const struct __ns4__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CreateNewCollection(soap, &a->ns1__CreateNewCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__CreateNewCollection(struct soap *soap, const struct __ns4__CreateNewCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__CreateNewCollection(struct soap *soap, const char *tag, int id, const struct __ns4__CreateNewCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CreateNewCollection(soap, "ns1:CreateNewCollection", -1, &a->ns1__CreateNewCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__CreateNewCollection * SOAP_FMAC4 soap_get___ns4__CreateNewCollection(struct soap *soap, struct __ns4__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__CreateNewCollection * SOAP_FMAC4 soap_in___ns4__CreateNewCollection(struct soap *soap, const char *tag, struct __ns4__CreateNewCollection *a, const char *type)
{
	short soap_flag_ns1__CreateNewCollection = 1;
	short soap_flag;
	a = (struct __ns4__CreateNewCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__CreateNewCollection, sizeof(struct __ns4__CreateNewCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__CreateNewCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CreateNewCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CreateNewCollection(soap, "ns1:CreateNewCollection", &a->ns1__CreateNewCollection, ""))
				{	soap_flag_ns1__CreateNewCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__CreateNewCollection * SOAP_FMAC6 soap_new___ns4__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate___ns4__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__CreateNewCollection(struct soap *soap, struct __ns4__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__CreateNewCollection * SOAP_FMAC4 soap_instantiate___ns4__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__CreateNewCollection;
		if (size)
			*size = sizeof(struct __ns4__CreateNewCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__CreateNewCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__CreateNewCollection %p -> %p\n", q, p));
	*(struct __ns4__CreateNewCollection*)p = *(struct __ns4__CreateNewCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__Login(struct soap *soap, struct __ns4__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__Login(struct soap *soap, const struct __ns4__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__Login(struct soap *soap, const struct __ns4__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__Login(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__Login(struct soap *soap, const char *tag, int id, const struct __ns4__Login *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__Login * SOAP_FMAC4 soap_get___ns4__Login(struct soap *soap, struct __ns4__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__Login * SOAP_FMAC4 soap_in___ns4__Login(struct soap *soap, const char *tag, struct __ns4__Login *a, const char *type)
{
	short soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns4__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__Login, sizeof(struct __ns4__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__Login * SOAP_FMAC6 soap_new___ns4__Login(struct soap *soap, int n)
{	return soap_instantiate___ns4__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__Login(struct soap *soap, struct __ns4__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__Login * SOAP_FMAC4 soap_instantiate___ns4__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__Login;
		if (size)
			*size = sizeof(struct __ns4__Login);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__Login);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__Login %p -> %p\n", q, p));
	*(struct __ns4__Login*)p = *(struct __ns4__Login*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DeletePhoto(struct soap *soap, struct __ns3__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeletePhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DeletePhoto(struct soap *soap, const struct __ns3__DeletePhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeletePhoto(soap, &a->ns1__DeletePhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DeletePhoto(struct soap *soap, const struct __ns3__DeletePhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DeletePhoto(struct soap *soap, const char *tag, int id, const struct __ns3__DeletePhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeletePhoto(soap, "ns1:DeletePhoto", -1, &a->ns1__DeletePhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DeletePhoto * SOAP_FMAC4 soap_get___ns3__DeletePhoto(struct soap *soap, struct __ns3__DeletePhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DeletePhoto * SOAP_FMAC4 soap_in___ns3__DeletePhoto(struct soap *soap, const char *tag, struct __ns3__DeletePhoto *a, const char *type)
{
	short soap_flag_ns1__DeletePhoto = 1;
	short soap_flag;
	a = (struct __ns3__DeletePhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DeletePhoto, sizeof(struct __ns3__DeletePhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DeletePhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeletePhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeletePhoto(soap, "ns1:DeletePhoto", &a->ns1__DeletePhoto, ""))
				{	soap_flag_ns1__DeletePhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DeletePhoto * SOAP_FMAC6 soap_new___ns3__DeletePhoto(struct soap *soap, int n)
{	return soap_instantiate___ns3__DeletePhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DeletePhoto(struct soap *soap, struct __ns3__DeletePhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DeletePhoto * SOAP_FMAC4 soap_instantiate___ns3__DeletePhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DeletePhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DeletePhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DeletePhoto;
		if (size)
			*size = sizeof(struct __ns3__DeletePhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DeletePhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DeletePhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DeletePhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DeletePhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DeletePhoto %p -> %p\n", q, p));
	*(struct __ns3__DeletePhoto*)p = *(struct __ns3__DeletePhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__RenameCollection(struct soap *soap, struct __ns3__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__RenameCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__RenameCollection(struct soap *soap, const struct __ns3__RenameCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__RenameCollection(soap, &a->ns1__RenameCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__RenameCollection(struct soap *soap, const struct __ns3__RenameCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__RenameCollection(struct soap *soap, const char *tag, int id, const struct __ns3__RenameCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__RenameCollection(soap, "ns1:RenameCollection", -1, &a->ns1__RenameCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__RenameCollection * SOAP_FMAC4 soap_get___ns3__RenameCollection(struct soap *soap, struct __ns3__RenameCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__RenameCollection * SOAP_FMAC4 soap_in___ns3__RenameCollection(struct soap *soap, const char *tag, struct __ns3__RenameCollection *a, const char *type)
{
	short soap_flag_ns1__RenameCollection = 1;
	short soap_flag;
	a = (struct __ns3__RenameCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__RenameCollection, sizeof(struct __ns3__RenameCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__RenameCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__RenameCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__RenameCollection(soap, "ns1:RenameCollection", &a->ns1__RenameCollection, ""))
				{	soap_flag_ns1__RenameCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__RenameCollection * SOAP_FMAC6 soap_new___ns3__RenameCollection(struct soap *soap, int n)
{	return soap_instantiate___ns3__RenameCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__RenameCollection(struct soap *soap, struct __ns3__RenameCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__RenameCollection * SOAP_FMAC4 soap_instantiate___ns3__RenameCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__RenameCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__RenameCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__RenameCollection;
		if (size)
			*size = sizeof(struct __ns3__RenameCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__RenameCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__RenameCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__RenameCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__RenameCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__RenameCollection %p -> %p\n", q, p));
	*(struct __ns3__RenameCollection*)p = *(struct __ns3__RenameCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__JavaUploadPhoto(struct soap *soap, struct __ns3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__JavaUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__JavaUploadPhoto(struct soap *soap, const struct __ns3__JavaUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__JavaUploadPhoto(soap, &a->ns1__JavaUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__JavaUploadPhoto(struct soap *soap, const struct __ns3__JavaUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__JavaUploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns3__JavaUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__JavaUploadPhoto(soap, "ns1:JavaUploadPhoto", -1, &a->ns1__JavaUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__JavaUploadPhoto * SOAP_FMAC4 soap_get___ns3__JavaUploadPhoto(struct soap *soap, struct __ns3__JavaUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__JavaUploadPhoto * SOAP_FMAC4 soap_in___ns3__JavaUploadPhoto(struct soap *soap, const char *tag, struct __ns3__JavaUploadPhoto *a, const char *type)
{
	short soap_flag_ns1__JavaUploadPhoto = 1;
	short soap_flag;
	a = (struct __ns3__JavaUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__JavaUploadPhoto, sizeof(struct __ns3__JavaUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__JavaUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__JavaUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__JavaUploadPhoto(soap, "ns1:JavaUploadPhoto", &a->ns1__JavaUploadPhoto, ""))
				{	soap_flag_ns1__JavaUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__JavaUploadPhoto * SOAP_FMAC6 soap_new___ns3__JavaUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns3__JavaUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__JavaUploadPhoto(struct soap *soap, struct __ns3__JavaUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__JavaUploadPhoto * SOAP_FMAC4 soap_instantiate___ns3__JavaUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__JavaUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__JavaUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__JavaUploadPhoto;
		if (size)
			*size = sizeof(struct __ns3__JavaUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__JavaUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__JavaUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__JavaUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__JavaUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__JavaUploadPhoto %p -> %p\n", q, p));
	*(struct __ns3__JavaUploadPhoto*)p = *(struct __ns3__JavaUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__DeviceUploadPhoto(struct soap *soap, struct __ns3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DeviceUploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__DeviceUploadPhoto(struct soap *soap, const struct __ns3__DeviceUploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__DeviceUploadPhoto(soap, &a->ns1__DeviceUploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__DeviceUploadPhoto(struct soap *soap, const struct __ns3__DeviceUploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns3__DeviceUploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__DeviceUploadPhoto(soap, "ns1:DeviceUploadPhoto", -1, &a->ns1__DeviceUploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__DeviceUploadPhoto * SOAP_FMAC4 soap_get___ns3__DeviceUploadPhoto(struct soap *soap, struct __ns3__DeviceUploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__DeviceUploadPhoto * SOAP_FMAC4 soap_in___ns3__DeviceUploadPhoto(struct soap *soap, const char *tag, struct __ns3__DeviceUploadPhoto *a, const char *type)
{
	short soap_flag_ns1__DeviceUploadPhoto = 1;
	short soap_flag;
	a = (struct __ns3__DeviceUploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__DeviceUploadPhoto, sizeof(struct __ns3__DeviceUploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__DeviceUploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DeviceUploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__DeviceUploadPhoto(soap, "ns1:DeviceUploadPhoto", &a->ns1__DeviceUploadPhoto, ""))
				{	soap_flag_ns1__DeviceUploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__DeviceUploadPhoto * SOAP_FMAC6 soap_new___ns3__DeviceUploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns3__DeviceUploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__DeviceUploadPhoto(struct soap *soap, struct __ns3__DeviceUploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__DeviceUploadPhoto * SOAP_FMAC4 soap_instantiate___ns3__DeviceUploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__DeviceUploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__DeviceUploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__DeviceUploadPhoto;
		if (size)
			*size = sizeof(struct __ns3__DeviceUploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__DeviceUploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__DeviceUploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__DeviceUploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__DeviceUploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__DeviceUploadPhoto %p -> %p\n", q, p));
	*(struct __ns3__DeviceUploadPhoto*)p = *(struct __ns3__DeviceUploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__UploadPhoto(struct soap *soap, struct __ns3__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__UploadPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__UploadPhoto(struct soap *soap, const struct __ns3__UploadPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__UploadPhoto(soap, &a->ns1__UploadPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__UploadPhoto(struct soap *soap, const struct __ns3__UploadPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__UploadPhoto(struct soap *soap, const char *tag, int id, const struct __ns3__UploadPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__UploadPhoto(soap, "ns1:UploadPhoto", -1, &a->ns1__UploadPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__UploadPhoto * SOAP_FMAC4 soap_get___ns3__UploadPhoto(struct soap *soap, struct __ns3__UploadPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__UploadPhoto * SOAP_FMAC4 soap_in___ns3__UploadPhoto(struct soap *soap, const char *tag, struct __ns3__UploadPhoto *a, const char *type)
{
	short soap_flag_ns1__UploadPhoto = 1;
	short soap_flag;
	a = (struct __ns3__UploadPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__UploadPhoto, sizeof(struct __ns3__UploadPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__UploadPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__UploadPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__UploadPhoto(soap, "ns1:UploadPhoto", &a->ns1__UploadPhoto, ""))
				{	soap_flag_ns1__UploadPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__UploadPhoto * SOAP_FMAC6 soap_new___ns3__UploadPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns3__UploadPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__UploadPhoto(struct soap *soap, struct __ns3__UploadPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__UploadPhoto * SOAP_FMAC4 soap_instantiate___ns3__UploadPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__UploadPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__UploadPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__UploadPhoto;
		if (size)
			*size = sizeof(struct __ns3__UploadPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__UploadPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__UploadPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__UploadPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__UploadPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__UploadPhoto %p -> %p\n", q, p));
	*(struct __ns3__UploadPhoto*)p = *(struct __ns3__UploadPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetPhotosByCollection(struct soap *soap, struct __ns3__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetPhotosByCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetPhotosByCollection(struct soap *soap, const struct __ns3__GetPhotosByCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetPhotosByCollection(soap, &a->ns1__GetPhotosByCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetPhotosByCollection(struct soap *soap, const struct __ns3__GetPhotosByCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetPhotosByCollection(struct soap *soap, const char *tag, int id, const struct __ns3__GetPhotosByCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetPhotosByCollection(soap, "ns1:GetPhotosByCollection", -1, &a->ns1__GetPhotosByCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetPhotosByCollection * SOAP_FMAC4 soap_get___ns3__GetPhotosByCollection(struct soap *soap, struct __ns3__GetPhotosByCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetPhotosByCollection * SOAP_FMAC4 soap_in___ns3__GetPhotosByCollection(struct soap *soap, const char *tag, struct __ns3__GetPhotosByCollection *a, const char *type)
{
	short soap_flag_ns1__GetPhotosByCollection = 1;
	short soap_flag;
	a = (struct __ns3__GetPhotosByCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetPhotosByCollection, sizeof(struct __ns3__GetPhotosByCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetPhotosByCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetPhotosByCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetPhotosByCollection(soap, "ns1:GetPhotosByCollection", &a->ns1__GetPhotosByCollection, ""))
				{	soap_flag_ns1__GetPhotosByCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetPhotosByCollection * SOAP_FMAC6 soap_new___ns3__GetPhotosByCollection(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetPhotosByCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetPhotosByCollection(struct soap *soap, struct __ns3__GetPhotosByCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetPhotosByCollection * SOAP_FMAC4 soap_instantiate___ns3__GetPhotosByCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetPhotosByCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetPhotosByCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetPhotosByCollection;
		if (size)
			*size = sizeof(struct __ns3__GetPhotosByCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetPhotosByCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetPhotosByCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetPhotosByCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetPhotosByCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetPhotosByCollection %p -> %p\n", q, p));
	*(struct __ns3__GetPhotosByCollection*)p = *(struct __ns3__GetPhotosByCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetCollections(struct soap *soap, struct __ns3__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetCollections = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetCollections(struct soap *soap, const struct __ns3__GetCollections *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetCollections(soap, &a->ns1__GetCollections);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetCollections(struct soap *soap, const struct __ns3__GetCollections *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetCollections(struct soap *soap, const char *tag, int id, const struct __ns3__GetCollections *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetCollections(soap, "ns1:GetCollections", -1, &a->ns1__GetCollections, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetCollections * SOAP_FMAC4 soap_get___ns3__GetCollections(struct soap *soap, struct __ns3__GetCollections *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetCollections * SOAP_FMAC4 soap_in___ns3__GetCollections(struct soap *soap, const char *tag, struct __ns3__GetCollections *a, const char *type)
{
	short soap_flag_ns1__GetCollections = 1;
	short soap_flag;
	a = (struct __ns3__GetCollections *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetCollections, sizeof(struct __ns3__GetCollections), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetCollections(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetCollections && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetCollections(soap, "ns1:GetCollections", &a->ns1__GetCollections, ""))
				{	soap_flag_ns1__GetCollections--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetCollections * SOAP_FMAC6 soap_new___ns3__GetCollections(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetCollections(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetCollections(struct soap *soap, struct __ns3__GetCollections *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetCollections * SOAP_FMAC4 soap_instantiate___ns3__GetCollections(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetCollections(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetCollections, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetCollections;
		if (size)
			*size = sizeof(struct __ns3__GetCollections);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetCollections[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetCollections);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetCollections*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetCollections(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetCollections %p -> %p\n", q, p));
	*(struct __ns3__GetCollections*)p = *(struct __ns3__GetCollections*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CreateNewCollection(struct soap *soap, struct __ns3__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CreateNewCollection = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CreateNewCollection(struct soap *soap, const struct __ns3__CreateNewCollection *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CreateNewCollection(soap, &a->ns1__CreateNewCollection);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CreateNewCollection(struct soap *soap, const struct __ns3__CreateNewCollection *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CreateNewCollection(struct soap *soap, const char *tag, int id, const struct __ns3__CreateNewCollection *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CreateNewCollection(soap, "ns1:CreateNewCollection", -1, &a->ns1__CreateNewCollection, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CreateNewCollection * SOAP_FMAC4 soap_get___ns3__CreateNewCollection(struct soap *soap, struct __ns3__CreateNewCollection *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__CreateNewCollection * SOAP_FMAC4 soap_in___ns3__CreateNewCollection(struct soap *soap, const char *tag, struct __ns3__CreateNewCollection *a, const char *type)
{
	short soap_flag_ns1__CreateNewCollection = 1;
	short soap_flag;
	a = (struct __ns3__CreateNewCollection *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CreateNewCollection, sizeof(struct __ns3__CreateNewCollection), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CreateNewCollection(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CreateNewCollection && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CreateNewCollection(soap, "ns1:CreateNewCollection", &a->ns1__CreateNewCollection, ""))
				{	soap_flag_ns1__CreateNewCollection--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__CreateNewCollection * SOAP_FMAC6 soap_new___ns3__CreateNewCollection(struct soap *soap, int n)
{	return soap_instantiate___ns3__CreateNewCollection(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__CreateNewCollection(struct soap *soap, struct __ns3__CreateNewCollection *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__CreateNewCollection * SOAP_FMAC4 soap_instantiate___ns3__CreateNewCollection(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CreateNewCollection(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CreateNewCollection, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__CreateNewCollection;
		if (size)
			*size = sizeof(struct __ns3__CreateNewCollection);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__CreateNewCollection[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CreateNewCollection);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CreateNewCollection*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CreateNewCollection(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CreateNewCollection %p -> %p\n", q, p));
	*(struct __ns3__CreateNewCollection*)p = *(struct __ns3__CreateNewCollection*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__Login(struct soap *soap, struct __ns3__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Login = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__Login(struct soap *soap, const struct __ns3__Login *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__Login(soap, &a->ns1__Login);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__Login(struct soap *soap, const struct __ns3__Login *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__Login(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__Login(struct soap *soap, const char *tag, int id, const struct __ns3__Login *a, const char *type)
{
	if (soap_out_PointerTo_ns1__Login(soap, "ns1:Login", -1, &a->ns1__Login, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__Login * SOAP_FMAC4 soap_get___ns3__Login(struct soap *soap, struct __ns3__Login *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__Login * SOAP_FMAC4 soap_in___ns3__Login(struct soap *soap, const char *tag, struct __ns3__Login *a, const char *type)
{
	short soap_flag_ns1__Login = 1;
	short soap_flag;
	a = (struct __ns3__Login *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__Login, sizeof(struct __ns3__Login), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__Login(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Login && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__Login(soap, "ns1:Login", &a->ns1__Login, ""))
				{	soap_flag_ns1__Login--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__Login * SOAP_FMAC6 soap_new___ns3__Login(struct soap *soap, int n)
{	return soap_instantiate___ns3__Login(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__Login(struct soap *soap, struct __ns3__Login *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__Login * SOAP_FMAC4 soap_instantiate___ns3__Login(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__Login(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__Login, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__Login;
		if (size)
			*size = sizeof(struct __ns3__Login);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__Login[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__Login);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__Login*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__Login(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__Login %p -> %p\n", q, p));
	*(struct __ns3__Login*)p = *(struct __ns3__Login*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeletePhotoResponse(struct soap *soap, _ns1__DeletePhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeletePhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeletePhotoResponse(struct soap *soap, _ns1__DeletePhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeletePhotoResponse);
	if (soap_out_PointerTo_ns1__DeletePhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeletePhotoResponse(struct soap *soap, const char *tag, int id, _ns1__DeletePhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeletePhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeletePhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeletePhotoResponse(struct soap *soap, _ns1__DeletePhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeletePhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeletePhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeletePhotoResponse(struct soap *soap, const char *tag, _ns1__DeletePhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeletePhotoResponse **)soap_malloc(soap, sizeof(_ns1__DeletePhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeletePhotoResponse *)soap_instantiate__ns1__DeletePhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeletePhotoResponse ** p = (_ns1__DeletePhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeletePhotoResponse, sizeof(_ns1__DeletePhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeletePhoto(struct soap *soap, _ns1__DeletePhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeletePhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeletePhoto(struct soap *soap, _ns1__DeletePhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeletePhoto);
	if (soap_out_PointerTo_ns1__DeletePhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeletePhoto(struct soap *soap, const char *tag, int id, _ns1__DeletePhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeletePhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeletePhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeletePhoto(struct soap *soap, _ns1__DeletePhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeletePhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeletePhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeletePhoto(struct soap *soap, const char *tag, _ns1__DeletePhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeletePhoto **)soap_malloc(soap, sizeof(_ns1__DeletePhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeletePhoto *)soap_instantiate__ns1__DeletePhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeletePhoto ** p = (_ns1__DeletePhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeletePhoto, sizeof(_ns1__DeletePhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RenameCollectionResponse(struct soap *soap, _ns1__RenameCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RenameCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RenameCollectionResponse(struct soap *soap, _ns1__RenameCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RenameCollectionResponse);
	if (soap_out_PointerTo_ns1__RenameCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RenameCollectionResponse(struct soap *soap, const char *tag, int id, _ns1__RenameCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RenameCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RenameCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__RenameCollectionResponse(struct soap *soap, _ns1__RenameCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RenameCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RenameCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__RenameCollectionResponse(struct soap *soap, const char *tag, _ns1__RenameCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RenameCollectionResponse **)soap_malloc(soap, sizeof(_ns1__RenameCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RenameCollectionResponse *)soap_instantiate__ns1__RenameCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RenameCollectionResponse ** p = (_ns1__RenameCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RenameCollectionResponse, sizeof(_ns1__RenameCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__RenameCollection(struct soap *soap, _ns1__RenameCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__RenameCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__RenameCollection(struct soap *soap, _ns1__RenameCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__RenameCollection);
	if (soap_out_PointerTo_ns1__RenameCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__RenameCollection(struct soap *soap, const char *tag, int id, _ns1__RenameCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__RenameCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__RenameCollection ** SOAP_FMAC4 soap_get_PointerTo_ns1__RenameCollection(struct soap *soap, _ns1__RenameCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__RenameCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__RenameCollection ** SOAP_FMAC4 soap_in_PointerTo_ns1__RenameCollection(struct soap *soap, const char *tag, _ns1__RenameCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__RenameCollection **)soap_malloc(soap, sizeof(_ns1__RenameCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__RenameCollection *)soap_instantiate__ns1__RenameCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__RenameCollection ** p = (_ns1__RenameCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__RenameCollection, sizeof(_ns1__RenameCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__JavaUploadPhotoResponse(struct soap *soap, _ns1__JavaUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__JavaUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__JavaUploadPhotoResponse(struct soap *soap, _ns1__JavaUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__JavaUploadPhotoResponse);
	if (soap_out_PointerTo_ns1__JavaUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__JavaUploadPhotoResponse(struct soap *soap, const char *tag, int id, _ns1__JavaUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__JavaUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__JavaUploadPhotoResponse(struct soap *soap, _ns1__JavaUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__JavaUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__JavaUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__JavaUploadPhotoResponse(struct soap *soap, const char *tag, _ns1__JavaUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__JavaUploadPhotoResponse **)soap_malloc(soap, sizeof(_ns1__JavaUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__JavaUploadPhotoResponse *)soap_instantiate__ns1__JavaUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__JavaUploadPhotoResponse ** p = (_ns1__JavaUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__JavaUploadPhotoResponse, sizeof(_ns1__JavaUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__JavaUploadPhoto(struct soap *soap, _ns1__JavaUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__JavaUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__JavaUploadPhoto(struct soap *soap, _ns1__JavaUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__JavaUploadPhoto);
	if (soap_out_PointerTo_ns1__JavaUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__JavaUploadPhoto(struct soap *soap, const char *tag, int id, _ns1__JavaUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__JavaUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__JavaUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__JavaUploadPhoto(struct soap *soap, _ns1__JavaUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__JavaUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__JavaUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__JavaUploadPhoto(struct soap *soap, const char *tag, _ns1__JavaUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__JavaUploadPhoto **)soap_malloc(soap, sizeof(_ns1__JavaUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__JavaUploadPhoto *)soap_instantiate__ns1__JavaUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__JavaUploadPhoto ** p = (_ns1__JavaUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__JavaUploadPhoto, sizeof(_ns1__JavaUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeviceUploadPhotoResponse(struct soap *soap, _ns1__DeviceUploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeviceUploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeviceUploadPhotoResponse(struct soap *soap, _ns1__DeviceUploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeviceUploadPhotoResponse);
	if (soap_out_PointerTo_ns1__DeviceUploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, int id, _ns1__DeviceUploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeviceUploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeviceUploadPhotoResponse(struct soap *soap, _ns1__DeviceUploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeviceUploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeviceUploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeviceUploadPhotoResponse(struct soap *soap, const char *tag, _ns1__DeviceUploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeviceUploadPhotoResponse **)soap_malloc(soap, sizeof(_ns1__DeviceUploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeviceUploadPhotoResponse *)soap_instantiate__ns1__DeviceUploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeviceUploadPhotoResponse ** p = (_ns1__DeviceUploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeviceUploadPhotoResponse, sizeof(_ns1__DeviceUploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DeviceUploadPhoto(struct soap *soap, _ns1__DeviceUploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DeviceUploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DeviceUploadPhoto(struct soap *soap, _ns1__DeviceUploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__DeviceUploadPhoto);
	if (soap_out_PointerTo_ns1__DeviceUploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DeviceUploadPhoto(struct soap *soap, const char *tag, int id, _ns1__DeviceUploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DeviceUploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__DeviceUploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__DeviceUploadPhoto(struct soap *soap, _ns1__DeviceUploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DeviceUploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__DeviceUploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__DeviceUploadPhoto(struct soap *soap, const char *tag, _ns1__DeviceUploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DeviceUploadPhoto **)soap_malloc(soap, sizeof(_ns1__DeviceUploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DeviceUploadPhoto *)soap_instantiate__ns1__DeviceUploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__DeviceUploadPhoto ** p = (_ns1__DeviceUploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DeviceUploadPhoto, sizeof(_ns1__DeviceUploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadPhotoResponse(struct soap *soap, _ns1__UploadPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__UploadPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadPhotoResponse(struct soap *soap, _ns1__UploadPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__UploadPhotoResponse);
	if (soap_out_PointerTo_ns1__UploadPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadPhotoResponse(struct soap *soap, const char *tag, int id, _ns1__UploadPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__UploadPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__UploadPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadPhotoResponse(struct soap *soap, _ns1__UploadPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__UploadPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__UploadPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadPhotoResponse(struct soap *soap, const char *tag, _ns1__UploadPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__UploadPhotoResponse **)soap_malloc(soap, sizeof(_ns1__UploadPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__UploadPhotoResponse *)soap_instantiate__ns1__UploadPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__UploadPhotoResponse ** p = (_ns1__UploadPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__UploadPhotoResponse, sizeof(_ns1__UploadPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__UploadPhoto(struct soap *soap, _ns1__UploadPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__UploadPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__UploadPhoto(struct soap *soap, _ns1__UploadPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__UploadPhoto);
	if (soap_out_PointerTo_ns1__UploadPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__UploadPhoto(struct soap *soap, const char *tag, int id, _ns1__UploadPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__UploadPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__UploadPhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__UploadPhoto(struct soap *soap, _ns1__UploadPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__UploadPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__UploadPhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__UploadPhoto(struct soap *soap, const char *tag, _ns1__UploadPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__UploadPhoto **)soap_malloc(soap, sizeof(_ns1__UploadPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__UploadPhoto *)soap_instantiate__ns1__UploadPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__UploadPhoto ** p = (_ns1__UploadPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__UploadPhoto, sizeof(_ns1__UploadPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPhotosByCollectionResponse(struct soap *soap, _ns1__GetPhotosByCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetPhotosByCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPhotosByCollectionResponse(struct soap *soap, _ns1__GetPhotosByCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetPhotosByCollectionResponse);
	if (soap_out_PointerTo_ns1__GetPhotosByCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, int id, _ns1__GetPhotosByCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetPhotosByCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPhotosByCollectionResponse(struct soap *soap, _ns1__GetPhotosByCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetPhotosByCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetPhotosByCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPhotosByCollectionResponse(struct soap *soap, const char *tag, _ns1__GetPhotosByCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetPhotosByCollectionResponse **)soap_malloc(soap, sizeof(_ns1__GetPhotosByCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetPhotosByCollectionResponse *)soap_instantiate__ns1__GetPhotosByCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetPhotosByCollectionResponse ** p = (_ns1__GetPhotosByCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetPhotosByCollectionResponse, sizeof(_ns1__GetPhotosByCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPhotosByCollection(struct soap *soap, _ns1__GetPhotosByCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetPhotosByCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPhotosByCollection(struct soap *soap, _ns1__GetPhotosByCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetPhotosByCollection);
	if (soap_out_PointerTo_ns1__GetPhotosByCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPhotosByCollection(struct soap *soap, const char *tag, int id, _ns1__GetPhotosByCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetPhotosByCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetPhotosByCollection ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPhotosByCollection(struct soap *soap, _ns1__GetPhotosByCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetPhotosByCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetPhotosByCollection ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPhotosByCollection(struct soap *soap, const char *tag, _ns1__GetPhotosByCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetPhotosByCollection **)soap_malloc(soap, sizeof(_ns1__GetPhotosByCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetPhotosByCollection *)soap_instantiate__ns1__GetPhotosByCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetPhotosByCollection ** p = (_ns1__GetPhotosByCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetPhotosByCollection, sizeof(_ns1__GetPhotosByCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCollectionsResponse(struct soap *soap, _ns1__GetCollectionsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetCollectionsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCollectionsResponse(struct soap *soap, _ns1__GetCollectionsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetCollectionsResponse);
	if (soap_out_PointerTo_ns1__GetCollectionsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCollectionsResponse(struct soap *soap, const char *tag, int id, _ns1__GetCollectionsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetCollectionsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetCollectionsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCollectionsResponse(struct soap *soap, _ns1__GetCollectionsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetCollectionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetCollectionsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCollectionsResponse(struct soap *soap, const char *tag, _ns1__GetCollectionsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetCollectionsResponse **)soap_malloc(soap, sizeof(_ns1__GetCollectionsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetCollectionsResponse *)soap_instantiate__ns1__GetCollectionsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetCollectionsResponse ** p = (_ns1__GetCollectionsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetCollectionsResponse, sizeof(_ns1__GetCollectionsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetCollections(struct soap *soap, _ns1__GetCollections *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetCollections))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetCollections(struct soap *soap, _ns1__GetCollections *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetCollections);
	if (soap_out_PointerTo_ns1__GetCollections(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetCollections(struct soap *soap, const char *tag, int id, _ns1__GetCollections *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetCollections);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetCollections ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetCollections(struct soap *soap, _ns1__GetCollections **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetCollections(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetCollections ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetCollections(struct soap *soap, const char *tag, _ns1__GetCollections **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetCollections **)soap_malloc(soap, sizeof(_ns1__GetCollections *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetCollections *)soap_instantiate__ns1__GetCollections(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetCollections ** p = (_ns1__GetCollections **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetCollections, sizeof(_ns1__GetCollections), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateNewCollectionResponse(struct soap *soap, _ns1__CreateNewCollectionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CreateNewCollectionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateNewCollectionResponse(struct soap *soap, _ns1__CreateNewCollectionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CreateNewCollectionResponse);
	if (soap_out_PointerTo_ns1__CreateNewCollectionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateNewCollectionResponse(struct soap *soap, const char *tag, int id, _ns1__CreateNewCollectionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CreateNewCollectionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CreateNewCollectionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateNewCollectionResponse(struct soap *soap, _ns1__CreateNewCollectionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CreateNewCollectionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CreateNewCollectionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateNewCollectionResponse(struct soap *soap, const char *tag, _ns1__CreateNewCollectionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CreateNewCollectionResponse **)soap_malloc(soap, sizeof(_ns1__CreateNewCollectionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CreateNewCollectionResponse *)soap_instantiate__ns1__CreateNewCollectionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CreateNewCollectionResponse ** p = (_ns1__CreateNewCollectionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CreateNewCollectionResponse, sizeof(_ns1__CreateNewCollectionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CreateNewCollection(struct soap *soap, _ns1__CreateNewCollection *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CreateNewCollection))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CreateNewCollection(struct soap *soap, _ns1__CreateNewCollection *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CreateNewCollection);
	if (soap_out_PointerTo_ns1__CreateNewCollection(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CreateNewCollection(struct soap *soap, const char *tag, int id, _ns1__CreateNewCollection *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CreateNewCollection);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CreateNewCollection ** SOAP_FMAC4 soap_get_PointerTo_ns1__CreateNewCollection(struct soap *soap, _ns1__CreateNewCollection **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CreateNewCollection(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CreateNewCollection ** SOAP_FMAC4 soap_in_PointerTo_ns1__CreateNewCollection(struct soap *soap, const char *tag, _ns1__CreateNewCollection **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CreateNewCollection **)soap_malloc(soap, sizeof(_ns1__CreateNewCollection *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CreateNewCollection *)soap_instantiate__ns1__CreateNewCollection(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CreateNewCollection ** p = (_ns1__CreateNewCollection **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CreateNewCollection, sizeof(_ns1__CreateNewCollection), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__LoginResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__LoginResponse);
	if (soap_out_PointerTo_ns1__LoginResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, int id, _ns1__LoginResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__LoginResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__LoginResponse(struct soap *soap, _ns1__LoginResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__LoginResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__LoginResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__LoginResponse(struct soap *soap, const char *tag, _ns1__LoginResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__LoginResponse **)soap_malloc(soap, sizeof(_ns1__LoginResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__LoginResponse *)soap_instantiate__ns1__LoginResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__LoginResponse ** p = (_ns1__LoginResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__LoginResponse, sizeof(_ns1__LoginResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Login))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Login(struct soap *soap, _ns1__Login *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__Login);
	if (soap_out_PointerTo_ns1__Login(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Login(struct soap *soap, const char *tag, int id, _ns1__Login *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Login);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_get_PointerTo_ns1__Login(struct soap *soap, _ns1__Login **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Login(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__Login ** SOAP_FMAC4 soap_in_PointerTo_ns1__Login(struct soap *soap, const char *tag, _ns1__Login **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Login **)soap_malloc(soap, sizeof(_ns1__Login *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Login *)soap_instantiate__ns1__Login(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__Login ** p = (_ns1__Login **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Login, sizeof(_ns1__Login), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a)
{
	if (*a)
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToxsd__base64Binary);
	if (soap_out_PointerToxsd__base64Binary(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__base64Binary(struct soap *soap, const char *tag, int id, xsd__base64Binary *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, (struct soap_array*)&(*a)->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_get_PointerToxsd__base64Binary(struct soap *soap, xsd__base64Binary **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToxsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 xsd__base64Binary ** SOAP_FMAC4 soap_in_PointerToxsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (xsd__base64Binary **)soap_malloc(soap, sizeof(xsd__base64Binary *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (xsd__base64Binary *)soap_instantiate_xsd__base64Binary(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	xsd__base64Binary ** p = (xsd__base64Binary **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfPhotoItem(struct soap *soap, ns1__ArrayOfPhotoItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfPhotoItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfPhotoItem(struct soap *soap, ns1__ArrayOfPhotoItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfPhotoItem);
	if (soap_out_PointerTons1__ArrayOfPhotoItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfPhotoItem(struct soap *soap, const char *tag, int id, ns1__ArrayOfPhotoItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfPhotoItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoItem ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfPhotoItem(struct soap *soap, ns1__ArrayOfPhotoItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfPhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfPhotoItem ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfPhotoItem(struct soap *soap, const char *tag, ns1__ArrayOfPhotoItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfPhotoItem **)soap_malloc(soap, sizeof(ns1__ArrayOfPhotoItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfPhotoItem *)soap_instantiate_ns1__ArrayOfPhotoItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfPhotoItem ** p = (ns1__ArrayOfPhotoItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfPhotoItem, sizeof(ns1__ArrayOfPhotoItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfPhotoCollectionItem(struct soap *soap, ns1__ArrayOfPhotoCollectionItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfPhotoCollectionItem(struct soap *soap, ns1__ArrayOfPhotoCollectionItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfPhotoCollectionItem);
	if (soap_out_PointerTons1__ArrayOfPhotoCollectionItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, int id, ns1__ArrayOfPhotoCollectionItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfPhotoCollectionItem ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfPhotoCollectionItem(struct soap *soap, ns1__ArrayOfPhotoCollectionItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfPhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfPhotoCollectionItem ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfPhotoCollectionItem(struct soap *soap, const char *tag, ns1__ArrayOfPhotoCollectionItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfPhotoCollectionItem **)soap_malloc(soap, sizeof(ns1__ArrayOfPhotoCollectionItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfPhotoCollectionItem *)soap_instantiate_ns1__ArrayOfPhotoCollectionItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfPhotoCollectionItem ** p = (ns1__ArrayOfPhotoCollectionItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfPhotoCollectionItem, sizeof(ns1__ArrayOfPhotoCollectionItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__PhotoItem))
		soap_serialize_PointerTons1__PhotoItem(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__PhotoItem);
	if (soap_out_PointerToPointerTons1__PhotoItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PhotoItem(struct soap *soap, const char *tag, int id, ns1__PhotoItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__PhotoItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__PhotoItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__PhotoItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__PhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PhotoItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PhotoItem(struct soap *soap, const char *tag, ns1__PhotoItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PhotoItem ***)soap_malloc(soap, sizeof(ns1__PhotoItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__PhotoItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__PhotoItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__PhotoItem, sizeof(ns1__PhotoItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__PhotoItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__PhotoItem);
	if (soap_out_PointerTons1__PhotoItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PhotoItem(struct soap *soap, const char *tag, int id, ns1__PhotoItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__PhotoItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__PhotoItem ** SOAP_FMAC4 soap_get_PointerTons1__PhotoItem(struct soap *soap, ns1__PhotoItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PhotoItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PhotoItem ** SOAP_FMAC4 soap_in_PointerTons1__PhotoItem(struct soap *soap, const char *tag, ns1__PhotoItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PhotoItem **)soap_malloc(soap, sizeof(ns1__PhotoItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PhotoItem *)soap_instantiate_ns1__PhotoItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__PhotoItem ** p = (ns1__PhotoItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PhotoItem, sizeof(ns1__PhotoItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__PhotoCollectionItem))
		soap_serialize_PointerTons1__PhotoCollectionItem(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__PhotoCollectionItem);
	if (soap_out_PointerToPointerTons1__PhotoCollectionItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PhotoCollectionItem(struct soap *soap, const char *tag, int id, ns1__PhotoCollectionItem **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__PhotoCollectionItem);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__PhotoCollectionItem(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__PhotoCollectionItem *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__PhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PhotoCollectionItem *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PhotoCollectionItem(struct soap *soap, const char *tag, ns1__PhotoCollectionItem ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PhotoCollectionItem ***)soap_malloc(soap, sizeof(ns1__PhotoCollectionItem **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__PhotoCollectionItem(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__PhotoCollectionItem ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__PhotoCollectionItem, sizeof(ns1__PhotoCollectionItem *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__PhotoCollectionItem))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__PhotoCollectionItem);
	if (soap_out_PointerTons1__PhotoCollectionItem(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PhotoCollectionItem(struct soap *soap, const char *tag, int id, ns1__PhotoCollectionItem *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__PhotoCollectionItem);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__PhotoCollectionItem ** SOAP_FMAC4 soap_get_PointerTons1__PhotoCollectionItem(struct soap *soap, ns1__PhotoCollectionItem **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PhotoCollectionItem(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PhotoCollectionItem ** SOAP_FMAC4 soap_in_PointerTons1__PhotoCollectionItem(struct soap *soap, const char *tag, ns1__PhotoCollectionItem **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PhotoCollectionItem **)soap_malloc(soap, sizeof(ns1__PhotoCollectionItem *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PhotoCollectionItem *)soap_instantiate_ns1__PhotoCollectionItem(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__PhotoCollectionItem ** p = (ns1__PhotoCollectionItem **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PhotoCollectionItem, sizeof(ns1__PhotoCollectionItem), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
