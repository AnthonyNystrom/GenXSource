/* soapC.cpp
   Generated by gSOAP 2.7.10 from output\askafriendservice.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-05-06 20:55:58 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_StringArray:
		return soap_in_StringArray(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_ns1__AskAFriendComment:
		return soap_in_ns1__AskAFriendComment(soap, NULL, NULL, "ns1:AskAFriendComment");
	case SOAP_TYPE_ns1__ArrayOfAskAFriendComment:
		return soap_in_ns1__ArrayOfAskAFriendComment(soap, NULL, NULL, "ns1:ArrayOfAskAFriendComment");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__AskAFriendResponse:
		return soap_in_ns1__AskAFriendResponse(soap, NULL, NULL, "ns1:AskAFriendResponse");
	case SOAP_TYPE_ns1__AskAFriendQuestion:
		return soap_in_ns1__AskAFriendQuestion(soap, NULL, NULL, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion:
		return soap_in_ns1__ArrayOfAskAFriendQuestion(soap, NULL, NULL, "ns1:ArrayOfAskAFriendQuestion");
	case SOAP_TYPE_ns1__PrivateAAFQuestion:
		return soap_in_ns1__PrivateAAFQuestion(soap, NULL, NULL, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion:
		return soap_in_ns1__ArrayOfPrivateAAFQuestion(soap, NULL, NULL, "ns1:ArrayOfPrivateAAFQuestion");
	case SOAP_TYPE_ns1__AskAFriendConfirm:
		return soap_in_ns1__AskAFriendConfirm(soap, NULL, NULL, "ns1:AskAFriendConfirm");
	case SOAP_TYPE_ns1__ArrayOfString:
		return soap_in_ns1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__GetAAFCommentsResponse:
		return soap_in_PointerTo_ns1__GetAAFCommentsResponse(soap, NULL, NULL, "ns1:GetAAFCommentsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAAFComments:
		return soap_in_PointerTo_ns1__GetAAFComments(soap, NULL, NULL, "ns1:GetAAFComments");
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponseResponse:
		return soap_in_PointerTo_ns1__GetAAFResponseResponse(soap, NULL, NULL, "ns1:GetAAFResponseResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponse:
		return soap_in_PointerTo_ns1__GetAAFResponse(soap, NULL, NULL, "ns1:GetAAFResponse");
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse:
		return soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(soap, NULL, NULL, "ns1:GetNewAAFQuestionCommentIDsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDs:
		return soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, NULL, NULL, "ns1:GetNewAAFQuestionCommentIDs");
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestionsResponse:
		return soap_in_PointerTo_ns1__GetMyAAFQuestionsResponse(soap, NULL, NULL, "ns1:GetMyAAFQuestionsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestions:
		return soap_in_PointerTo_ns1__GetMyAAFQuestions(soap, NULL, NULL, "ns1:GetMyAAFQuestions");
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestionResponse:
		return soap_in_PointerTo_ns1__GetPrivateAAFQuestionResponse(soap, NULL, NULL, "ns1:GetPrivateAAFQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestion:
		return soap_in_PointerTo_ns1__GetPrivateAAFQuestion(soap, NULL, NULL, "ns1:GetPrivateAAFQuestion");
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestionResponse:
		return soap_in_PointerTo_ns1__CompleteQuestionResponse(soap, NULL, NULL, "ns1:CompleteQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestion:
		return soap_in_PointerTo_ns1__CompleteQuestion(soap, NULL, NULL, "ns1:CompleteQuestion");
	case SOAP_TYPE_PointerTo_ns1__AttachPhotoResponse:
		return soap_in_PointerTo_ns1__AttachPhotoResponse(soap, NULL, NULL, "ns1:AttachPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__AttachPhoto:
		return soap_in_PointerTo_ns1__AttachPhoto(soap, NULL, NULL, "ns1:AttachPhoto");
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestionResponse:
		return soap_in_PointerTo_ns1__SubmitQuestionResponse(soap, NULL, NULL, "ns1:SubmitQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestion:
		return soap_in_PointerTo_ns1__SubmitQuestion(soap, NULL, NULL, "ns1:SubmitQuestion");
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendComment:
		return soap_in_PointerTons1__ArrayOfAskAFriendComment(soap, NULL, NULL, "ns1:ArrayOfAskAFriendComment");
	case SOAP_TYPE_PointerTons1__AskAFriendResponse:
		return soap_in_PointerTons1__AskAFriendResponse(soap, NULL, NULL, "ns1:AskAFriendResponse");
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendQuestion:
		return soap_in_PointerTons1__ArrayOfAskAFriendQuestion(soap, NULL, NULL, "ns1:ArrayOfAskAFriendQuestion");
	case SOAP_TYPE_PointerTons1__ArrayOfPrivateAAFQuestion:
		return soap_in_PointerTons1__ArrayOfPrivateAAFQuestion(soap, NULL, NULL, "ns1:ArrayOfPrivateAAFQuestion");
	case SOAP_TYPE_PointerTons1__AskAFriendConfirm:
		return soap_in_PointerTons1__AskAFriendConfirm(soap, NULL, NULL, "ns1:AskAFriendConfirm");
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendComment:
		return soap_in_PointerToPointerTons1__AskAFriendComment(soap, NULL, NULL, "ns1:AskAFriendComment");
	case SOAP_TYPE_PointerTons1__AskAFriendComment:
		return soap_in_PointerTons1__AskAFriendComment(soap, NULL, NULL, "ns1:AskAFriendComment");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_in_PointerTons1__ArrayOfString(soap, NULL, NULL, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_in_PointerTons1__ArrayOfInt(soap, NULL, NULL, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendQuestion:
		return soap_in_PointerToPointerTons1__AskAFriendQuestion(soap, NULL, NULL, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_PointerTons1__AskAFriendQuestion:
		return soap_in_PointerTons1__AskAFriendQuestion(soap, NULL, NULL, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_PointerToPointerTons1__PrivateAAFQuestion:
		return soap_in_PointerToPointerTons1__PrivateAAFQuestion(soap, NULL, NULL, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_PointerTons1__PrivateAAFQuestion:
		return soap_in_PointerTons1__PrivateAAFQuestion(soap, NULL, NULL, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_PointerTostring:
		return soap_in_PointerTostring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (*soap->arrayType && !soap_match_array(soap, "xsd:string"))
		{	*type = SOAP_TYPE_StringArray;
			return soap_in_StringArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AskAFriendComment"))
		{	*type = SOAP_TYPE_ns1__AskAFriendComment;
			return soap_in_ns1__AskAFriendComment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfAskAFriendComment"))
		{	*type = SOAP_TYPE_ns1__ArrayOfAskAFriendComment;
			return soap_in_ns1__ArrayOfAskAFriendComment(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfInt"))
		{	*type = SOAP_TYPE_ns1__ArrayOfInt;
			return soap_in_ns1__ArrayOfInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AskAFriendResponse"))
		{	*type = SOAP_TYPE_ns1__AskAFriendResponse;
			return soap_in_ns1__AskAFriendResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AskAFriendQuestion"))
		{	*type = SOAP_TYPE_ns1__AskAFriendQuestion;
			return soap_in_ns1__AskAFriendQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfAskAFriendQuestion"))
		{	*type = SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion;
			return soap_in_ns1__ArrayOfAskAFriendQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:PrivateAAFQuestion"))
		{	*type = SOAP_TYPE_ns1__PrivateAAFQuestion;
			return soap_in_ns1__PrivateAAFQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfPrivateAAFQuestion"))
		{	*type = SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion;
			return soap_in_ns1__ArrayOfPrivateAAFQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AskAFriendConfirm"))
		{	*type = SOAP_TYPE_ns1__AskAFriendConfirm;
			return soap_in_ns1__AskAFriendConfirm(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:ArrayOfString"))
		{	*type = SOAP_TYPE_ns1__ArrayOfString;
			return soap_in_ns1__ArrayOfString(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GetAAFCommentsResponse"))
		{	*type = SOAP_TYPE__ns1__GetAAFCommentsResponse;
			return soap_in__ns1__GetAAFCommentsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAAFComments"))
		{	*type = SOAP_TYPE__ns1__GetAAFComments;
			return soap_in__ns1__GetAAFComments(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAAFResponseResponse"))
		{	*type = SOAP_TYPE__ns1__GetAAFResponseResponse;
			return soap_in__ns1__GetAAFResponseResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetAAFResponse"))
		{	*type = SOAP_TYPE__ns1__GetAAFResponse;
			return soap_in__ns1__GetAAFResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNewAAFQuestionCommentIDsResponse"))
		{	*type = SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse;
			return soap_in__ns1__GetNewAAFQuestionCommentIDsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetNewAAFQuestionCommentIDs"))
		{	*type = SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs;
			return soap_in__ns1__GetNewAAFQuestionCommentIDs(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMyAAFQuestionsResponse"))
		{	*type = SOAP_TYPE__ns1__GetMyAAFQuestionsResponse;
			return soap_in__ns1__GetMyAAFQuestionsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMyAAFQuestions"))
		{	*type = SOAP_TYPE__ns1__GetMyAAFQuestions;
			return soap_in__ns1__GetMyAAFQuestions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPrivateAAFQuestionResponse"))
		{	*type = SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse;
			return soap_in__ns1__GetPrivateAAFQuestionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetPrivateAAFQuestion"))
		{	*type = SOAP_TYPE__ns1__GetPrivateAAFQuestion;
			return soap_in__ns1__GetPrivateAAFQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CompleteQuestionResponse"))
		{	*type = SOAP_TYPE__ns1__CompleteQuestionResponse;
			return soap_in__ns1__CompleteQuestionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:CompleteQuestion"))
		{	*type = SOAP_TYPE__ns1__CompleteQuestion;
			return soap_in__ns1__CompleteQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AttachPhotoResponse"))
		{	*type = SOAP_TYPE__ns1__AttachPhotoResponse;
			return soap_in__ns1__AttachPhotoResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:AttachPhoto"))
		{	*type = SOAP_TYPE__ns1__AttachPhoto;
			return soap_in__ns1__AttachPhoto(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitQuestionResponse"))
		{	*type = SOAP_TYPE__ns1__SubmitQuestionResponse;
			return soap_in__ns1__SubmitQuestionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:SubmitQuestion"))
		{	*type = SOAP_TYPE__ns1__SubmitQuestion;
			return soap_in__ns1__SubmitQuestion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_StringArray:
		return ((StringArray *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE__ns1__GetAAFCommentsResponse:
		return ((_ns1__GetAAFCommentsResponse *)ptr)->soap_out(soap, "ns1:GetAAFCommentsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetAAFComments:
		return ((_ns1__GetAAFComments *)ptr)->soap_out(soap, "ns1:GetAAFComments", id, NULL);
	case SOAP_TYPE__ns1__GetAAFResponseResponse:
		return ((_ns1__GetAAFResponseResponse *)ptr)->soap_out(soap, "ns1:GetAAFResponseResponse", id, NULL);
	case SOAP_TYPE__ns1__GetAAFResponse:
		return ((_ns1__GetAAFResponse *)ptr)->soap_out(soap, "ns1:GetAAFResponse", id, NULL);
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse:
		return ((_ns1__GetNewAAFQuestionCommentIDsResponse *)ptr)->soap_out(soap, "ns1:GetNewAAFQuestionCommentIDsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs:
		return ((_ns1__GetNewAAFQuestionCommentIDs *)ptr)->soap_out(soap, "ns1:GetNewAAFQuestionCommentIDs", id, NULL);
	case SOAP_TYPE__ns1__GetMyAAFQuestionsResponse:
		return ((_ns1__GetMyAAFQuestionsResponse *)ptr)->soap_out(soap, "ns1:GetMyAAFQuestionsResponse", id, NULL);
	case SOAP_TYPE__ns1__GetMyAAFQuestions:
		return ((_ns1__GetMyAAFQuestions *)ptr)->soap_out(soap, "ns1:GetMyAAFQuestions", id, NULL);
	case SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse:
		return ((_ns1__GetPrivateAAFQuestionResponse *)ptr)->soap_out(soap, "ns1:GetPrivateAAFQuestionResponse", id, NULL);
	case SOAP_TYPE__ns1__GetPrivateAAFQuestion:
		return ((_ns1__GetPrivateAAFQuestion *)ptr)->soap_out(soap, "ns1:GetPrivateAAFQuestion", id, NULL);
	case SOAP_TYPE__ns1__CompleteQuestionResponse:
		return ((_ns1__CompleteQuestionResponse *)ptr)->soap_out(soap, "ns1:CompleteQuestionResponse", id, NULL);
	case SOAP_TYPE__ns1__CompleteQuestion:
		return ((_ns1__CompleteQuestion *)ptr)->soap_out(soap, "ns1:CompleteQuestion", id, NULL);
	case SOAP_TYPE__ns1__AttachPhotoResponse:
		return ((_ns1__AttachPhotoResponse *)ptr)->soap_out(soap, "ns1:AttachPhotoResponse", id, NULL);
	case SOAP_TYPE__ns1__AttachPhoto:
		return ((_ns1__AttachPhoto *)ptr)->soap_out(soap, "ns1:AttachPhoto", id, NULL);
	case SOAP_TYPE__ns1__SubmitQuestionResponse:
		return ((_ns1__SubmitQuestionResponse *)ptr)->soap_out(soap, "ns1:SubmitQuestionResponse", id, NULL);
	case SOAP_TYPE__ns1__SubmitQuestion:
		return ((_ns1__SubmitQuestion *)ptr)->soap_out(soap, "ns1:SubmitQuestion", id, NULL);
	case SOAP_TYPE_ns1__AskAFriendComment:
		return ((ns1__AskAFriendComment *)ptr)->soap_out(soap, tag, id, "ns1:AskAFriendComment");
	case SOAP_TYPE_ns1__ArrayOfAskAFriendComment:
		return ((ns1__ArrayOfAskAFriendComment *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfAskAFriendComment");
	case SOAP_TYPE_ns1__ArrayOfInt:
		return ((ns1__ArrayOfInt *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfInt");
	case SOAP_TYPE_ns1__AskAFriendResponse:
		return ((ns1__AskAFriendResponse *)ptr)->soap_out(soap, tag, id, "ns1:AskAFriendResponse");
	case SOAP_TYPE_ns1__AskAFriendQuestion:
		return ((ns1__AskAFriendQuestion *)ptr)->soap_out(soap, tag, id, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion:
		return ((ns1__ArrayOfAskAFriendQuestion *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfAskAFriendQuestion");
	case SOAP_TYPE_ns1__PrivateAAFQuestion:
		return ((ns1__PrivateAAFQuestion *)ptr)->soap_out(soap, tag, id, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion:
		return ((ns1__ArrayOfPrivateAAFQuestion *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfPrivateAAFQuestion");
	case SOAP_TYPE_ns1__AskAFriendConfirm:
		return ((ns1__AskAFriendConfirm *)ptr)->soap_out(soap, tag, id, "ns1:AskAFriendConfirm");
	case SOAP_TYPE_ns1__ArrayOfString:
		return ((ns1__ArrayOfString *)ptr)->soap_out(soap, tag, id, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTo_ns1__GetAAFCommentsResponse:
		return soap_out_PointerTo_ns1__GetAAFCommentsResponse(soap, tag, id, (_ns1__GetAAFCommentsResponse *const*)ptr, "ns1:GetAAFCommentsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAAFComments:
		return soap_out_PointerTo_ns1__GetAAFComments(soap, tag, id, (_ns1__GetAAFComments *const*)ptr, "ns1:GetAAFComments");
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponseResponse:
		return soap_out_PointerTo_ns1__GetAAFResponseResponse(soap, tag, id, (_ns1__GetAAFResponseResponse *const*)ptr, "ns1:GetAAFResponseResponse");
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponse:
		return soap_out_PointerTo_ns1__GetAAFResponse(soap, tag, id, (_ns1__GetAAFResponse *const*)ptr, "ns1:GetAAFResponse");
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse:
		return soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, id, (_ns1__GetNewAAFQuestionCommentIDsResponse *const*)ptr, "ns1:GetNewAAFQuestionCommentIDsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDs:
		return soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, tag, id, (_ns1__GetNewAAFQuestionCommentIDs *const*)ptr, "ns1:GetNewAAFQuestionCommentIDs");
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestionsResponse:
		return soap_out_PointerTo_ns1__GetMyAAFQuestionsResponse(soap, tag, id, (_ns1__GetMyAAFQuestionsResponse *const*)ptr, "ns1:GetMyAAFQuestionsResponse");
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestions:
		return soap_out_PointerTo_ns1__GetMyAAFQuestions(soap, tag, id, (_ns1__GetMyAAFQuestions *const*)ptr, "ns1:GetMyAAFQuestions");
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestionResponse:
		return soap_out_PointerTo_ns1__GetPrivateAAFQuestionResponse(soap, tag, id, (_ns1__GetPrivateAAFQuestionResponse *const*)ptr, "ns1:GetPrivateAAFQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestion:
		return soap_out_PointerTo_ns1__GetPrivateAAFQuestion(soap, tag, id, (_ns1__GetPrivateAAFQuestion *const*)ptr, "ns1:GetPrivateAAFQuestion");
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestionResponse:
		return soap_out_PointerTo_ns1__CompleteQuestionResponse(soap, tag, id, (_ns1__CompleteQuestionResponse *const*)ptr, "ns1:CompleteQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestion:
		return soap_out_PointerTo_ns1__CompleteQuestion(soap, tag, id, (_ns1__CompleteQuestion *const*)ptr, "ns1:CompleteQuestion");
	case SOAP_TYPE_PointerTo_ns1__AttachPhotoResponse:
		return soap_out_PointerTo_ns1__AttachPhotoResponse(soap, tag, id, (_ns1__AttachPhotoResponse *const*)ptr, "ns1:AttachPhotoResponse");
	case SOAP_TYPE_PointerTo_ns1__AttachPhoto:
		return soap_out_PointerTo_ns1__AttachPhoto(soap, tag, id, (_ns1__AttachPhoto *const*)ptr, "ns1:AttachPhoto");
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestionResponse:
		return soap_out_PointerTo_ns1__SubmitQuestionResponse(soap, tag, id, (_ns1__SubmitQuestionResponse *const*)ptr, "ns1:SubmitQuestionResponse");
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestion:
		return soap_out_PointerTo_ns1__SubmitQuestion(soap, tag, id, (_ns1__SubmitQuestion *const*)ptr, "ns1:SubmitQuestion");
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendComment:
		return soap_out_PointerTons1__ArrayOfAskAFriendComment(soap, tag, id, (ns1__ArrayOfAskAFriendComment *const*)ptr, "ns1:ArrayOfAskAFriendComment");
	case SOAP_TYPE_PointerTons1__AskAFriendResponse:
		return soap_out_PointerTons1__AskAFriendResponse(soap, tag, id, (ns1__AskAFriendResponse *const*)ptr, "ns1:AskAFriendResponse");
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendQuestion:
		return soap_out_PointerTons1__ArrayOfAskAFriendQuestion(soap, tag, id, (ns1__ArrayOfAskAFriendQuestion *const*)ptr, "ns1:ArrayOfAskAFriendQuestion");
	case SOAP_TYPE_PointerTons1__ArrayOfPrivateAAFQuestion:
		return soap_out_PointerTons1__ArrayOfPrivateAAFQuestion(soap, tag, id, (ns1__ArrayOfPrivateAAFQuestion *const*)ptr, "ns1:ArrayOfPrivateAAFQuestion");
	case SOAP_TYPE_PointerTons1__AskAFriendConfirm:
		return soap_out_PointerTons1__AskAFriendConfirm(soap, tag, id, (ns1__AskAFriendConfirm *const*)ptr, "ns1:AskAFriendConfirm");
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendComment:
		return soap_out_PointerToPointerTons1__AskAFriendComment(soap, tag, id, (ns1__AskAFriendComment **const*)ptr, "ns1:AskAFriendComment");
	case SOAP_TYPE_PointerTons1__AskAFriendComment:
		return soap_out_PointerTons1__AskAFriendComment(soap, tag, id, (ns1__AskAFriendComment *const*)ptr, "ns1:AskAFriendComment");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		return soap_out_PointerTons1__ArrayOfString(soap, tag, id, (ns1__ArrayOfString *const*)ptr, "ns1:ArrayOfString");
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		return soap_out_PointerTons1__ArrayOfInt(soap, tag, id, (ns1__ArrayOfInt *const*)ptr, "ns1:ArrayOfInt");
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendQuestion:
		return soap_out_PointerToPointerTons1__AskAFriendQuestion(soap, tag, id, (ns1__AskAFriendQuestion **const*)ptr, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_PointerTons1__AskAFriendQuestion:
		return soap_out_PointerTons1__AskAFriendQuestion(soap, tag, id, (ns1__AskAFriendQuestion *const*)ptr, "ns1:AskAFriendQuestion");
	case SOAP_TYPE_PointerToPointerTons1__PrivateAAFQuestion:
		return soap_out_PointerToPointerTons1__PrivateAAFQuestion(soap, tag, id, (ns1__PrivateAAFQuestion **const*)ptr, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_PointerTons1__PrivateAAFQuestion:
		return soap_out_PointerTons1__PrivateAAFQuestion(soap, tag, id, (ns1__PrivateAAFQuestion *const*)ptr, "ns1:PrivateAAFQuestion");
	case SOAP_TYPE_PointerTostring:
		return soap_out_PointerTostring(soap, tag, id, (char **const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_StringArray:
		((StringArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAAFCommentsResponse:
		((_ns1__GetAAFCommentsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAAFComments:
		((_ns1__GetAAFComments *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAAFResponseResponse:
		((_ns1__GetAAFResponseResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetAAFResponse:
		((_ns1__GetAAFResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse:
		((_ns1__GetNewAAFQuestionCommentIDsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs:
		((_ns1__GetNewAAFQuestionCommentIDs *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMyAAFQuestionsResponse:
		((_ns1__GetMyAAFQuestionsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMyAAFQuestions:
		((_ns1__GetMyAAFQuestions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse:
		((_ns1__GetPrivateAAFQuestionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetPrivateAAFQuestion:
		((_ns1__GetPrivateAAFQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CompleteQuestionResponse:
		((_ns1__CompleteQuestionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__CompleteQuestion:
		((_ns1__CompleteQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AttachPhotoResponse:
		((_ns1__AttachPhotoResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__AttachPhoto:
		((_ns1__AttachPhoto *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SubmitQuestionResponse:
		((_ns1__SubmitQuestionResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__SubmitQuestion:
		((_ns1__SubmitQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AskAFriendComment:
		((ns1__AskAFriendComment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfAskAFriendComment:
		((ns1__ArrayOfAskAFriendComment *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		((ns1__ArrayOfInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AskAFriendResponse:
		((ns1__AskAFriendResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AskAFriendQuestion:
		((ns1__AskAFriendQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion:
		((ns1__ArrayOfAskAFriendQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__PrivateAAFQuestion:
		((ns1__PrivateAAFQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion:
		((ns1__ArrayOfPrivateAAFQuestion *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__AskAFriendConfirm:
		((ns1__AskAFriendConfirm *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns1__ArrayOfString:
		((ns1__ArrayOfString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns4__GetAAFComments:
		soap_serialize___ns4__GetAAFComments(soap, (const struct __ns4__GetAAFComments *)ptr);
		break;
	case SOAP_TYPE___ns4__GetAAFResponse:
		soap_serialize___ns4__GetAAFResponse(soap, (const struct __ns4__GetAAFResponse *)ptr);
		break;
	case SOAP_TYPE___ns4__GetNewAAFQuestionCommentIDs:
		soap_serialize___ns4__GetNewAAFQuestionCommentIDs(soap, (const struct __ns4__GetNewAAFQuestionCommentIDs *)ptr);
		break;
	case SOAP_TYPE___ns4__GetMyAAFQuestions:
		soap_serialize___ns4__GetMyAAFQuestions(soap, (const struct __ns4__GetMyAAFQuestions *)ptr);
		break;
	case SOAP_TYPE___ns4__GetPrivateAAFQuestion:
		soap_serialize___ns4__GetPrivateAAFQuestion(soap, (const struct __ns4__GetPrivateAAFQuestion *)ptr);
		break;
	case SOAP_TYPE___ns4__CompleteQuestion:
		soap_serialize___ns4__CompleteQuestion(soap, (const struct __ns4__CompleteQuestion *)ptr);
		break;
	case SOAP_TYPE___ns4__AttachPhoto:
		soap_serialize___ns4__AttachPhoto(soap, (const struct __ns4__AttachPhoto *)ptr);
		break;
	case SOAP_TYPE___ns4__SubmitQuestion:
		soap_serialize___ns4__SubmitQuestion(soap, (const struct __ns4__SubmitQuestion *)ptr);
		break;
	case SOAP_TYPE___ns3__GetAAFComments:
		soap_serialize___ns3__GetAAFComments(soap, (const struct __ns3__GetAAFComments *)ptr);
		break;
	case SOAP_TYPE___ns3__GetAAFResponse:
		soap_serialize___ns3__GetAAFResponse(soap, (const struct __ns3__GetAAFResponse *)ptr);
		break;
	case SOAP_TYPE___ns3__GetNewAAFQuestionCommentIDs:
		soap_serialize___ns3__GetNewAAFQuestionCommentIDs(soap, (const struct __ns3__GetNewAAFQuestionCommentIDs *)ptr);
		break;
	case SOAP_TYPE___ns3__GetMyAAFQuestions:
		soap_serialize___ns3__GetMyAAFQuestions(soap, (const struct __ns3__GetMyAAFQuestions *)ptr);
		break;
	case SOAP_TYPE___ns3__GetPrivateAAFQuestion:
		soap_serialize___ns3__GetPrivateAAFQuestion(soap, (const struct __ns3__GetPrivateAAFQuestion *)ptr);
		break;
	case SOAP_TYPE___ns3__CompleteQuestion:
		soap_serialize___ns3__CompleteQuestion(soap, (const struct __ns3__CompleteQuestion *)ptr);
		break;
	case SOAP_TYPE___ns3__AttachPhoto:
		soap_serialize___ns3__AttachPhoto(soap, (const struct __ns3__AttachPhoto *)ptr);
		break;
	case SOAP_TYPE___ns3__SubmitQuestion:
		soap_serialize___ns3__SubmitQuestion(soap, (const struct __ns3__SubmitQuestion *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAAFCommentsResponse:
		soap_serialize_PointerTo_ns1__GetAAFCommentsResponse(soap, (_ns1__GetAAFCommentsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAAFComments:
		soap_serialize_PointerTo_ns1__GetAAFComments(soap, (_ns1__GetAAFComments *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponseResponse:
		soap_serialize_PointerTo_ns1__GetAAFResponseResponse(soap, (_ns1__GetAAFResponseResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetAAFResponse:
		soap_serialize_PointerTo_ns1__GetAAFResponse(soap, (_ns1__GetAAFResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse:
		soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(soap, (_ns1__GetNewAAFQuestionCommentIDsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDs:
		soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, (_ns1__GetNewAAFQuestionCommentIDs *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestionsResponse:
		soap_serialize_PointerTo_ns1__GetMyAAFQuestionsResponse(soap, (_ns1__GetMyAAFQuestionsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestions:
		soap_serialize_PointerTo_ns1__GetMyAAFQuestions(soap, (_ns1__GetMyAAFQuestions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestionResponse:
		soap_serialize_PointerTo_ns1__GetPrivateAAFQuestionResponse(soap, (_ns1__GetPrivateAAFQuestionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestion:
		soap_serialize_PointerTo_ns1__GetPrivateAAFQuestion(soap, (_ns1__GetPrivateAAFQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestionResponse:
		soap_serialize_PointerTo_ns1__CompleteQuestionResponse(soap, (_ns1__CompleteQuestionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__CompleteQuestion:
		soap_serialize_PointerTo_ns1__CompleteQuestion(soap, (_ns1__CompleteQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AttachPhotoResponse:
		soap_serialize_PointerTo_ns1__AttachPhotoResponse(soap, (_ns1__AttachPhotoResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__AttachPhoto:
		soap_serialize_PointerTo_ns1__AttachPhoto(soap, (_ns1__AttachPhoto *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestionResponse:
		soap_serialize_PointerTo_ns1__SubmitQuestionResponse(soap, (_ns1__SubmitQuestionResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__SubmitQuestion:
		soap_serialize_PointerTo_ns1__SubmitQuestion(soap, (_ns1__SubmitQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendComment:
		soap_serialize_PointerTons1__ArrayOfAskAFriendComment(soap, (ns1__ArrayOfAskAFriendComment *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AskAFriendResponse:
		soap_serialize_PointerTons1__AskAFriendResponse(soap, (ns1__AskAFriendResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfAskAFriendQuestion:
		soap_serialize_PointerTons1__ArrayOfAskAFriendQuestion(soap, (ns1__ArrayOfAskAFriendQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfPrivateAAFQuestion:
		soap_serialize_PointerTons1__ArrayOfPrivateAAFQuestion(soap, (ns1__ArrayOfPrivateAAFQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AskAFriendConfirm:
		soap_serialize_PointerTons1__AskAFriendConfirm(soap, (ns1__AskAFriendConfirm *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendComment:
		soap_serialize_PointerToPointerTons1__AskAFriendComment(soap, (ns1__AskAFriendComment **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AskAFriendComment:
		soap_serialize_PointerTons1__AskAFriendComment(soap, (ns1__AskAFriendComment *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfString:
		soap_serialize_PointerTons1__ArrayOfString(soap, (ns1__ArrayOfString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__ArrayOfInt:
		soap_serialize_PointerTons1__ArrayOfInt(soap, (ns1__ArrayOfInt *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__AskAFriendQuestion:
		soap_serialize_PointerToPointerTons1__AskAFriendQuestion(soap, (ns1__AskAFriendQuestion **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__AskAFriendQuestion:
		soap_serialize_PointerTons1__AskAFriendQuestion(soap, (ns1__AskAFriendQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons1__PrivateAAFQuestion:
		soap_serialize_PointerToPointerTons1__PrivateAAFQuestion(soap, (ns1__PrivateAAFQuestion **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons1__PrivateAAFQuestion:
		soap_serialize_PointerTons1__PrivateAAFQuestion(soap, (ns1__PrivateAAFQuestion *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostring:
		soap_serialize_PointerTostring(soap, (char **const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_ns1__ArrayOfString:
		return (void*)soap_instantiate_ns1__ArrayOfString(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AskAFriendConfirm:
		return (void*)soap_instantiate_ns1__AskAFriendConfirm(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion:
		return (void*)soap_instantiate_ns1__ArrayOfPrivateAAFQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__PrivateAAFQuestion:
		return (void*)soap_instantiate_ns1__PrivateAAFQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion:
		return (void*)soap_instantiate_ns1__ArrayOfAskAFriendQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AskAFriendQuestion:
		return (void*)soap_instantiate_ns1__AskAFriendQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AskAFriendResponse:
		return (void*)soap_instantiate_ns1__AskAFriendResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfInt:
		return (void*)soap_instantiate_ns1__ArrayOfInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__ArrayOfAskAFriendComment:
		return (void*)soap_instantiate_ns1__ArrayOfAskAFriendComment(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns1__AskAFriendComment:
		return (void*)soap_instantiate_ns1__AskAFriendComment(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SubmitQuestion:
		return (void*)soap_instantiate__ns1__SubmitQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__SubmitQuestionResponse:
		return (void*)soap_instantiate__ns1__SubmitQuestionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AttachPhoto:
		return (void*)soap_instantiate__ns1__AttachPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__AttachPhotoResponse:
		return (void*)soap_instantiate__ns1__AttachPhotoResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CompleteQuestion:
		return (void*)soap_instantiate__ns1__CompleteQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__CompleteQuestionResponse:
		return (void*)soap_instantiate__ns1__CompleteQuestionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPrivateAAFQuestion:
		return (void*)soap_instantiate__ns1__GetPrivateAAFQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse:
		return (void*)soap_instantiate__ns1__GetPrivateAAFQuestionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMyAAFQuestions:
		return (void*)soap_instantiate__ns1__GetMyAAFQuestions(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMyAAFQuestionsResponse:
		return (void*)soap_instantiate__ns1__GetMyAAFQuestionsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs:
		return (void*)soap_instantiate__ns1__GetNewAAFQuestionCommentIDs(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse:
		return (void*)soap_instantiate__ns1__GetNewAAFQuestionCommentIDsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAAFResponse:
		return (void*)soap_instantiate__ns1__GetAAFResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAAFResponseResponse:
		return (void*)soap_instantiate__ns1__GetAAFResponseResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAAFComments:
		return (void*)soap_instantiate__ns1__GetAAFComments(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetAAFCommentsResponse:
		return (void*)soap_instantiate__ns1__GetAAFCommentsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_StringArray:
		return (void*)soap_instantiate_StringArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__SubmitQuestion:
		return (void*)soap_instantiate___ns3__SubmitQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__AttachPhoto:
		return (void*)soap_instantiate___ns3__AttachPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__CompleteQuestion:
		return (void*)soap_instantiate___ns3__CompleteQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetPrivateAAFQuestion:
		return (void*)soap_instantiate___ns3__GetPrivateAAFQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetMyAAFQuestions:
		return (void*)soap_instantiate___ns3__GetMyAAFQuestions(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetNewAAFQuestionCommentIDs:
		return (void*)soap_instantiate___ns3__GetNewAAFQuestionCommentIDs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetAAFResponse:
		return (void*)soap_instantiate___ns3__GetAAFResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetAAFComments:
		return (void*)soap_instantiate___ns3__GetAAFComments(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__SubmitQuestion:
		return (void*)soap_instantiate___ns4__SubmitQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__AttachPhoto:
		return (void*)soap_instantiate___ns4__AttachPhoto(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__CompleteQuestion:
		return (void*)soap_instantiate___ns4__CompleteQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetPrivateAAFQuestion:
		return (void*)soap_instantiate___ns4__GetPrivateAAFQuestion(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetMyAAFQuestions:
		return (void*)soap_instantiate___ns4__GetMyAAFQuestions(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetNewAAFQuestionCommentIDs:
		return (void*)soap_instantiate___ns4__GetNewAAFQuestionCommentIDs(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetAAFResponse:
		return (void*)soap_instantiate___ns4__GetAAFResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns4__GetAAFComments:
		return (void*)soap_instantiate___ns4__GetAAFComments(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_ns1__ArrayOfString:
		if (p->size < 0)
			delete (ns1__ArrayOfString*)p->ptr;
		else
			delete[] (ns1__ArrayOfString*)p->ptr;
		break;
	case SOAP_TYPE_ns1__AskAFriendConfirm:
		if (p->size < 0)
			delete (ns1__AskAFriendConfirm*)p->ptr;
		else
			delete[] (ns1__AskAFriendConfirm*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion:
		if (p->size < 0)
			delete (ns1__ArrayOfPrivateAAFQuestion*)p->ptr;
		else
			delete[] (ns1__ArrayOfPrivateAAFQuestion*)p->ptr;
		break;
	case SOAP_TYPE_ns1__PrivateAAFQuestion:
		if (p->size < 0)
			delete (ns1__PrivateAAFQuestion*)p->ptr;
		else
			delete[] (ns1__PrivateAAFQuestion*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion:
		if (p->size < 0)
			delete (ns1__ArrayOfAskAFriendQuestion*)p->ptr;
		else
			delete[] (ns1__ArrayOfAskAFriendQuestion*)p->ptr;
		break;
	case SOAP_TYPE_ns1__AskAFriendQuestion:
		if (p->size < 0)
			delete (ns1__AskAFriendQuestion*)p->ptr;
		else
			delete[] (ns1__AskAFriendQuestion*)p->ptr;
		break;
	case SOAP_TYPE_ns1__AskAFriendResponse:
		if (p->size < 0)
			delete (ns1__AskAFriendResponse*)p->ptr;
		else
			delete[] (ns1__AskAFriendResponse*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfInt:
		if (p->size < 0)
			delete (ns1__ArrayOfInt*)p->ptr;
		else
			delete[] (ns1__ArrayOfInt*)p->ptr;
		break;
	case SOAP_TYPE_ns1__ArrayOfAskAFriendComment:
		if (p->size < 0)
			delete (ns1__ArrayOfAskAFriendComment*)p->ptr;
		else
			delete[] (ns1__ArrayOfAskAFriendComment*)p->ptr;
		break;
	case SOAP_TYPE_ns1__AskAFriendComment:
		if (p->size < 0)
			delete (ns1__AskAFriendComment*)p->ptr;
		else
			delete[] (ns1__AskAFriendComment*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SubmitQuestion:
		if (p->size < 0)
			delete (_ns1__SubmitQuestion*)p->ptr;
		else
			delete[] (_ns1__SubmitQuestion*)p->ptr;
		break;
	case SOAP_TYPE__ns1__SubmitQuestionResponse:
		if (p->size < 0)
			delete (_ns1__SubmitQuestionResponse*)p->ptr;
		else
			delete[] (_ns1__SubmitQuestionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__AttachPhoto:
		if (p->size < 0)
			delete (_ns1__AttachPhoto*)p->ptr;
		else
			delete[] (_ns1__AttachPhoto*)p->ptr;
		break;
	case SOAP_TYPE__ns1__AttachPhotoResponse:
		if (p->size < 0)
			delete (_ns1__AttachPhotoResponse*)p->ptr;
		else
			delete[] (_ns1__AttachPhotoResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CompleteQuestion:
		if (p->size < 0)
			delete (_ns1__CompleteQuestion*)p->ptr;
		else
			delete[] (_ns1__CompleteQuestion*)p->ptr;
		break;
	case SOAP_TYPE__ns1__CompleteQuestionResponse:
		if (p->size < 0)
			delete (_ns1__CompleteQuestionResponse*)p->ptr;
		else
			delete[] (_ns1__CompleteQuestionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetPrivateAAFQuestion:
		if (p->size < 0)
			delete (_ns1__GetPrivateAAFQuestion*)p->ptr;
		else
			delete[] (_ns1__GetPrivateAAFQuestion*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse:
		if (p->size < 0)
			delete (_ns1__GetPrivateAAFQuestionResponse*)p->ptr;
		else
			delete[] (_ns1__GetPrivateAAFQuestionResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetMyAAFQuestions:
		if (p->size < 0)
			delete (_ns1__GetMyAAFQuestions*)p->ptr;
		else
			delete[] (_ns1__GetMyAAFQuestions*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetMyAAFQuestionsResponse:
		if (p->size < 0)
			delete (_ns1__GetMyAAFQuestionsResponse*)p->ptr;
		else
			delete[] (_ns1__GetMyAAFQuestionsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs:
		if (p->size < 0)
			delete (_ns1__GetNewAAFQuestionCommentIDs*)p->ptr;
		else
			delete[] (_ns1__GetNewAAFQuestionCommentIDs*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse:
		if (p->size < 0)
			delete (_ns1__GetNewAAFQuestionCommentIDsResponse*)p->ptr;
		else
			delete[] (_ns1__GetNewAAFQuestionCommentIDsResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAAFResponse:
		if (p->size < 0)
			delete (_ns1__GetAAFResponse*)p->ptr;
		else
			delete[] (_ns1__GetAAFResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAAFResponseResponse:
		if (p->size < 0)
			delete (_ns1__GetAAFResponseResponse*)p->ptr;
		else
			delete[] (_ns1__GetAAFResponseResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAAFComments:
		if (p->size < 0)
			delete (_ns1__GetAAFComments*)p->ptr;
		else
			delete[] (_ns1__GetAAFComments*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetAAFCommentsResponse:
		if (p->size < 0)
			delete (_ns1__GetAAFCommentsResponse*)p->ptr;
		else
			delete[] (_ns1__GetAAFCommentsResponse*)p->ptr;
		break;
	case SOAP_TYPE_StringArray:
		if (p->size < 0)
			delete (StringArray*)p->ptr;
		else
			delete[] (StringArray*)p->ptr;
		break;
	case SOAP_TYPE___ns3__SubmitQuestion:
		if (p->size < 0)
			delete (struct __ns3__SubmitQuestion*)p->ptr;
		else
			delete[] (struct __ns3__SubmitQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns3__AttachPhoto:
		if (p->size < 0)
			delete (struct __ns3__AttachPhoto*)p->ptr;
		else
			delete[] (struct __ns3__AttachPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns3__CompleteQuestion:
		if (p->size < 0)
			delete (struct __ns3__CompleteQuestion*)p->ptr;
		else
			delete[] (struct __ns3__CompleteQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetPrivateAAFQuestion:
		if (p->size < 0)
			delete (struct __ns3__GetPrivateAAFQuestion*)p->ptr;
		else
			delete[] (struct __ns3__GetPrivateAAFQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetMyAAFQuestions:
		if (p->size < 0)
			delete (struct __ns3__GetMyAAFQuestions*)p->ptr;
		else
			delete[] (struct __ns3__GetMyAAFQuestions*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetNewAAFQuestionCommentIDs:
		if (p->size < 0)
			delete (struct __ns3__GetNewAAFQuestionCommentIDs*)p->ptr;
		else
			delete[] (struct __ns3__GetNewAAFQuestionCommentIDs*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetAAFResponse:
		if (p->size < 0)
			delete (struct __ns3__GetAAFResponse*)p->ptr;
		else
			delete[] (struct __ns3__GetAAFResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetAAFComments:
		if (p->size < 0)
			delete (struct __ns3__GetAAFComments*)p->ptr;
		else
			delete[] (struct __ns3__GetAAFComments*)p->ptr;
		break;
	case SOAP_TYPE___ns4__SubmitQuestion:
		if (p->size < 0)
			delete (struct __ns4__SubmitQuestion*)p->ptr;
		else
			delete[] (struct __ns4__SubmitQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns4__AttachPhoto:
		if (p->size < 0)
			delete (struct __ns4__AttachPhoto*)p->ptr;
		else
			delete[] (struct __ns4__AttachPhoto*)p->ptr;
		break;
	case SOAP_TYPE___ns4__CompleteQuestion:
		if (p->size < 0)
			delete (struct __ns4__CompleteQuestion*)p->ptr;
		else
			delete[] (struct __ns4__CompleteQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetPrivateAAFQuestion:
		if (p->size < 0)
			delete (struct __ns4__GetPrivateAAFQuestion*)p->ptr;
		else
			delete[] (struct __ns4__GetPrivateAAFQuestion*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetMyAAFQuestions:
		if (p->size < 0)
			delete (struct __ns4__GetMyAAFQuestions*)p->ptr;
		else
			delete[] (struct __ns4__GetMyAAFQuestions*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetNewAAFQuestionCommentIDs:
		if (p->size < 0)
			delete (struct __ns4__GetNewAAFQuestionCommentIDs*)p->ptr;
		else
			delete[] (struct __ns4__GetNewAAFQuestionCommentIDs*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetAAFResponse:
		if (p->size < 0)
			delete (struct __ns4__GetAAFResponse*)p->ptr;
		else
			delete[] (struct __ns4__GetAAFResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns4__GetAAFComments:
		if (p->size < 0)
			delete (struct __ns4__GetAAFComments*)p->ptr;
		else
			delete[] (struct __ns4__GetAAFComments*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{
	return soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{	return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return SOAP_OK;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

void StringArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptrString = NULL;
}

void StringArray::soap_serialize(struct soap *soap) const
{
	if (this->__ptrString && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptrString, 1, SOAP_TYPE_StringArray))
		for (int i = 0; i < this->__size; i++)
		{
			soap_serialize_string(soap, this->__ptrString + i);
		}
}

int StringArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptrString, 1, tag, SOAP_TYPE_StringArray);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int StringArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_StringArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_StringArray(struct soap *soap, const char *tag, int id, const StringArray *a, const char *type)
{
	int i, n = a->__size;
	char *t = soap_putsize(soap, "xsd:string", a->__size);
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptrString, 1, type, SOAP_TYPE_StringArray);
	if (id < 0)
		return soap->error;
	if (soap_array_begin_out(soap, tag, id, t, NULL))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap->position = 1;
		soap->positions[0] = i;
		soap_out_string(soap, "String", -1, &a->__ptrString[i], "");
	}
	soap->position = 0;
	return soap_element_end_out(soap, tag);
}

void *StringArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_StringArray(soap, this, tag, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_get_StringArray(struct soap *soap, StringArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_StringArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *StringArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_StringArray(soap, tag, this, type);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_in_StringArray(struct soap *soap, const char *tag, StringArray *a, const char *type)
{	int i, j;
	char **p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (soap_match_array(soap, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (StringArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_StringArray, sizeof(StringArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptrString = (char **)soap_malloc(soap, sizeof(char *) * a->__size);
			for (i = 0; i < a->__size; i++)
				a->__ptrString[i] = NULL;
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_string(soap, NULL, a->__ptrString + i, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	soap_new_block(soap);
			for (a->__size = 0; ; a->__size++)
			{	p = (char **)soap_push_block(soap, sizeof(char *));
				if (!p)
					return NULL;
				*p = NULL;
				if (!soap_in_string(soap, NULL, p, "xsd:string"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap);
			a->__ptrString = (char **)soap_malloc(soap, soap->blist->size);
			soap_save_block(soap, (char*)a->__ptrString, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (StringArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_StringArray, 0, sizeof(StringArray), 0, soap_copy_StringArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 StringArray * SOAP_FMAC6 soap_new_StringArray(struct soap *soap, int n)
{	return soap_instantiate_StringArray(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_StringArray(struct soap *soap, StringArray *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 StringArray * SOAP_FMAC4 soap_instantiate_StringArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_StringArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_StringArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new StringArray;
		if (size)
			*size = sizeof(StringArray);
		((StringArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new StringArray[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(StringArray);
		for (int i = 0; i < n; i++)
			((StringArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (StringArray*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_StringArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying StringArray %p -> %p\n", q, p));
	*(StringArray*)p = *(StringArray*)q;
}

void _ns1__GetAAFCommentsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetAAFCommentsResponse::GetAAFCommentsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetAAFCommentsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfAskAFriendComment(soap, &this->_ns1__GetAAFCommentsResponse::GetAAFCommentsResult);
	/* transient soap skipped */
}

int _ns1__GetAAFCommentsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAAFCommentsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAAFCommentsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAAFCommentsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAAFCommentsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAAFCommentsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAAFCommentsResponse), type))
		return soap->error;
	if (a->GetAAFCommentsResult)
		soap_element_result(soap, "ns1:GetAAFCommentsResult");
	if (soap_out_PointerTons1__ArrayOfAskAFriendComment(soap, "ns1:GetAAFCommentsResult", -1, &(a->_ns1__GetAAFCommentsResponse::GetAAFCommentsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAAFCommentsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAAFCommentsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAAFCommentsResponse * SOAP_FMAC4 soap_get__ns1__GetAAFCommentsResponse(struct soap *soap, _ns1__GetAAFCommentsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAAFCommentsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAAFCommentsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAAFCommentsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAAFCommentsResponse * SOAP_FMAC4 soap_in__ns1__GetAAFCommentsResponse(struct soap *soap, const char *tag, _ns1__GetAAFCommentsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAAFCommentsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAAFCommentsResponse, sizeof(_ns1__GetAAFCommentsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAAFCommentsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAAFCommentsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetAAFCommentsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAAFCommentsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfAskAFriendComment(soap, "ns1:GetAAFCommentsResult", &(a->_ns1__GetAAFCommentsResponse::GetAAFCommentsResult), "ns1:ArrayOfAskAFriendComment"))
				{	soap_flag_GetAAFCommentsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetAAFCommentsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAAFCommentsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAAFCommentsResponse, 0, sizeof(_ns1__GetAAFCommentsResponse), 0, soap_copy__ns1__GetAAFCommentsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAAFCommentsResponse * SOAP_FMAC6 soap_new__ns1__GetAAFCommentsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAAFCommentsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAAFCommentsResponse(struct soap *soap, _ns1__GetAAFCommentsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAAFCommentsResponse * SOAP_FMAC4 soap_instantiate__ns1__GetAAFCommentsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAAFCommentsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAAFCommentsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAAFCommentsResponse;
		if (size)
			*size = sizeof(_ns1__GetAAFCommentsResponse);
		((_ns1__GetAAFCommentsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAAFCommentsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAAFCommentsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetAAFCommentsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAAFCommentsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAAFCommentsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAAFCommentsResponse %p -> %p\n", q, p));
	*(_ns1__GetAAFCommentsResponse*)p = *(_ns1__GetAAFCommentsResponse*)q;
}

void _ns1__GetAAFComments::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetAAFComments::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetAAFComments::WebPassword);
	soap_default_string(soap, &this->_ns1__GetAAFComments::WebAskAFriendID);
	soap_default_string(soap, &this->_ns1__GetAAFComments::LastWebAskAFriendCommentID);
	/* transient soap skipped */
}

void _ns1__GetAAFComments::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetAAFComments::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetAAFComments::WebPassword);
	soap_serialize_string(soap, &this->_ns1__GetAAFComments::WebAskAFriendID);
	soap_serialize_string(soap, &this->_ns1__GetAAFComments::LastWebAskAFriendCommentID);
	/* transient soap skipped */
}

int _ns1__GetAAFComments::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAAFComments);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAAFComments::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAAFComments(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAAFComments(struct soap *soap, const char *tag, int id, const _ns1__GetAAFComments *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAAFComments), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetAAFComments::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetAAFComments::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->_ns1__GetAAFComments::WebAskAFriendID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:LastWebAskAFriendCommentID", -1, &(a->_ns1__GetAAFComments::LastWebAskAFriendCommentID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAAFComments::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAAFComments(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAAFComments * SOAP_FMAC4 soap_get__ns1__GetAAFComments(struct soap *soap, _ns1__GetAAFComments *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAAFComments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAAFComments::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAAFComments(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAAFComments * SOAP_FMAC4 soap_in__ns1__GetAAFComments(struct soap *soap, const char *tag, _ns1__GetAAFComments *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAAFComments *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAAFComments, sizeof(_ns1__GetAAFComments), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAAFComments)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAAFComments *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_WebAskAFriendID1 = 1, soap_flag_LastWebAskAFriendCommentID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetAAFComments::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetAAFComments::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->_ns1__GetAAFComments::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			if (soap_flag_LastWebAskAFriendCommentID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:LastWebAskAFriendCommentID", &(a->_ns1__GetAAFComments::LastWebAskAFriendCommentID), "xsd:string"))
				{	soap_flag_LastWebAskAFriendCommentID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAAFComments *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAAFComments, 0, sizeof(_ns1__GetAAFComments), 0, soap_copy__ns1__GetAAFComments);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAAFComments * SOAP_FMAC6 soap_new__ns1__GetAAFComments(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAAFComments(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAAFComments(struct soap *soap, _ns1__GetAAFComments *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAAFComments * SOAP_FMAC4 soap_instantiate__ns1__GetAAFComments(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAAFComments(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAAFComments, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAAFComments;
		if (size)
			*size = sizeof(_ns1__GetAAFComments);
		((_ns1__GetAAFComments*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAAFComments[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAAFComments);
		for (int i = 0; i < n; i++)
			((_ns1__GetAAFComments*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAAFComments*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAAFComments(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAAFComments %p -> %p\n", q, p));
	*(_ns1__GetAAFComments*)p = *(_ns1__GetAAFComments*)q;
}

void _ns1__GetAAFResponseResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetAAFResponseResponse::GetAAFResponseResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetAAFResponseResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__AskAFriendResponse(soap, &this->_ns1__GetAAFResponseResponse::GetAAFResponseResult);
	/* transient soap skipped */
}

int _ns1__GetAAFResponseResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAAFResponseResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAAFResponseResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAAFResponseResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAAFResponseResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAAFResponseResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAAFResponseResponse), type))
		return soap->error;
	if (a->GetAAFResponseResult)
		soap_element_result(soap, "ns1:GetAAFResponseResult");
	if (soap_out_PointerTons1__AskAFriendResponse(soap, "ns1:GetAAFResponseResult", -1, &(a->_ns1__GetAAFResponseResponse::GetAAFResponseResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAAFResponseResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAAFResponseResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAAFResponseResponse * SOAP_FMAC4 soap_get__ns1__GetAAFResponseResponse(struct soap *soap, _ns1__GetAAFResponseResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAAFResponseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAAFResponseResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAAFResponseResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAAFResponseResponse * SOAP_FMAC4 soap_in__ns1__GetAAFResponseResponse(struct soap *soap, const char *tag, _ns1__GetAAFResponseResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAAFResponseResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAAFResponseResponse, sizeof(_ns1__GetAAFResponseResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAAFResponseResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAAFResponseResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetAAFResponseResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAAFResponseResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__AskAFriendResponse(soap, "ns1:GetAAFResponseResult", &(a->_ns1__GetAAFResponseResponse::GetAAFResponseResult), "ns1:AskAFriendResponse"))
				{	soap_flag_GetAAFResponseResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetAAFResponseResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAAFResponseResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAAFResponseResponse, 0, sizeof(_ns1__GetAAFResponseResponse), 0, soap_copy__ns1__GetAAFResponseResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAAFResponseResponse * SOAP_FMAC6 soap_new__ns1__GetAAFResponseResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAAFResponseResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAAFResponseResponse(struct soap *soap, _ns1__GetAAFResponseResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAAFResponseResponse * SOAP_FMAC4 soap_instantiate__ns1__GetAAFResponseResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAAFResponseResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAAFResponseResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAAFResponseResponse;
		if (size)
			*size = sizeof(_ns1__GetAAFResponseResponse);
		((_ns1__GetAAFResponseResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAAFResponseResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAAFResponseResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetAAFResponseResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAAFResponseResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAAFResponseResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAAFResponseResponse %p -> %p\n", q, p));
	*(_ns1__GetAAFResponseResponse*)p = *(_ns1__GetAAFResponseResponse*)q;
}

void _ns1__GetAAFResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetAAFResponse::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetAAFResponse::WebPassword);
	soap_default_string(soap, &this->_ns1__GetAAFResponse::WebAskAFriendID);
	/* transient soap skipped */
}

void _ns1__GetAAFResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetAAFResponse::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetAAFResponse::WebPassword);
	soap_serialize_string(soap, &this->_ns1__GetAAFResponse::WebAskAFriendID);
	/* transient soap skipped */
}

int _ns1__GetAAFResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetAAFResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetAAFResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetAAFResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetAAFResponse(struct soap *soap, const char *tag, int id, const _ns1__GetAAFResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetAAFResponse), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetAAFResponse::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetAAFResponse::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->_ns1__GetAAFResponse::WebAskAFriendID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetAAFResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetAAFResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetAAFResponse * SOAP_FMAC4 soap_get__ns1__GetAAFResponse(struct soap *soap, _ns1__GetAAFResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetAAFResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetAAFResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetAAFResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetAAFResponse * SOAP_FMAC4 soap_in__ns1__GetAAFResponse(struct soap *soap, const char *tag, _ns1__GetAAFResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetAAFResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetAAFResponse, sizeof(_ns1__GetAAFResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetAAFResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetAAFResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_WebAskAFriendID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetAAFResponse::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetAAFResponse::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->_ns1__GetAAFResponse::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetAAFResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetAAFResponse, 0, sizeof(_ns1__GetAAFResponse), 0, soap_copy__ns1__GetAAFResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetAAFResponse * SOAP_FMAC6 soap_new__ns1__GetAAFResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetAAFResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetAAFResponse(struct soap *soap, _ns1__GetAAFResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetAAFResponse * SOAP_FMAC4 soap_instantiate__ns1__GetAAFResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetAAFResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetAAFResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetAAFResponse;
		if (size)
			*size = sizeof(_ns1__GetAAFResponse);
		((_ns1__GetAAFResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetAAFResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetAAFResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetAAFResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetAAFResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetAAFResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetAAFResponse %p -> %p\n", q, p));
	*(_ns1__GetAAFResponse*)p = *(_ns1__GetAAFResponse*)q;
}

void _ns1__GetNewAAFQuestionCommentIDsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetNewAAFQuestionCommentIDsResponse::GetNewAAFQuestionCommentIDsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetNewAAFQuestionCommentIDsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__GetNewAAFQuestionCommentIDsResponse::GetNewAAFQuestionCommentIDsResult);
	/* transient soap skipped */
}

int _ns1__GetNewAAFQuestionCommentIDsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetNewAAFQuestionCommentIDsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetNewAAFQuestionCommentIDsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse), type))
		return soap->error;
	if (a->GetNewAAFQuestionCommentIDsResult)
		soap_element_result(soap, "ns1:GetNewAAFQuestionCommentIDsResult");
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:GetNewAAFQuestionCommentIDsResult", -1, &(a->_ns1__GetNewAAFQuestionCommentIDsResponse::GetNewAAFQuestionCommentIDsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNewAAFQuestionCommentIDsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNewAAFQuestionCommentIDsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDsResponse * SOAP_FMAC4 soap_get__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetNewAAFQuestionCommentIDsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDsResponse * SOAP_FMAC4 soap_in__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, const char *tag, _ns1__GetNewAAFQuestionCommentIDsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNewAAFQuestionCommentIDsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse, sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNewAAFQuestionCommentIDsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetNewAAFQuestionCommentIDsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetNewAAFQuestionCommentIDsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:GetNewAAFQuestionCommentIDsResult", &(a->_ns1__GetNewAAFQuestionCommentIDsResponse::GetNewAAFQuestionCommentIDsResult), "ns1:ArrayOfString"))
				{	soap_flag_GetNewAAFQuestionCommentIDsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetNewAAFQuestionCommentIDsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNewAAFQuestionCommentIDsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse, 0, sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse), 0, soap_copy__ns1__GetNewAAFQuestionCommentIDsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetNewAAFQuestionCommentIDsResponse * SOAP_FMAC6 soap_new__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetNewAAFQuestionCommentIDsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDsResponse * SOAP_FMAC4 soap_instantiate__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNewAAFQuestionCommentIDsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetNewAAFQuestionCommentIDsResponse;
		if (size)
			*size = sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse);
		((_ns1__GetNewAAFQuestionCommentIDsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetNewAAFQuestionCommentIDsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetNewAAFQuestionCommentIDsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetNewAAFQuestionCommentIDsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNewAAFQuestionCommentIDsResponse %p -> %p\n", q, p));
	*(_ns1__GetNewAAFQuestionCommentIDsResponse*)p = *(_ns1__GetNewAAFQuestionCommentIDsResponse*)q;
}

void _ns1__GetNewAAFQuestionCommentIDs::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebPassword);
	this->_ns1__GetNewAAFQuestionCommentIDs::WebAskAFriendIDs = NULL;
	this->_ns1__GetNewAAFQuestionCommentIDs::WebLastAskAFriendQuestionIDs = NULL;
	/* transient soap skipped */
}

void _ns1__GetNewAAFQuestionCommentIDs::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebPassword);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebAskAFriendIDs);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__GetNewAAFQuestionCommentIDs::WebLastAskAFriendQuestionIDs);
	/* transient soap skipped */
}

int _ns1__GetNewAAFQuestionCommentIDs::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetNewAAFQuestionCommentIDs::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetNewAAFQuestionCommentIDs(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, int id, const _ns1__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetNewAAFQuestionCommentIDs::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetNewAAFQuestionCommentIDs::WebPassword), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:WebAskAFriendIDs", -1, &(a->_ns1__GetNewAAFQuestionCommentIDs::WebAskAFriendIDs), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:WebLastAskAFriendQuestionIDs", -1, &(a->_ns1__GetNewAAFQuestionCommentIDs::WebLastAskAFriendQuestionIDs), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetNewAAFQuestionCommentIDs::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetNewAAFQuestionCommentIDs(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_get__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDs *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetNewAAFQuestionCommentIDs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetNewAAFQuestionCommentIDs::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetNewAAFQuestionCommentIDs(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_in__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, _ns1__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetNewAAFQuestionCommentIDs *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs, sizeof(_ns1__GetNewAAFQuestionCommentIDs), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetNewAAFQuestionCommentIDs *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_WebAskAFriendIDs1 = 1, soap_flag_WebLastAskAFriendQuestionIDs1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetNewAAFQuestionCommentIDs::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetNewAAFQuestionCommentIDs::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_WebAskAFriendIDs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:WebAskAFriendIDs", &(a->_ns1__GetNewAAFQuestionCommentIDs::WebAskAFriendIDs), "ns1:ArrayOfString"))
				{	soap_flag_WebAskAFriendIDs1--;
					continue;
				}
			if (soap_flag_WebLastAskAFriendQuestionIDs1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:WebLastAskAFriendQuestionIDs", &(a->_ns1__GetNewAAFQuestionCommentIDs::WebLastAskAFriendQuestionIDs), "ns1:ArrayOfString"))
				{	soap_flag_WebLastAskAFriendQuestionIDs1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetNewAAFQuestionCommentIDs *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs, 0, sizeof(_ns1__GetNewAAFQuestionCommentIDs), 0, soap_copy__ns1__GetNewAAFQuestionCommentIDs);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetNewAAFQuestionCommentIDs * SOAP_FMAC6 soap_new__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetNewAAFQuestionCommentIDs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_instantiate__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetNewAAFQuestionCommentIDs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetNewAAFQuestionCommentIDs;
		if (size)
			*size = sizeof(_ns1__GetNewAAFQuestionCommentIDs);
		((_ns1__GetNewAAFQuestionCommentIDs*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetNewAAFQuestionCommentIDs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetNewAAFQuestionCommentIDs);
		for (int i = 0; i < n; i++)
			((_ns1__GetNewAAFQuestionCommentIDs*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetNewAAFQuestionCommentIDs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetNewAAFQuestionCommentIDs %p -> %p\n", q, p));
	*(_ns1__GetNewAAFQuestionCommentIDs*)p = *(_ns1__GetNewAAFQuestionCommentIDs*)q;
}

void _ns1__GetMyAAFQuestionsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetMyAAFQuestionsResponse::GetMyAAFQuestionsResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetMyAAFQuestionsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfAskAFriendQuestion(soap, &this->_ns1__GetMyAAFQuestionsResponse::GetMyAAFQuestionsResult);
	/* transient soap skipped */
}

int _ns1__GetMyAAFQuestionsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetMyAAFQuestionsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMyAAFQuestionsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMyAAFQuestionsResponse(struct soap *soap, const char *tag, int id, const _ns1__GetMyAAFQuestionsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse), type))
		return soap->error;
	if (a->GetMyAAFQuestionsResult)
		soap_element_result(soap, "ns1:GetMyAAFQuestionsResult");
	if (soap_out_PointerTons1__ArrayOfAskAFriendQuestion(soap, "ns1:GetMyAAFQuestionsResult", -1, &(a->_ns1__GetMyAAFQuestionsResponse::GetMyAAFQuestionsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMyAAFQuestionsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMyAAFQuestionsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestionsResponse * SOAP_FMAC4 soap_get__ns1__GetMyAAFQuestionsResponse(struct soap *soap, _ns1__GetMyAAFQuestionsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMyAAFQuestionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetMyAAFQuestionsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMyAAFQuestionsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestionsResponse * SOAP_FMAC4 soap_in__ns1__GetMyAAFQuestionsResponse(struct soap *soap, const char *tag, _ns1__GetMyAAFQuestionsResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMyAAFQuestionsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse, sizeof(_ns1__GetMyAAFQuestionsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMyAAFQuestionsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMyAAFQuestionsResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetMyAAFQuestionsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMyAAFQuestionsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfAskAFriendQuestion(soap, "ns1:GetMyAAFQuestionsResult", &(a->_ns1__GetMyAAFQuestionsResponse::GetMyAAFQuestionsResult), "ns1:ArrayOfAskAFriendQuestion"))
				{	soap_flag_GetMyAAFQuestionsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetMyAAFQuestionsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMyAAFQuestionsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse, 0, sizeof(_ns1__GetMyAAFQuestionsResponse), 0, soap_copy__ns1__GetMyAAFQuestionsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetMyAAFQuestionsResponse * SOAP_FMAC6 soap_new__ns1__GetMyAAFQuestionsResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetMyAAFQuestionsResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetMyAAFQuestionsResponse(struct soap *soap, _ns1__GetMyAAFQuestionsResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestionsResponse * SOAP_FMAC4 soap_instantiate__ns1__GetMyAAFQuestionsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMyAAFQuestionsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetMyAAFQuestionsResponse;
		if (size)
			*size = sizeof(_ns1__GetMyAAFQuestionsResponse);
		((_ns1__GetMyAAFQuestionsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetMyAAFQuestionsResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetMyAAFQuestionsResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetMyAAFQuestionsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetMyAAFQuestionsResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMyAAFQuestionsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMyAAFQuestionsResponse %p -> %p\n", q, p));
	*(_ns1__GetMyAAFQuestionsResponse*)p = *(_ns1__GetMyAAFQuestionsResponse*)q;
}

void _ns1__GetMyAAFQuestions::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetMyAAFQuestions::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetMyAAFQuestions::WebPassword);
	soap_default_string(soap, &this->_ns1__GetMyAAFQuestions::LastWebAskAFriendID);
	/* transient soap skipped */
}

void _ns1__GetMyAAFQuestions::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetMyAAFQuestions::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetMyAAFQuestions::WebPassword);
	soap_serialize_string(soap, &this->_ns1__GetMyAAFQuestions::LastWebAskAFriendID);
	/* transient soap skipped */
}

int _ns1__GetMyAAFQuestions::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetMyAAFQuestions);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetMyAAFQuestions::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMyAAFQuestions(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMyAAFQuestions(struct soap *soap, const char *tag, int id, const _ns1__GetMyAAFQuestions *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMyAAFQuestions), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetMyAAFQuestions::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetMyAAFQuestions::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:LastWebAskAFriendID", -1, &(a->_ns1__GetMyAAFQuestions::LastWebAskAFriendID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMyAAFQuestions::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMyAAFQuestions(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestions * SOAP_FMAC4 soap_get__ns1__GetMyAAFQuestions(struct soap *soap, _ns1__GetMyAAFQuestions *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMyAAFQuestions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetMyAAFQuestions::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMyAAFQuestions(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestions * SOAP_FMAC4 soap_in__ns1__GetMyAAFQuestions(struct soap *soap, const char *tag, _ns1__GetMyAAFQuestions *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMyAAFQuestions *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMyAAFQuestions, sizeof(_ns1__GetMyAAFQuestions), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMyAAFQuestions)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMyAAFQuestions *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_LastWebAskAFriendID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetMyAAFQuestions::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetMyAAFQuestions::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_LastWebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:LastWebAskAFriendID", &(a->_ns1__GetMyAAFQuestions::LastWebAskAFriendID), "xsd:string"))
				{	soap_flag_LastWebAskAFriendID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMyAAFQuestions *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMyAAFQuestions, 0, sizeof(_ns1__GetMyAAFQuestions), 0, soap_copy__ns1__GetMyAAFQuestions);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetMyAAFQuestions * SOAP_FMAC6 soap_new__ns1__GetMyAAFQuestions(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetMyAAFQuestions(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetMyAAFQuestions(struct soap *soap, _ns1__GetMyAAFQuestions *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestions * SOAP_FMAC4 soap_instantiate__ns1__GetMyAAFQuestions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMyAAFQuestions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMyAAFQuestions, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetMyAAFQuestions;
		if (size)
			*size = sizeof(_ns1__GetMyAAFQuestions);
		((_ns1__GetMyAAFQuestions*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetMyAAFQuestions[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetMyAAFQuestions);
		for (int i = 0; i < n; i++)
			((_ns1__GetMyAAFQuestions*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetMyAAFQuestions*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMyAAFQuestions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMyAAFQuestions %p -> %p\n", q, p));
	*(_ns1__GetMyAAFQuestions*)p = *(_ns1__GetMyAAFQuestions*)q;
}

void _ns1__GetPrivateAAFQuestionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetPrivateAAFQuestionResponse::GetPrivateAAFQuestionResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetPrivateAAFQuestionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__ArrayOfPrivateAAFQuestion(soap, &this->_ns1__GetPrivateAAFQuestionResponse::GetPrivateAAFQuestionResult);
	/* transient soap skipped */
}

int _ns1__GetPrivateAAFQuestionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetPrivateAAFQuestionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPrivateAAFQuestionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, const char *tag, int id, const _ns1__GetPrivateAAFQuestionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse), type))
		return soap->error;
	if (a->GetPrivateAAFQuestionResult)
		soap_element_result(soap, "ns1:GetPrivateAAFQuestionResult");
	if (soap_out_PointerTons1__ArrayOfPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestionResult", -1, &(a->_ns1__GetPrivateAAFQuestionResponse::GetPrivateAAFQuestionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPrivateAAFQuestionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPrivateAAFQuestionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestionResponse * SOAP_FMAC4 soap_get__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, _ns1__GetPrivateAAFQuestionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPrivateAAFQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetPrivateAAFQuestionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPrivateAAFQuestionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestionResponse * SOAP_FMAC4 soap_in__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, const char *tag, _ns1__GetPrivateAAFQuestionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPrivateAAFQuestionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse, sizeof(_ns1__GetPrivateAAFQuestionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPrivateAAFQuestionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetPrivateAAFQuestionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetPrivateAAFQuestionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestionResult", &(a->_ns1__GetPrivateAAFQuestionResponse::GetPrivateAAFQuestionResult), "ns1:ArrayOfPrivateAAFQuestion"))
				{	soap_flag_GetPrivateAAFQuestionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetPrivateAAFQuestionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPrivateAAFQuestionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse, 0, sizeof(_ns1__GetPrivateAAFQuestionResponse), 0, soap_copy__ns1__GetPrivateAAFQuestionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetPrivateAAFQuestionResponse * SOAP_FMAC6 soap_new__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetPrivateAAFQuestionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, _ns1__GetPrivateAAFQuestionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestionResponse * SOAP_FMAC4 soap_instantiate__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPrivateAAFQuestionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetPrivateAAFQuestionResponse;
		if (size)
			*size = sizeof(_ns1__GetPrivateAAFQuestionResponse);
		((_ns1__GetPrivateAAFQuestionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetPrivateAAFQuestionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetPrivateAAFQuestionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetPrivateAAFQuestionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetPrivateAAFQuestionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPrivateAAFQuestionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPrivateAAFQuestionResponse %p -> %p\n", q, p));
	*(_ns1__GetPrivateAAFQuestionResponse*)p = *(_ns1__GetPrivateAAFQuestionResponse*)q;
}

void _ns1__GetPrivateAAFQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetPrivateAAFQuestion::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetPrivateAAFQuestion::WebPassword);
	/* transient soap skipped */
}

void _ns1__GetPrivateAAFQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetPrivateAAFQuestion::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetPrivateAAFQuestion::WebPassword);
	/* transient soap skipped */
}

int _ns1__GetPrivateAAFQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetPrivateAAFQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetPrivateAAFQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetPrivateAAFQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetPrivateAAFQuestion(struct soap *soap, const char *tag, int id, const _ns1__GetPrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetPrivateAAFQuestion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetPrivateAAFQuestion::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetPrivateAAFQuestion::WebPassword), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetPrivateAAFQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetPrivateAAFQuestion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestion * SOAP_FMAC4 soap_get__ns1__GetPrivateAAFQuestion(struct soap *soap, _ns1__GetPrivateAAFQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetPrivateAAFQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetPrivateAAFQuestion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestion * SOAP_FMAC4 soap_in__ns1__GetPrivateAAFQuestion(struct soap *soap, const char *tag, _ns1__GetPrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetPrivateAAFQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetPrivateAAFQuestion, sizeof(_ns1__GetPrivateAAFQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetPrivateAAFQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetPrivateAAFQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetPrivateAAFQuestion::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetPrivateAAFQuestion::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetPrivateAAFQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetPrivateAAFQuestion, 0, sizeof(_ns1__GetPrivateAAFQuestion), 0, soap_copy__ns1__GetPrivateAAFQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetPrivateAAFQuestion * SOAP_FMAC6 soap_new__ns1__GetPrivateAAFQuestion(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetPrivateAAFQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetPrivateAAFQuestion(struct soap *soap, _ns1__GetPrivateAAFQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestion * SOAP_FMAC4 soap_instantiate__ns1__GetPrivateAAFQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetPrivateAAFQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetPrivateAAFQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetPrivateAAFQuestion;
		if (size)
			*size = sizeof(_ns1__GetPrivateAAFQuestion);
		((_ns1__GetPrivateAAFQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetPrivateAAFQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetPrivateAAFQuestion);
		for (int i = 0; i < n; i++)
			((_ns1__GetPrivateAAFQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetPrivateAAFQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetPrivateAAFQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetPrivateAAFQuestion %p -> %p\n", q, p));
	*(_ns1__GetPrivateAAFQuestion*)p = *(_ns1__GetPrivateAAFQuestion*)q;
}

void _ns1__CompleteQuestionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__CompleteQuestionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__CompleteQuestionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CompleteQuestionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CompleteQuestionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CompleteQuestionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CompleteQuestionResponse(struct soap *soap, const char *tag, int id, const _ns1__CompleteQuestionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CompleteQuestionResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CompleteQuestionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CompleteQuestionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CompleteQuestionResponse * SOAP_FMAC4 soap_get__ns1__CompleteQuestionResponse(struct soap *soap, _ns1__CompleteQuestionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CompleteQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CompleteQuestionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CompleteQuestionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CompleteQuestionResponse * SOAP_FMAC4 soap_in__ns1__CompleteQuestionResponse(struct soap *soap, const char *tag, _ns1__CompleteQuestionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CompleteQuestionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CompleteQuestionResponse, sizeof(_ns1__CompleteQuestionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CompleteQuestionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CompleteQuestionResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CompleteQuestionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CompleteQuestionResponse, 0, sizeof(_ns1__CompleteQuestionResponse), 0, soap_copy__ns1__CompleteQuestionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CompleteQuestionResponse * SOAP_FMAC6 soap_new__ns1__CompleteQuestionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__CompleteQuestionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CompleteQuestionResponse(struct soap *soap, _ns1__CompleteQuestionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CompleteQuestionResponse * SOAP_FMAC4 soap_instantiate__ns1__CompleteQuestionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CompleteQuestionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CompleteQuestionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CompleteQuestionResponse;
		if (size)
			*size = sizeof(_ns1__CompleteQuestionResponse);
		((_ns1__CompleteQuestionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CompleteQuestionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CompleteQuestionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__CompleteQuestionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CompleteQuestionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CompleteQuestionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CompleteQuestionResponse %p -> %p\n", q, p));
	*(_ns1__CompleteQuestionResponse*)p = *(_ns1__CompleteQuestionResponse*)q;
}

void _ns1__CompleteQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__CompleteQuestion::WebMemberID);
	soap_default_string(soap, &this->_ns1__CompleteQuestion::WebPassword);
	soap_default_string(soap, &this->_ns1__CompleteQuestion::WebAskAFriendID);
	/* transient soap skipped */
}

void _ns1__CompleteQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__CompleteQuestion::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__CompleteQuestion::WebPassword);
	soap_serialize_string(soap, &this->_ns1__CompleteQuestion::WebAskAFriendID);
	/* transient soap skipped */
}

int _ns1__CompleteQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__CompleteQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__CompleteQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__CompleteQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__CompleteQuestion(struct soap *soap, const char *tag, int id, const _ns1__CompleteQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__CompleteQuestion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__CompleteQuestion::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__CompleteQuestion::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->_ns1__CompleteQuestion::WebAskAFriendID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__CompleteQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__CompleteQuestion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__CompleteQuestion * SOAP_FMAC4 soap_get__ns1__CompleteQuestion(struct soap *soap, _ns1__CompleteQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__CompleteQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__CompleteQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__CompleteQuestion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__CompleteQuestion * SOAP_FMAC4 soap_in__ns1__CompleteQuestion(struct soap *soap, const char *tag, _ns1__CompleteQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__CompleteQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__CompleteQuestion, sizeof(_ns1__CompleteQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__CompleteQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__CompleteQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_WebAskAFriendID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__CompleteQuestion::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__CompleteQuestion::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->_ns1__CompleteQuestion::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__CompleteQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__CompleteQuestion, 0, sizeof(_ns1__CompleteQuestion), 0, soap_copy__ns1__CompleteQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__CompleteQuestion * SOAP_FMAC6 soap_new__ns1__CompleteQuestion(struct soap *soap, int n)
{	return soap_instantiate__ns1__CompleteQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__CompleteQuestion(struct soap *soap, _ns1__CompleteQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__CompleteQuestion * SOAP_FMAC4 soap_instantiate__ns1__CompleteQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__CompleteQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__CompleteQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__CompleteQuestion;
		if (size)
			*size = sizeof(_ns1__CompleteQuestion);
		((_ns1__CompleteQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__CompleteQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__CompleteQuestion);
		for (int i = 0; i < n; i++)
			((_ns1__CompleteQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__CompleteQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__CompleteQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__CompleteQuestion %p -> %p\n", q, p));
	*(_ns1__CompleteQuestion*)p = *(_ns1__CompleteQuestion*)q;
}

void _ns1__AttachPhotoResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns1__AttachPhotoResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns1__AttachPhotoResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__AttachPhotoResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__AttachPhotoResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AttachPhotoResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AttachPhotoResponse(struct soap *soap, const char *tag, int id, const _ns1__AttachPhotoResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AttachPhotoResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AttachPhotoResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AttachPhotoResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AttachPhotoResponse * SOAP_FMAC4 soap_get__ns1__AttachPhotoResponse(struct soap *soap, _ns1__AttachPhotoResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AttachPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__AttachPhotoResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AttachPhotoResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AttachPhotoResponse * SOAP_FMAC4 soap_in__ns1__AttachPhotoResponse(struct soap *soap, const char *tag, _ns1__AttachPhotoResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AttachPhotoResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AttachPhotoResponse, sizeof(_ns1__AttachPhotoResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AttachPhotoResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AttachPhotoResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AttachPhotoResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AttachPhotoResponse, 0, sizeof(_ns1__AttachPhotoResponse), 0, soap_copy__ns1__AttachPhotoResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__AttachPhotoResponse * SOAP_FMAC6 soap_new__ns1__AttachPhotoResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__AttachPhotoResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__AttachPhotoResponse(struct soap *soap, _ns1__AttachPhotoResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__AttachPhotoResponse * SOAP_FMAC4 soap_instantiate__ns1__AttachPhotoResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AttachPhotoResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AttachPhotoResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__AttachPhotoResponse;
		if (size)
			*size = sizeof(_ns1__AttachPhotoResponse);
		((_ns1__AttachPhotoResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__AttachPhotoResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__AttachPhotoResponse);
		for (int i = 0; i < n; i++)
			((_ns1__AttachPhotoResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__AttachPhotoResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AttachPhotoResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AttachPhotoResponse %p -> %p\n", q, p));
	*(_ns1__AttachPhotoResponse*)p = *(_ns1__AttachPhotoResponse*)q;
}

void _ns1__AttachPhoto::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__AttachPhoto::WebMemberID);
	soap_default_string(soap, &this->_ns1__AttachPhoto::WebPassword);
	soap_default_string(soap, &this->_ns1__AttachPhoto::WebAskAFriendID);
	soap_default_int(soap, &this->_ns1__AttachPhoto::IndexOrder);
	soap_default_string(soap, &this->_ns1__AttachPhoto::PhotoBase64String);
	/* transient soap skipped */
}

void _ns1__AttachPhoto::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__AttachPhoto::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__AttachPhoto::WebPassword);
	soap_serialize_string(soap, &this->_ns1__AttachPhoto::WebAskAFriendID);
	soap_embedded(soap, &this->_ns1__AttachPhoto::IndexOrder, SOAP_TYPE_int);
	soap_serialize_string(soap, &this->_ns1__AttachPhoto::PhotoBase64String);
	/* transient soap skipped */
}

int _ns1__AttachPhoto::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__AttachPhoto);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__AttachPhoto::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__AttachPhoto(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__AttachPhoto(struct soap *soap, const char *tag, int id, const _ns1__AttachPhoto *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__AttachPhoto), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__AttachPhoto::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__AttachPhoto::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->_ns1__AttachPhoto::WebAskAFriendID), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:IndexOrder", -1, &(a->_ns1__AttachPhoto::IndexOrder), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:PhotoBase64String", -1, &(a->_ns1__AttachPhoto::PhotoBase64String), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__AttachPhoto::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__AttachPhoto(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__AttachPhoto * SOAP_FMAC4 soap_get__ns1__AttachPhoto(struct soap *soap, _ns1__AttachPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__AttachPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__AttachPhoto::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__AttachPhoto(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__AttachPhoto * SOAP_FMAC4 soap_in__ns1__AttachPhoto(struct soap *soap, const char *tag, _ns1__AttachPhoto *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__AttachPhoto *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__AttachPhoto, sizeof(_ns1__AttachPhoto), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__AttachPhoto)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__AttachPhoto *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_WebAskAFriendID1 = 1, soap_flag_IndexOrder1 = 1, soap_flag_PhotoBase64String1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__AttachPhoto::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__AttachPhoto::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->_ns1__AttachPhoto::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			if (soap_flag_IndexOrder1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:IndexOrder", &(a->_ns1__AttachPhoto::IndexOrder), "xsd:int"))
				{	soap_flag_IndexOrder1--;
					continue;
				}
			if (soap_flag_PhotoBase64String1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:PhotoBase64String", &(a->_ns1__AttachPhoto::PhotoBase64String), "xsd:string"))
				{	soap_flag_PhotoBase64String1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__AttachPhoto *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__AttachPhoto, 0, sizeof(_ns1__AttachPhoto), 0, soap_copy__ns1__AttachPhoto);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_IndexOrder1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__AttachPhoto * SOAP_FMAC6 soap_new__ns1__AttachPhoto(struct soap *soap, int n)
{	return soap_instantiate__ns1__AttachPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__AttachPhoto(struct soap *soap, _ns1__AttachPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__AttachPhoto * SOAP_FMAC4 soap_instantiate__ns1__AttachPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__AttachPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__AttachPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__AttachPhoto;
		if (size)
			*size = sizeof(_ns1__AttachPhoto);
		((_ns1__AttachPhoto*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__AttachPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__AttachPhoto);
		for (int i = 0; i < n; i++)
			((_ns1__AttachPhoto*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__AttachPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__AttachPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__AttachPhoto %p -> %p\n", q, p));
	*(_ns1__AttachPhoto*)p = *(_ns1__AttachPhoto*)q;
}

void _ns1__SubmitQuestionResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__SubmitQuestionResponse::SubmitQuestionResult = NULL;
	/* transient soap skipped */
}

void _ns1__SubmitQuestionResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons1__AskAFriendConfirm(soap, &this->_ns1__SubmitQuestionResponse::SubmitQuestionResult);
	/* transient soap skipped */
}

int _ns1__SubmitQuestionResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SubmitQuestionResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SubmitQuestionResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SubmitQuestionResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SubmitQuestionResponse(struct soap *soap, const char *tag, int id, const _ns1__SubmitQuestionResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SubmitQuestionResponse), type))
		return soap->error;
	if (a->SubmitQuestionResult)
		soap_element_result(soap, "ns1:SubmitQuestionResult");
	if (soap_out_PointerTons1__AskAFriendConfirm(soap, "ns1:SubmitQuestionResult", -1, &(a->_ns1__SubmitQuestionResponse::SubmitQuestionResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SubmitQuestionResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SubmitQuestionResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SubmitQuestionResponse * SOAP_FMAC4 soap_get__ns1__SubmitQuestionResponse(struct soap *soap, _ns1__SubmitQuestionResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SubmitQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SubmitQuestionResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SubmitQuestionResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SubmitQuestionResponse * SOAP_FMAC4 soap_in__ns1__SubmitQuestionResponse(struct soap *soap, const char *tag, _ns1__SubmitQuestionResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SubmitQuestionResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SubmitQuestionResponse, sizeof(_ns1__SubmitQuestionResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SubmitQuestionResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SubmitQuestionResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_SubmitQuestionResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SubmitQuestionResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__AskAFriendConfirm(soap, "ns1:SubmitQuestionResult", &(a->_ns1__SubmitQuestionResponse::SubmitQuestionResult), "ns1:AskAFriendConfirm"))
				{	soap_flag_SubmitQuestionResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:SubmitQuestionResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SubmitQuestionResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SubmitQuestionResponse, 0, sizeof(_ns1__SubmitQuestionResponse), 0, soap_copy__ns1__SubmitQuestionResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SubmitQuestionResponse * SOAP_FMAC6 soap_new__ns1__SubmitQuestionResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__SubmitQuestionResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SubmitQuestionResponse(struct soap *soap, _ns1__SubmitQuestionResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SubmitQuestionResponse * SOAP_FMAC4 soap_instantiate__ns1__SubmitQuestionResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SubmitQuestionResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SubmitQuestionResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SubmitQuestionResponse;
		if (size)
			*size = sizeof(_ns1__SubmitQuestionResponse);
		((_ns1__SubmitQuestionResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SubmitQuestionResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SubmitQuestionResponse);
		for (int i = 0; i < n; i++)
			((_ns1__SubmitQuestionResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SubmitQuestionResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SubmitQuestionResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SubmitQuestionResponse %p -> %p\n", q, p));
	*(_ns1__SubmitQuestionResponse*)p = *(_ns1__SubmitQuestionResponse*)q;
}

void _ns1__SubmitQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__SubmitQuestion::WebMemberID);
	soap_default_string(soap, &this->_ns1__SubmitQuestion::WebPassword);
	soap_default_string(soap, &this->_ns1__SubmitQuestion::Question);
	soap_default_int(soap, &this->_ns1__SubmitQuestion::NumberOfPhotos);
	soap_default_int(soap, &this->_ns1__SubmitQuestion::ResponseType);
	this->_ns1__SubmitQuestion::CustomResponses = NULL;
	soap_default_int(soap, &this->_ns1__SubmitQuestion::Duration);
	soap_default_bool(soap, &this->_ns1__SubmitQuestion::IsPrivate);
	/* transient soap skipped */
}

void _ns1__SubmitQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__SubmitQuestion::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__SubmitQuestion::WebPassword);
	soap_serialize_string(soap, &this->_ns1__SubmitQuestion::Question);
	soap_embedded(soap, &this->_ns1__SubmitQuestion::NumberOfPhotos, SOAP_TYPE_int);
	soap_embedded(soap, &this->_ns1__SubmitQuestion::ResponseType, SOAP_TYPE_int);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->_ns1__SubmitQuestion::CustomResponses);
	soap_embedded(soap, &this->_ns1__SubmitQuestion::Duration, SOAP_TYPE_int);
	/* transient soap skipped */
}

int _ns1__SubmitQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__SubmitQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__SubmitQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__SubmitQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__SubmitQuestion(struct soap *soap, const char *tag, int id, const _ns1__SubmitQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__SubmitQuestion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__SubmitQuestion::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__SubmitQuestion::WebPassword), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Question", -1, &(a->_ns1__SubmitQuestion::Question), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:NumberOfPhotos", -1, &(a->_ns1__SubmitQuestion::NumberOfPhotos), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:ResponseType", -1, &(a->_ns1__SubmitQuestion::ResponseType), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CustomResponses", -1, &(a->_ns1__SubmitQuestion::CustomResponses), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:Duration", -1, &(a->_ns1__SubmitQuestion::Duration), ""))
		return soap->error;
	if (soap_out_bool(soap, "ns1:IsPrivate", -1, &(a->_ns1__SubmitQuestion::IsPrivate), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__SubmitQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__SubmitQuestion(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__SubmitQuestion * SOAP_FMAC4 soap_get__ns1__SubmitQuestion(struct soap *soap, _ns1__SubmitQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__SubmitQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__SubmitQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__SubmitQuestion(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__SubmitQuestion * SOAP_FMAC4 soap_in__ns1__SubmitQuestion(struct soap *soap, const char *tag, _ns1__SubmitQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__SubmitQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__SubmitQuestion, sizeof(_ns1__SubmitQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__SubmitQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__SubmitQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1, soap_flag_Question1 = 1, soap_flag_NumberOfPhotos1 = 1, soap_flag_ResponseType1 = 1, soap_flag_CustomResponses1 = 1, soap_flag_Duration1 = 1, soap_flag_IsPrivate1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__SubmitQuestion::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__SubmitQuestion::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			if (soap_flag_Question1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Question", &(a->_ns1__SubmitQuestion::Question), "xsd:string"))
				{	soap_flag_Question1--;
					continue;
				}
			if (soap_flag_NumberOfPhotos1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:NumberOfPhotos", &(a->_ns1__SubmitQuestion::NumberOfPhotos), "xsd:int"))
				{	soap_flag_NumberOfPhotos1--;
					continue;
				}
			if (soap_flag_ResponseType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:ResponseType", &(a->_ns1__SubmitQuestion::ResponseType), "xsd:int"))
				{	soap_flag_ResponseType1--;
					continue;
				}
			if (soap_flag_CustomResponses1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CustomResponses", &(a->_ns1__SubmitQuestion::CustomResponses), "ns1:ArrayOfString"))
				{	soap_flag_CustomResponses1--;
					continue;
				}
			if (soap_flag_Duration1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:Duration", &(a->_ns1__SubmitQuestion::Duration), "xsd:int"))
				{	soap_flag_Duration1--;
					continue;
				}
			if (soap_flag_IsPrivate1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_bool(soap, "ns1:IsPrivate", &(a->_ns1__SubmitQuestion::IsPrivate), "xsd:boolean"))
				{	soap_flag_IsPrivate1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__SubmitQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__SubmitQuestion, 0, sizeof(_ns1__SubmitQuestion), 0, soap_copy__ns1__SubmitQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_NumberOfPhotos1 > 0 || soap_flag_ResponseType1 > 0 || soap_flag_Duration1 > 0 || soap_flag_IsPrivate1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__SubmitQuestion * SOAP_FMAC6 soap_new__ns1__SubmitQuestion(struct soap *soap, int n)
{	return soap_instantiate__ns1__SubmitQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__SubmitQuestion(struct soap *soap, _ns1__SubmitQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__SubmitQuestion * SOAP_FMAC4 soap_instantiate__ns1__SubmitQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__SubmitQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__SubmitQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__SubmitQuestion;
		if (size)
			*size = sizeof(_ns1__SubmitQuestion);
		((_ns1__SubmitQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__SubmitQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__SubmitQuestion);
		for (int i = 0; i < n; i++)
			((_ns1__SubmitQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__SubmitQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__SubmitQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__SubmitQuestion %p -> %p\n", q, p));
	*(_ns1__SubmitQuestion*)p = *(_ns1__SubmitQuestion*)q;
}

void ns1__AskAFriendComment::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__AskAFriendComment::NickName);
	soap_default_string(soap, &this->ns1__AskAFriendComment::WebMemberID);
	soap_default_string(soap, &this->ns1__AskAFriendComment::WebAskAFriendCommentID);
	soap_default_string(soap, &this->ns1__AskAFriendComment::Text);
	soap_default_string(soap, &this->ns1__AskAFriendComment::DateTimePosted);
	/* transient soap skipped */
}

void ns1__AskAFriendComment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__AskAFriendComment::NickName);
	soap_serialize_string(soap, &this->ns1__AskAFriendComment::WebMemberID);
	soap_serialize_string(soap, &this->ns1__AskAFriendComment::WebAskAFriendCommentID);
	soap_serialize_string(soap, &this->ns1__AskAFriendComment::Text);
	soap_serialize_string(soap, &this->ns1__AskAFriendComment::DateTimePosted);
	/* transient soap skipped */
}

int ns1__AskAFriendComment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__AskAFriendComment);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__AskAFriendComment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AskAFriendComment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AskAFriendComment(struct soap *soap, const char *tag, int id, const ns1__AskAFriendComment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AskAFriendComment), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:NickName", -1, &(a->ns1__AskAFriendComment::NickName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->ns1__AskAFriendComment::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendCommentID", -1, &(a->ns1__AskAFriendComment::WebAskAFriendCommentID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Text", -1, &(a->ns1__AskAFriendComment::Text), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:DateTimePosted", -1, &(a->ns1__AskAFriendComment::DateTimePosted), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__AskAFriendComment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AskAFriendComment(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AskAFriendComment * SOAP_FMAC4 soap_get_ns1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AskAFriendComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__AskAFriendComment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AskAFriendComment(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AskAFriendComment * SOAP_FMAC4 soap_in_ns1__AskAFriendComment(struct soap *soap, const char *tag, ns1__AskAFriendComment *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AskAFriendComment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AskAFriendComment, sizeof(ns1__AskAFriendComment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__AskAFriendComment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__AskAFriendComment *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_NickName1 = 1, soap_flag_WebMemberID1 = 1, soap_flag_WebAskAFriendCommentID1 = 1, soap_flag_Text1 = 1, soap_flag_DateTimePosted1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NickName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:NickName", &(a->ns1__AskAFriendComment::NickName), "xsd:string"))
				{	soap_flag_NickName1--;
					continue;
				}
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->ns1__AskAFriendComment::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebAskAFriendCommentID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendCommentID", &(a->ns1__AskAFriendComment::WebAskAFriendCommentID), "xsd:string"))
				{	soap_flag_WebAskAFriendCommentID1--;
					continue;
				}
			if (soap_flag_Text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Text", &(a->ns1__AskAFriendComment::Text), "xsd:string"))
				{	soap_flag_Text1--;
					continue;
				}
			if (soap_flag_DateTimePosted1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:DateTimePosted", &(a->ns1__AskAFriendComment::DateTimePosted), "xsd:string"))
				{	soap_flag_DateTimePosted1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendComment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AskAFriendComment, 0, sizeof(ns1__AskAFriendComment), 0, soap_copy_ns1__AskAFriendComment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__AskAFriendComment * SOAP_FMAC6 soap_new_ns1__AskAFriendComment(struct soap *soap, int n)
{	return soap_instantiate_ns1__AskAFriendComment(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__AskAFriendComment * SOAP_FMAC4 soap_instantiate_ns1__AskAFriendComment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AskAFriendComment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__AskAFriendComment, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__AskAFriendComment;
		if (size)
			*size = sizeof(ns1__AskAFriendComment);
		((ns1__AskAFriendComment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__AskAFriendComment[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__AskAFriendComment);
		for (int i = 0; i < n; i++)
			((ns1__AskAFriendComment*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__AskAFriendComment*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AskAFriendComment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__AskAFriendComment %p -> %p\n", q, p));
	*(ns1__AskAFriendComment*)p = *(ns1__AskAFriendComment*)q;
}

void ns1__ArrayOfAskAFriendComment::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfAskAFriendComment::__sizeAskAFriendComment = 0;
	this->ns1__ArrayOfAskAFriendComment::AskAFriendComment = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfAskAFriendComment::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfAskAFriendComment::AskAFriendComment)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfAskAFriendComment::__sizeAskAFriendComment; i++)
		{
			soap_serialize_PointerTons1__AskAFriendComment(soap, this->ns1__ArrayOfAskAFriendComment::AskAFriendComment + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfAskAFriendComment::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfAskAFriendComment);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfAskAFriendComment::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfAskAFriendComment(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfAskAFriendComment(struct soap *soap, const char *tag, int id, const ns1__ArrayOfAskAFriendComment *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfAskAFriendComment), type))
		return soap->error;
	if (a->ns1__ArrayOfAskAFriendComment::AskAFriendComment)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfAskAFriendComment::__sizeAskAFriendComment; i++)
			if (soap_out_PointerTons1__AskAFriendComment(soap, "ns1:AskAFriendComment", -1, a->ns1__ArrayOfAskAFriendComment::AskAFriendComment + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfAskAFriendComment::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfAskAFriendComment(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendComment * SOAP_FMAC4 soap_get_ns1__ArrayOfAskAFriendComment(struct soap *soap, ns1__ArrayOfAskAFriendComment *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfAskAFriendComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfAskAFriendComment::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfAskAFriendComment(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendComment * SOAP_FMAC4 soap_in_ns1__ArrayOfAskAFriendComment(struct soap *soap, const char *tag, ns1__ArrayOfAskAFriendComment *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfAskAFriendComment *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfAskAFriendComment, sizeof(ns1__ArrayOfAskAFriendComment), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfAskAFriendComment)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfAskAFriendComment *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_AskAFriendComment1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AskAFriendComment1 && soap->error == SOAP_TAG_MISMATCH)
			{	ns1__AskAFriendComment **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfAskAFriendComment::__sizeAskAFriendComment = 0; !soap_element_begin_in(soap, "ns1:AskAFriendComment", 1, NULL); a->ns1__ArrayOfAskAFriendComment::__sizeAskAFriendComment++)
				{	p = (ns1__AskAFriendComment **)soap_push_block(soap, sizeof(ns1__AskAFriendComment *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_PointerTons1__AskAFriendComment(soap, "ns1:AskAFriendComment", p, "ns1:AskAFriendComment"))
						break;
					soap_flag_AskAFriendComment1 = 0;
				}
				a->ns1__ArrayOfAskAFriendComment::AskAFriendComment = (ns1__AskAFriendComment **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_AskAFriendComment1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfAskAFriendComment *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfAskAFriendComment, 0, sizeof(ns1__ArrayOfAskAFriendComment), 0, soap_copy_ns1__ArrayOfAskAFriendComment);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfAskAFriendComment * SOAP_FMAC6 soap_new_ns1__ArrayOfAskAFriendComment(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfAskAFriendComment(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfAskAFriendComment(struct soap *soap, ns1__ArrayOfAskAFriendComment *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendComment * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfAskAFriendComment(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfAskAFriendComment(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfAskAFriendComment, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfAskAFriendComment;
		if (size)
			*size = sizeof(ns1__ArrayOfAskAFriendComment);
		((ns1__ArrayOfAskAFriendComment*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfAskAFriendComment[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfAskAFriendComment);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfAskAFriendComment*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfAskAFriendComment*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfAskAFriendComment(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfAskAFriendComment %p -> %p\n", q, p));
	*(ns1__ArrayOfAskAFriendComment*)p = *(ns1__ArrayOfAskAFriendComment*)q;
}

void ns1__ArrayOfInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfInt::__sizeint_ = 0;
	this->ns1__ArrayOfInt::int_ = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfInt::__sizeint_; i++)
		{
			soap_embedded(soap, this->ns1__ArrayOfInt::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfInt);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfInt(struct soap *soap, const char *tag, int id, const ns1__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfInt), type))
		return soap->error;
	if (a->ns1__ArrayOfInt::int_)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfInt::__sizeint_; i++)
			if (soap_out_int(soap, "ns1:int", -1, a->ns1__ArrayOfInt::int_ + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfInt(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_get_ns1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfInt(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_in_ns1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfInt)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfInt *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_int_1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_int_1 && soap->error == SOAP_TAG_MISMATCH)
			{	int *p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfInt::__sizeint_ = 0; !soap_element_begin_in(soap, "ns1:int", 1, NULL); a->ns1__ArrayOfInt::__sizeint_++)
				{	p = (int *)soap_push_block(soap, sizeof(int));
					if (!p)
						return NULL;
					soap_default_int(soap, p);
					soap_revert(soap);
					if (!soap_in_int(soap, "ns1:int", p, "xsd:int"))
						break;
					soap_flag_int_1 = 0;
				}
				a->ns1__ArrayOfInt::int_ = (int *)soap_save_block(soap, NULL, 1);
				if (!soap_flag_int_1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfInt *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfInt, 0, sizeof(ns1__ArrayOfInt), 0, soap_copy_ns1__ArrayOfInt);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfInt * SOAP_FMAC6 soap_new_ns1__ArrayOfInt(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfInt(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfInt * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfInt;
		if (size)
			*size = sizeof(ns1__ArrayOfInt);
		((ns1__ArrayOfInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfInt[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfInt);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfInt*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfInt*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfInt %p -> %p\n", q, p));
	*(ns1__ArrayOfInt*)p = *(ns1__ArrayOfInt*)q;
}

void ns1__AskAFriendResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__AskAFriendResponse::WebAskAFriendID);
	soap_default_string(soap, &this->ns1__AskAFriendResponse::Question);
	soap_default_string(soap, &this->ns1__AskAFriendResponse::PhotoBase64Binary);
	this->ns1__AskAFriendResponse::ResponseValues = NULL;
	soap_default_double(soap, &this->ns1__AskAFriendResponse::Average);
	soap_default_int(soap, &this->ns1__AskAFriendResponse::ResponseType);
	this->ns1__AskAFriendResponse::CustomResponses = NULL;
	/* transient soap skipped */
}

void ns1__AskAFriendResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__AskAFriendResponse::WebAskAFriendID);
	soap_serialize_string(soap, &this->ns1__AskAFriendResponse::Question);
	soap_serialize_string(soap, &this->ns1__AskAFriendResponse::PhotoBase64Binary);
	soap_serialize_PointerTons1__ArrayOfInt(soap, &this->ns1__AskAFriendResponse::ResponseValues);
	soap_embedded(soap, &this->ns1__AskAFriendResponse::ResponseType, SOAP_TYPE_int);
	soap_serialize_PointerTons1__ArrayOfString(soap, &this->ns1__AskAFriendResponse::CustomResponses);
	/* transient soap skipped */
}

int ns1__AskAFriendResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__AskAFriendResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__AskAFriendResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AskAFriendResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AskAFriendResponse(struct soap *soap, const char *tag, int id, const ns1__AskAFriendResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AskAFriendResponse), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->ns1__AskAFriendResponse::WebAskAFriendID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Question", -1, &(a->ns1__AskAFriendResponse::Question), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:PhotoBase64Binary", -1, &(a->ns1__AskAFriendResponse::PhotoBase64Binary), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfInt(soap, "ns1:ResponseValues", -1, &(a->ns1__AskAFriendResponse::ResponseValues), ""))
		return soap->error;
	if (soap_out_double(soap, "ns1:Average", -1, &(a->ns1__AskAFriendResponse::Average), ""))
		return soap->error;
	if (soap_out_int(soap, "ns1:ResponseType", -1, &(a->ns1__AskAFriendResponse::ResponseType), ""))
		return soap->error;
	if (soap_out_PointerTons1__ArrayOfString(soap, "ns1:CustomResponses", -1, &(a->ns1__AskAFriendResponse::CustomResponses), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__AskAFriendResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AskAFriendResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AskAFriendResponse * SOAP_FMAC4 soap_get_ns1__AskAFriendResponse(struct soap *soap, ns1__AskAFriendResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AskAFriendResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__AskAFriendResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AskAFriendResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AskAFriendResponse * SOAP_FMAC4 soap_in_ns1__AskAFriendResponse(struct soap *soap, const char *tag, ns1__AskAFriendResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AskAFriendResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AskAFriendResponse, sizeof(ns1__AskAFriendResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__AskAFriendResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__AskAFriendResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebAskAFriendID1 = 1, soap_flag_Question1 = 1, soap_flag_PhotoBase64Binary1 = 1, soap_flag_ResponseValues1 = 1, soap_flag_Average1 = 1, soap_flag_ResponseType1 = 1, soap_flag_CustomResponses1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->ns1__AskAFriendResponse::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			if (soap_flag_Question1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Question", &(a->ns1__AskAFriendResponse::Question), "xsd:string"))
				{	soap_flag_Question1--;
					continue;
				}
			if (soap_flag_PhotoBase64Binary1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:PhotoBase64Binary", &(a->ns1__AskAFriendResponse::PhotoBase64Binary), "xsd:string"))
				{	soap_flag_PhotoBase64Binary1--;
					continue;
				}
			if (soap_flag_ResponseValues1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfInt(soap, "ns1:ResponseValues", &(a->ns1__AskAFriendResponse::ResponseValues), "ns1:ArrayOfInt"))
				{	soap_flag_ResponseValues1--;
					continue;
				}
			if (soap_flag_Average1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "ns1:Average", &(a->ns1__AskAFriendResponse::Average), "xsd:double"))
				{	soap_flag_Average1--;
					continue;
				}
			if (soap_flag_ResponseType1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns1:ResponseType", &(a->ns1__AskAFriendResponse::ResponseType), "xsd:int"))
				{	soap_flag_ResponseType1--;
					continue;
				}
			if (soap_flag_CustomResponses1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons1__ArrayOfString(soap, "ns1:CustomResponses", &(a->ns1__AskAFriendResponse::CustomResponses), "ns1:ArrayOfString"))
				{	soap_flag_CustomResponses1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AskAFriendResponse, 0, sizeof(ns1__AskAFriendResponse), 0, soap_copy_ns1__AskAFriendResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Average1 > 0 || soap_flag_ResponseType1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__AskAFriendResponse * SOAP_FMAC6 soap_new_ns1__AskAFriendResponse(struct soap *soap, int n)
{	return soap_instantiate_ns1__AskAFriendResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__AskAFriendResponse(struct soap *soap, ns1__AskAFriendResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__AskAFriendResponse * SOAP_FMAC4 soap_instantiate_ns1__AskAFriendResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AskAFriendResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__AskAFriendResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__AskAFriendResponse;
		if (size)
			*size = sizeof(ns1__AskAFriendResponse);
		((ns1__AskAFriendResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__AskAFriendResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__AskAFriendResponse);
		for (int i = 0; i < n; i++)
			((ns1__AskAFriendResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__AskAFriendResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AskAFriendResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__AskAFriendResponse %p -> %p\n", q, p));
	*(ns1__AskAFriendResponse*)p = *(ns1__AskAFriendResponse*)q;
}

void ns1__AskAFriendQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__AskAFriendQuestion::WebAskAFriendID);
	soap_default_string(soap, &this->ns1__AskAFriendQuestion::Question);
	/* transient soap skipped */
}

void ns1__AskAFriendQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__AskAFriendQuestion::WebAskAFriendID);
	soap_serialize_string(soap, &this->ns1__AskAFriendQuestion::Question);
	/* transient soap skipped */
}

int ns1__AskAFriendQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__AskAFriendQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__AskAFriendQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AskAFriendQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AskAFriendQuestion(struct soap *soap, const char *tag, int id, const ns1__AskAFriendQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AskAFriendQuestion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->ns1__AskAFriendQuestion::WebAskAFriendID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Question", -1, &(a->ns1__AskAFriendQuestion::Question), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__AskAFriendQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AskAFriendQuestion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AskAFriendQuestion * SOAP_FMAC4 soap_get_ns1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AskAFriendQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__AskAFriendQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AskAFriendQuestion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AskAFriendQuestion * SOAP_FMAC4 soap_in_ns1__AskAFriendQuestion(struct soap *soap, const char *tag, ns1__AskAFriendQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AskAFriendQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AskAFriendQuestion, sizeof(ns1__AskAFriendQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__AskAFriendQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__AskAFriendQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebAskAFriendID1 = 1, soap_flag_Question1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->ns1__AskAFriendQuestion::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			if (soap_flag_Question1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Question", &(a->ns1__AskAFriendQuestion::Question), "xsd:string"))
				{	soap_flag_Question1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AskAFriendQuestion, 0, sizeof(ns1__AskAFriendQuestion), 0, soap_copy_ns1__AskAFriendQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__AskAFriendQuestion * SOAP_FMAC6 soap_new_ns1__AskAFriendQuestion(struct soap *soap, int n)
{	return soap_instantiate_ns1__AskAFriendQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__AskAFriendQuestion * SOAP_FMAC4 soap_instantiate_ns1__AskAFriendQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AskAFriendQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__AskAFriendQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__AskAFriendQuestion;
		if (size)
			*size = sizeof(ns1__AskAFriendQuestion);
		((ns1__AskAFriendQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__AskAFriendQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__AskAFriendQuestion);
		for (int i = 0; i < n; i++)
			((ns1__AskAFriendQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__AskAFriendQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AskAFriendQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__AskAFriendQuestion %p -> %p\n", q, p));
	*(ns1__AskAFriendQuestion*)p = *(ns1__AskAFriendQuestion*)q;
}

void ns1__ArrayOfAskAFriendQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfAskAFriendQuestion::__sizeAskAFriendQuestion = 0;
	this->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfAskAFriendQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfAskAFriendQuestion::__sizeAskAFriendQuestion; i++)
		{
			soap_serialize_PointerTons1__AskAFriendQuestion(soap, this->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfAskAFriendQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfAskAFriendQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfAskAFriendQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, const char *tag, int id, const ns1__ArrayOfAskAFriendQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion), type))
		return soap->error;
	if (a->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfAskAFriendQuestion::__sizeAskAFriendQuestion; i++)
			if (soap_out_PointerTons1__AskAFriendQuestion(soap, "ns1:AskAFriendQuestion", -1, a->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfAskAFriendQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfAskAFriendQuestion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendQuestion * SOAP_FMAC4 soap_get_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, ns1__ArrayOfAskAFriendQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfAskAFriendQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfAskAFriendQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfAskAFriendQuestion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendQuestion * SOAP_FMAC4 soap_in_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, const char *tag, ns1__ArrayOfAskAFriendQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfAskAFriendQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion, sizeof(ns1__ArrayOfAskAFriendQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfAskAFriendQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_AskAFriendQuestion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AskAFriendQuestion1 && soap->error == SOAP_TAG_MISMATCH)
			{	ns1__AskAFriendQuestion **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfAskAFriendQuestion::__sizeAskAFriendQuestion = 0; !soap_element_begin_in(soap, "ns1:AskAFriendQuestion", 1, NULL); a->ns1__ArrayOfAskAFriendQuestion::__sizeAskAFriendQuestion++)
				{	p = (ns1__AskAFriendQuestion **)soap_push_block(soap, sizeof(ns1__AskAFriendQuestion *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_PointerTons1__AskAFriendQuestion(soap, "ns1:AskAFriendQuestion", p, "ns1:AskAFriendQuestion"))
						break;
					soap_flag_AskAFriendQuestion1 = 0;
				}
				a->ns1__ArrayOfAskAFriendQuestion::AskAFriendQuestion = (ns1__AskAFriendQuestion **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_AskAFriendQuestion1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfAskAFriendQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion, 0, sizeof(ns1__ArrayOfAskAFriendQuestion), 0, soap_copy_ns1__ArrayOfAskAFriendQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfAskAFriendQuestion * SOAP_FMAC6 soap_new_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfAskAFriendQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, ns1__ArrayOfAskAFriendQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendQuestion * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfAskAFriendQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfAskAFriendQuestion;
		if (size)
			*size = sizeof(ns1__ArrayOfAskAFriendQuestion);
		((ns1__ArrayOfAskAFriendQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfAskAFriendQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfAskAFriendQuestion);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfAskAFriendQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfAskAFriendQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfAskAFriendQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfAskAFriendQuestion %p -> %p\n", q, p));
	*(ns1__ArrayOfAskAFriendQuestion*)p = *(ns1__ArrayOfAskAFriendQuestion*)q;
}

void ns1__PrivateAAFQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__PrivateAAFQuestion::NickName);
	soap_default_string(soap, &this->ns1__PrivateAAFQuestion::Question);
	soap_default_string(soap, &this->ns1__PrivateAAFQuestion::URL);
	soap_default_string(soap, &this->ns1__PrivateAAFQuestion::DateTimePosted);
	/* transient soap skipped */
}

void ns1__PrivateAAFQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__PrivateAAFQuestion::NickName);
	soap_serialize_string(soap, &this->ns1__PrivateAAFQuestion::Question);
	soap_serialize_string(soap, &this->ns1__PrivateAAFQuestion::URL);
	soap_serialize_string(soap, &this->ns1__PrivateAAFQuestion::DateTimePosted);
	/* transient soap skipped */
}

int ns1__PrivateAAFQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__PrivateAAFQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__PrivateAAFQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__PrivateAAFQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PrivateAAFQuestion(struct soap *soap, const char *tag, int id, const ns1__PrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__PrivateAAFQuestion), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:NickName", -1, &(a->ns1__PrivateAAFQuestion::NickName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:Question", -1, &(a->ns1__PrivateAAFQuestion::Question), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:URL", -1, &(a->ns1__PrivateAAFQuestion::URL), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:DateTimePosted", -1, &(a->ns1__PrivateAAFQuestion::DateTimePosted), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__PrivateAAFQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__PrivateAAFQuestion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__PrivateAAFQuestion * SOAP_FMAC4 soap_get_ns1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__PrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__PrivateAAFQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__PrivateAAFQuestion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__PrivateAAFQuestion * SOAP_FMAC4 soap_in_ns1__PrivateAAFQuestion(struct soap *soap, const char *tag, ns1__PrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__PrivateAAFQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__PrivateAAFQuestion, sizeof(ns1__PrivateAAFQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__PrivateAAFQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__PrivateAAFQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_NickName1 = 1, soap_flag_Question1 = 1, soap_flag_URL1 = 1, soap_flag_DateTimePosted1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NickName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:NickName", &(a->ns1__PrivateAAFQuestion::NickName), "xsd:string"))
				{	soap_flag_NickName1--;
					continue;
				}
			if (soap_flag_Question1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:Question", &(a->ns1__PrivateAAFQuestion::Question), "xsd:string"))
				{	soap_flag_Question1--;
					continue;
				}
			if (soap_flag_URL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:URL", &(a->ns1__PrivateAAFQuestion::URL), "xsd:string"))
				{	soap_flag_URL1--;
					continue;
				}
			if (soap_flag_DateTimePosted1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:DateTimePosted", &(a->ns1__PrivateAAFQuestion::DateTimePosted), "xsd:string"))
				{	soap_flag_DateTimePosted1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__PrivateAAFQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__PrivateAAFQuestion, 0, sizeof(ns1__PrivateAAFQuestion), 0, soap_copy_ns1__PrivateAAFQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__PrivateAAFQuestion * SOAP_FMAC6 soap_new_ns1__PrivateAAFQuestion(struct soap *soap, int n)
{	return soap_instantiate_ns1__PrivateAAFQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__PrivateAAFQuestion * SOAP_FMAC4 soap_instantiate_ns1__PrivateAAFQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__PrivateAAFQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__PrivateAAFQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__PrivateAAFQuestion;
		if (size)
			*size = sizeof(ns1__PrivateAAFQuestion);
		((ns1__PrivateAAFQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__PrivateAAFQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__PrivateAAFQuestion);
		for (int i = 0; i < n; i++)
			((ns1__PrivateAAFQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__PrivateAAFQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PrivateAAFQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__PrivateAAFQuestion %p -> %p\n", q, p));
	*(ns1__PrivateAAFQuestion*)p = *(ns1__PrivateAAFQuestion*)q;
}

void ns1__ArrayOfPrivateAAFQuestion::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfPrivateAAFQuestion::__sizePrivateAAFQuestion = 0;
	this->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfPrivateAAFQuestion::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfPrivateAAFQuestion::__sizePrivateAAFQuestion; i++)
		{
			soap_serialize_PointerTons1__PrivateAAFQuestion(soap, this->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfPrivateAAFQuestion::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfPrivateAAFQuestion::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfPrivateAAFQuestion(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, const char *tag, int id, const ns1__ArrayOfPrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion), type))
		return soap->error;
	if (a->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfPrivateAAFQuestion::__sizePrivateAAFQuestion; i++)
			if (soap_out_PointerTons1__PrivateAAFQuestion(soap, "ns1:PrivateAAFQuestion", -1, a->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfPrivateAAFQuestion::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfPrivateAAFQuestion(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfPrivateAAFQuestion * SOAP_FMAC4 soap_get_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, ns1__ArrayOfPrivateAAFQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfPrivateAAFQuestion::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfPrivateAAFQuestion(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfPrivateAAFQuestion * SOAP_FMAC4 soap_in_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, const char *tag, ns1__ArrayOfPrivateAAFQuestion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfPrivateAAFQuestion *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion, sizeof(ns1__ArrayOfPrivateAAFQuestion), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfPrivateAAFQuestion *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_PrivateAAFQuestion1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_PrivateAAFQuestion1 && soap->error == SOAP_TAG_MISMATCH)
			{	ns1__PrivateAAFQuestion **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfPrivateAAFQuestion::__sizePrivateAAFQuestion = 0; !soap_element_begin_in(soap, "ns1:PrivateAAFQuestion", 1, NULL); a->ns1__ArrayOfPrivateAAFQuestion::__sizePrivateAAFQuestion++)
				{	p = (ns1__PrivateAAFQuestion **)soap_push_block(soap, sizeof(ns1__PrivateAAFQuestion *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_PointerTons1__PrivateAAFQuestion(soap, "ns1:PrivateAAFQuestion", p, "ns1:PrivateAAFQuestion"))
						break;
					soap_flag_PrivateAAFQuestion1 = 0;
				}
				a->ns1__ArrayOfPrivateAAFQuestion::PrivateAAFQuestion = (ns1__PrivateAAFQuestion **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_PrivateAAFQuestion1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfPrivateAAFQuestion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion, 0, sizeof(ns1__ArrayOfPrivateAAFQuestion), 0, soap_copy_ns1__ArrayOfPrivateAAFQuestion);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfPrivateAAFQuestion * SOAP_FMAC6 soap_new_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfPrivateAAFQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, ns1__ArrayOfPrivateAAFQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfPrivateAAFQuestion * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfPrivateAAFQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfPrivateAAFQuestion;
		if (size)
			*size = sizeof(ns1__ArrayOfPrivateAAFQuestion);
		((ns1__ArrayOfPrivateAAFQuestion*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfPrivateAAFQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfPrivateAAFQuestion);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfPrivateAAFQuestion*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfPrivateAAFQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfPrivateAAFQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfPrivateAAFQuestion %p -> %p\n", q, p));
	*(ns1__ArrayOfPrivateAAFQuestion*)p = *(ns1__ArrayOfPrivateAAFQuestion*)q;
}

void ns1__AskAFriendConfirm::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->ns1__AskAFriendConfirm::AdvertURL);
	soap_default_string(soap, &this->ns1__AskAFriendConfirm::AdvertImage);
	soap_default_string(soap, &this->ns1__AskAFriendConfirm::WebAskAFriendID);
	/* transient soap skipped */
}

void ns1__AskAFriendConfirm::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->ns1__AskAFriendConfirm::AdvertURL);
	soap_serialize_string(soap, &this->ns1__AskAFriendConfirm::AdvertImage);
	soap_serialize_string(soap, &this->ns1__AskAFriendConfirm::WebAskAFriendID);
	/* transient soap skipped */
}

int ns1__AskAFriendConfirm::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__AskAFriendConfirm);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__AskAFriendConfirm::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__AskAFriendConfirm(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__AskAFriendConfirm(struct soap *soap, const char *tag, int id, const ns1__AskAFriendConfirm *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__AskAFriendConfirm), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:AdvertURL", -1, &(a->ns1__AskAFriendConfirm::AdvertURL), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:AdvertImage", -1, &(a->ns1__AskAFriendConfirm::AdvertImage), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebAskAFriendID", -1, &(a->ns1__AskAFriendConfirm::WebAskAFriendID), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__AskAFriendConfirm::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__AskAFriendConfirm(soap, this, tag, type);
}

SOAP_FMAC3 ns1__AskAFriendConfirm * SOAP_FMAC4 soap_get_ns1__AskAFriendConfirm(struct soap *soap, ns1__AskAFriendConfirm *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__AskAFriendConfirm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__AskAFriendConfirm::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__AskAFriendConfirm(soap, tag, this, type);
}

SOAP_FMAC3 ns1__AskAFriendConfirm * SOAP_FMAC4 soap_in_ns1__AskAFriendConfirm(struct soap *soap, const char *tag, ns1__AskAFriendConfirm *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__AskAFriendConfirm *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__AskAFriendConfirm, sizeof(ns1__AskAFriendConfirm), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__AskAFriendConfirm)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__AskAFriendConfirm *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_AdvertURL1 = 1, soap_flag_AdvertImage1 = 1, soap_flag_WebAskAFriendID1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_AdvertURL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:AdvertURL", &(a->ns1__AskAFriendConfirm::AdvertURL), "xsd:string"))
				{	soap_flag_AdvertURL1--;
					continue;
				}
			if (soap_flag_AdvertImage1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:AdvertImage", &(a->ns1__AskAFriendConfirm::AdvertImage), "xsd:string"))
				{	soap_flag_AdvertImage1--;
					continue;
				}
			if (soap_flag_WebAskAFriendID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebAskAFriendID", &(a->ns1__AskAFriendConfirm::WebAskAFriendID), "xsd:string"))
				{	soap_flag_WebAskAFriendID1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendConfirm *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__AskAFriendConfirm, 0, sizeof(ns1__AskAFriendConfirm), 0, soap_copy_ns1__AskAFriendConfirm);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__AskAFriendConfirm * SOAP_FMAC6 soap_new_ns1__AskAFriendConfirm(struct soap *soap, int n)
{	return soap_instantiate_ns1__AskAFriendConfirm(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__AskAFriendConfirm(struct soap *soap, ns1__AskAFriendConfirm *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__AskAFriendConfirm * SOAP_FMAC4 soap_instantiate_ns1__AskAFriendConfirm(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__AskAFriendConfirm(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__AskAFriendConfirm, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__AskAFriendConfirm;
		if (size)
			*size = sizeof(ns1__AskAFriendConfirm);
		((ns1__AskAFriendConfirm*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__AskAFriendConfirm[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__AskAFriendConfirm);
		for (int i = 0; i < n; i++)
			((ns1__AskAFriendConfirm*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__AskAFriendConfirm*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__AskAFriendConfirm(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__AskAFriendConfirm %p -> %p\n", q, p));
	*(ns1__AskAFriendConfirm*)p = *(ns1__AskAFriendConfirm*)q;
}

void ns1__ArrayOfString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns1__ArrayOfString::__sizestring = 0;
	this->ns1__ArrayOfString::string = NULL;
	/* transient soap skipped */
}

void ns1__ArrayOfString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < this->ns1__ArrayOfString::__sizestring; i++)
		{
			soap_serialize_string(soap, this->ns1__ArrayOfString::string + i);
		}
	}
	/* transient soap skipped */
}

int ns1__ArrayOfString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns1__ArrayOfString);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int ns1__ArrayOfString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns1__ArrayOfString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ArrayOfString(struct soap *soap, const char *tag, int id, const ns1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns1__ArrayOfString), type))
		return soap->error;
	if (a->ns1__ArrayOfString::string)
	{	int i;
		for (i = 0; i < a->ns1__ArrayOfString::__sizestring; i++)
			if (soap_out_string(soap, "ns1:string", -1, a->ns1__ArrayOfString::string + i, ""))
				return soap->error;
	}
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *ns1__ArrayOfString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns1__ArrayOfString(soap, this, tag, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_get_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *ns1__ArrayOfString::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns1__ArrayOfString(soap, tag, this, type);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_in_ns1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns1__ArrayOfString *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns1__ArrayOfString)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns1__ArrayOfString *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_string1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_string1 && soap->error == SOAP_TAG_MISMATCH)
			{	char **p;
				soap_new_block(soap);
				for (a->ns1__ArrayOfString::__sizestring = 0; !soap_element_begin_in(soap, "ns1:string", 1, NULL); a->ns1__ArrayOfString::__sizestring++)
				{	p = (char **)soap_push_block(soap, sizeof(char *));
					if (!p)
						return NULL;
					*p = NULL;
					soap_revert(soap);
					if (!soap_in_string(soap, "ns1:string", p, "xsd:string"))
						break;
					soap_flag_string1 = 0;
				}
				a->ns1__ArrayOfString::string = (char **)soap_save_block(soap, NULL, 1);
				if (!soap_flag_string1 && soap->error == SOAP_TAG_MISMATCH)
					continue;
			}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns1__ArrayOfString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns1__ArrayOfString, 0, sizeof(ns1__ArrayOfString), 0, soap_copy_ns1__ArrayOfString);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 ns1__ArrayOfString * SOAP_FMAC6 soap_new_ns1__ArrayOfString(struct soap *soap, int n)
{	return soap_instantiate_ns1__ArrayOfString(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_ns1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 ns1__ArrayOfString * SOAP_FMAC4 soap_instantiate_ns1__ArrayOfString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns1__ArrayOfString(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns1__ArrayOfString, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new ns1__ArrayOfString;
		if (size)
			*size = sizeof(ns1__ArrayOfString);
		((ns1__ArrayOfString*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new ns1__ArrayOfString[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns1__ArrayOfString);
		for (int i = 0; i < n; i++)
			((ns1__ArrayOfString*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns1__ArrayOfString*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ArrayOfString(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns1__ArrayOfString %p -> %p\n", q, p));
	*(ns1__ArrayOfString*)p = *(ns1__ArrayOfString*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetAAFComments(struct soap *soap, struct __ns4__GetAAFComments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAAFComments = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetAAFComments(struct soap *soap, const struct __ns4__GetAAFComments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAAFComments(soap, &a->ns1__GetAAFComments);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetAAFComments(struct soap *soap, const struct __ns4__GetAAFComments *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetAAFComments(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetAAFComments(struct soap *soap, const char *tag, int id, const struct __ns4__GetAAFComments *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAAFComments(soap, "ns1:GetAAFComments", -1, &a->ns1__GetAAFComments, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetAAFComments * SOAP_FMAC4 soap_get___ns4__GetAAFComments(struct soap *soap, struct __ns4__GetAAFComments *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetAAFComments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetAAFComments * SOAP_FMAC4 soap_in___ns4__GetAAFComments(struct soap *soap, const char *tag, struct __ns4__GetAAFComments *a, const char *type)
{
	short soap_flag_ns1__GetAAFComments = 1;
	short soap_flag;
	a = (struct __ns4__GetAAFComments *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetAAFComments, sizeof(struct __ns4__GetAAFComments), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetAAFComments(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAAFComments && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAAFComments(soap, "ns1:GetAAFComments", &a->ns1__GetAAFComments, ""))
				{	soap_flag_ns1__GetAAFComments--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetAAFComments * SOAP_FMAC6 soap_new___ns4__GetAAFComments(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetAAFComments(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetAAFComments(struct soap *soap, struct __ns4__GetAAFComments *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetAAFComments * SOAP_FMAC4 soap_instantiate___ns4__GetAAFComments(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetAAFComments(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetAAFComments, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetAAFComments;
		if (size)
			*size = sizeof(struct __ns4__GetAAFComments);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetAAFComments[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetAAFComments);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetAAFComments*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetAAFComments(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetAAFComments %p -> %p\n", q, p));
	*(struct __ns4__GetAAFComments*)p = *(struct __ns4__GetAAFComments*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetAAFResponse(struct soap *soap, struct __ns4__GetAAFResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAAFResponse = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetAAFResponse(struct soap *soap, const struct __ns4__GetAAFResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAAFResponse(soap, &a->ns1__GetAAFResponse);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetAAFResponse(struct soap *soap, const struct __ns4__GetAAFResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetAAFResponse(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetAAFResponse(struct soap *soap, const char *tag, int id, const struct __ns4__GetAAFResponse *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAAFResponse(soap, "ns1:GetAAFResponse", -1, &a->ns1__GetAAFResponse, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetAAFResponse * SOAP_FMAC4 soap_get___ns4__GetAAFResponse(struct soap *soap, struct __ns4__GetAAFResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetAAFResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetAAFResponse * SOAP_FMAC4 soap_in___ns4__GetAAFResponse(struct soap *soap, const char *tag, struct __ns4__GetAAFResponse *a, const char *type)
{
	short soap_flag_ns1__GetAAFResponse = 1;
	short soap_flag;
	a = (struct __ns4__GetAAFResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetAAFResponse, sizeof(struct __ns4__GetAAFResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetAAFResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAAFResponse && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAAFResponse(soap, "ns1:GetAAFResponse", &a->ns1__GetAAFResponse, ""))
				{	soap_flag_ns1__GetAAFResponse--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetAAFResponse * SOAP_FMAC6 soap_new___ns4__GetAAFResponse(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetAAFResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetAAFResponse(struct soap *soap, struct __ns4__GetAAFResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetAAFResponse * SOAP_FMAC4 soap_instantiate___ns4__GetAAFResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetAAFResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetAAFResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetAAFResponse;
		if (size)
			*size = sizeof(struct __ns4__GetAAFResponse);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetAAFResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetAAFResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetAAFResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetAAFResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetAAFResponse %p -> %p\n", q, p));
	*(struct __ns4__GetAAFResponse*)p = *(struct __ns4__GetAAFResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns4__GetNewAAFQuestionCommentIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetNewAAFQuestionCommentIDs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, const struct __ns4__GetNewAAFQuestionCommentIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, &a->ns1__GetNewAAFQuestionCommentIDs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, const struct __ns4__GetNewAAFQuestionCommentIDs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetNewAAFQuestionCommentIDs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, int id, const struct __ns4__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, "ns1:GetNewAAFQuestionCommentIDs", -1, &a->ns1__GetNewAAFQuestionCommentIDs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_get___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns4__GetNewAAFQuestionCommentIDs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetNewAAFQuestionCommentIDs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_in___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, struct __ns4__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	short soap_flag_ns1__GetNewAAFQuestionCommentIDs = 1;
	short soap_flag;
	a = (struct __ns4__GetNewAAFQuestionCommentIDs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetNewAAFQuestionCommentIDs, sizeof(struct __ns4__GetNewAAFQuestionCommentIDs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetNewAAFQuestionCommentIDs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetNewAAFQuestionCommentIDs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, "ns1:GetNewAAFQuestionCommentIDs", &a->ns1__GetNewAAFQuestionCommentIDs, ""))
				{	soap_flag_ns1__GetNewAAFQuestionCommentIDs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetNewAAFQuestionCommentIDs * SOAP_FMAC6 soap_new___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetNewAAFQuestionCommentIDs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns4__GetNewAAFQuestionCommentIDs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_instantiate___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetNewAAFQuestionCommentIDs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetNewAAFQuestionCommentIDs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetNewAAFQuestionCommentIDs;
		if (size)
			*size = sizeof(struct __ns4__GetNewAAFQuestionCommentIDs);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetNewAAFQuestionCommentIDs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetNewAAFQuestionCommentIDs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetNewAAFQuestionCommentIDs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetNewAAFQuestionCommentIDs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetNewAAFQuestionCommentIDs %p -> %p\n", q, p));
	*(struct __ns4__GetNewAAFQuestionCommentIDs*)p = *(struct __ns4__GetNewAAFQuestionCommentIDs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetMyAAFQuestions(struct soap *soap, struct __ns4__GetMyAAFQuestions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMyAAFQuestions = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetMyAAFQuestions(struct soap *soap, const struct __ns4__GetMyAAFQuestions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetMyAAFQuestions(soap, &a->ns1__GetMyAAFQuestions);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetMyAAFQuestions(struct soap *soap, const struct __ns4__GetMyAAFQuestions *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetMyAAFQuestions(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetMyAAFQuestions(struct soap *soap, const char *tag, int id, const struct __ns4__GetMyAAFQuestions *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMyAAFQuestions(soap, "ns1:GetMyAAFQuestions", -1, &a->ns1__GetMyAAFQuestions, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetMyAAFQuestions * SOAP_FMAC4 soap_get___ns4__GetMyAAFQuestions(struct soap *soap, struct __ns4__GetMyAAFQuestions *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetMyAAFQuestions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetMyAAFQuestions * SOAP_FMAC4 soap_in___ns4__GetMyAAFQuestions(struct soap *soap, const char *tag, struct __ns4__GetMyAAFQuestions *a, const char *type)
{
	short soap_flag_ns1__GetMyAAFQuestions = 1;
	short soap_flag;
	a = (struct __ns4__GetMyAAFQuestions *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetMyAAFQuestions, sizeof(struct __ns4__GetMyAAFQuestions), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetMyAAFQuestions(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMyAAFQuestions && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMyAAFQuestions(soap, "ns1:GetMyAAFQuestions", &a->ns1__GetMyAAFQuestions, ""))
				{	soap_flag_ns1__GetMyAAFQuestions--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetMyAAFQuestions * SOAP_FMAC6 soap_new___ns4__GetMyAAFQuestions(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetMyAAFQuestions(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetMyAAFQuestions(struct soap *soap, struct __ns4__GetMyAAFQuestions *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetMyAAFQuestions * SOAP_FMAC4 soap_instantiate___ns4__GetMyAAFQuestions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetMyAAFQuestions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetMyAAFQuestions, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetMyAAFQuestions;
		if (size)
			*size = sizeof(struct __ns4__GetMyAAFQuestions);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetMyAAFQuestions[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetMyAAFQuestions);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetMyAAFQuestions*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetMyAAFQuestions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetMyAAFQuestions %p -> %p\n", q, p));
	*(struct __ns4__GetMyAAFQuestions*)p = *(struct __ns4__GetMyAAFQuestions*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__GetPrivateAAFQuestion(struct soap *soap, struct __ns4__GetPrivateAAFQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetPrivateAAFQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__GetPrivateAAFQuestion(struct soap *soap, const struct __ns4__GetPrivateAAFQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetPrivateAAFQuestion(soap, &a->ns1__GetPrivateAAFQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__GetPrivateAAFQuestion(struct soap *soap, const struct __ns4__GetPrivateAAFQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__GetPrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__GetPrivateAAFQuestion(struct soap *soap, const char *tag, int id, const struct __ns4__GetPrivateAAFQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestion", -1, &a->ns1__GetPrivateAAFQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__GetPrivateAAFQuestion * SOAP_FMAC4 soap_get___ns4__GetPrivateAAFQuestion(struct soap *soap, struct __ns4__GetPrivateAAFQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__GetPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__GetPrivateAAFQuestion * SOAP_FMAC4 soap_in___ns4__GetPrivateAAFQuestion(struct soap *soap, const char *tag, struct __ns4__GetPrivateAAFQuestion *a, const char *type)
{
	short soap_flag_ns1__GetPrivateAAFQuestion = 1;
	short soap_flag;
	a = (struct __ns4__GetPrivateAAFQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__GetPrivateAAFQuestion, sizeof(struct __ns4__GetPrivateAAFQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__GetPrivateAAFQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetPrivateAAFQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestion", &a->ns1__GetPrivateAAFQuestion, ""))
				{	soap_flag_ns1__GetPrivateAAFQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__GetPrivateAAFQuestion * SOAP_FMAC6 soap_new___ns4__GetPrivateAAFQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns4__GetPrivateAAFQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__GetPrivateAAFQuestion(struct soap *soap, struct __ns4__GetPrivateAAFQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__GetPrivateAAFQuestion * SOAP_FMAC4 soap_instantiate___ns4__GetPrivateAAFQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__GetPrivateAAFQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__GetPrivateAAFQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__GetPrivateAAFQuestion;
		if (size)
			*size = sizeof(struct __ns4__GetPrivateAAFQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__GetPrivateAAFQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__GetPrivateAAFQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__GetPrivateAAFQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__GetPrivateAAFQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__GetPrivateAAFQuestion %p -> %p\n", q, p));
	*(struct __ns4__GetPrivateAAFQuestion*)p = *(struct __ns4__GetPrivateAAFQuestion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__CompleteQuestion(struct soap *soap, struct __ns4__CompleteQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CompleteQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__CompleteQuestion(struct soap *soap, const struct __ns4__CompleteQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CompleteQuestion(soap, &a->ns1__CompleteQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__CompleteQuestion(struct soap *soap, const struct __ns4__CompleteQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__CompleteQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__CompleteQuestion(struct soap *soap, const char *tag, int id, const struct __ns4__CompleteQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CompleteQuestion(soap, "ns1:CompleteQuestion", -1, &a->ns1__CompleteQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__CompleteQuestion * SOAP_FMAC4 soap_get___ns4__CompleteQuestion(struct soap *soap, struct __ns4__CompleteQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__CompleteQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__CompleteQuestion * SOAP_FMAC4 soap_in___ns4__CompleteQuestion(struct soap *soap, const char *tag, struct __ns4__CompleteQuestion *a, const char *type)
{
	short soap_flag_ns1__CompleteQuestion = 1;
	short soap_flag;
	a = (struct __ns4__CompleteQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__CompleteQuestion, sizeof(struct __ns4__CompleteQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__CompleteQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CompleteQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CompleteQuestion(soap, "ns1:CompleteQuestion", &a->ns1__CompleteQuestion, ""))
				{	soap_flag_ns1__CompleteQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__CompleteQuestion * SOAP_FMAC6 soap_new___ns4__CompleteQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns4__CompleteQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__CompleteQuestion(struct soap *soap, struct __ns4__CompleteQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__CompleteQuestion * SOAP_FMAC4 soap_instantiate___ns4__CompleteQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__CompleteQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__CompleteQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__CompleteQuestion;
		if (size)
			*size = sizeof(struct __ns4__CompleteQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__CompleteQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__CompleteQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__CompleteQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__CompleteQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__CompleteQuestion %p -> %p\n", q, p));
	*(struct __ns4__CompleteQuestion*)p = *(struct __ns4__CompleteQuestion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__AttachPhoto(struct soap *soap, struct __ns4__AttachPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AttachPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__AttachPhoto(struct soap *soap, const struct __ns4__AttachPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__AttachPhoto(soap, &a->ns1__AttachPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__AttachPhoto(struct soap *soap, const struct __ns4__AttachPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__AttachPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__AttachPhoto(struct soap *soap, const char *tag, int id, const struct __ns4__AttachPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__AttachPhoto(soap, "ns1:AttachPhoto", -1, &a->ns1__AttachPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__AttachPhoto * SOAP_FMAC4 soap_get___ns4__AttachPhoto(struct soap *soap, struct __ns4__AttachPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__AttachPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__AttachPhoto * SOAP_FMAC4 soap_in___ns4__AttachPhoto(struct soap *soap, const char *tag, struct __ns4__AttachPhoto *a, const char *type)
{
	short soap_flag_ns1__AttachPhoto = 1;
	short soap_flag;
	a = (struct __ns4__AttachPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__AttachPhoto, sizeof(struct __ns4__AttachPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__AttachPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AttachPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AttachPhoto(soap, "ns1:AttachPhoto", &a->ns1__AttachPhoto, ""))
				{	soap_flag_ns1__AttachPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__AttachPhoto * SOAP_FMAC6 soap_new___ns4__AttachPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns4__AttachPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__AttachPhoto(struct soap *soap, struct __ns4__AttachPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__AttachPhoto * SOAP_FMAC4 soap_instantiate___ns4__AttachPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__AttachPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__AttachPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__AttachPhoto;
		if (size)
			*size = sizeof(struct __ns4__AttachPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__AttachPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__AttachPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__AttachPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__AttachPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__AttachPhoto %p -> %p\n", q, p));
	*(struct __ns4__AttachPhoto*)p = *(struct __ns4__AttachPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns4__SubmitQuestion(struct soap *soap, struct __ns4__SubmitQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SubmitQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns4__SubmitQuestion(struct soap *soap, const struct __ns4__SubmitQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SubmitQuestion(soap, &a->ns1__SubmitQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns4__SubmitQuestion(struct soap *soap, const struct __ns4__SubmitQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns4__SubmitQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__SubmitQuestion(struct soap *soap, const char *tag, int id, const struct __ns4__SubmitQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SubmitQuestion(soap, "ns1:SubmitQuestion", -1, &a->ns1__SubmitQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns4__SubmitQuestion * SOAP_FMAC4 soap_get___ns4__SubmitQuestion(struct soap *soap, struct __ns4__SubmitQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns4__SubmitQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns4__SubmitQuestion * SOAP_FMAC4 soap_in___ns4__SubmitQuestion(struct soap *soap, const char *tag, struct __ns4__SubmitQuestion *a, const char *type)
{
	short soap_flag_ns1__SubmitQuestion = 1;
	short soap_flag;
	a = (struct __ns4__SubmitQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns4__SubmitQuestion, sizeof(struct __ns4__SubmitQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns4__SubmitQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SubmitQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SubmitQuestion(soap, "ns1:SubmitQuestion", &a->ns1__SubmitQuestion, ""))
				{	soap_flag_ns1__SubmitQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns4__SubmitQuestion * SOAP_FMAC6 soap_new___ns4__SubmitQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns4__SubmitQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns4__SubmitQuestion(struct soap *soap, struct __ns4__SubmitQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns4__SubmitQuestion * SOAP_FMAC4 soap_instantiate___ns4__SubmitQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns4__SubmitQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns4__SubmitQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns4__SubmitQuestion;
		if (size)
			*size = sizeof(struct __ns4__SubmitQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns4__SubmitQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns4__SubmitQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns4__SubmitQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__SubmitQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns4__SubmitQuestion %p -> %p\n", q, p));
	*(struct __ns4__SubmitQuestion*)p = *(struct __ns4__SubmitQuestion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetAAFComments(struct soap *soap, struct __ns3__GetAAFComments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAAFComments = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetAAFComments(struct soap *soap, const struct __ns3__GetAAFComments *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAAFComments(soap, &a->ns1__GetAAFComments);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetAAFComments(struct soap *soap, const struct __ns3__GetAAFComments *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetAAFComments(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetAAFComments(struct soap *soap, const char *tag, int id, const struct __ns3__GetAAFComments *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAAFComments(soap, "ns1:GetAAFComments", -1, &a->ns1__GetAAFComments, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetAAFComments * SOAP_FMAC4 soap_get___ns3__GetAAFComments(struct soap *soap, struct __ns3__GetAAFComments *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetAAFComments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetAAFComments * SOAP_FMAC4 soap_in___ns3__GetAAFComments(struct soap *soap, const char *tag, struct __ns3__GetAAFComments *a, const char *type)
{
	short soap_flag_ns1__GetAAFComments = 1;
	short soap_flag;
	a = (struct __ns3__GetAAFComments *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetAAFComments, sizeof(struct __ns3__GetAAFComments), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetAAFComments(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAAFComments && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAAFComments(soap, "ns1:GetAAFComments", &a->ns1__GetAAFComments, ""))
				{	soap_flag_ns1__GetAAFComments--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetAAFComments * SOAP_FMAC6 soap_new___ns3__GetAAFComments(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetAAFComments(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetAAFComments(struct soap *soap, struct __ns3__GetAAFComments *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetAAFComments * SOAP_FMAC4 soap_instantiate___ns3__GetAAFComments(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetAAFComments(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetAAFComments, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetAAFComments;
		if (size)
			*size = sizeof(struct __ns3__GetAAFComments);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetAAFComments[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetAAFComments);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetAAFComments*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetAAFComments(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetAAFComments %p -> %p\n", q, p));
	*(struct __ns3__GetAAFComments*)p = *(struct __ns3__GetAAFComments*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetAAFResponse(struct soap *soap, struct __ns3__GetAAFResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetAAFResponse = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetAAFResponse(struct soap *soap, const struct __ns3__GetAAFResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetAAFResponse(soap, &a->ns1__GetAAFResponse);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetAAFResponse(struct soap *soap, const struct __ns3__GetAAFResponse *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetAAFResponse(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetAAFResponse(struct soap *soap, const char *tag, int id, const struct __ns3__GetAAFResponse *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetAAFResponse(soap, "ns1:GetAAFResponse", -1, &a->ns1__GetAAFResponse, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetAAFResponse * SOAP_FMAC4 soap_get___ns3__GetAAFResponse(struct soap *soap, struct __ns3__GetAAFResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetAAFResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetAAFResponse * SOAP_FMAC4 soap_in___ns3__GetAAFResponse(struct soap *soap, const char *tag, struct __ns3__GetAAFResponse *a, const char *type)
{
	short soap_flag_ns1__GetAAFResponse = 1;
	short soap_flag;
	a = (struct __ns3__GetAAFResponse *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetAAFResponse, sizeof(struct __ns3__GetAAFResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetAAFResponse(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetAAFResponse && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetAAFResponse(soap, "ns1:GetAAFResponse", &a->ns1__GetAAFResponse, ""))
				{	soap_flag_ns1__GetAAFResponse--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetAAFResponse * SOAP_FMAC6 soap_new___ns3__GetAAFResponse(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetAAFResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetAAFResponse(struct soap *soap, struct __ns3__GetAAFResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetAAFResponse * SOAP_FMAC4 soap_instantiate___ns3__GetAAFResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetAAFResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetAAFResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetAAFResponse;
		if (size)
			*size = sizeof(struct __ns3__GetAAFResponse);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetAAFResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetAAFResponse);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetAAFResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetAAFResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetAAFResponse %p -> %p\n", q, p));
	*(struct __ns3__GetAAFResponse*)p = *(struct __ns3__GetAAFResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns3__GetNewAAFQuestionCommentIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetNewAAFQuestionCommentIDs = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, const struct __ns3__GetNewAAFQuestionCommentIDs *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, &a->ns1__GetNewAAFQuestionCommentIDs);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, const struct __ns3__GetNewAAFQuestionCommentIDs *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetNewAAFQuestionCommentIDs(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, int id, const struct __ns3__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, "ns1:GetNewAAFQuestionCommentIDs", -1, &a->ns1__GetNewAAFQuestionCommentIDs, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_get___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns3__GetNewAAFQuestionCommentIDs *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetNewAAFQuestionCommentIDs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_in___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, struct __ns3__GetNewAAFQuestionCommentIDs *a, const char *type)
{
	short soap_flag_ns1__GetNewAAFQuestionCommentIDs = 1;
	short soap_flag;
	a = (struct __ns3__GetNewAAFQuestionCommentIDs *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetNewAAFQuestionCommentIDs, sizeof(struct __ns3__GetNewAAFQuestionCommentIDs), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetNewAAFQuestionCommentIDs(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetNewAAFQuestionCommentIDs && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, "ns1:GetNewAAFQuestionCommentIDs", &a->ns1__GetNewAAFQuestionCommentIDs, ""))
				{	soap_flag_ns1__GetNewAAFQuestionCommentIDs--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetNewAAFQuestionCommentIDs * SOAP_FMAC6 soap_new___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetNewAAFQuestionCommentIDs(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, struct __ns3__GetNewAAFQuestionCommentIDs *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetNewAAFQuestionCommentIDs * SOAP_FMAC4 soap_instantiate___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetNewAAFQuestionCommentIDs(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetNewAAFQuestionCommentIDs, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetNewAAFQuestionCommentIDs;
		if (size)
			*size = sizeof(struct __ns3__GetNewAAFQuestionCommentIDs);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetNewAAFQuestionCommentIDs[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetNewAAFQuestionCommentIDs);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetNewAAFQuestionCommentIDs*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetNewAAFQuestionCommentIDs(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetNewAAFQuestionCommentIDs %p -> %p\n", q, p));
	*(struct __ns3__GetNewAAFQuestionCommentIDs*)p = *(struct __ns3__GetNewAAFQuestionCommentIDs*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetMyAAFQuestions(struct soap *soap, struct __ns3__GetMyAAFQuestions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMyAAFQuestions = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetMyAAFQuestions(struct soap *soap, const struct __ns3__GetMyAAFQuestions *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetMyAAFQuestions(soap, &a->ns1__GetMyAAFQuestions);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetMyAAFQuestions(struct soap *soap, const struct __ns3__GetMyAAFQuestions *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetMyAAFQuestions(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetMyAAFQuestions(struct soap *soap, const char *tag, int id, const struct __ns3__GetMyAAFQuestions *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMyAAFQuestions(soap, "ns1:GetMyAAFQuestions", -1, &a->ns1__GetMyAAFQuestions, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetMyAAFQuestions * SOAP_FMAC4 soap_get___ns3__GetMyAAFQuestions(struct soap *soap, struct __ns3__GetMyAAFQuestions *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetMyAAFQuestions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetMyAAFQuestions * SOAP_FMAC4 soap_in___ns3__GetMyAAFQuestions(struct soap *soap, const char *tag, struct __ns3__GetMyAAFQuestions *a, const char *type)
{
	short soap_flag_ns1__GetMyAAFQuestions = 1;
	short soap_flag;
	a = (struct __ns3__GetMyAAFQuestions *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetMyAAFQuestions, sizeof(struct __ns3__GetMyAAFQuestions), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetMyAAFQuestions(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMyAAFQuestions && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMyAAFQuestions(soap, "ns1:GetMyAAFQuestions", &a->ns1__GetMyAAFQuestions, ""))
				{	soap_flag_ns1__GetMyAAFQuestions--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetMyAAFQuestions * SOAP_FMAC6 soap_new___ns3__GetMyAAFQuestions(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetMyAAFQuestions(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetMyAAFQuestions(struct soap *soap, struct __ns3__GetMyAAFQuestions *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetMyAAFQuestions * SOAP_FMAC4 soap_instantiate___ns3__GetMyAAFQuestions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetMyAAFQuestions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetMyAAFQuestions, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetMyAAFQuestions;
		if (size)
			*size = sizeof(struct __ns3__GetMyAAFQuestions);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetMyAAFQuestions[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetMyAAFQuestions);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetMyAAFQuestions*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetMyAAFQuestions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetMyAAFQuestions %p -> %p\n", q, p));
	*(struct __ns3__GetMyAAFQuestions*)p = *(struct __ns3__GetMyAAFQuestions*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetPrivateAAFQuestion(struct soap *soap, struct __ns3__GetPrivateAAFQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetPrivateAAFQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetPrivateAAFQuestion(struct soap *soap, const struct __ns3__GetPrivateAAFQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetPrivateAAFQuestion(soap, &a->ns1__GetPrivateAAFQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetPrivateAAFQuestion(struct soap *soap, const struct __ns3__GetPrivateAAFQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetPrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetPrivateAAFQuestion(struct soap *soap, const char *tag, int id, const struct __ns3__GetPrivateAAFQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestion", -1, &a->ns1__GetPrivateAAFQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetPrivateAAFQuestion * SOAP_FMAC4 soap_get___ns3__GetPrivateAAFQuestion(struct soap *soap, struct __ns3__GetPrivateAAFQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetPrivateAAFQuestion * SOAP_FMAC4 soap_in___ns3__GetPrivateAAFQuestion(struct soap *soap, const char *tag, struct __ns3__GetPrivateAAFQuestion *a, const char *type)
{
	short soap_flag_ns1__GetPrivateAAFQuestion = 1;
	short soap_flag;
	a = (struct __ns3__GetPrivateAAFQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetPrivateAAFQuestion, sizeof(struct __ns3__GetPrivateAAFQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetPrivateAAFQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetPrivateAAFQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetPrivateAAFQuestion(soap, "ns1:GetPrivateAAFQuestion", &a->ns1__GetPrivateAAFQuestion, ""))
				{	soap_flag_ns1__GetPrivateAAFQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetPrivateAAFQuestion * SOAP_FMAC6 soap_new___ns3__GetPrivateAAFQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetPrivateAAFQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetPrivateAAFQuestion(struct soap *soap, struct __ns3__GetPrivateAAFQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetPrivateAAFQuestion * SOAP_FMAC4 soap_instantiate___ns3__GetPrivateAAFQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetPrivateAAFQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetPrivateAAFQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetPrivateAAFQuestion;
		if (size)
			*size = sizeof(struct __ns3__GetPrivateAAFQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetPrivateAAFQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetPrivateAAFQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetPrivateAAFQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetPrivateAAFQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetPrivateAAFQuestion %p -> %p\n", q, p));
	*(struct __ns3__GetPrivateAAFQuestion*)p = *(struct __ns3__GetPrivateAAFQuestion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__CompleteQuestion(struct soap *soap, struct __ns3__CompleteQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__CompleteQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__CompleteQuestion(struct soap *soap, const struct __ns3__CompleteQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__CompleteQuestion(soap, &a->ns1__CompleteQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__CompleteQuestion(struct soap *soap, const struct __ns3__CompleteQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__CompleteQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__CompleteQuestion(struct soap *soap, const char *tag, int id, const struct __ns3__CompleteQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__CompleteQuestion(soap, "ns1:CompleteQuestion", -1, &a->ns1__CompleteQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__CompleteQuestion * SOAP_FMAC4 soap_get___ns3__CompleteQuestion(struct soap *soap, struct __ns3__CompleteQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__CompleteQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__CompleteQuestion * SOAP_FMAC4 soap_in___ns3__CompleteQuestion(struct soap *soap, const char *tag, struct __ns3__CompleteQuestion *a, const char *type)
{
	short soap_flag_ns1__CompleteQuestion = 1;
	short soap_flag;
	a = (struct __ns3__CompleteQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__CompleteQuestion, sizeof(struct __ns3__CompleteQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__CompleteQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__CompleteQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__CompleteQuestion(soap, "ns1:CompleteQuestion", &a->ns1__CompleteQuestion, ""))
				{	soap_flag_ns1__CompleteQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__CompleteQuestion * SOAP_FMAC6 soap_new___ns3__CompleteQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns3__CompleteQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__CompleteQuestion(struct soap *soap, struct __ns3__CompleteQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__CompleteQuestion * SOAP_FMAC4 soap_instantiate___ns3__CompleteQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__CompleteQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__CompleteQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__CompleteQuestion;
		if (size)
			*size = sizeof(struct __ns3__CompleteQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__CompleteQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__CompleteQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__CompleteQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__CompleteQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__CompleteQuestion %p -> %p\n", q, p));
	*(struct __ns3__CompleteQuestion*)p = *(struct __ns3__CompleteQuestion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__AttachPhoto(struct soap *soap, struct __ns3__AttachPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__AttachPhoto = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__AttachPhoto(struct soap *soap, const struct __ns3__AttachPhoto *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__AttachPhoto(soap, &a->ns1__AttachPhoto);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__AttachPhoto(struct soap *soap, const struct __ns3__AttachPhoto *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__AttachPhoto(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__AttachPhoto(struct soap *soap, const char *tag, int id, const struct __ns3__AttachPhoto *a, const char *type)
{
	if (soap_out_PointerTo_ns1__AttachPhoto(soap, "ns1:AttachPhoto", -1, &a->ns1__AttachPhoto, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__AttachPhoto * SOAP_FMAC4 soap_get___ns3__AttachPhoto(struct soap *soap, struct __ns3__AttachPhoto *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__AttachPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__AttachPhoto * SOAP_FMAC4 soap_in___ns3__AttachPhoto(struct soap *soap, const char *tag, struct __ns3__AttachPhoto *a, const char *type)
{
	short soap_flag_ns1__AttachPhoto = 1;
	short soap_flag;
	a = (struct __ns3__AttachPhoto *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__AttachPhoto, sizeof(struct __ns3__AttachPhoto), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__AttachPhoto(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__AttachPhoto && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__AttachPhoto(soap, "ns1:AttachPhoto", &a->ns1__AttachPhoto, ""))
				{	soap_flag_ns1__AttachPhoto--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__AttachPhoto * SOAP_FMAC6 soap_new___ns3__AttachPhoto(struct soap *soap, int n)
{	return soap_instantiate___ns3__AttachPhoto(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__AttachPhoto(struct soap *soap, struct __ns3__AttachPhoto *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__AttachPhoto * SOAP_FMAC4 soap_instantiate___ns3__AttachPhoto(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__AttachPhoto(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__AttachPhoto, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__AttachPhoto;
		if (size)
			*size = sizeof(struct __ns3__AttachPhoto);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__AttachPhoto[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__AttachPhoto);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__AttachPhoto*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__AttachPhoto(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__AttachPhoto %p -> %p\n", q, p));
	*(struct __ns3__AttachPhoto*)p = *(struct __ns3__AttachPhoto*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__SubmitQuestion(struct soap *soap, struct __ns3__SubmitQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__SubmitQuestion = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__SubmitQuestion(struct soap *soap, const struct __ns3__SubmitQuestion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__SubmitQuestion(soap, &a->ns1__SubmitQuestion);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__SubmitQuestion(struct soap *soap, const struct __ns3__SubmitQuestion *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__SubmitQuestion(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__SubmitQuestion(struct soap *soap, const char *tag, int id, const struct __ns3__SubmitQuestion *a, const char *type)
{
	if (soap_out_PointerTo_ns1__SubmitQuestion(soap, "ns1:SubmitQuestion", -1, &a->ns1__SubmitQuestion, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__SubmitQuestion * SOAP_FMAC4 soap_get___ns3__SubmitQuestion(struct soap *soap, struct __ns3__SubmitQuestion *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__SubmitQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__SubmitQuestion * SOAP_FMAC4 soap_in___ns3__SubmitQuestion(struct soap *soap, const char *tag, struct __ns3__SubmitQuestion *a, const char *type)
{
	short soap_flag_ns1__SubmitQuestion = 1;
	short soap_flag;
	a = (struct __ns3__SubmitQuestion *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__SubmitQuestion, sizeof(struct __ns3__SubmitQuestion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__SubmitQuestion(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__SubmitQuestion && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__SubmitQuestion(soap, "ns1:SubmitQuestion", &a->ns1__SubmitQuestion, ""))
				{	soap_flag_ns1__SubmitQuestion--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__SubmitQuestion * SOAP_FMAC6 soap_new___ns3__SubmitQuestion(struct soap *soap, int n)
{	return soap_instantiate___ns3__SubmitQuestion(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__SubmitQuestion(struct soap *soap, struct __ns3__SubmitQuestion *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__SubmitQuestion * SOAP_FMAC4 soap_instantiate___ns3__SubmitQuestion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__SubmitQuestion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__SubmitQuestion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__SubmitQuestion;
		if (size)
			*size = sizeof(struct __ns3__SubmitQuestion);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__SubmitQuestion[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__SubmitQuestion);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__SubmitQuestion*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__SubmitQuestion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__SubmitQuestion %p -> %p\n", q, p));
	*(struct __ns3__SubmitQuestion*)p = *(struct __ns3__SubmitQuestion*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAAFCommentsResponse(struct soap *soap, _ns1__GetAAFCommentsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAAFCommentsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAAFCommentsResponse(struct soap *soap, _ns1__GetAAFCommentsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAAFCommentsResponse);
	if (soap_out_PointerTo_ns1__GetAAFCommentsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAAFCommentsResponse(struct soap *soap, const char *tag, int id, _ns1__GetAAFCommentsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAAFCommentsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAAFCommentsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAAFCommentsResponse(struct soap *soap, _ns1__GetAAFCommentsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAAFCommentsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAAFCommentsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAAFCommentsResponse(struct soap *soap, const char *tag, _ns1__GetAAFCommentsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAAFCommentsResponse **)soap_malloc(soap, sizeof(_ns1__GetAAFCommentsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAAFCommentsResponse *)soap_instantiate__ns1__GetAAFCommentsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAAFCommentsResponse ** p = (_ns1__GetAAFCommentsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAAFCommentsResponse, sizeof(_ns1__GetAAFCommentsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAAFComments(struct soap *soap, _ns1__GetAAFComments *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAAFComments))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAAFComments(struct soap *soap, _ns1__GetAAFComments *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAAFComments);
	if (soap_out_PointerTo_ns1__GetAAFComments(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAAFComments(struct soap *soap, const char *tag, int id, _ns1__GetAAFComments *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAAFComments);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAAFComments ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAAFComments(struct soap *soap, _ns1__GetAAFComments **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAAFComments(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAAFComments ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAAFComments(struct soap *soap, const char *tag, _ns1__GetAAFComments **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAAFComments **)soap_malloc(soap, sizeof(_ns1__GetAAFComments *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAAFComments *)soap_instantiate__ns1__GetAAFComments(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAAFComments ** p = (_ns1__GetAAFComments **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAAFComments, sizeof(_ns1__GetAAFComments), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAAFResponseResponse(struct soap *soap, _ns1__GetAAFResponseResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAAFResponseResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAAFResponseResponse(struct soap *soap, _ns1__GetAAFResponseResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAAFResponseResponse);
	if (soap_out_PointerTo_ns1__GetAAFResponseResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAAFResponseResponse(struct soap *soap, const char *tag, int id, _ns1__GetAAFResponseResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAAFResponseResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAAFResponseResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAAFResponseResponse(struct soap *soap, _ns1__GetAAFResponseResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAAFResponseResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAAFResponseResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAAFResponseResponse(struct soap *soap, const char *tag, _ns1__GetAAFResponseResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAAFResponseResponse **)soap_malloc(soap, sizeof(_ns1__GetAAFResponseResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAAFResponseResponse *)soap_instantiate__ns1__GetAAFResponseResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAAFResponseResponse ** p = (_ns1__GetAAFResponseResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAAFResponseResponse, sizeof(_ns1__GetAAFResponseResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetAAFResponse(struct soap *soap, _ns1__GetAAFResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetAAFResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetAAFResponse(struct soap *soap, _ns1__GetAAFResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetAAFResponse);
	if (soap_out_PointerTo_ns1__GetAAFResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetAAFResponse(struct soap *soap, const char *tag, int id, _ns1__GetAAFResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetAAFResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetAAFResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetAAFResponse(struct soap *soap, _ns1__GetAAFResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetAAFResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetAAFResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetAAFResponse(struct soap *soap, const char *tag, _ns1__GetAAFResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetAAFResponse **)soap_malloc(soap, sizeof(_ns1__GetAAFResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetAAFResponse *)soap_instantiate__ns1__GetAAFResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetAAFResponse ** p = (_ns1__GetAAFResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetAAFResponse, sizeof(_ns1__GetAAFResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse);
	if (soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, const char *tag, int id, _ns1__GetNewAAFQuestionCommentIDsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDsResponse(struct soap *soap, const char *tag, _ns1__GetNewAAFQuestionCommentIDsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetNewAAFQuestionCommentIDsResponse **)soap_malloc(soap, sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetNewAAFQuestionCommentIDsResponse *)soap_instantiate__ns1__GetNewAAFQuestionCommentIDsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetNewAAFQuestionCommentIDsResponse ** p = (_ns1__GetNewAAFQuestionCommentIDsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDsResponse, sizeof(_ns1__GetNewAAFQuestionCommentIDsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDs *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDs *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetNewAAFQuestionCommentIDs);
	if (soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, int id, _ns1__GetNewAAFQuestionCommentIDs *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDs ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, _ns1__GetNewAAFQuestionCommentIDs **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDs(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetNewAAFQuestionCommentIDs ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetNewAAFQuestionCommentIDs(struct soap *soap, const char *tag, _ns1__GetNewAAFQuestionCommentIDs **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetNewAAFQuestionCommentIDs **)soap_malloc(soap, sizeof(_ns1__GetNewAAFQuestionCommentIDs *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetNewAAFQuestionCommentIDs *)soap_instantiate__ns1__GetNewAAFQuestionCommentIDs(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetNewAAFQuestionCommentIDs ** p = (_ns1__GetNewAAFQuestionCommentIDs **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetNewAAFQuestionCommentIDs, sizeof(_ns1__GetNewAAFQuestionCommentIDs), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMyAAFQuestionsResponse(struct soap *soap, _ns1__GetMyAAFQuestionsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMyAAFQuestionsResponse(struct soap *soap, _ns1__GetMyAAFQuestionsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestionsResponse);
	if (soap_out_PointerTo_ns1__GetMyAAFQuestionsResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMyAAFQuestionsResponse(struct soap *soap, const char *tag, int id, _ns1__GetMyAAFQuestionsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestionsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMyAAFQuestionsResponse(struct soap *soap, _ns1__GetMyAAFQuestionsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMyAAFQuestionsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetMyAAFQuestionsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMyAAFQuestionsResponse(struct soap *soap, const char *tag, _ns1__GetMyAAFQuestionsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMyAAFQuestionsResponse **)soap_malloc(soap, sizeof(_ns1__GetMyAAFQuestionsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMyAAFQuestionsResponse *)soap_instantiate__ns1__GetMyAAFQuestionsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetMyAAFQuestionsResponse ** p = (_ns1__GetMyAAFQuestionsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMyAAFQuestionsResponse, sizeof(_ns1__GetMyAAFQuestionsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMyAAFQuestions(struct soap *soap, _ns1__GetMyAAFQuestions *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMyAAFQuestions))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMyAAFQuestions(struct soap *soap, _ns1__GetMyAAFQuestions *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetMyAAFQuestions);
	if (soap_out_PointerTo_ns1__GetMyAAFQuestions(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMyAAFQuestions(struct soap *soap, const char *tag, int id, _ns1__GetMyAAFQuestions *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMyAAFQuestions);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetMyAAFQuestions ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMyAAFQuestions(struct soap *soap, _ns1__GetMyAAFQuestions **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMyAAFQuestions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetMyAAFQuestions ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMyAAFQuestions(struct soap *soap, const char *tag, _ns1__GetMyAAFQuestions **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMyAAFQuestions **)soap_malloc(soap, sizeof(_ns1__GetMyAAFQuestions *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMyAAFQuestions *)soap_instantiate__ns1__GetMyAAFQuestions(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetMyAAFQuestions ** p = (_ns1__GetMyAAFQuestions **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMyAAFQuestions, sizeof(_ns1__GetMyAAFQuestions), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPrivateAAFQuestionResponse(struct soap *soap, _ns1__GetPrivateAAFQuestionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPrivateAAFQuestionResponse(struct soap *soap, _ns1__GetPrivateAAFQuestionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestionResponse);
	if (soap_out_PointerTo_ns1__GetPrivateAAFQuestionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPrivateAAFQuestionResponse(struct soap *soap, const char *tag, int id, _ns1__GetPrivateAAFQuestionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPrivateAAFQuestionResponse(struct soap *soap, _ns1__GetPrivateAAFQuestionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetPrivateAAFQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPrivateAAFQuestionResponse(struct soap *soap, const char *tag, _ns1__GetPrivateAAFQuestionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetPrivateAAFQuestionResponse **)soap_malloc(soap, sizeof(_ns1__GetPrivateAAFQuestionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetPrivateAAFQuestionResponse *)soap_instantiate__ns1__GetPrivateAAFQuestionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetPrivateAAFQuestionResponse ** p = (_ns1__GetPrivateAAFQuestionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetPrivateAAFQuestionResponse, sizeof(_ns1__GetPrivateAAFQuestionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetPrivateAAFQuestion(struct soap *soap, _ns1__GetPrivateAAFQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetPrivateAAFQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetPrivateAAFQuestion(struct soap *soap, _ns1__GetPrivateAAFQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetPrivateAAFQuestion);
	if (soap_out_PointerTo_ns1__GetPrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetPrivateAAFQuestion(struct soap *soap, const char *tag, int id, _ns1__GetPrivateAAFQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetPrivateAAFQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestion ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetPrivateAAFQuestion(struct soap *soap, _ns1__GetPrivateAAFQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetPrivateAAFQuestion ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetPrivateAAFQuestion(struct soap *soap, const char *tag, _ns1__GetPrivateAAFQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetPrivateAAFQuestion **)soap_malloc(soap, sizeof(_ns1__GetPrivateAAFQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetPrivateAAFQuestion *)soap_instantiate__ns1__GetPrivateAAFQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetPrivateAAFQuestion ** p = (_ns1__GetPrivateAAFQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetPrivateAAFQuestion, sizeof(_ns1__GetPrivateAAFQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CompleteQuestionResponse(struct soap *soap, _ns1__CompleteQuestionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CompleteQuestionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CompleteQuestionResponse(struct soap *soap, _ns1__CompleteQuestionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CompleteQuestionResponse);
	if (soap_out_PointerTo_ns1__CompleteQuestionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CompleteQuestionResponse(struct soap *soap, const char *tag, int id, _ns1__CompleteQuestionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CompleteQuestionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CompleteQuestionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__CompleteQuestionResponse(struct soap *soap, _ns1__CompleteQuestionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CompleteQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CompleteQuestionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__CompleteQuestionResponse(struct soap *soap, const char *tag, _ns1__CompleteQuestionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CompleteQuestionResponse **)soap_malloc(soap, sizeof(_ns1__CompleteQuestionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CompleteQuestionResponse *)soap_instantiate__ns1__CompleteQuestionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CompleteQuestionResponse ** p = (_ns1__CompleteQuestionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CompleteQuestionResponse, sizeof(_ns1__CompleteQuestionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__CompleteQuestion(struct soap *soap, _ns1__CompleteQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__CompleteQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__CompleteQuestion(struct soap *soap, _ns1__CompleteQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__CompleteQuestion);
	if (soap_out_PointerTo_ns1__CompleteQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__CompleteQuestion(struct soap *soap, const char *tag, int id, _ns1__CompleteQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__CompleteQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__CompleteQuestion ** SOAP_FMAC4 soap_get_PointerTo_ns1__CompleteQuestion(struct soap *soap, _ns1__CompleteQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__CompleteQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__CompleteQuestion ** SOAP_FMAC4 soap_in_PointerTo_ns1__CompleteQuestion(struct soap *soap, const char *tag, _ns1__CompleteQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__CompleteQuestion **)soap_malloc(soap, sizeof(_ns1__CompleteQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__CompleteQuestion *)soap_instantiate__ns1__CompleteQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__CompleteQuestion ** p = (_ns1__CompleteQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__CompleteQuestion, sizeof(_ns1__CompleteQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AttachPhotoResponse(struct soap *soap, _ns1__AttachPhotoResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AttachPhotoResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AttachPhotoResponse(struct soap *soap, _ns1__AttachPhotoResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__AttachPhotoResponse);
	if (soap_out_PointerTo_ns1__AttachPhotoResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AttachPhotoResponse(struct soap *soap, const char *tag, int id, _ns1__AttachPhotoResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AttachPhotoResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AttachPhotoResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__AttachPhotoResponse(struct soap *soap, _ns1__AttachPhotoResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AttachPhotoResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__AttachPhotoResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__AttachPhotoResponse(struct soap *soap, const char *tag, _ns1__AttachPhotoResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AttachPhotoResponse **)soap_malloc(soap, sizeof(_ns1__AttachPhotoResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AttachPhotoResponse *)soap_instantiate__ns1__AttachPhotoResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AttachPhotoResponse ** p = (_ns1__AttachPhotoResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AttachPhotoResponse, sizeof(_ns1__AttachPhotoResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__AttachPhoto(struct soap *soap, _ns1__AttachPhoto *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__AttachPhoto))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__AttachPhoto(struct soap *soap, _ns1__AttachPhoto *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__AttachPhoto);
	if (soap_out_PointerTo_ns1__AttachPhoto(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__AttachPhoto(struct soap *soap, const char *tag, int id, _ns1__AttachPhoto *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__AttachPhoto);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__AttachPhoto ** SOAP_FMAC4 soap_get_PointerTo_ns1__AttachPhoto(struct soap *soap, _ns1__AttachPhoto **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__AttachPhoto(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__AttachPhoto ** SOAP_FMAC4 soap_in_PointerTo_ns1__AttachPhoto(struct soap *soap, const char *tag, _ns1__AttachPhoto **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__AttachPhoto **)soap_malloc(soap, sizeof(_ns1__AttachPhoto *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__AttachPhoto *)soap_instantiate__ns1__AttachPhoto(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__AttachPhoto ** p = (_ns1__AttachPhoto **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__AttachPhoto, sizeof(_ns1__AttachPhoto), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SubmitQuestionResponse(struct soap *soap, _ns1__SubmitQuestionResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SubmitQuestionResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SubmitQuestionResponse(struct soap *soap, _ns1__SubmitQuestionResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SubmitQuestionResponse);
	if (soap_out_PointerTo_ns1__SubmitQuestionResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SubmitQuestionResponse(struct soap *soap, const char *tag, int id, _ns1__SubmitQuestionResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SubmitQuestionResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SubmitQuestionResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__SubmitQuestionResponse(struct soap *soap, _ns1__SubmitQuestionResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SubmitQuestionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SubmitQuestionResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__SubmitQuestionResponse(struct soap *soap, const char *tag, _ns1__SubmitQuestionResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SubmitQuestionResponse **)soap_malloc(soap, sizeof(_ns1__SubmitQuestionResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SubmitQuestionResponse *)soap_instantiate__ns1__SubmitQuestionResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SubmitQuestionResponse ** p = (_ns1__SubmitQuestionResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SubmitQuestionResponse, sizeof(_ns1__SubmitQuestionResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__SubmitQuestion(struct soap *soap, _ns1__SubmitQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__SubmitQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__SubmitQuestion(struct soap *soap, _ns1__SubmitQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__SubmitQuestion);
	if (soap_out_PointerTo_ns1__SubmitQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__SubmitQuestion(struct soap *soap, const char *tag, int id, _ns1__SubmitQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__SubmitQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__SubmitQuestion ** SOAP_FMAC4 soap_get_PointerTo_ns1__SubmitQuestion(struct soap *soap, _ns1__SubmitQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__SubmitQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__SubmitQuestion ** SOAP_FMAC4 soap_in_PointerTo_ns1__SubmitQuestion(struct soap *soap, const char *tag, _ns1__SubmitQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__SubmitQuestion **)soap_malloc(soap, sizeof(_ns1__SubmitQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__SubmitQuestion *)soap_instantiate__ns1__SubmitQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__SubmitQuestion ** p = (_ns1__SubmitQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__SubmitQuestion, sizeof(_ns1__SubmitQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfAskAFriendComment(struct soap *soap, ns1__ArrayOfAskAFriendComment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfAskAFriendComment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfAskAFriendComment(struct soap *soap, ns1__ArrayOfAskAFriendComment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfAskAFriendComment);
	if (soap_out_PointerTons1__ArrayOfAskAFriendComment(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfAskAFriendComment(struct soap *soap, const char *tag, int id, ns1__ArrayOfAskAFriendComment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfAskAFriendComment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendComment ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfAskAFriendComment(struct soap *soap, ns1__ArrayOfAskAFriendComment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfAskAFriendComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendComment ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfAskAFriendComment(struct soap *soap, const char *tag, ns1__ArrayOfAskAFriendComment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfAskAFriendComment **)soap_malloc(soap, sizeof(ns1__ArrayOfAskAFriendComment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfAskAFriendComment *)soap_instantiate_ns1__ArrayOfAskAFriendComment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfAskAFriendComment ** p = (ns1__ArrayOfAskAFriendComment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfAskAFriendComment, sizeof(ns1__ArrayOfAskAFriendComment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AskAFriendResponse(struct soap *soap, ns1__AskAFriendResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AskAFriendResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AskAFriendResponse(struct soap *soap, ns1__AskAFriendResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__AskAFriendResponse);
	if (soap_out_PointerTons1__AskAFriendResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AskAFriendResponse(struct soap *soap, const char *tag, int id, ns1__AskAFriendResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AskAFriendResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AskAFriendResponse ** SOAP_FMAC4 soap_get_PointerTons1__AskAFriendResponse(struct soap *soap, ns1__AskAFriendResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AskAFriendResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendResponse ** SOAP_FMAC4 soap_in_PointerTons1__AskAFriendResponse(struct soap *soap, const char *tag, ns1__AskAFriendResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendResponse **)soap_malloc(soap, sizeof(ns1__AskAFriendResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AskAFriendResponse *)soap_instantiate_ns1__AskAFriendResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__AskAFriendResponse ** p = (ns1__AskAFriendResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AskAFriendResponse, sizeof(ns1__AskAFriendResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfAskAFriendQuestion(struct soap *soap, ns1__ArrayOfAskAFriendQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfAskAFriendQuestion(struct soap *soap, ns1__ArrayOfAskAFriendQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfAskAFriendQuestion);
	if (soap_out_PointerTons1__ArrayOfAskAFriendQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfAskAFriendQuestion(struct soap *soap, const char *tag, int id, ns1__ArrayOfAskAFriendQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendQuestion ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfAskAFriendQuestion(struct soap *soap, ns1__ArrayOfAskAFriendQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfAskAFriendQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfAskAFriendQuestion ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfAskAFriendQuestion(struct soap *soap, const char *tag, ns1__ArrayOfAskAFriendQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfAskAFriendQuestion **)soap_malloc(soap, sizeof(ns1__ArrayOfAskAFriendQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfAskAFriendQuestion *)soap_instantiate_ns1__ArrayOfAskAFriendQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfAskAFriendQuestion ** p = (ns1__ArrayOfAskAFriendQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfAskAFriendQuestion, sizeof(ns1__ArrayOfAskAFriendQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfPrivateAAFQuestion(struct soap *soap, ns1__ArrayOfPrivateAAFQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfPrivateAAFQuestion(struct soap *soap, ns1__ArrayOfPrivateAAFQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfPrivateAAFQuestion);
	if (soap_out_PointerTons1__ArrayOfPrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfPrivateAAFQuestion(struct soap *soap, const char *tag, int id, ns1__ArrayOfPrivateAAFQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfPrivateAAFQuestion ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfPrivateAAFQuestion(struct soap *soap, ns1__ArrayOfPrivateAAFQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfPrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfPrivateAAFQuestion ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfPrivateAAFQuestion(struct soap *soap, const char *tag, ns1__ArrayOfPrivateAAFQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfPrivateAAFQuestion **)soap_malloc(soap, sizeof(ns1__ArrayOfPrivateAAFQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfPrivateAAFQuestion *)soap_instantiate_ns1__ArrayOfPrivateAAFQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfPrivateAAFQuestion ** p = (ns1__ArrayOfPrivateAAFQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfPrivateAAFQuestion, sizeof(ns1__ArrayOfPrivateAAFQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AskAFriendConfirm(struct soap *soap, ns1__AskAFriendConfirm *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AskAFriendConfirm))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AskAFriendConfirm(struct soap *soap, ns1__AskAFriendConfirm *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__AskAFriendConfirm);
	if (soap_out_PointerTons1__AskAFriendConfirm(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AskAFriendConfirm(struct soap *soap, const char *tag, int id, ns1__AskAFriendConfirm *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AskAFriendConfirm);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AskAFriendConfirm ** SOAP_FMAC4 soap_get_PointerTons1__AskAFriendConfirm(struct soap *soap, ns1__AskAFriendConfirm **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AskAFriendConfirm(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendConfirm ** SOAP_FMAC4 soap_in_PointerTons1__AskAFriendConfirm(struct soap *soap, const char *tag, ns1__AskAFriendConfirm **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendConfirm **)soap_malloc(soap, sizeof(ns1__AskAFriendConfirm *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AskAFriendConfirm *)soap_instantiate_ns1__AskAFriendConfirm(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__AskAFriendConfirm ** p = (ns1__AskAFriendConfirm **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AskAFriendConfirm, sizeof(ns1__AskAFriendConfirm), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__AskAFriendComment))
		soap_serialize_PointerTons1__AskAFriendComment(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__AskAFriendComment);
	if (soap_out_PointerToPointerTons1__AskAFriendComment(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AskAFriendComment(struct soap *soap, const char *tag, int id, ns1__AskAFriendComment **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__AskAFriendComment);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__AskAFriendComment(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__AskAFriendComment *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__AskAFriendComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendComment *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AskAFriendComment(struct soap *soap, const char *tag, ns1__AskAFriendComment ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendComment ***)soap_malloc(soap, sizeof(ns1__AskAFriendComment **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__AskAFriendComment(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendComment ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__AskAFriendComment, sizeof(ns1__AskAFriendComment *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AskAFriendComment))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__AskAFriendComment);
	if (soap_out_PointerTons1__AskAFriendComment(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AskAFriendComment(struct soap *soap, const char *tag, int id, ns1__AskAFriendComment *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AskAFriendComment);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AskAFriendComment ** SOAP_FMAC4 soap_get_PointerTons1__AskAFriendComment(struct soap *soap, ns1__AskAFriendComment **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AskAFriendComment(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendComment ** SOAP_FMAC4 soap_in_PointerTons1__AskAFriendComment(struct soap *soap, const char *tag, ns1__AskAFriendComment **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendComment **)soap_malloc(soap, sizeof(ns1__AskAFriendComment *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AskAFriendComment *)soap_instantiate_ns1__AskAFriendComment(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__AskAFriendComment ** p = (ns1__AskAFriendComment **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AskAFriendComment, sizeof(ns1__AskAFriendComment), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfString))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfString);
	if (soap_out_PointerTons1__ArrayOfString(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, int id, ns1__ArrayOfString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfString);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfString(struct soap *soap, ns1__ArrayOfString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfString ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfString(struct soap *soap, const char *tag, ns1__ArrayOfString **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfString **)soap_malloc(soap, sizeof(ns1__ArrayOfString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfString *)soap_instantiate_ns1__ArrayOfString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfString ** p = (ns1__ArrayOfString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfString, sizeof(ns1__ArrayOfString), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__ArrayOfInt))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__ArrayOfInt);
	if (soap_out_PointerTons1__ArrayOfInt(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, int id, ns1__ArrayOfInt *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__ArrayOfInt);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_get_PointerTons1__ArrayOfInt(struct soap *soap, ns1__ArrayOfInt **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__ArrayOfInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__ArrayOfInt ** SOAP_FMAC4 soap_in_PointerTons1__ArrayOfInt(struct soap *soap, const char *tag, ns1__ArrayOfInt **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__ArrayOfInt **)soap_malloc(soap, sizeof(ns1__ArrayOfInt *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__ArrayOfInt *)soap_instantiate_ns1__ArrayOfInt(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__ArrayOfInt ** p = (ns1__ArrayOfInt **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__ArrayOfInt, sizeof(ns1__ArrayOfInt), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__AskAFriendQuestion))
		soap_serialize_PointerTons1__AskAFriendQuestion(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__AskAFriendQuestion);
	if (soap_out_PointerToPointerTons1__AskAFriendQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__AskAFriendQuestion(struct soap *soap, const char *tag, int id, ns1__AskAFriendQuestion **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__AskAFriendQuestion);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__AskAFriendQuestion(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__AskAFriendQuestion *** SOAP_FMAC4 soap_get_PointerToPointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__AskAFriendQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendQuestion *** SOAP_FMAC4 soap_in_PointerToPointerTons1__AskAFriendQuestion(struct soap *soap, const char *tag, ns1__AskAFriendQuestion ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendQuestion ***)soap_malloc(soap, sizeof(ns1__AskAFriendQuestion **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__AskAFriendQuestion(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__AskAFriendQuestion ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__AskAFriendQuestion, sizeof(ns1__AskAFriendQuestion *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__AskAFriendQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__AskAFriendQuestion);
	if (soap_out_PointerTons1__AskAFriendQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__AskAFriendQuestion(struct soap *soap, const char *tag, int id, ns1__AskAFriendQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__AskAFriendQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__AskAFriendQuestion ** SOAP_FMAC4 soap_get_PointerTons1__AskAFriendQuestion(struct soap *soap, ns1__AskAFriendQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__AskAFriendQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__AskAFriendQuestion ** SOAP_FMAC4 soap_in_PointerTons1__AskAFriendQuestion(struct soap *soap, const char *tag, ns1__AskAFriendQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__AskAFriendQuestion **)soap_malloc(soap, sizeof(ns1__AskAFriendQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__AskAFriendQuestion *)soap_instantiate_ns1__AskAFriendQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__AskAFriendQuestion ** p = (ns1__AskAFriendQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__AskAFriendQuestion, sizeof(ns1__AskAFriendQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons1__PrivateAAFQuestion))
		soap_serialize_PointerTons1__PrivateAAFQuestion(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons1__PrivateAAFQuestion);
	if (soap_out_PointerToPointerTons1__PrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons1__PrivateAAFQuestion(struct soap *soap, const char *tag, int id, ns1__PrivateAAFQuestion **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons1__PrivateAAFQuestion);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons1__PrivateAAFQuestion(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns1__PrivateAAFQuestion *** SOAP_FMAC4 soap_get_PointerToPointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons1__PrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PrivateAAFQuestion *** SOAP_FMAC4 soap_in_PointerToPointerTons1__PrivateAAFQuestion(struct soap *soap, const char *tag, ns1__PrivateAAFQuestion ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrivateAAFQuestion ***)soap_malloc(soap, sizeof(ns1__PrivateAAFQuestion **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons1__PrivateAAFQuestion(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns1__PrivateAAFQuestion ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons1__PrivateAAFQuestion, sizeof(ns1__PrivateAAFQuestion *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns1__PrivateAAFQuestion))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons1__PrivateAAFQuestion);
	if (soap_out_PointerTons1__PrivateAAFQuestion(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PrivateAAFQuestion(struct soap *soap, const char *tag, int id, ns1__PrivateAAFQuestion *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns1__PrivateAAFQuestion);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns1__PrivateAAFQuestion ** SOAP_FMAC4 soap_get_PointerTons1__PrivateAAFQuestion(struct soap *soap, ns1__PrivateAAFQuestion **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons1__PrivateAAFQuestion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 ns1__PrivateAAFQuestion ** SOAP_FMAC4 soap_in_PointerTons1__PrivateAAFQuestion(struct soap *soap, const char *tag, ns1__PrivateAAFQuestion **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns1__PrivateAAFQuestion **)soap_malloc(soap, sizeof(ns1__PrivateAAFQuestion *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns1__PrivateAAFQuestion *)soap_instantiate_ns1__PrivateAAFQuestion(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns1__PrivateAAFQuestion ** p = (ns1__PrivateAAFQuestion **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns1__PrivateAAFQuestion, sizeof(ns1__PrivateAAFQuestion), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap *soap, char **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_string))
		soap_serialize_string(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap *soap, char **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostring);
	if (soap_out_PointerTostring(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap *soap, const char *tag, int id, char **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_string);
	if (id < 0)
		return soap->error;
	return soap_out_string(soap, tag, id, *a, type);
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap *soap, char ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap *soap, const char *tag, char ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (char ***)soap_malloc(soap, sizeof(char **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (char ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_string, sizeof(char *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
