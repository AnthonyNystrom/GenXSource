/* soapMemberServicesSoapProxy.cpp
   Generated by gSOAP 2.7.10 from output\memberservice.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapMemberServicesSoapProxy.h"

MemberServicesSoapProxy::MemberServicesSoapProxy()
{	MemberServicesSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MemberServicesSoapProxy::MemberServicesSoapProxy(const struct soap &soap)
{	MemberServicesSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_copy_context(this, &soap);
}

MemberServicesSoapProxy::MemberServicesSoapProxy(soap_mode iomode)
{	MemberServicesSoapProxy_init(iomode, iomode);
}

MemberServicesSoapProxy::MemberServicesSoapProxy(soap_mode imode, soap_mode omode)
{	MemberServicesSoapProxy_init(imode, omode);
}

void MemberServicesSoapProxy::MemberServicesSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
	{"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns2", "http://tempuri.org/MemberServicesSoap", NULL, NULL},
	{"ns1", "http://tempuri.org/", NULL, NULL},
	{"ns3", "http://tempuri.org/MemberServicesSoap12", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	if (!this->namespaces)
		this->namespaces = namespaces;
}

MemberServicesSoapProxy::~MemberServicesSoapProxy()
{ }

void MemberServicesSoapProxy::soap_noheader()
{	header = NULL;
}

const SOAP_ENV__Fault *MemberServicesSoapProxy::soap_fault()
{	return this->fault;
}

const char *MemberServicesSoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *MemberServicesSoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int MemberServicesSoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

void MemberServicesSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
void MemberServicesSoapProxy::soap_stream_fault(std::ostream& os)
{	return ::soap_stream_fault(this, os);
}

char *MemberServicesSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int MemberServicesSoapProxy::GetEncryptionKey(_ns1__GetEncryptionKey *ns1__GetEncryptionKey, _ns1__GetEncryptionKeyResponse *ns1__GetEncryptionKeyResponse)
{	struct soap *soap = this;
	struct __ns2__GetEncryptionKey soap_tmp___ns2__GetEncryptionKey;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://services.next2friends.com/n2fwebservices/memberservices.asmx";
	soap_action = "http://tempuri.org/GetEncryptionKey";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetEncryptionKey.ns1__GetEncryptionKey = ns1__GetEncryptionKey;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__GetEncryptionKey(soap, &soap_tmp___ns2__GetEncryptionKey);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetEncryptionKey(soap, &soap_tmp___ns2__GetEncryptionKey, "-ns2:GetEncryptionKey", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetEncryptionKey(soap, &soap_tmp___ns2__GetEncryptionKey, "-ns2:GetEncryptionKey", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetEncryptionKeyResponse)
		return soap_closesock(soap);
	ns1__GetEncryptionKeyResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetEncryptionKeyResponse->soap_get(soap, "ns1:GetEncryptionKeyResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MemberServicesSoapProxy::GetMemberID(_ns1__GetMemberID *ns1__GetMemberID, _ns1__GetMemberIDResponse *ns1__GetMemberIDResponse)
{	struct soap *soap = this;
	struct __ns2__GetMemberID soap_tmp___ns2__GetMemberID;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://services.next2friends.com/n2fwebservices/memberservices.asmx";
	soap_action = "http://tempuri.org/GetMemberID";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetMemberID.ns1__GetMemberID = ns1__GetMemberID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__GetMemberID(soap, &soap_tmp___ns2__GetMemberID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetMemberID(soap, &soap_tmp___ns2__GetMemberID, "-ns2:GetMemberID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetMemberID(soap, &soap_tmp___ns2__GetMemberID, "-ns2:GetMemberID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetMemberIDResponse)
		return soap_closesock(soap);
	ns1__GetMemberIDResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetMemberIDResponse->soap_get(soap, "ns1:GetMemberIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MemberServicesSoapProxy::GetTagID(_ns1__GetTagID *ns1__GetTagID, _ns1__GetTagIDResponse *ns1__GetTagIDResponse)
{	struct soap *soap = this;
	struct __ns2__GetTagID soap_tmp___ns2__GetTagID;
	const char *soap_action = NULL;
	if (!soap_endpoint)
		soap_endpoint = "http://services.next2friends.com/n2fwebservices/memberservices.asmx";
	soap_action = "http://tempuri.org/GetTagID";
	soap->encodingStyle = NULL;
	soap_tmp___ns2__GetTagID.ns1__GetTagID = ns1__GetTagID;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns2__GetTagID(soap, &soap_tmp___ns2__GetTagID);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns2__GetTagID(soap, &soap_tmp___ns2__GetTagID, "-ns2:GetTagID", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns2__GetTagID(soap, &soap_tmp___ns2__GetTagID, "-ns2:GetTagID", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__GetTagIDResponse)
		return soap_closesock(soap);
	ns1__GetTagIDResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetTagIDResponse->soap_get(soap, "ns1:GetTagIDResponse", "");
	if (soap->error)
	{	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
			return soap_recv_fault(soap);
		return soap_closesock(soap);
	}
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
