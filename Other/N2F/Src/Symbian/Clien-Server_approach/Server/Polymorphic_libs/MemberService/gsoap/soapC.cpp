/* soapC.cpp
   Generated by gSOAP 2.7.10 from output\memberservice.h
   Copyright(C) 2000-2008, Robert van Engelen, Genivia Inc. All Rights Reserved.
   This part of the software is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.7.10 2008-05-06 20:52:42 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	soap->header = soap_new_SOAP_ENV__Header(soap, -1);
		soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	for (;;)
		if (!soap_getelement(soap, &t))
			if (soap->error || soap_ignore_element(soap))
				break;
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTo_ns1__GetTagIDResponse:
		return soap_in_PointerTo_ns1__GetTagIDResponse(soap, NULL, NULL, "ns1:GetTagIDResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTagID:
		return soap_in_PointerTo_ns1__GetTagID(soap, NULL, NULL, "ns1:GetTagID");
	case SOAP_TYPE_PointerTo_ns1__GetMemberIDResponse:
		return soap_in_PointerTo_ns1__GetMemberIDResponse(soap, NULL, NULL, "ns1:GetMemberIDResponse");
	case SOAP_TYPE_PointerTo_ns1__GetMemberID:
		return soap_in_PointerTo_ns1__GetMemberID(soap, NULL, NULL, "ns1:GetMemberID");
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKeyResponse:
		return soap_in_PointerTo_ns1__GetEncryptionKeyResponse(soap, NULL, NULL, "ns1:GetEncryptionKeyResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKey:
		return soap_in_PointerTo_ns1__GetEncryptionKey(soap, NULL, NULL, "ns1:GetEncryptionKey");
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:GetTagIDResponse"))
		{	*type = SOAP_TYPE__ns1__GetTagIDResponse;
			return soap_in__ns1__GetTagIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetTagID"))
		{	*type = SOAP_TYPE__ns1__GetTagID;
			return soap_in__ns1__GetTagID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMemberIDResponse"))
		{	*type = SOAP_TYPE__ns1__GetMemberIDResponse;
			return soap_in__ns1__GetMemberIDResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetMemberID"))
		{	*type = SOAP_TYPE__ns1__GetMemberID;
			return soap_in__ns1__GetMemberID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEncryptionKeyResponse"))
		{	*type = SOAP_TYPE__ns1__GetEncryptionKeyResponse;
			return soap_in__ns1__GetEncryptionKeyResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetEncryptionKey"))
		{	*type = SOAP_TYPE__ns1__GetEncryptionKey;
			return soap_in__ns1__GetEncryptionKey(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__GetTagIDResponse:
		return ((_ns1__GetTagIDResponse *)ptr)->soap_out(soap, "ns1:GetTagIDResponse", id, NULL);
	case SOAP_TYPE__ns1__GetTagID:
		return ((_ns1__GetTagID *)ptr)->soap_out(soap, "ns1:GetTagID", id, NULL);
	case SOAP_TYPE__ns1__GetMemberIDResponse:
		return ((_ns1__GetMemberIDResponse *)ptr)->soap_out(soap, "ns1:GetMemberIDResponse", id, NULL);
	case SOAP_TYPE__ns1__GetMemberID:
		return ((_ns1__GetMemberID *)ptr)->soap_out(soap, "ns1:GetMemberID", id, NULL);
	case SOAP_TYPE__ns1__GetEncryptionKeyResponse:
		return ((_ns1__GetEncryptionKeyResponse *)ptr)->soap_out(soap, "ns1:GetEncryptionKeyResponse", id, NULL);
	case SOAP_TYPE__ns1__GetEncryptionKey:
		return ((_ns1__GetEncryptionKey *)ptr)->soap_out(soap, "ns1:GetEncryptionKey", id, NULL);
	case SOAP_TYPE_PointerTo_ns1__GetTagIDResponse:
		return soap_out_PointerTo_ns1__GetTagIDResponse(soap, tag, id, (_ns1__GetTagIDResponse *const*)ptr, "ns1:GetTagIDResponse");
	case SOAP_TYPE_PointerTo_ns1__GetTagID:
		return soap_out_PointerTo_ns1__GetTagID(soap, tag, id, (_ns1__GetTagID *const*)ptr, "ns1:GetTagID");
	case SOAP_TYPE_PointerTo_ns1__GetMemberIDResponse:
		return soap_out_PointerTo_ns1__GetMemberIDResponse(soap, tag, id, (_ns1__GetMemberIDResponse *const*)ptr, "ns1:GetMemberIDResponse");
	case SOAP_TYPE_PointerTo_ns1__GetMemberID:
		return soap_out_PointerTo_ns1__GetMemberID(soap, tag, id, (_ns1__GetMemberID *const*)ptr, "ns1:GetMemberID");
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKeyResponse:
		return soap_out_PointerTo_ns1__GetEncryptionKeyResponse(soap, tag, id, (_ns1__GetEncryptionKeyResponse *const*)ptr, "ns1:GetEncryptionKeyResponse");
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKey:
		return soap_out_PointerTo_ns1__GetEncryptionKey(soap, tag, id, (_ns1__GetEncryptionKey *const*)ptr, "ns1:GetEncryptionKey");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, "xsd:QName", id, (char*const*)&ptr, NULL);
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__GetTagIDResponse:
		((_ns1__GetTagIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetTagID:
		((_ns1__GetTagID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMemberIDResponse:
		((_ns1__GetMemberIDResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetMemberID:
		((_ns1__GetMemberID *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEncryptionKeyResponse:
		((_ns1__GetEncryptionKeyResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetEncryptionKey:
		((_ns1__GetEncryptionKey *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns3__GetTagID:
		soap_serialize___ns3__GetTagID(soap, (const struct __ns3__GetTagID *)ptr);
		break;
	case SOAP_TYPE___ns3__GetMemberID:
		soap_serialize___ns3__GetMemberID(soap, (const struct __ns3__GetMemberID *)ptr);
		break;
	case SOAP_TYPE___ns3__GetEncryptionKey:
		soap_serialize___ns3__GetEncryptionKey(soap, (const struct __ns3__GetEncryptionKey *)ptr);
		break;
	case SOAP_TYPE___ns2__GetTagID:
		soap_serialize___ns2__GetTagID(soap, (const struct __ns2__GetTagID *)ptr);
		break;
	case SOAP_TYPE___ns2__GetMemberID:
		soap_serialize___ns2__GetMemberID(soap, (const struct __ns2__GetMemberID *)ptr);
		break;
	case SOAP_TYPE___ns2__GetEncryptionKey:
		soap_serialize___ns2__GetEncryptionKey(soap, (const struct __ns2__GetEncryptionKey *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTagIDResponse:
		soap_serialize_PointerTo_ns1__GetTagIDResponse(soap, (_ns1__GetTagIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetTagID:
		soap_serialize_PointerTo_ns1__GetTagID(soap, (_ns1__GetTagID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMemberIDResponse:
		soap_serialize_PointerTo_ns1__GetMemberIDResponse(soap, (_ns1__GetMemberIDResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetMemberID:
		soap_serialize_PointerTo_ns1__GetMemberID(soap, (_ns1__GetMemberID *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKeyResponse:
		soap_serialize_PointerTo_ns1__GetEncryptionKeyResponse(soap, (_ns1__GetEncryptionKeyResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetEncryptionKey:
		soap_serialize_PointerTo_ns1__GetEncryptionKey(soap, (_ns1__GetEncryptionKey *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE__ns1__GetEncryptionKey:
		return (void*)soap_instantiate__ns1__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetEncryptionKeyResponse:
		return (void*)soap_instantiate__ns1__GetEncryptionKeyResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMemberID:
		return (void*)soap_instantiate__ns1__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetMemberIDResponse:
		return (void*)soap_instantiate__ns1__GetMemberIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTagID:
		return (void*)soap_instantiate__ns1__GetTagID(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetTagIDResponse:
		return (void*)soap_instantiate__ns1__GetTagIDResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetEncryptionKey:
		return (void*)soap_instantiate___ns2__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetMemberID:
		return (void*)soap_instantiate___ns2__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns2__GetTagID:
		return (void*)soap_instantiate___ns2__GetTagID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetEncryptionKey:
		return (void*)soap_instantiate___ns3__GetEncryptionKey(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetMemberID:
		return (void*)soap_instantiate___ns3__GetMemberID(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns3__GetTagID:
		return (void*)soap_instantiate___ns3__GetTagID(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE__ns1__GetEncryptionKey:
		if (p->size < 0)
			delete (_ns1__GetEncryptionKey*)p->ptr;
		else
			delete[] (_ns1__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetEncryptionKeyResponse:
		if (p->size < 0)
			delete (_ns1__GetEncryptionKeyResponse*)p->ptr;
		else
			delete[] (_ns1__GetEncryptionKeyResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetMemberID:
		if (p->size < 0)
			delete (_ns1__GetMemberID*)p->ptr;
		else
			delete[] (_ns1__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetMemberIDResponse:
		if (p->size < 0)
			delete (_ns1__GetMemberIDResponse*)p->ptr;
		else
			delete[] (_ns1__GetMemberIDResponse*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTagID:
		if (p->size < 0)
			delete (_ns1__GetTagID*)p->ptr;
		else
			delete[] (_ns1__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE__ns1__GetTagIDResponse:
		if (p->size < 0)
			delete (_ns1__GetTagIDResponse*)p->ptr;
		else
			delete[] (_ns1__GetTagIDResponse*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetEncryptionKey:
		if (p->size < 0)
			delete (struct __ns2__GetEncryptionKey*)p->ptr;
		else
			delete[] (struct __ns2__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetMemberID:
		if (p->size < 0)
			delete (struct __ns2__GetMemberID*)p->ptr;
		else
			delete[] (struct __ns2__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE___ns2__GetTagID:
		if (p->size < 0)
			delete (struct __ns2__GetTagID*)p->ptr;
		else
			delete[] (struct __ns2__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetEncryptionKey:
		if (p->size < 0)
			delete (struct __ns3__GetEncryptionKey*)p->ptr;
		else
			delete[] (struct __ns3__GetEncryptionKey*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetMemberID:
		if (p->size < 0)
			delete (struct __ns3__GetMemberID*)p->ptr;
		else
			delete[] (struct __ns3__GetMemberID*)p->ptr;
		break;
	case SOAP_TYPE___ns3__GetTagID:
		if (p->size < 0)
			delete (struct __ns3__GetTagID*)p->ptr;
		else
			delete[] (struct __ns3__GetTagID*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			delete (struct SOAP_ENV__Header*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Header*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			delete (struct SOAP_ENV__Code*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Code*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			delete (struct SOAP_ENV__Detail*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Detail*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			delete (struct SOAP_ENV__Reason*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Reason*)p->ptr;
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			delete (struct SOAP_ENV__Fault*)p->ptr;
		else
			delete[] (struct SOAP_ENV__Fault*)p->ptr;
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	return soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	return soap_inint(soap, tag, a, type, SOAP_TYPE_int);
}

void _ns1__GetTagIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetTagIDResponse::GetTagIDResult);
	/* transient soap skipped */
}

void _ns1__GetTagIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetTagIDResponse::GetTagIDResult);
	/* transient soap skipped */
}

int _ns1__GetTagIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTagIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTagIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTagIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTagIDResponse(struct soap *soap, const char *tag, int id, const _ns1__GetTagIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTagIDResponse), type))
		return soap->error;
	if (a->GetTagIDResult)
		soap_element_result(soap, "ns1:GetTagIDResult");
	if (soap_out_string(soap, "ns1:GetTagIDResult", -1, &(a->_ns1__GetTagIDResponse::GetTagIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetTagIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTagIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTagIDResponse * SOAP_FMAC4 soap_get__ns1__GetTagIDResponse(struct soap *soap, _ns1__GetTagIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTagIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetTagIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTagIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTagIDResponse * SOAP_FMAC4 soap_in__ns1__GetTagIDResponse(struct soap *soap, const char *tag, _ns1__GetTagIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetTagIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTagIDResponse, sizeof(_ns1__GetTagIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTagIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTagIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetTagIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTagIDResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:GetTagIDResult", &(a->_ns1__GetTagIDResponse::GetTagIDResult), "xsd:string"))
				{	soap_flag_GetTagIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetTagIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTagIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetTagIDResponse, 0, sizeof(_ns1__GetTagIDResponse), 0, soap_copy__ns1__GetTagIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTagIDResponse * SOAP_FMAC6 soap_new__ns1__GetTagIDResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTagIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTagIDResponse(struct soap *soap, _ns1__GetTagIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetTagIDResponse * SOAP_FMAC4 soap_instantiate__ns1__GetTagIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTagIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTagIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTagIDResponse;
		if (size)
			*size = sizeof(_ns1__GetTagIDResponse);
		((_ns1__GetTagIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTagIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetTagIDResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetTagIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTagIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTagIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTagIDResponse %p -> %p\n", q, p));
	*(_ns1__GetTagIDResponse*)p = *(_ns1__GetTagIDResponse*)q;
}

void _ns1__GetTagID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetTagID::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetTagID::WebPassword);
	/* transient soap skipped */
}

void _ns1__GetTagID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetTagID::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetTagID::WebPassword);
	/* transient soap skipped */
}

int _ns1__GetTagID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetTagID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetTagID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetTagID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetTagID(struct soap *soap, const char *tag, int id, const _ns1__GetTagID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetTagID), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetTagID::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetTagID::WebPassword), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetTagID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetTagID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetTagID * SOAP_FMAC4 soap_get__ns1__GetTagID(struct soap *soap, _ns1__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetTagID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetTagID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetTagID * SOAP_FMAC4 soap_in__ns1__GetTagID(struct soap *soap, const char *tag, _ns1__GetTagID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetTagID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetTagID, sizeof(_ns1__GetTagID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetTagID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetTagID *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetTagID::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetTagID::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetTagID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetTagID, 0, sizeof(_ns1__GetTagID), 0, soap_copy__ns1__GetTagID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetTagID * SOAP_FMAC6 soap_new__ns1__GetTagID(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetTagID(struct soap *soap, _ns1__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetTagID * SOAP_FMAC4 soap_instantiate__ns1__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetTagID;
		if (size)
			*size = sizeof(_ns1__GetTagID);
		((_ns1__GetTagID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetTagID);
		for (int i = 0; i < n; i++)
			((_ns1__GetTagID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetTagID %p -> %p\n", q, p));
	*(_ns1__GetTagID*)p = *(_ns1__GetTagID*)q;
}

void _ns1__GetMemberIDResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetMemberIDResponse::GetMemberIDResult);
	/* transient soap skipped */
}

void _ns1__GetMemberIDResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetMemberIDResponse::GetMemberIDResult);
	/* transient soap skipped */
}

int _ns1__GetMemberIDResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetMemberIDResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetMemberIDResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMemberIDResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMemberIDResponse(struct soap *soap, const char *tag, int id, const _ns1__GetMemberIDResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMemberIDResponse), type))
		return soap->error;
	if (a->GetMemberIDResult)
		soap_element_result(soap, "ns1:GetMemberIDResult");
	if (soap_out_string(soap, "ns1:GetMemberIDResult", -1, &(a->_ns1__GetMemberIDResponse::GetMemberIDResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMemberIDResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMemberIDResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMemberIDResponse * SOAP_FMAC4 soap_get__ns1__GetMemberIDResponse(struct soap *soap, _ns1__GetMemberIDResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMemberIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetMemberIDResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMemberIDResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMemberIDResponse * SOAP_FMAC4 soap_in__ns1__GetMemberIDResponse(struct soap *soap, const char *tag, _ns1__GetMemberIDResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMemberIDResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMemberIDResponse, sizeof(_ns1__GetMemberIDResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMemberIDResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMemberIDResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetMemberIDResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetMemberIDResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:GetMemberIDResult", &(a->_ns1__GetMemberIDResponse::GetMemberIDResult), "xsd:string"))
				{	soap_flag_GetMemberIDResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetMemberIDResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMemberIDResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMemberIDResponse, 0, sizeof(_ns1__GetMemberIDResponse), 0, soap_copy__ns1__GetMemberIDResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetMemberIDResponse * SOAP_FMAC6 soap_new__ns1__GetMemberIDResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetMemberIDResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetMemberIDResponse(struct soap *soap, _ns1__GetMemberIDResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetMemberIDResponse * SOAP_FMAC4 soap_instantiate__ns1__GetMemberIDResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMemberIDResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMemberIDResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetMemberIDResponse;
		if (size)
			*size = sizeof(_ns1__GetMemberIDResponse);
		((_ns1__GetMemberIDResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetMemberIDResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetMemberIDResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetMemberIDResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetMemberIDResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMemberIDResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMemberIDResponse %p -> %p\n", q, p));
	*(_ns1__GetMemberIDResponse*)p = *(_ns1__GetMemberIDResponse*)q;
}

void _ns1__GetMemberID::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetMemberID::NickName);
	soap_default_string(soap, &this->_ns1__GetMemberID::WebPassword);
	/* transient soap skipped */
}

void _ns1__GetMemberID::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetMemberID::NickName);
	soap_serialize_string(soap, &this->_ns1__GetMemberID::WebPassword);
	/* transient soap skipped */
}

int _ns1__GetMemberID::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetMemberID);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetMemberID::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetMemberID(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetMemberID(struct soap *soap, const char *tag, int id, const _ns1__GetMemberID *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetMemberID), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:NickName", -1, &(a->_ns1__GetMemberID::NickName), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetMemberID::WebPassword), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetMemberID::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetMemberID(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetMemberID * SOAP_FMAC4 soap_get__ns1__GetMemberID(struct soap *soap, _ns1__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetMemberID::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetMemberID(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetMemberID * SOAP_FMAC4 soap_in__ns1__GetMemberID(struct soap *soap, const char *tag, _ns1__GetMemberID *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetMemberID *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetMemberID, sizeof(_ns1__GetMemberID), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetMemberID)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetMemberID *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_NickName1 = 1, soap_flag_WebPassword1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_NickName1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:NickName", &(a->_ns1__GetMemberID::NickName), "xsd:string"))
				{	soap_flag_NickName1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetMemberID::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetMemberID *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetMemberID, 0, sizeof(_ns1__GetMemberID), 0, soap_copy__ns1__GetMemberID);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetMemberID * SOAP_FMAC6 soap_new__ns1__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetMemberID(struct soap *soap, _ns1__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetMemberID * SOAP_FMAC4 soap_instantiate__ns1__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetMemberID;
		if (size)
			*size = sizeof(_ns1__GetMemberID);
		((_ns1__GetMemberID*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetMemberID);
		for (int i = 0; i < n; i++)
			((_ns1__GetMemberID*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetMemberID %p -> %p\n", q, p));
	*(_ns1__GetMemberID*)p = *(_ns1__GetMemberID*)q;
}

void _ns1__GetEncryptionKeyResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetEncryptionKeyResponse::GetEncryptionKeyResult);
	/* transient soap skipped */
}

void _ns1__GetEncryptionKeyResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetEncryptionKeyResponse::GetEncryptionKeyResult);
	/* transient soap skipped */
}

int _ns1__GetEncryptionKeyResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEncryptionKeyResponse);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetEncryptionKeyResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEncryptionKeyResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEncryptionKeyResponse(struct soap *soap, const char *tag, int id, const _ns1__GetEncryptionKeyResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEncryptionKeyResponse), type))
		return soap->error;
	if (a->GetEncryptionKeyResult)
		soap_element_result(soap, "ns1:GetEncryptionKeyResult");
	if (soap_out_string(soap, "ns1:GetEncryptionKeyResult", -1, &(a->_ns1__GetEncryptionKeyResponse::GetEncryptionKeyResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEncryptionKeyResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEncryptionKeyResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKeyResponse * SOAP_FMAC4 soap_get__ns1__GetEncryptionKeyResponse(struct soap *soap, _ns1__GetEncryptionKeyResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEncryptionKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetEncryptionKeyResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEncryptionKeyResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKeyResponse * SOAP_FMAC4 soap_in__ns1__GetEncryptionKeyResponse(struct soap *soap, const char *tag, _ns1__GetEncryptionKeyResponse *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEncryptionKeyResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEncryptionKeyResponse, sizeof(_ns1__GetEncryptionKeyResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEncryptionKeyResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEncryptionKeyResponse *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_GetEncryptionKeyResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetEncryptionKeyResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:GetEncryptionKeyResult", &(a->_ns1__GetEncryptionKeyResponse::GetEncryptionKeyResult), "xsd:string"))
				{	soap_flag_GetEncryptionKeyResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns1:GetEncryptionKeyResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEncryptionKeyResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEncryptionKeyResponse, 0, sizeof(_ns1__GetEncryptionKeyResponse), 0, soap_copy__ns1__GetEncryptionKeyResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetEncryptionKeyResponse * SOAP_FMAC6 soap_new__ns1__GetEncryptionKeyResponse(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetEncryptionKeyResponse(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetEncryptionKeyResponse(struct soap *soap, _ns1__GetEncryptionKeyResponse *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetEncryptionKeyResponse * SOAP_FMAC4 soap_instantiate__ns1__GetEncryptionKeyResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEncryptionKeyResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEncryptionKeyResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetEncryptionKeyResponse;
		if (size)
			*size = sizeof(_ns1__GetEncryptionKeyResponse);
		((_ns1__GetEncryptionKeyResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetEncryptionKeyResponse[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEncryptionKeyResponse);
		for (int i = 0; i < n; i++)
			((_ns1__GetEncryptionKeyResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEncryptionKeyResponse*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEncryptionKeyResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEncryptionKeyResponse %p -> %p\n", q, p));
	*(_ns1__GetEncryptionKeyResponse*)p = *(_ns1__GetEncryptionKeyResponse*)q;
}

void _ns1__GetEncryptionKey::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_string(soap, &this->_ns1__GetEncryptionKey::WebMemberID);
	soap_default_string(soap, &this->_ns1__GetEncryptionKey::WebPassword);
	/* transient soap skipped */
}

void _ns1__GetEncryptionKey::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_string(soap, &this->_ns1__GetEncryptionKey::WebMemberID);
	soap_serialize_string(soap, &this->_ns1__GetEncryptionKey::WebPassword);
	/* transient soap skipped */
}

int _ns1__GetEncryptionKey::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__GetEncryptionKey);
	if (this->soap_out(soap, tag, id, type))
		return soap->error;
	return soap_putindependent(soap);
}

int _ns1__GetEncryptionKey::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetEncryptionKey(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetEncryptionKey(struct soap *soap, const char *tag, int id, const _ns1__GetEncryptionKey *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetEncryptionKey), type))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebMemberID", -1, &(a->_ns1__GetEncryptionKey::WebMemberID), ""))
		return soap->error;
	if (soap_out_string(soap, "ns1:WebPassword", -1, &(a->_ns1__GetEncryptionKey::WebPassword), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetEncryptionKey::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetEncryptionKey(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKey * SOAP_FMAC4 soap_get__ns1__GetEncryptionKey(struct soap *soap, _ns1__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void *_ns1__GetEncryptionKey::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__GetEncryptionKey(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKey * SOAP_FMAC4 soap_in__ns1__GetEncryptionKey(struct soap *soap, const char *tag, _ns1__GetEncryptionKey *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetEncryptionKey *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetEncryptionKey, sizeof(_ns1__GetEncryptionKey), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__GetEncryptionKey)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__GetEncryptionKey *)a->soap_in(soap, tag, type);
		}
	}
	short soap_flag_WebMemberID1 = 1, soap_flag_WebPassword1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_WebMemberID1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebMemberID", &(a->_ns1__GetEncryptionKey::WebMemberID), "xsd:string"))
				{	soap_flag_WebMemberID1--;
					continue;
				}
			if (soap_flag_WebPassword1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ns1:WebPassword", &(a->_ns1__GetEncryptionKey::WebPassword), "xsd:string"))
				{	soap_flag_WebPassword1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetEncryptionKey *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetEncryptionKey, 0, sizeof(_ns1__GetEncryptionKey), 0, soap_copy__ns1__GetEncryptionKey);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 _ns1__GetEncryptionKey * SOAP_FMAC6 soap_new__ns1__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate__ns1__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete__ns1__GetEncryptionKey(struct soap *soap, _ns1__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 _ns1__GetEncryptionKey * SOAP_FMAC4 soap_instantiate__ns1__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new _ns1__GetEncryptionKey;
		if (size)
			*size = sizeof(_ns1__GetEncryptionKey);
		((_ns1__GetEncryptionKey*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)new _ns1__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns1__GetEncryptionKey);
		for (int i = 0; i < n; i++)
			((_ns1__GetEncryptionKey*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns1__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__GetEncryptionKey %p -> %p\n", q, p));
	*(_ns1__GetEncryptionKey*)p = *(_ns1__GetEncryptionKey*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	short soap_flag_faultcode = 1, soap_flag_faultstring = 1, soap_flag_faultactor = 1, soap_flag_detail = 1, soap_flag_SOAP_ENV__Code = 1, soap_flag_SOAP_ENV__Reason = 1, soap_flag_SOAP_ENV__Node = 1, soap_flag_SOAP_ENV__Role = 1, soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Fault * SOAP_FMAC6 soap_new_SOAP_ENV__Fault(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault;
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Fault[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	short soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Reason * SOAP_FMAC6 soap_new_SOAP_ENV__Reason(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason;
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Reason[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	short soap_flag_fault = 1, soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Detail * SOAP_FMAC6 soap_new_SOAP_ENV__Detail(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail;
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Detail[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	short soap_flag_SOAP_ENV__Value = 1, soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Code * SOAP_FMAC6 soap_new_SOAP_ENV__Code(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Code;
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Code[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC5 struct SOAP_ENV__Header * SOAP_FMAC6 soap_new_SOAP_ENV__Header(struct soap *soap, int n)
{	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct SOAP_ENV__Header;
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)new struct SOAP_ENV__Header[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetTagID(struct soap *soap, struct __ns3__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTagID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetTagID(struct soap *soap, const struct __ns3__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTagID(soap, &a->ns1__GetTagID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetTagID(struct soap *soap, const struct __ns3__GetTagID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetTagID(struct soap *soap, const char *tag, int id, const struct __ns3__GetTagID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetTagID(soap, "ns1:GetTagID", -1, &a->ns1__GetTagID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetTagID * SOAP_FMAC4 soap_get___ns3__GetTagID(struct soap *soap, struct __ns3__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetTagID * SOAP_FMAC4 soap_in___ns3__GetTagID(struct soap *soap, const char *tag, struct __ns3__GetTagID *a, const char *type)
{
	short soap_flag_ns1__GetTagID = 1;
	short soap_flag;
	a = (struct __ns3__GetTagID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetTagID, sizeof(struct __ns3__GetTagID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetTagID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTagID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTagID(soap, "ns1:GetTagID", &a->ns1__GetTagID, ""))
				{	soap_flag_ns1__GetTagID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetTagID * SOAP_FMAC6 soap_new___ns3__GetTagID(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetTagID(struct soap *soap, struct __ns3__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetTagID * SOAP_FMAC4 soap_instantiate___ns3__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetTagID;
		if (size)
			*size = sizeof(struct __ns3__GetTagID);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetTagID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetTagID %p -> %p\n", q, p));
	*(struct __ns3__GetTagID*)p = *(struct __ns3__GetTagID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetMemberID(struct soap *soap, struct __ns3__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMemberID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetMemberID(struct soap *soap, const struct __ns3__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetMemberID(soap, &a->ns1__GetMemberID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetMemberID(struct soap *soap, const struct __ns3__GetMemberID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetMemberID(struct soap *soap, const char *tag, int id, const struct __ns3__GetMemberID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMemberID(soap, "ns1:GetMemberID", -1, &a->ns1__GetMemberID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetMemberID * SOAP_FMAC4 soap_get___ns3__GetMemberID(struct soap *soap, struct __ns3__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetMemberID * SOAP_FMAC4 soap_in___ns3__GetMemberID(struct soap *soap, const char *tag, struct __ns3__GetMemberID *a, const char *type)
{
	short soap_flag_ns1__GetMemberID = 1;
	short soap_flag;
	a = (struct __ns3__GetMemberID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetMemberID, sizeof(struct __ns3__GetMemberID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetMemberID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMemberID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMemberID(soap, "ns1:GetMemberID", &a->ns1__GetMemberID, ""))
				{	soap_flag_ns1__GetMemberID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetMemberID * SOAP_FMAC6 soap_new___ns3__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetMemberID(struct soap *soap, struct __ns3__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetMemberID * SOAP_FMAC4 soap_instantiate___ns3__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetMemberID;
		if (size)
			*size = sizeof(struct __ns3__GetMemberID);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetMemberID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetMemberID %p -> %p\n", q, p));
	*(struct __ns3__GetMemberID*)p = *(struct __ns3__GetMemberID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns3__GetEncryptionKey(struct soap *soap, struct __ns3__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEncryptionKey = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns3__GetEncryptionKey(struct soap *soap, const struct __ns3__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEncryptionKey(soap, &a->ns1__GetEncryptionKey);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns3__GetEncryptionKey(struct soap *soap, const struct __ns3__GetEncryptionKey *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns3__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__GetEncryptionKey(struct soap *soap, const char *tag, int id, const struct __ns3__GetEncryptionKey *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEncryptionKey(soap, "ns1:GetEncryptionKey", -1, &a->ns1__GetEncryptionKey, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns3__GetEncryptionKey * SOAP_FMAC4 soap_get___ns3__GetEncryptionKey(struct soap *soap, struct __ns3__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns3__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns3__GetEncryptionKey * SOAP_FMAC4 soap_in___ns3__GetEncryptionKey(struct soap *soap, const char *tag, struct __ns3__GetEncryptionKey *a, const char *type)
{
	short soap_flag_ns1__GetEncryptionKey = 1;
	short soap_flag;
	a = (struct __ns3__GetEncryptionKey *)soap_id_enter(soap, "", a, SOAP_TYPE___ns3__GetEncryptionKey, sizeof(struct __ns3__GetEncryptionKey), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns3__GetEncryptionKey(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEncryptionKey && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEncryptionKey(soap, "ns1:GetEncryptionKey", &a->ns1__GetEncryptionKey, ""))
				{	soap_flag_ns1__GetEncryptionKey--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns3__GetEncryptionKey * SOAP_FMAC6 soap_new___ns3__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate___ns3__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns3__GetEncryptionKey(struct soap *soap, struct __ns3__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns3__GetEncryptionKey * SOAP_FMAC4 soap_instantiate___ns3__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns3__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns3__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns3__GetEncryptionKey;
		if (size)
			*size = sizeof(struct __ns3__GetEncryptionKey);
	}
	else
	{	cp->ptr = (void*)new struct __ns3__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns3__GetEncryptionKey);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns3__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns3__GetEncryptionKey %p -> %p\n", q, p));
	*(struct __ns3__GetEncryptionKey*)p = *(struct __ns3__GetEncryptionKey*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetTagID(struct soap *soap, struct __ns2__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetTagID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetTagID(struct soap *soap, const struct __ns2__GetTagID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetTagID(soap, &a->ns1__GetTagID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetTagID(struct soap *soap, const struct __ns2__GetTagID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetTagID(struct soap *soap, const char *tag, int id, const struct __ns2__GetTagID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetTagID(soap, "ns1:GetTagID", -1, &a->ns1__GetTagID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetTagID * SOAP_FMAC4 soap_get___ns2__GetTagID(struct soap *soap, struct __ns2__GetTagID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetTagID * SOAP_FMAC4 soap_in___ns2__GetTagID(struct soap *soap, const char *tag, struct __ns2__GetTagID *a, const char *type)
{
	short soap_flag_ns1__GetTagID = 1;
	short soap_flag;
	a = (struct __ns2__GetTagID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetTagID, sizeof(struct __ns2__GetTagID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetTagID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetTagID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetTagID(soap, "ns1:GetTagID", &a->ns1__GetTagID, ""))
				{	soap_flag_ns1__GetTagID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetTagID * SOAP_FMAC6 soap_new___ns2__GetTagID(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetTagID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetTagID(struct soap *soap, struct __ns2__GetTagID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetTagID * SOAP_FMAC4 soap_instantiate___ns2__GetTagID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetTagID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetTagID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetTagID;
		if (size)
			*size = sizeof(struct __ns2__GetTagID);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetTagID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetTagID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetTagID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetTagID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetTagID %p -> %p\n", q, p));
	*(struct __ns2__GetTagID*)p = *(struct __ns2__GetTagID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetMemberID(struct soap *soap, struct __ns2__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetMemberID = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetMemberID(struct soap *soap, const struct __ns2__GetMemberID *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetMemberID(soap, &a->ns1__GetMemberID);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetMemberID(struct soap *soap, const struct __ns2__GetMemberID *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetMemberID(struct soap *soap, const char *tag, int id, const struct __ns2__GetMemberID *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetMemberID(soap, "ns1:GetMemberID", -1, &a->ns1__GetMemberID, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetMemberID * SOAP_FMAC4 soap_get___ns2__GetMemberID(struct soap *soap, struct __ns2__GetMemberID *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetMemberID * SOAP_FMAC4 soap_in___ns2__GetMemberID(struct soap *soap, const char *tag, struct __ns2__GetMemberID *a, const char *type)
{
	short soap_flag_ns1__GetMemberID = 1;
	short soap_flag;
	a = (struct __ns2__GetMemberID *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetMemberID, sizeof(struct __ns2__GetMemberID), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetMemberID(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetMemberID && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetMemberID(soap, "ns1:GetMemberID", &a->ns1__GetMemberID, ""))
				{	soap_flag_ns1__GetMemberID--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetMemberID * SOAP_FMAC6 soap_new___ns2__GetMemberID(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetMemberID(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetMemberID(struct soap *soap, struct __ns2__GetMemberID *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetMemberID * SOAP_FMAC4 soap_instantiate___ns2__GetMemberID(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetMemberID(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetMemberID, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetMemberID;
		if (size)
			*size = sizeof(struct __ns2__GetMemberID);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetMemberID[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetMemberID);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetMemberID*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetMemberID(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetMemberID %p -> %p\n", q, p));
	*(struct __ns2__GetMemberID*)p = *(struct __ns2__GetMemberID*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns2__GetEncryptionKey(struct soap *soap, struct __ns2__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetEncryptionKey = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns2__GetEncryptionKey(struct soap *soap, const struct __ns2__GetEncryptionKey *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns1__GetEncryptionKey(soap, &a->ns1__GetEncryptionKey);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns2__GetEncryptionKey(struct soap *soap, const struct __ns2__GetEncryptionKey *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns2__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__GetEncryptionKey(struct soap *soap, const char *tag, int id, const struct __ns2__GetEncryptionKey *a, const char *type)
{
	if (soap_out_PointerTo_ns1__GetEncryptionKey(soap, "ns1:GetEncryptionKey", -1, &a->ns1__GetEncryptionKey, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns2__GetEncryptionKey * SOAP_FMAC4 soap_get___ns2__GetEncryptionKey(struct soap *soap, struct __ns2__GetEncryptionKey *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns2__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct __ns2__GetEncryptionKey * SOAP_FMAC4 soap_in___ns2__GetEncryptionKey(struct soap *soap, const char *tag, struct __ns2__GetEncryptionKey *a, const char *type)
{
	short soap_flag_ns1__GetEncryptionKey = 1;
	short soap_flag;
	a = (struct __ns2__GetEncryptionKey *)soap_id_enter(soap, "", a, SOAP_TYPE___ns2__GetEncryptionKey, sizeof(struct __ns2__GetEncryptionKey), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns2__GetEncryptionKey(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetEncryptionKey && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns1__GetEncryptionKey(soap, "ns1:GetEncryptionKey", &a->ns1__GetEncryptionKey, ""))
				{	soap_flag_ns1__GetEncryptionKey--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC5 struct __ns2__GetEncryptionKey * SOAP_FMAC6 soap_new___ns2__GetEncryptionKey(struct soap *soap, int n)
{	return soap_instantiate___ns2__GetEncryptionKey(soap, n, NULL, NULL, NULL);
}

SOAP_FMAC5 void SOAP_FMAC6 soap_delete___ns2__GetEncryptionKey(struct soap *soap, struct __ns2__GetEncryptionKey *p)
{	soap_delete(soap, p);
}

SOAP_FMAC3 struct __ns2__GetEncryptionKey * SOAP_FMAC4 soap_instantiate___ns2__GetEncryptionKey(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns2__GetEncryptionKey(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns2__GetEncryptionKey, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)new struct __ns2__GetEncryptionKey;
		if (size)
			*size = sizeof(struct __ns2__GetEncryptionKey);
	}
	else
	{	cp->ptr = (void*)new struct __ns2__GetEncryptionKey[n];
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns2__GetEncryptionKey);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns2__GetEncryptionKey*)cp->ptr;
}
SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__GetEncryptionKey(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns2__GetEncryptionKey %p -> %p\n", q, p));
	*(struct __ns2__GetEncryptionKey*)p = *(struct __ns2__GetEncryptionKey*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTagIDResponse(struct soap *soap, _ns1__GetTagIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTagIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTagIDResponse(struct soap *soap, _ns1__GetTagIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTagIDResponse);
	if (soap_out_PointerTo_ns1__GetTagIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTagIDResponse(struct soap *soap, const char *tag, int id, _ns1__GetTagIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTagIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTagIDResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTagIDResponse(struct soap *soap, _ns1__GetTagIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTagIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetTagIDResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTagIDResponse(struct soap *soap, const char *tag, _ns1__GetTagIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTagIDResponse **)soap_malloc(soap, sizeof(_ns1__GetTagIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTagIDResponse *)soap_instantiate__ns1__GetTagIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetTagIDResponse ** p = (_ns1__GetTagIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTagIDResponse, sizeof(_ns1__GetTagIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetTagID(struct soap *soap, _ns1__GetTagID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetTagID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetTagID(struct soap *soap, _ns1__GetTagID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetTagID);
	if (soap_out_PointerTo_ns1__GetTagID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetTagID(struct soap *soap, const char *tag, int id, _ns1__GetTagID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetTagID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetTagID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetTagID(struct soap *soap, _ns1__GetTagID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetTagID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetTagID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetTagID(struct soap *soap, const char *tag, _ns1__GetTagID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetTagID **)soap_malloc(soap, sizeof(_ns1__GetTagID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetTagID *)soap_instantiate__ns1__GetTagID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetTagID ** p = (_ns1__GetTagID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetTagID, sizeof(_ns1__GetTagID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMemberIDResponse(struct soap *soap, _ns1__GetMemberIDResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMemberIDResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMemberIDResponse(struct soap *soap, _ns1__GetMemberIDResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetMemberIDResponse);
	if (soap_out_PointerTo_ns1__GetMemberIDResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMemberIDResponse(struct soap *soap, const char *tag, int id, _ns1__GetMemberIDResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMemberIDResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetMemberIDResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMemberIDResponse(struct soap *soap, _ns1__GetMemberIDResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMemberIDResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetMemberIDResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMemberIDResponse(struct soap *soap, const char *tag, _ns1__GetMemberIDResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMemberIDResponse **)soap_malloc(soap, sizeof(_ns1__GetMemberIDResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMemberIDResponse *)soap_instantiate__ns1__GetMemberIDResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetMemberIDResponse ** p = (_ns1__GetMemberIDResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMemberIDResponse, sizeof(_ns1__GetMemberIDResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetMemberID(struct soap *soap, _ns1__GetMemberID *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetMemberID))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetMemberID(struct soap *soap, _ns1__GetMemberID *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetMemberID);
	if (soap_out_PointerTo_ns1__GetMemberID(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetMemberID(struct soap *soap, const char *tag, int id, _ns1__GetMemberID *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetMemberID);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetMemberID ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetMemberID(struct soap *soap, _ns1__GetMemberID **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetMemberID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetMemberID ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetMemberID(struct soap *soap, const char *tag, _ns1__GetMemberID **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetMemberID **)soap_malloc(soap, sizeof(_ns1__GetMemberID *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetMemberID *)soap_instantiate__ns1__GetMemberID(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetMemberID ** p = (_ns1__GetMemberID **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetMemberID, sizeof(_ns1__GetMemberID), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEncryptionKeyResponse(struct soap *soap, _ns1__GetEncryptionKeyResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEncryptionKeyResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEncryptionKeyResponse(struct soap *soap, _ns1__GetEncryptionKeyResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEncryptionKeyResponse);
	if (soap_out_PointerTo_ns1__GetEncryptionKeyResponse(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEncryptionKeyResponse(struct soap *soap, const char *tag, int id, _ns1__GetEncryptionKeyResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEncryptionKeyResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKeyResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEncryptionKeyResponse(struct soap *soap, _ns1__GetEncryptionKeyResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEncryptionKeyResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetEncryptionKeyResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEncryptionKeyResponse(struct soap *soap, const char *tag, _ns1__GetEncryptionKeyResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEncryptionKeyResponse **)soap_malloc(soap, sizeof(_ns1__GetEncryptionKeyResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEncryptionKeyResponse *)soap_instantiate__ns1__GetEncryptionKeyResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEncryptionKeyResponse ** p = (_ns1__GetEncryptionKeyResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEncryptionKeyResponse, sizeof(_ns1__GetEncryptionKeyResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetEncryptionKey(struct soap *soap, _ns1__GetEncryptionKey *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetEncryptionKey))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetEncryptionKey(struct soap *soap, _ns1__GetEncryptionKey *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns1__GetEncryptionKey);
	if (soap_out_PointerTo_ns1__GetEncryptionKey(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetEncryptionKey(struct soap *soap, const char *tag, int id, _ns1__GetEncryptionKey *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetEncryptionKey);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns1__GetEncryptionKey ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetEncryptionKey(struct soap *soap, _ns1__GetEncryptionKey **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetEncryptionKey(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 _ns1__GetEncryptionKey ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetEncryptionKey(struct soap *soap, const char *tag, _ns1__GetEncryptionKey **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetEncryptionKey **)soap_malloc(soap, sizeof(_ns1__GetEncryptionKey *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetEncryptionKey *)soap_instantiate__ns1__GetEncryptionKey(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns1__GetEncryptionKey ** p = (_ns1__GetEncryptionKey **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetEncryptionKey, sizeof(_ns1__GetEncryptionKey), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default__QName(struct soap *soap, char **a)
{	soap_default_string(soap, a);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{	soap_serialize_string(soap, a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag, id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	return soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
}

/* End of soapC.cpp */
