// This class was generated by 172 StubGenerator.
// Contents subject to change without notice.
// @generated

package n2f.blogger.webservice.stub;

import javax.xml.rpc.JAXRPCException;
import javax.xml.namespace.QName;
import javax.microedition.xml.rpc.Operation;
import javax.microedition.xml.rpc.Type;
import javax.microedition.xml.rpc.ComplexType;
import javax.microedition.xml.rpc.Element;

public class MemberServicesSoap_Stub implements n2f.blogger.webservice.stub.MemberServicesSoap, javax.xml.rpc.Stub {
	private String[] _propertyNames;
	private Object[] _propertyValues;

	public MemberServicesSoap_Stub() {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
		_propertyValues = new Object[] {"http://services.next2friends.com/n2fwebservices/memberservices.asmx"};
	}

	public void _setProperty(String name, Object value) {
		int size = _propertyNames.length;
		for (int i = 0; i < size; ++i) {
			if (_propertyNames[i].equals(name)) {
				_propertyValues[i] = value;
				return;
			}
		}
		// Need to expand our array for a new property
		String[] newPropNames = new String[size + 1];
		System.arraycopy(_propertyNames, 0, newPropNames, 0, size);
		_propertyNames = newPropNames;
		Object[] newPropValues = new Object[size + 1];
		System.arraycopy(_propertyValues, 0, newPropValues, 0, size);
		_propertyValues = newPropValues;

		_propertyNames[size] = name;
		_propertyValues[size] = value;
	}

	public Object _getProperty(String name) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			if (_propertyNames[i].equals(name)) {
				return _propertyValues[i];
			}
		}
		if (ENDPOINT_ADDRESS_PROPERTY.equals(name) || USERNAME_PROPERTY.equals(name) || PASSWORD_PROPERTY.equals(name)) {
			return null;
		}
		if (SESSION_MAINTAIN_PROPERTY.equals(name)) {
			return new java.lang.Boolean(false);
		}
		throw new JAXRPCException("Stub does not recognize property: "+name);
	}

	protected void _prepOperation(Operation op) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			op.setProperty(_propertyNames[i], _propertyValues[i].toString());
		}
	}

	// 
	//  Begin user methods
	// 

	public java.lang.String getEncryptionKey(java.lang.String webMemberID, java.lang.String webPassword) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[2];
		inputObject[0] = webMemberID;
		inputObject[1] = webPassword;

		Operation op = Operation.newInstance(_qname_GetEncryptionKey, _type_GetEncryptionKey, _type_GetEncryptionKeyResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "http://tempuri.org/GetEncryptionKey");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		java.lang.String result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object getEncryptionKeyResultObj = ((Object[])resultObj)[0];
		result = (java.lang.String)getEncryptionKeyResultObj;
		return result;
	}

	public java.lang.String getMemberID(java.lang.String nickName, java.lang.String webPassword) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[2];
		inputObject[0] = nickName;
		inputObject[1] = webPassword;

		Operation op = Operation.newInstance(_qname_GetMemberID, _type_GetMemberID, _type_GetMemberIDResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "http://tempuri.org/GetMemberID");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		java.lang.String result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object getMemberIDResultObj = ((Object[])resultObj)[0];
		result = (java.lang.String)getMemberIDResultObj;
		return result;
	}

	public java.lang.String getTagID(java.lang.String webMemberID, java.lang.String webPassword) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[2];
		inputObject[0] = webMemberID;
		inputObject[1] = webPassword;

		Operation op = Operation.newInstance(_qname_GetTagID, _type_GetTagID, _type_GetTagIDResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "http://tempuri.org/GetTagID");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		java.lang.String result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object getTagIDResultObj = ((Object[])resultObj)[0];
		result = (java.lang.String)getTagIDResultObj;
		return result;
	}
	// 
	//  End user methods
	// 

	protected static final QName _qname_GetEncryptionKey = new QName("http://tempuri.org/", "GetEncryptionKey");
	protected static final QName _qname_GetEncryptionKeyResponse = new QName("http://tempuri.org/", "GetEncryptionKeyResponse");
	protected static final QName _qname_GetEncryptionKeyResult = new QName("http://tempuri.org/", "GetEncryptionKeyResult");
	protected static final QName _qname_GetMemberID = new QName("http://tempuri.org/", "GetMemberID");
	protected static final QName _qname_GetMemberIDResponse = new QName("http://tempuri.org/", "GetMemberIDResponse");
	protected static final QName _qname_GetMemberIDResult = new QName("http://tempuri.org/", "GetMemberIDResult");
	protected static final QName _qname_GetTagID = new QName("http://tempuri.org/", "GetTagID");
	protected static final QName _qname_GetTagIDResponse = new QName("http://tempuri.org/", "GetTagIDResponse");
	protected static final QName _qname_GetTagIDResult = new QName("http://tempuri.org/", "GetTagIDResult");
	protected static final QName _qname_NickName = new QName("http://tempuri.org/", "NickName");
	protected static final QName _qname_WebMemberID = new QName("http://tempuri.org/", "WebMemberID");
	protected static final QName _qname_WebPassword = new QName("http://tempuri.org/", "WebPassword");
	protected static final Element _type_GetEncryptionKey;
	protected static final Element _type_GetEncryptionKeyResponse;
	protected static final Element _type_GetMemberID;
	protected static final Element _type_GetMemberIDResponse;
	protected static final Element _type_GetTagID;
	protected static final Element _type_GetTagIDResponse;
	static {
		// Create all of the Type's that this stub uses, once.
		Element _type_WebMemberID;
		_type_WebMemberID = new Element(_qname_WebMemberID, Type.STRING, 0, 1, false);
		Element _type_WebPassword;
		_type_WebPassword = new Element(_qname_WebPassword, Type.STRING, 0, 1, false);
		ComplexType _complexType_getEncryptionKey;
		_complexType_getEncryptionKey = new ComplexType();
		_complexType_getEncryptionKey.elements = new Element[2];
		_complexType_getEncryptionKey.elements[0] = _type_WebMemberID;
		_complexType_getEncryptionKey.elements[1] = _type_WebPassword;
		_type_GetEncryptionKey = new Element(_qname_GetEncryptionKey, _complexType_getEncryptionKey);
		Element _type_GetEncryptionKeyResult;
		_type_GetEncryptionKeyResult = new Element(_qname_GetEncryptionKeyResult, Type.STRING, 0, 1, false);
		ComplexType _complexType_getEncryptionKeyResponse;
		_complexType_getEncryptionKeyResponse = new ComplexType();
		_complexType_getEncryptionKeyResponse.elements = new Element[1];
		_complexType_getEncryptionKeyResponse.elements[0] = _type_GetEncryptionKeyResult;
		_type_GetEncryptionKeyResponse = new Element(_qname_GetEncryptionKeyResponse, _complexType_getEncryptionKeyResponse);
		Element _type_NickName;
		_type_NickName = new Element(_qname_NickName, Type.STRING, 0, 1, false);
		ComplexType _complexType_getMemberID;
		_complexType_getMemberID = new ComplexType();
		_complexType_getMemberID.elements = new Element[2];
		_complexType_getMemberID.elements[0] = _type_NickName;
		_complexType_getMemberID.elements[1] = _type_WebPassword;
		_type_GetMemberID = new Element(_qname_GetMemberID, _complexType_getMemberID);
		Element _type_GetMemberIDResult;
		_type_GetMemberIDResult = new Element(_qname_GetMemberIDResult, Type.STRING, 0, 1, false);
		ComplexType _complexType_getMemberIDResponse;
		_complexType_getMemberIDResponse = new ComplexType();
		_complexType_getMemberIDResponse.elements = new Element[1];
		_complexType_getMemberIDResponse.elements[0] = _type_GetMemberIDResult;
		_type_GetMemberIDResponse = new Element(_qname_GetMemberIDResponse, _complexType_getMemberIDResponse);
		_type_GetTagID = new Element(_qname_GetTagID, _complexType_getEncryptionKey);
		Element _type_GetTagIDResult;
		_type_GetTagIDResult = new Element(_qname_GetTagIDResult, Type.STRING, 0, 1, false);
		ComplexType _complexType_getTagIDResponse;
		_complexType_getTagIDResponse = new ComplexType();
		_complexType_getTagIDResponse.elements = new Element[1];
		_complexType_getTagIDResponse.elements[0] = _type_GetTagIDResult;
		_type_GetTagIDResponse = new Element(_qname_GetTagIDResponse, _complexType_getTagIDResponse);
	}

}
