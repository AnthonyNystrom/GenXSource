// This class was generated by 172 StubGenerator.
// Contents subject to change without notice.
// @generated

package n2f.tag.webservice.stub;

import javax.xml.rpc.JAXRPCException;
import javax.xml.namespace.QName;
import javax.microedition.xml.rpc.Operation;
import javax.microedition.xml.rpc.Type;
import javax.microedition.xml.rpc.ComplexType;
import javax.microedition.xml.rpc.Element;

public class EditBlockListSoap_Stub implements n2f.tag.webservice.stub.EditBlockListSoap, javax.xml.rpc.Stub {
	private String[] _propertyNames;
	private Object[] _propertyValues;

	public EditBlockListSoap_Stub() {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
		_propertyValues = new Object[] {"http://services.next2friends.com/n2fwebservices/EditBlockList.asmx"};
	}

	public void _setProperty(String name, Object value) {
		int size = _propertyNames.length;
		for (int i = 0; i < size; ++i) {
			if (_propertyNames[i].equals(name)) {
				_propertyValues[i] = value;
				return;
			}
		}
		// Need to expand our array for a new property
		String[] newPropNames = new String[size + 1];
		System.arraycopy(_propertyNames, 0, newPropNames, 0, size);
		_propertyNames = newPropNames;
		Object[] newPropValues = new Object[size + 1];
		System.arraycopy(_propertyValues, 0, newPropValues, 0, size);
		_propertyValues = newPropValues;

		_propertyNames[size] = name;
		_propertyValues[size] = value;
	}

	public Object _getProperty(String name) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			if (_propertyNames[i].equals(name)) {
				return _propertyValues[i];
			}
		}
		if (ENDPOINT_ADDRESS_PROPERTY.equals(name) || USERNAME_PROPERTY.equals(name) || PASSWORD_PROPERTY.equals(name)) {
			return null;
		}
		if (SESSION_MAINTAIN_PROPERTY.equals(name)) {
			return new java.lang.Boolean(false);
		}
		throw new JAXRPCException("Stub does not recognize property: "+name);
	}

	protected void _prepOperation(Operation op) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			op.setProperty(_propertyNames[i], _propertyValues[i].toString());
		}
	}

	// 
	//  Begin user methods
	// 

	public n2f.tag.webservice.stub.ArrayOfDeviceBlockItem getBlockList(java.lang.String webMemberID, java.lang.String webPassword) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[2];
		inputObject[0] = webMemberID;
		inputObject[1] = webPassword;

		Operation op = Operation.newInstance(_qname_GetBlockList, _type_GetBlockList, _type_GetBlockListResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "http://tempuri.org/GetBlockList");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		n2f.tag.webservice.stub.ArrayOfDeviceBlockItem result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object[] getBlockListResultObj = (Object[]) ((Object[])resultObj)[0];
		if (getBlockListResultObj == null) {
			result = null;
		} else {
			result = new n2f.tag.webservice.stub.ArrayOfDeviceBlockItem();
			n2f.tag.webservice.stub.DeviceBlockItem[] deviceBlockItemArray;
			Object[] deviceBlockItemObj = (Object[]) getBlockListResultObj[0];
			if (deviceBlockItemObj == null) {
				deviceBlockItemArray = null;
			} else {
				int deviceBlockItemArraySize = deviceBlockItemObj.length;
				deviceBlockItemArray = new n2f.tag.webservice.stub.DeviceBlockItem[deviceBlockItemArraySize];
				for (int deviceBlockItemArrayIndex = 0; 
					deviceBlockItemArrayIndex < deviceBlockItemArraySize; 
					++deviceBlockItemArrayIndex) {
					if (deviceBlockItemObj[deviceBlockItemArrayIndex] == null) {
						deviceBlockItemArray[deviceBlockItemArrayIndex] = null;
					} else {
						deviceBlockItemArray[deviceBlockItemArrayIndex] = new n2f.tag.webservice.stub.DeviceBlockItem();
						java.lang.String string;
						Object deviceTagIDObj = ((Object[])deviceBlockItemObj[deviceBlockItemArrayIndex])[0];
						string = (java.lang.String)deviceTagIDObj;
						deviceBlockItemArray[deviceBlockItemArrayIndex].setDeviceTagID(string);
						java.lang.String string2;
						Object MACAddressObj = ((Object[])deviceBlockItemObj[deviceBlockItemArrayIndex])[1];
						string2 = (java.lang.String)MACAddressObj;
						deviceBlockItemArray[deviceBlockItemArrayIndex].setMACAddress(string2);
					}
				}
			}
			result.setDeviceBlockItem(deviceBlockItemArray);
		}
		return result;
	}
	// 
	//  End user methods
	// 

	protected static final QName _qname_DeviceBlockItem = new QName("http://tempuri.org/", "DeviceBlockItem");
	protected static final QName _qname_DeviceTagID = new QName("http://tempuri.org/", "DeviceTagID");
	protected static final QName _qname_GetBlockList = new QName("http://tempuri.org/", "GetBlockList");
	protected static final QName _qname_GetBlockListResponse = new QName("http://tempuri.org/", "GetBlockListResponse");
	protected static final QName _qname_GetBlockListResult = new QName("http://tempuri.org/", "GetBlockListResult");
	protected static final QName _qname_MACAddress = new QName("http://tempuri.org/", "MACAddress");
	protected static final QName _qname_WebMemberID = new QName("http://tempuri.org/", "WebMemberID");
	protected static final QName _qname_WebPassword = new QName("http://tempuri.org/", "WebPassword");
	protected static final Element _type_GetBlockList;
	protected static final Element _type_GetBlockListResponse;
	static {
		// Create all of the Type's that this stub uses, once.
		Element _type_WebMemberID;
		_type_WebMemberID = new Element(_qname_WebMemberID, Type.STRING, 0, 1, false);
		Element _type_WebPassword;
		_type_WebPassword = new Element(_qname_WebPassword, Type.STRING, 0, 1, false);
		ComplexType _complexType_getBlockList;
		_complexType_getBlockList = new ComplexType();
		_complexType_getBlockList.elements = new Element[2];
		_complexType_getBlockList.elements[0] = _type_WebMemberID;
		_complexType_getBlockList.elements[1] = _type_WebPassword;
		_type_GetBlockList = new Element(_qname_GetBlockList, _complexType_getBlockList);
		Element _type_DeviceTagID;
		_type_DeviceTagID = new Element(_qname_DeviceTagID, Type.STRING, 0, 1, false);
		Element _type_MACAddress;
		_type_MACAddress = new Element(_qname_MACAddress, Type.STRING, 0, 1, false);
		ComplexType _complexType_deviceBlockItem;
		_complexType_deviceBlockItem = new ComplexType();
		_complexType_deviceBlockItem.elements = new Element[2];
		_complexType_deviceBlockItem.elements[0] = _type_DeviceTagID;
		_complexType_deviceBlockItem.elements[1] = _type_MACAddress;
		Element _type_DeviceBlockItem;
		_type_DeviceBlockItem = new Element(_qname_DeviceBlockItem, _complexType_deviceBlockItem, 0, -1, true);
		ComplexType _complexType_arrayOfDeviceBlockItem;
		_complexType_arrayOfDeviceBlockItem = new ComplexType();
		_complexType_arrayOfDeviceBlockItem.elements = new Element[1];
		_complexType_arrayOfDeviceBlockItem.elements[0] = _type_DeviceBlockItem;
		Element _type_GetBlockListResult;
		_type_GetBlockListResult = new Element(_qname_GetBlockListResult, _complexType_arrayOfDeviceBlockItem, 0, 1, false);
		ComplexType _complexType_getBlockListResponse;
		_complexType_getBlockListResponse = new ComplexType();
		_complexType_getBlockListResponse.elements = new Element[1];
		_complexType_getBlockListResponse.elements[0] = _type_GetBlockListResult;
		_type_GetBlockListResponse = new Element(_qname_GetBlockListResponse, _complexType_getBlockListResponse);
	}

}
