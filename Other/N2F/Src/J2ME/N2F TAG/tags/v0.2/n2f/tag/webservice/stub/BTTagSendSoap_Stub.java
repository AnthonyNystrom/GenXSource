// This class was generated by 172 StubGenerator.
// Contents subject to change without notice.
// @generated

package n2f.tag.webservice.stub;

import javax.xml.rpc.JAXRPCException;
import javax.xml.namespace.QName;
import javax.microedition.xml.rpc.Operation;
import javax.microedition.xml.rpc.Type;
import javax.microedition.xml.rpc.ComplexType;
import javax.microedition.xml.rpc.Element;

public class BTTagSendSoap_Stub implements n2f.tag.webservice.stub.BTTagSendSoap, javax.xml.rpc.Stub {
	private String[] _propertyNames;
	private Object[] _propertyValues;

	public BTTagSendSoap_Stub() {
		_propertyNames = new String[] {ENDPOINT_ADDRESS_PROPERTY};
		_propertyValues = new Object[] {"http://services.next2friends.com/n2fwebservices/BTTagSend.asmx"};
	}

	public void _setProperty(String name, Object value) {
		int size = _propertyNames.length;
		for (int i = 0; i < size; ++i) {
			if (_propertyNames[i].equals(name)) {
				_propertyValues[i] = value;
				return;
			}
		}
		// Need to expand our array for a new property
		String[] newPropNames = new String[size + 1];
		System.arraycopy(_propertyNames, 0, newPropNames, 0, size);
		_propertyNames = newPropNames;
		Object[] newPropValues = new Object[size + 1];
		System.arraycopy(_propertyValues, 0, newPropValues, 0, size);
		_propertyValues = newPropValues;

		_propertyNames[size] = name;
		_propertyValues[size] = value;
	}

	public Object _getProperty(String name) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			if (_propertyNames[i].equals(name)) {
				return _propertyValues[i];
			}
		}
		if (ENDPOINT_ADDRESS_PROPERTY.equals(name) || USERNAME_PROPERTY.equals(name) || PASSWORD_PROPERTY.equals(name)) {
			return null;
		}
		if (SESSION_MAINTAIN_PROPERTY.equals(name)) {
			return new java.lang.Boolean(false);
		}
		throw new JAXRPCException("Stub does not recognize property: "+name);
	}

	protected void _prepOperation(Operation op) {
		for (int i = 0; i < _propertyNames.length; ++i) {
			op.setProperty(_propertyNames[i], _propertyValues[i].toString());
		}
	}

	// 
	//  Begin user methods
	// 

	public n2f.tag.webservice.stub.ArrayOfBTTagConfirmation uploadBTTags(java.lang.String webMemberID, java.lang.String webPassword, n2f.tag.webservice.stub.BTTagUpdate BTTags) throws java.rmi.RemoteException {
		// Copy the incoming values into an Object array if needed.
		Object[] inputObject = new Object[3];
		inputObject[0] = webMemberID;
		inputObject[1] = webPassword;
		Object[] BTTagUpdateObject;
		if (BTTags == null) {
			BTTagUpdateObject = null;
		} else {
			Object[] arrayOfStringObject;
			if (BTTags.getTagValidationString() == null) {
				arrayOfStringObject = null;
			} else {
				arrayOfStringObject = new Object[1];
				arrayOfStringObject[0] = BTTags.getTagValidationString().getString();
			}
			Object[] arrayOfStringObject2;
			if (BTTags.getDeviceTagID() == null) {
				arrayOfStringObject2 = null;
			} else {
				arrayOfStringObject2 = new Object[1];
				arrayOfStringObject2[0] = BTTags.getDeviceTagID().getString();
			}
			BTTagUpdateObject = new Object[2];
			BTTagUpdateObject[0] = arrayOfStringObject;
			BTTagUpdateObject[1] = arrayOfStringObject2;
		}
		inputObject[2] = BTTagUpdateObject;

		Operation op = Operation.newInstance(_qname_UploadBTTags, _type_UploadBTTags, _type_UploadBTTagsResponse);
		_prepOperation(op);
		op.setProperty(Operation.SOAPACTION_URI_PROPERTY, "http://tempuri.org/UploadBTTags");
		Object resultObj;
		try {
			resultObj = op.invoke(inputObject);
		} catch (JAXRPCException e) {
			Throwable cause = e.getLinkedCause();
			if (cause instanceof java.rmi.RemoteException) {
				throw (java.rmi.RemoteException) cause;
			}
			throw e;
		}
		n2f.tag.webservice.stub.ArrayOfBTTagConfirmation result;
		// Convert the result into the right Java type.
		// Unwrapped return value
		Object[] uploadBTTagsResultObj = (Object[]) ((Object[])resultObj)[0];
		if (uploadBTTagsResultObj == null) {
			result = null;
		} else {
			result = new n2f.tag.webservice.stub.ArrayOfBTTagConfirmation();
			n2f.tag.webservice.stub.BTTagConfirmation[] BTTagConfirmationArray;
			Object[] BTTagConfirmationObj = (Object[]) uploadBTTagsResultObj[0];
			if (BTTagConfirmationObj == null) {
				BTTagConfirmationArray = null;
			} else {
				int BTTagConfirmationArraySize = BTTagConfirmationObj.length;
				BTTagConfirmationArray = new n2f.tag.webservice.stub.BTTagConfirmation[BTTagConfirmationArraySize];
				for (int BTTagConfirmationArrayIndex = 0; 
					BTTagConfirmationArrayIndex < BTTagConfirmationArraySize; 
					++BTTagConfirmationArrayIndex) {
					if (BTTagConfirmationObj[BTTagConfirmationArrayIndex] == null) {
						BTTagConfirmationArray[BTTagConfirmationArrayIndex] = null;
					} else {
						BTTagConfirmationArray[BTTagConfirmationArrayIndex] = new n2f.tag.webservice.stub.BTTagConfirmation();
						java.lang.String string;
						Object webMemberIDObj = ((Object[])BTTagConfirmationObj[BTTagConfirmationArrayIndex])[0];
						string = (java.lang.String)webMemberIDObj;
						BTTagConfirmationArray[BTTagConfirmationArrayIndex].setWebMemberID(string);
						boolean a_boolean;
						Object confirmedByServerObj = ((Object[])BTTagConfirmationObj[BTTagConfirmationArrayIndex])[1];
						a_boolean = ((java.lang.Boolean)confirmedByServerObj).booleanValue();
						BTTagConfirmationArray[BTTagConfirmationArrayIndex].setConfirmedByServer(a_boolean);
					}
				}
			}
			result.setBTTagConfirmation(BTTagConfirmationArray);
		}
		return result;
	}
	// 
	//  End user methods
	// 

	protected static final QName _qname_BTTagConfirmation = new QName("http://tempuri.org/", "BTTagConfirmation");
	protected static final QName _qname_BTTags = new QName("http://tempuri.org/", "BTTags");
	protected static final QName _qname_ConfirmedByServer = new QName("http://tempuri.org/", "ConfirmedByServer");
	protected static final QName _qname_DeviceTagID = new QName("http://tempuri.org/", "DeviceTagID");
	protected static final QName _qname_TagValidationString = new QName("http://tempuri.org/", "TagValidationString");
	protected static final QName _qname_UploadBTTags = new QName("http://tempuri.org/", "UploadBTTags");
	protected static final QName _qname_UploadBTTagsResponse = new QName("http://tempuri.org/", "UploadBTTagsResponse");
	protected static final QName _qname_UploadBTTagsResult = new QName("http://tempuri.org/", "UploadBTTagsResult");
	protected static final QName _qname_WebMemberID = new QName("http://tempuri.org/", "WebMemberID");
	protected static final QName _qname_WebPassword = new QName("http://tempuri.org/", "WebPassword");
	protected static final QName _qname_string = new QName("http://tempuri.org/", "string");
	protected static final Element _type_UploadBTTags;
	protected static final Element _type_UploadBTTagsResponse;
	static {
		// Create all of the Type's that this stub uses, once.
		Element _type_WebMemberID;
		_type_WebMemberID = new Element(_qname_WebMemberID, Type.STRING, 0, 1, false);
		Element _type_WebPassword;
		_type_WebPassword = new Element(_qname_WebPassword, Type.STRING, 0, 1, false);
		Element _type_string;
		_type_string = new Element(_qname_string, Type.STRING, 0, -1, true);
		ComplexType _complexType_arrayOfString;
		_complexType_arrayOfString = new ComplexType();
		_complexType_arrayOfString.elements = new Element[1];
		_complexType_arrayOfString.elements[0] = _type_string;
		Element _type_TagValidationString;
		_type_TagValidationString = new Element(_qname_TagValidationString, _complexType_arrayOfString, 0, 1, false);
		Element _type_DeviceTagID;
		_type_DeviceTagID = new Element(_qname_DeviceTagID, _complexType_arrayOfString, 0, 1, false);
		ComplexType _complexType_BTTagUpdate;
		_complexType_BTTagUpdate = new ComplexType();
		_complexType_BTTagUpdate.elements = new Element[2];
		_complexType_BTTagUpdate.elements[0] = _type_TagValidationString;
		_complexType_BTTagUpdate.elements[1] = _type_DeviceTagID;
		Element _type_BTTags;
		_type_BTTags = new Element(_qname_BTTags, _complexType_BTTagUpdate, 0, 1, false);
		ComplexType _complexType_uploadBTTags;
		_complexType_uploadBTTags = new ComplexType();
		_complexType_uploadBTTags.elements = new Element[3];
		_complexType_uploadBTTags.elements[0] = _type_WebMemberID;
		_complexType_uploadBTTags.elements[1] = _type_WebPassword;
		_complexType_uploadBTTags.elements[2] = _type_BTTags;
		_type_UploadBTTags = new Element(_qname_UploadBTTags, _complexType_uploadBTTags);
		Element _type_ConfirmedByServer;
		_type_ConfirmedByServer = new Element(_qname_ConfirmedByServer, Type.BOOLEAN);
		ComplexType _complexType_BTTagConfirmation;
		_complexType_BTTagConfirmation = new ComplexType();
		_complexType_BTTagConfirmation.elements = new Element[2];
		_complexType_BTTagConfirmation.elements[0] = _type_WebMemberID;
		_complexType_BTTagConfirmation.elements[1] = _type_ConfirmedByServer;
		Element _type_BTTagConfirmation;
		_type_BTTagConfirmation = new Element(_qname_BTTagConfirmation, _complexType_BTTagConfirmation, 0, -1, true);
		ComplexType _complexType_arrayOfBTTagConfirmation;
		_complexType_arrayOfBTTagConfirmation = new ComplexType();
		_complexType_arrayOfBTTagConfirmation.elements = new Element[1];
		_complexType_arrayOfBTTagConfirmation.elements[0] = _type_BTTagConfirmation;
		Element _type_UploadBTTagsResult;
		_type_UploadBTTagsResult = new Element(_qname_UploadBTTagsResult, _complexType_arrayOfBTTagConfirmation, 0, 1, false);
		ComplexType _complexType_uploadBTTagsResponse;
		_complexType_uploadBTTagsResponse = new ComplexType();
		_complexType_uploadBTTagsResponse.elements = new Element[1];
		_complexType_uploadBTTagsResponse.elements[0] = _type_UploadBTTagsResult;
		_type_UploadBTTagsResponse = new Element(_qname_UploadBTTagsResponse, _complexType_uploadBTTagsResponse);
	}

}
