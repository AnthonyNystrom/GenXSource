using System;
using System.Text;
using System.Data;
using System.Configuration;
using System.Collections;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Xml.Linq;
using Next2Friends.Data;

public partial class NewInboxPage : System.Web.UI.Page
{
    public static int PageSize = 10;

    protected void Page_Load(object sender, EventArgs e)
    {
        AjaxPro.Utility.RegisterTypeForAjax(typeof(NewInboxPage));
    }

    /// <summary>
    /// Returns all new messsages via an Ajax call. This method is not to be confused LoadInitialInboxContent().
    /// This method is for browser calls only
    /// </summary>
    /// <returns>An array of AjaxMessages</returns>
    [AjaxPro.AjaxMethod]
    public AjaxMessage[] GetInboxMessages2()
    {
        Member member = (Member)Session["Member"];
        AjaxMessage[] AjaxMessages = new AjaxMessage[0];

        if (member != null)
        {
            Message[] NewMessages = Message.GetAllMessagesByMemberID(member.MemberID, 0, PageSize);
            AjaxMessages = AjaxMessage.ConvertToAjaxMessage(NewMessages, true, GetMessageType.Inbox);
        }

        return AjaxMessages;
    }

    [AjaxPro.AjaxMethod]
    public AjaxMessageList GetInboxMessages(int Page)
    {
        AjaxMessageList ajaxMessageList = new AjaxMessageList();

        try
        {
            Member member = (Member)Session["Member"];

            if (member != null)
            {
                Message[] NewMessages = Message.GetAllMessagesByMemberID(member.MemberID, Page, PageSize);

                int MessageCount = Message.GetMessageCount(member.MemberID);
                int NumberOfPages = (int)Math.Ceiling(Convert.ToDouble(MessageCount / PageSize));

                if ((MessageCount % PageSize) > 0 || NumberOfPages == 0)
                    NumberOfPages = NumberOfPages + 1;

                ajaxMessageList.AjaxMessages = AjaxMessage.ConvertToAjaxMessage(NewMessages, true, GetMessageType.Inbox);
                ajaxMessageList.NumberOfPages = NumberOfPages;
                ajaxMessageList.CurrentPage = Page;                
            }
        }
        catch (Exception ex)
        {
            int i = 100;
        }

        return ajaxMessageList;
    }

    [AjaxPro.AjaxMethod]
    public string[] DeleteMessages(string[] WebMessageIDList, bool EmtpyTrash)
    {
        Member member = (Member)Session["Member"];

        string StringList = string.Empty;

        for (int i = 0; i < WebMessageIDList.Length; i++)
        {
            if (Next2Friends.Misc.UniqueID.IsWebID(WebMessageIDList[i]))
            {
                throw new Exception("not a valid WebMessageID");
            }

            StringList += "'" + WebMessageIDList[i] + "'" + ((i != WebMessageIDList.Length - 1) ? "," : string.Empty);
        }

        Message.DeleteChatMessageList(member.MemberID, StringList, EmtpyTrash);

        return WebMessageIDList;
    }

    [AjaxPro.AjaxMethod]
    public AjaxMessageList GetTrash(int Page)
    {
        AjaxMessageList ajaxMessageList = new AjaxMessageList();

        try
        {
            Member member = (Member)Session["Member"];


            if (member != null)
            {
                int MessageCount = Message.GetTrashMessageCount(member.MemberID);
                int NumberOfPages = (int)Math.Ceiling(Convert.ToDouble(MessageCount / PageSize));

                if ((MessageCount % PageSize) > 0 || NumberOfPages == 0)
                    NumberOfPages = NumberOfPages + 1;

                Message[] NewMessages = Message.GetTrash(member.MemberID, Page, PageSize);
                ajaxMessageList.AjaxMessages = AjaxMessage.ConvertToAjaxMessage(NewMessages, true, GetMessageType.Trash);
                ajaxMessageList.NumberOfPages = NumberOfPages;
                ajaxMessageList.CurrentPage = Page;
            }
        }
        catch (Exception ex)
        {   
        }

        return ajaxMessageList;
    }

    [AjaxPro.AjaxMethod]
    public AjaxMessageList GetSent(int Page)
    {
        AjaxMessageList ajaxMessageList = new AjaxMessageList();

        try
        {
            Member member = (Member)Session["Member"];


            if (member != null) 
            {
                int MessageCount = 0;// Message.GetSentMessageCount(member.MemberID);
                int NumberOfPages = (int)Math.Ceiling(Convert.ToDouble(MessageCount / PageSize));

                if ((MessageCount % PageSize) > 0 || NumberOfPages == 0)
                    NumberOfPages = NumberOfPages + 1;

                Message[] NewMessages = new Message[0];//Message.GetSent(member.MemberID, Page, PageSize);
                ajaxMessageList.AjaxMessages = AjaxMessage.ConvertToAjaxMessage(NewMessages, true, GetMessageType.Trash);
                ajaxMessageList.NumberOfPages = NumberOfPages;
                ajaxMessageList.CurrentPage = Page;
            }
        }
        catch (Exception ex)
        {
        }

        return ajaxMessageList;
    }

    /// <summary>
    /// returns a AjaxMessage and chain of reply headers
    /// </summary>
    /// <param name="MessageID">The Message ID</param>
    /// <returns>The AjaxMethod</returns>
    [AjaxPro.AjaxMethod]
    public AjaxMessageList OpenMessage(string WebMessageID)
    {
        Member member = (Member)Session["Member"];

        AjaxMessage[] ajaxMessages = null;

        if (member != null)
        {
            // get the message and all other message that have the same InReplyToID
            Message[] messages = Message.GetMessageHeaderWithReply(WebMessageID, member.MemberID);

            ajaxMessages = AjaxMessage.ConvertToAjaxMessage(messages, false, GetMessageType.ReadMessage);
        }

        AjaxMessageList messageList = new AjaxMessageList();

        messageList.DefaultWebMessageID = WebMessageID;

        //get the video message of the first item
        if (ajaxMessages.Length > 0)
        {
            for (int i = 0; i < ajaxMessages.Length; i++)
            {
                if (ajaxMessages[i].WebMessageID == WebMessageID)
                {
                    messageList.DefaultVideoMessageFile = ajaxMessages[i].VideoMessageFile;
                }
            }
        }

        messageList.AjaxMessages = ajaxMessages;
        messageList.NumberOfNewMessages = member.GetNewMessageCount();

        return messageList;
    }

    [AjaxPro.AjaxMethod]
    public int QuickSend(string Recipient, string MessageBody, string dateTime, string WebMessageID)
    {
        Member member = (Member)Session["Member"];

        // determine if its an email or an n2f member
        // if not a member check the nickname field in the member table
        Member recipient = Member.GetMemberViaNickname(Recipient);
        Message InReplyToMessage = Message.GetMessageWithJoin(WebMessageID, member.MemberID);

        if (recipient == null)
        {
            return (int)MessageSendResponse.BadAddress;
        }


        Message message = new Message();

        message.WebMessageID = Next2Friends.Misc.UniqueID.NewWebID();
        message.VideoMessageToken = string.Empty;
        message.InReplyToID = InReplyToMessage.InReplyToID;
        message.MemberIDFrom = member.MemberID;
        message.MemberIDTo = recipient.MemberID;
        message.Body = MessageBody;

        DateTime DTCreated = DateTime.Now;

        try
        {
            DTCreated = DateTime.Parse(dateTime);
        }
        catch { }

        message.DTCreated = DTCreated;
        message.Save();


        if (message.MessageID > 0)
            return (int)MessageSendResponse.Sent;
        else
            return (int)MessageSendResponse.UnexpectedError;
    }

    /// <summary>
    /// Sends a message to another member via ajax call
    /// </summary>
    /// <param name="Recipient">The person to receive the message</param>
    /// <param name="MessageBody">The message body (1000 characters)</param>
    /// <returns>The success of the message send</returns>
    [AjaxPro.AjaxMethod]
    public int SendMessage(string Recipient, string MessageBody, string VMToken)
    {
        Member member = (Member)Session["Member"];

        // determine if its an email or an n2f member
        // if not a member check the nickname field in the member table
        Member MemberRecipient = Member.GetMemberViaNickname(Recipient);

        //member.HasBlockedMember(MemberRecipient);

        if (Recipient == string.Empty)
        {
            return (int)MessageSendResponse.BadAddress;
        }
        else if (MemberRecipient == null)
        {
            if (RegexPatterns.TestEmailRegex(Recipient))
            {
                ResourceFile VideoMessage = new ResourceFile(VMToken);

                EmailMessage emailMessage = new EmailMessage();
                emailMessage.MemberID = member.MemberID;
                emailMessage.WebEmailMessageID = Next2Friends.Misc.UniqueID.NewWebID();
                emailMessage.Text = MessageBody;
                emailMessage.EmailAddress = Recipient;
                emailMessage.DTCreated = DateTime.Now;

                if (VideoMessage.ResourceFileID != 0)
                {
                    // yes a video message was recorder
                    emailMessage.ResourceFileID = VideoMessage.ResourceFileID;
                }
                else
                {
                    // An email must have a video message. return an error message
                    return (int)MessageSendResponse.EmailMustHaveVideoMessage;
                }

                emailMessage.Save();
                return (int)MessageSendResponse.Sent;
            }
            else
            {
                return (int)MessageSendResponse.BadAddress;
            }
        }
        else
        {
            Message message = new Message();

            ResourceFile VideoMessage = new ResourceFile(VMToken);

            if (VideoMessage.ResourceFileID != 0)
            {
                // yes a video message was recorder
                message.VideoMessageResourceFileID = VideoMessage.ResourceFileID;
            }

            message.WebMessageID = Next2Friends.Misc.UniqueID.NewWebID();
            message.VideoMessageToken = VMToken;
            message.MemberIDFrom = member.MemberID;
            message.MemberIDTo = MemberRecipient.MemberID;
            message.Body = MessageBody;
            message.DTCreated = DateTime.Now;

            message.Save();

            message.InReplyToID = message.MessageID;

            message.Save();

            if (message.MessageID > 0)
                return (int)MessageSendResponse.Sent;
            else
                return (int)MessageSendResponse.UnexpectedError;
        }
    }

    [AjaxPro.AjaxMethod]
    public string GetVMToken()
    {
        return Next2Friends.Misc.UniqueID.NewWebID();
    }

    /// <summary>
    /// set the page skin
    /// </summary>
    /// <param name="e"></param>
    protected override void OnPreInit(EventArgs e)
    {
        // only allow the member in if logged in
        if (Session["Member"] == null)
        {

            Response.Redirect("signup.aspx?u=" + Request.Url.AbsoluteUri);
        }

        //Master.SkinID = "";
        base.OnPreInit(e);
    }

    public class AjaxMessageList
    {
        public string DefaultWebMessageID { get; set; }
        public int NumberOfPages { get; set; }
        public int CurrentPage { get; set; }
        public string DefaultVideoMessageFile { get; set; }
        public int NumberOfNewMessages { get; set; }
        public AjaxMessage[] AjaxMessages { get; set; }
    }
}