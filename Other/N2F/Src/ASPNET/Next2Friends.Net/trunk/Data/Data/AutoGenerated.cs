using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Data;
using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Abuse in the system
    /// </summary>
    public partial class Abuse
    {
        #region Fields and Properties

        private int _abuseID;		//The primary key id for the Abuse
        private int _memberID;		//The member who reported the abuse
        private string _resourceFileID = "";		//
        private string _uRL = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The datetime when the abuse was reported

        Database db;
        /// <summary>
        /// The primary key id for the Abuse
        /// </summary>
        public int AbuseID
        {
            get { return _abuseID; }
            set { _abuseID = value; }
        }

        /// <summary>
        /// The member who reported the abuse
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ResourceFileID
        {
            get { return _resourceFileID; }
            set { _resourceFileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string URL
        {
            get { return _uRL; }
            set { _uRL = value; }
        }

        /// <summary>
        /// The datetime when the abuse was reported
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Abuse()
        {

        }

        /// <summary>
        /// Instanciates a Abuse object from the database via the AbuseID
        /// </summary>
        public Abuse(int AbuseID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAbuseByAbuseID");
            db.AddInParameter(dbCommand, "AbuseID", DbType.Int32, AbuseID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AbuseID")) { this._abuseID = (int)dr["AbuseID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("ResourceFileID")) { this._resourceFileID = (string)dr["ResourceFileID"]; }
                    if (list.IsColumnPresent("URL")) { this._uRL = (string)dr["URL"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Abuse in the database with the ID " + AbuseID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Abuse in the database 
        /// </summary>
        public static List<Abuse> GetAllAbuse()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAbuse");

            List<Abuse> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Abuses
        /// </summary>
        public static List<Abuse> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Abuse> arr = new List<Abuse>();

            Abuse obj;

            while (dr.Read())
            {
                obj = new Abuse();
                if (list.IsColumnPresent("AbuseID")) { obj._abuseID = (int)dr["AbuseID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (string)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("URL")) { obj._uRL = (string)dr["URL"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Abuses
        /// </summary>
        public static List<Abuse> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Abuse> arr = new List<Abuse>();

            Abuse obj;

            while (dr.Read())
            {
                obj = new Abuse();
                if (list.IsColumnPresent("AbuseID")) { obj._abuseID = (int)dr["AbuseID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (string)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("URL")) { obj._uRL = (string)dr["URL"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Abuse object or in the case of a zero AbuseID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAbuse");

            db.AddInParameter(dbCommand, "AbuseID", DbType.Int32, AbuseID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "ResourceFileID", DbType.String, ResourceFileID);
            db.AddInParameter(dbCommand, "URL", DbType.String, URL);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AbuseID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Admin in the system
    /// </summary>
    public partial class Admin
    {
        #region Fields and Properties

        private int _adminID;		//The primary keyid of the Administrator
        private int _adminLevelID;		//0 = Deactivated | 1 = Moderator | 2 = restricted | 3 = root
        private string _username = "";		//The administrators username
        private string _password = "";		//The administrators password
        private string _firstName = "";		//The administrators first name
        private string _lastName = "";		//The administrators last name
        private string _email = "";		//The administrators Email address

        Database db;
        /// <summary>
        /// The primary keyid of the Administrator
        /// </summary>
        public int AdminID
        {
            get { return _adminID; }
            set { _adminID = value; }
        }

        /// <summary>
        /// 0 = Deactivated | 1 = Moderator | 2 = restricted | 3 = root
        /// </summary>
        public int AdminLevelID
        {
            get { return _adminLevelID; }
            set { _adminLevelID = value; }
        }

        /// <summary>
        /// The administrators username
        /// </summary>
        public string Username
        {
            get { return _username; }
            set { _username = value; }
        }

        /// <summary>
        /// The administrators password
        /// </summary>
        public string Password
        {
            get { return _password; }
            set { _password = value; }
        }

        /// <summary>
        /// The administrators first name
        /// </summary>
        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        /// <summary>
        /// The administrators last name
        /// </summary>
        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        /// <summary>
        /// The administrators Email address
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Admin()
        {

        }

        /// <summary>
        /// Instanciates a Admin object from the database via the AdminID
        /// </summary>
        public Admin(int AdminID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdminByAdminID");
            db.AddInParameter(dbCommand, "AdminID", DbType.Int32, AdminID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AdminID")) { this._adminID = (int)dr["AdminID"]; }
                    if (list.IsColumnPresent("AdminLevelID")) { this._adminLevelID = (int)dr["AdminLevelID"]; }
                    if (list.IsColumnPresent("Username")) { this._username = (string)dr["Username"]; }
                    if (list.IsColumnPresent("Password")) { this._password = (string)dr["Password"]; }
                    if (list.IsColumnPresent("FirstName")) { this._firstName = (string)dr["FirstName"]; }
                    if (list.IsColumnPresent("LastName")) { this._lastName = (string)dr["LastName"]; }
                    if (list.IsColumnPresent("Email")) { this._email = (string)dr["Email"]; }

                }
                else
                {
                    throw new Exception("There is no Admin in the database with the ID " + AdminID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Admin in the database 
        /// </summary>
        public static List<Admin> GetAllAdmin()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAdmin");

            List<Admin> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Admins
        /// </summary>
        public static List<Admin> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Admin> arr = new List<Admin>();

            Admin obj;

            while (dr.Read())
            {
                obj = new Admin();
                if (list.IsColumnPresent("AdminID")) { obj._adminID = (int)dr["AdminID"]; }
                if (list.IsColumnPresent("AdminLevelID")) { obj._adminLevelID = (int)dr["AdminLevelID"]; }
                if (list.IsColumnPresent("Username")) { obj._username = (string)dr["Username"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Admins
        /// </summary>
        public static List<Admin> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Admin> arr = new List<Admin>();

            Admin obj;

            while (dr.Read())
            {
                obj = new Admin();
                if (list.IsColumnPresent("AdminID")) { obj._adminID = (int)dr["AdminID"]; }
                if (list.IsColumnPresent("AdminLevelID")) { obj._adminLevelID = (int)dr["AdminLevelID"]; }
                if (list.IsColumnPresent("Username")) { obj._username = (string)dr["Username"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Admin object or in the case of a zero AdminID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAdmin");

            db.AddInParameter(dbCommand, "AdminID", DbType.Int32, AdminID);
            db.AddInParameter(dbCommand, "AdminLevelID", DbType.Int32, AdminLevelID);
            db.AddInParameter(dbCommand, "Username", DbType.String, Username);
            db.AddInParameter(dbCommand, "Password", DbType.String, Password);
            db.AddInParameter(dbCommand, "FirstName", DbType.String, FirstName);
            db.AddInParameter(dbCommand, "LastName", DbType.String, LastName);
            db.AddInParameter(dbCommand, "Email", DbType.String, Email);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AdminID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AdminLevel in the system
    /// </summary>
    public partial class AdminLevel
    {
        /// <summary>
        /// The Admin objects for this AdminLevel
        /// </summary>
        public List<Admin> Admin
        {
            get
            {
                if (admin == null)
                    this.admin = this.GetAdminByAdminLevelID();
                return admin;
            }
            set { admin = value; }
        }


        #region Fields and Properties

        private int _adminLevelID;		//The primary key for the Level
        private string _description = "";		//The description of the Admin Level
        private List<Admin> admin;		// Foreign object

        Database db;
        /// <summary>
        /// The primary key for the Level
        /// </summary>
        public int AdminLevelID
        {
            get { return _adminLevelID; }
            set { _adminLevelID = value; }
        }

        /// <summary>
        /// The description of the Admin Level
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AdminLevel()
        {

        }

        /// <summary>
        /// Instanciates a AdminLevel object from the database via the AdminLevelID
        /// </summary>
        public AdminLevel(int AdminLevelID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdminLevelByAdminLevelID");
            db.AddInParameter(dbCommand, "AdminLevelID", DbType.Int32, AdminLevelID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AdminLevelID")) { this._adminLevelID = (int)dr["AdminLevelID"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }

                }
                else
                {
                    throw new Exception("There is no AdminLevel in the database with the ID " + AdminLevelID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AdminLevel in the database 
        /// </summary>
        public static List<AdminLevel> GetAllAdminLevel()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAdminLevel");

            List<AdminLevel> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AdminLevels
        /// </summary>
        public static List<AdminLevel> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AdminLevel> arr = new List<AdminLevel>();

            AdminLevel obj;

            while (dr.Read())
            {
                obj = new AdminLevel();
                if (list.IsColumnPresent("AdminLevelID")) { obj._adminLevelID = (int)dr["AdminLevelID"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AdminLevels
        /// </summary>
        public static List<AdminLevel> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AdminLevel> arr = new List<AdminLevel>();

            AdminLevel obj;

            while (dr.Read())
            {
                obj = new AdminLevel();
                if (list.IsColumnPresent("AdminLevelID")) { obj._adminLevelID = (int)dr["AdminLevelID"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AdminLevel object or in the case of a zero AdminLevelID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAdminLevel");

            db.AddInParameter(dbCommand, "AdminLevelID", DbType.Int32, AdminLevelID);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AdminLevelID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the Admin objects for this AdminLevel
        /// </summary>
        private List<Admin> GetAdminByAdminLevelID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdminByAdminLevelID");
            db.AddInParameter(dbCommand, "AdminLevelID", DbType.Int32, AdminLevelID);

            List<Admin> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Admin.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AdminStatus in the system
    /// </summary>
    public partial class AdminStatus
    {
        /// <summary>
        /// The CommunityView objects for this AdminStatus
        /// </summary>
        public List<CommunityView> CommunityView
        {
            get
            {
                if (communityView == null)
                    this.communityView = this.GetCommunityViewByAdminStatusID();
                return communityView;
            }
            set { communityView = value; }
        }


        /// <summary>
        /// The Member objects for this AdminStatus
        /// </summary>
        public List<Member> Member
        {
            get
            {
                if (member == null)
                    this.member = this.GetMemberByAdminStatusID();
                return member;
            }
            set { member = value; }
        }


        #region Fields and Properties

        private int _adminStatusID;		//The primary key id of the AdminStatus
        private string _description = "";		//The description of the AdminStatus
        private List<CommunityView> communityView;		// Foreign object
        private List<Member> member;		// Foreign object

        Database db;
        /// <summary>
        /// The primary key id of the AdminStatus
        /// </summary>
        public int AdminStatusID
        {
            get { return _adminStatusID; }
            set { _adminStatusID = value; }
        }

        /// <summary>
        /// The description of the AdminStatus
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AdminStatus()
        {

        }

        /// <summary>
        /// Instanciates a AdminStatus object from the database via the AdminStatusID
        /// </summary>
        public AdminStatus(int AdminStatusID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAdminStatusByAdminStatusID");
            db.AddInParameter(dbCommand, "AdminStatusID", DbType.Int32, AdminStatusID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AdminStatusID")) { this._adminStatusID = (int)dr["AdminStatusID"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }

                }
                else
                {
                    throw new Exception("There is no AdminStatus in the database with the ID " + AdminStatusID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AdminStatus in the database 
        /// </summary>
        public static List<AdminStatus> GetAllAdminStatus()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAdminStatus");

            List<AdminStatus> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AdminStatuss
        /// </summary>
        public static List<AdminStatus> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AdminStatus> arr = new List<AdminStatus>();

            AdminStatus obj;

            while (dr.Read())
            {
                obj = new AdminStatus();
                if (list.IsColumnPresent("AdminStatusID")) { obj._adminStatusID = (int)dr["AdminStatusID"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AdminStatuss
        /// </summary>
        public static List<AdminStatus> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AdminStatus> arr = new List<AdminStatus>();

            AdminStatus obj;

            while (dr.Read())
            {
                obj = new AdminStatus();
                if (list.IsColumnPresent("AdminStatusID")) { obj._adminStatusID = (int)dr["AdminStatusID"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AdminStatus object or in the case of a zero AdminStatusID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAdminStatus");

            db.AddInParameter(dbCommand, "AdminStatusID", DbType.Int32, AdminStatusID);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AdminStatusID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the CommunityView objects for this AdminStatus
        /// </summary>
        private List<CommunityView> GetCommunityViewByAdminStatusID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCommunityViewByAdminStatusID");
            db.AddInParameter(dbCommand, "AdminStatusID", DbType.Int32, AdminStatusID);

            List<CommunityView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.CommunityView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Member objects for this AdminStatus
        /// </summary>
        private List<Member> GetMemberByAdminStatusID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberByAdminStatusID");
            db.AddInParameter(dbCommand, "AdminStatusID", DbType.Int32, AdminStatusID);

            List<Member> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Member.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AskAFriend in the system
    /// </summary>
    public partial class AskAFriend
    {
        /// <summary>
        /// The AskAFriendResponse objects for this AskAFriend
        /// </summary>
        public List<AskAFriendResponse> AskAFriendResponse
        {
            get
            {
                if (askAFriendResponse == null)
                    this.askAFriendResponse = this.GetAskAFriendResponseByAskAFriendID();
                return askAFriendResponse;
            }
            set { askAFriendResponse = value; }
        }


        /// <summary>
        /// The AskAFriendComment objects for this AskAFriend
        /// </summary>
        public List<AskAFriendComment> AskAFriendComment
        {
            get
            {
                if (askAFriendComment == null)
                    this.askAFriendComment = this.GetAskAFriendCommentByAskAFriendID();
                return askAFriendComment;
            }
            set { askAFriendComment = value; }
        }


        /// <summary>
        /// The AskAFriendPhoto objects for this AskAFriend
        /// </summary>
        public List<AskAFriendPhoto> AskAFriendPhoto
        {
            get
            {
                if (askAFriendPhoto == null)
                    this.askAFriendPhoto = this.GetAskAFriendPhotoByAskAFriendID();
                return askAFriendPhoto;
            }
            set { askAFriendPhoto = value; }
        }


        #region Fields and Properties

        private int _askAFriendID;		//UniqueId for the AskeAFriend
        private int _memberID;		//the memberId of the person asking the question
        private string _webAskAFriendID = "";		//
        private int _numberOfPhotos;		//The number of photos the question has attached to it
        private int _defaultPhotoResourceFileID;		//
        private string _question = "";		//the question text itself
        private int _responseType;		//The response Type - YES/NO |  A/B | Rate 1-10 | Multiple select
        private int _duration;		//The duration quantum of which values have to be determined. range : 0 - 5
        private string _responseA = "";		//Option response A text
        private string _responseB = "";		//Option response B text
        private int _rejectScore;		//The calculated score of how many times this Question has been next'ed
        private int _totalVotes;		//
        private bool _isPrivate;		//Is the Question just intended for Friends of the Member?
        private bool _active;		//If the Question is active
        private string _submittedIP = "";		//
        private DateTime _wentLiveDT = new DateTime(1900, 1, 1);		//The DateTime that the Question was made live
        private DateTime _submittedDT = new DateTime(1900, 1, 1);		//The datedate when the question was submitted
        private List<AskAFriendResponse> askAFriendResponse;		// Foreign object
        private List<AskAFriendComment> askAFriendComment;		// Foreign object
        private List<AskAFriendPhoto> askAFriendPhoto;		// Foreign object

        Database db;
        /// <summary>
        /// UniqueId for the AskeAFriend
        /// </summary>
        public int AskAFriendID
        {
            get { return _askAFriendID; }
            set { _askAFriendID = value; }
        }

        /// <summary>
        /// the memberId of the person asking the question
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebAskAFriendID
        {
            get { return _webAskAFriendID; }
            set { _webAskAFriendID = value; }
        }

        /// <summary>
        /// The number of photos the question has attached to it
        /// </summary>
        public int NumberOfPhotos
        {
            get { return _numberOfPhotos; }
            set { _numberOfPhotos = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int DefaultPhotoResourceFileID
        {
            get { return _defaultPhotoResourceFileID; }
            set { _defaultPhotoResourceFileID = value; }
        }

        /// <summary>
        /// the question text itself
        /// </summary>
        public string Question
        {
            get { return _question; }
            set { _question = value; }
        }

        /// <summary>
        /// The response Type - YES/NO |  A/B | Rate 1-10 | Multiple select
        /// </summary>
        public int ResponseType
        {
            get { return _responseType; }
            set { _responseType = value; }
        }

        /// <summary>
        /// The duration quantum of which values have to be determined. range : 0 - 5
        /// </summary>
        public int Duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        /// <summary>
        /// Option response A text
        /// </summary>
        public string ResponseA
        {
            get { return _responseA; }
            set { _responseA = value; }
        }

        /// <summary>
        /// Option response B text
        /// </summary>
        public string ResponseB
        {
            get { return _responseB; }
            set { _responseB = value; }
        }

        /// <summary>
        /// The calculated score of how many times this Question has been next'ed
        /// </summary>
        public int RejectScore
        {
            get { return _rejectScore; }
            set { _rejectScore = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TotalVotes
        {
            get { return _totalVotes; }
            set { _totalVotes = value; }
        }

        /// <summary>
        /// Is the Question just intended for Friends of the Member?
        /// </summary>
        public bool IsPrivate
        {
            get { return _isPrivate; }
            set { _isPrivate = value; }
        }

        /// <summary>
        /// If the Question is active
        /// </summary>
        public bool Active
        {
            get { return _active; }
            set { _active = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string SubmittedIP
        {
            get { return _submittedIP; }
            set { _submittedIP = value; }
        }

        /// <summary>
        /// The DateTime that the Question was made live
        /// </summary>
        public DateTime WentLiveDT
        {
            get { return _wentLiveDT; }
            set { _wentLiveDT = value; }
        }

        /// <summary>
        /// The datedate when the question was submitted
        /// </summary>
        public DateTime SubmittedDT
        {
            get { return _submittedDT; }
            set { _submittedDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AskAFriend()
        {

        }

        /// <summary>
        /// Instanciates a AskAFriend object from the database via the AskAFriendID
        /// </summary>
        public AskAFriend(int AskAFriendID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendByAskAFriendID");
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AskAFriendID")) { this._askAFriendID = (int)dr["AskAFriendID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("WebAskAFriendID")) { this._webAskAFriendID = (string)dr["WebAskAFriendID"]; }
                    if (list.IsColumnPresent("NumberOfPhotos")) { this._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                    if (list.IsColumnPresent("DefaultPhotoResourceFileID")) { this._defaultPhotoResourceFileID = (int)dr["DefaultPhotoResourceFileID"]; }
                    if (list.IsColumnPresent("Question")) { this._question = (string)dr["Question"]; }
                    if (list.IsColumnPresent("ResponseType")) { this._responseType = (int)dr["ResponseType"]; }
                    if (list.IsColumnPresent("Duration")) { this._duration = (int)dr["Duration"]; }
                    if (list.IsColumnPresent("ResponseA")) { this._responseA = (string)dr["ResponseA"]; }
                    if (list.IsColumnPresent("ResponseB")) { this._responseB = (string)dr["ResponseB"]; }
                    if (list.IsColumnPresent("RejectScore")) { this._rejectScore = (int)dr["RejectScore"]; }
                    if (list.IsColumnPresent("TotalVotes")) { this._totalVotes = (int)dr["TotalVotes"]; }
                    if (list.IsColumnPresent("IsPrivate")) { this._isPrivate = (bool)dr["IsPrivate"]; }
                    if (list.IsColumnPresent("Active")) { this._active = (bool)dr["Active"]; }
                    if (list.IsColumnPresent("SubmittedIP")) { this._submittedIP = (string)dr["SubmittedIP"]; }
                    if (list.IsColumnPresent("WentLiveDT")) { this._wentLiveDT = (DateTime)dr["WentLiveDT"]; }
                    if (list.IsColumnPresent("SubmittedDT")) { this._submittedDT = (DateTime)dr["SubmittedDT"]; }

                }
                else
                {
                    throw new Exception("There is no AskAFriend in the database with the ID " + AskAFriendID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AskAFriend in the database 
        /// </summary>
        public static List<AskAFriend> GetAllAskAFriend()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAskAFriend");

            List<AskAFriend> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile DefaultPhotoResourceFile { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriends
        /// </summary>
        public static List<AskAFriend> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriend> arr = new List<AskAFriend>();

            AskAFriend obj;

            while (dr.Read())
            {
                obj = new AskAFriend();
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("WebAskAFriendID")) { obj._webAskAFriendID = (string)dr["WebAskAFriendID"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileID")) { obj._defaultPhotoResourceFileID = (int)dr["DefaultPhotoResourceFileID"]; }
                if (list.IsColumnPresent("Question")) { obj._question = (string)dr["Question"]; }
                if (list.IsColumnPresent("ResponseType")) { obj._responseType = (int)dr["ResponseType"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (int)dr["Duration"]; }
                if (list.IsColumnPresent("ResponseA")) { obj._responseA = (string)dr["ResponseA"]; }
                if (list.IsColumnPresent("ResponseB")) { obj._responseB = (string)dr["ResponseB"]; }
                if (list.IsColumnPresent("RejectScore")) { obj._rejectScore = (int)dr["RejectScore"]; }
                if (list.IsColumnPresent("TotalVotes")) { obj._totalVotes = (int)dr["TotalVotes"]; }
                if (list.IsColumnPresent("IsPrivate")) { obj._isPrivate = (bool)dr["IsPrivate"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("SubmittedIP")) { obj._submittedIP = (string)dr["SubmittedIP"]; }
                if (list.IsColumnPresent("WentLiveDT")) { obj._wentLiveDT = (DateTime)dr["WentLiveDT"]; }
                if (list.IsColumnPresent("SubmittedDT")) { obj._submittedDT = (DateTime)dr["SubmittedDT"]; }

                obj.DefaultPhotoResourceFile = new ResourceFile();
                if (list.IsColumnPresent("DefaultPhotoResourceFileResourceFileID")) { obj.DefaultPhotoResourceFile.ResourceFileID = (int)dr["DefaultPhotoResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileWebResourceFileID")) { obj.DefaultPhotoResourceFile.WebResourceFileID = (string)dr["DefaultPhotoResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileResourceType")) { obj.DefaultPhotoResourceFile.ResourceType = (int)dr["DefaultPhotoResourceFileResourceType"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileStorageLocation")) { obj.DefaultPhotoResourceFile.StorageLocation = (int)dr["DefaultPhotoResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileServer")) { obj.DefaultPhotoResourceFile.Server = (int)dr["DefaultPhotoResourceFileServer"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFilePath")) { obj.DefaultPhotoResourceFile.Path = (string)dr["DefaultPhotoResourceFilePath"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileFileName")) { obj.DefaultPhotoResourceFile.FileName = (string)dr["DefaultPhotoResourceFileFileName"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileCreatedDT")) { obj.DefaultPhotoResourceFile.CreatedDT = (DateTime)dr["DefaultPhotoResourceFileCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriends
        /// </summary>
        public static List<AskAFriend> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriend> arr = new List<AskAFriend>();

            AskAFriend obj;

            while (dr.Read())
            {
                obj = new AskAFriend();
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("WebAskAFriendID")) { obj._webAskAFriendID = (string)dr["WebAskAFriendID"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceFileID")) { obj._defaultPhotoResourceFileID = (int)dr["DefaultPhotoResourceFileID"]; }
                if (list.IsColumnPresent("Question")) { obj._question = (string)dr["Question"]; }
                if (list.IsColumnPresent("ResponseType")) { obj._responseType = (int)dr["ResponseType"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (int)dr["Duration"]; }
                if (list.IsColumnPresent("ResponseA")) { obj._responseA = (string)dr["ResponseA"]; }
                if (list.IsColumnPresent("ResponseB")) { obj._responseB = (string)dr["ResponseB"]; }
                if (list.IsColumnPresent("RejectScore")) { obj._rejectScore = (int)dr["RejectScore"]; }
                if (list.IsColumnPresent("TotalVotes")) { obj._totalVotes = (int)dr["TotalVotes"]; }
                if (list.IsColumnPresent("IsPrivate")) { obj._isPrivate = (bool)dr["IsPrivate"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("SubmittedIP")) { obj._submittedIP = (string)dr["SubmittedIP"]; }
                if (list.IsColumnPresent("WentLiveDT")) { obj._wentLiveDT = (DateTime)dr["WentLiveDT"]; }
                if (list.IsColumnPresent("SubmittedDT")) { obj._submittedDT = (DateTime)dr["SubmittedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AskAFriend object or in the case of a zero AskAFriendID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAskAFriend");

            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "WebAskAFriendID", DbType.String, WebAskAFriendID);
            db.AddInParameter(dbCommand, "NumberOfPhotos", DbType.Int32, NumberOfPhotos);
            db.AddInParameter(dbCommand, "DefaultPhotoResourceFileID", DbType.Int32, DefaultPhotoResourceFileID);
            db.AddInParameter(dbCommand, "Question", DbType.String, Question);
            db.AddInParameter(dbCommand, "ResponseType", DbType.Int32, ResponseType);
            db.AddInParameter(dbCommand, "Duration", DbType.Int32, Duration);
            db.AddInParameter(dbCommand, "ResponseA", DbType.String, ResponseA);
            db.AddInParameter(dbCommand, "ResponseB", DbType.String, ResponseB);
            db.AddInParameter(dbCommand, "RejectScore", DbType.Int32, RejectScore);
            db.AddInParameter(dbCommand, "TotalVotes", DbType.Int32, TotalVotes);
            db.AddInParameter(dbCommand, "IsPrivate", DbType.Boolean, IsPrivate);
            db.AddInParameter(dbCommand, "Active", DbType.Boolean, Active);
            db.AddInParameter(dbCommand, "SubmittedIP", DbType.String, SubmittedIP);
            db.AddInParameter(dbCommand, "WentLiveDT", DbType.DateTime, WentLiveDT);
            db.AddInParameter(dbCommand, "SubmittedDT", DbType.DateTime, SubmittedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AskAFriendID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the AskAFriendResponse objects for this AskAFriend
        /// </summary>
        private List<AskAFriendResponse> GetAskAFriendResponseByAskAFriendID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendResponseByAskAFriendID");
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);

            List<AskAFriendResponse> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriendResponse.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the AskAFriendComment objects for this AskAFriend
        /// </summary>
        private List<AskAFriendComment> GetAskAFriendCommentByAskAFriendID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendCommentByAskAFriendID");
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);

            List<AskAFriendComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriendComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the AskAFriendPhoto objects for this AskAFriend
        /// </summary>
        private List<AskAFriendPhoto> GetAskAFriendPhotoByAskAFriendID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendPhotoByAskAFriendID");
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);

            List<AskAFriendPhoto> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriendPhoto.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the AskAFriend in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static AskAFriend GetAskAFriendByAskAFriendIDWithJoin(int AskAFriendID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendByAskAFriendIDWithJoin");
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);

            List<AskAFriend> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AskAFriendComment in the system
    /// </summary>
    public partial class AskAFriendComment
    {
        #region Fields and Properties

        private int _askAFriendCommentID;		//
        private string _webAskAFriendCommentID = "";		//
        private int _askAFriendID;		//
        private int _memberID;		//
        private string _text = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int AskAFriendCommentID
        {
            get { return _askAFriendCommentID; }
            set { _askAFriendCommentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebAskAFriendCommentID
        {
            get { return _webAskAFriendCommentID; }
            set { _webAskAFriendCommentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AskAFriendID
        {
            get { return _askAFriendID; }
            set { _askAFriendID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AskAFriendComment()
        {

        }

        /// <summary>
        /// Instanciates a AskAFriendComment object from the database via the AskAFriendCommentID
        /// </summary>
        public AskAFriendComment(int AskAFriendCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendCommentByAskAFriendCommentID");
            db.AddInParameter(dbCommand, "AskAFriendCommentID", DbType.Int32, AskAFriendCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AskAFriendCommentID")) { this._askAFriendCommentID = (int)dr["AskAFriendCommentID"]; }
                    if (list.IsColumnPresent("WebAskAFriendCommentID")) { this._webAskAFriendCommentID = (string)dr["WebAskAFriendCommentID"]; }
                    if (list.IsColumnPresent("AskAFriendID")) { this._askAFriendID = (int)dr["AskAFriendID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no AskAFriendComment in the database with the ID " + AskAFriendCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AskAFriendComment in the database 
        /// </summary>
        public static List<AskAFriendComment> GetAllAskAFriendComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAskAFriendComment");

            List<AskAFriendComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendComments
        /// </summary>
        public static List<AskAFriendComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendComment> arr = new List<AskAFriendComment>();

            AskAFriendComment obj;

            while (dr.Read())
            {
                obj = new AskAFriendComment();
                if (list.IsColumnPresent("AskAFriendCommentID")) { obj._askAFriendCommentID = (int)dr["AskAFriendCommentID"]; }
                if (list.IsColumnPresent("WebAskAFriendCommentID")) { obj._webAskAFriendCommentID = (string)dr["WebAskAFriendCommentID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendComments
        /// </summary>
        public static List<AskAFriendComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendComment> arr = new List<AskAFriendComment>();

            AskAFriendComment obj;

            while (dr.Read())
            {
                obj = new AskAFriendComment();
                if (list.IsColumnPresent("AskAFriendCommentID")) { obj._askAFriendCommentID = (int)dr["AskAFriendCommentID"]; }
                if (list.IsColumnPresent("WebAskAFriendCommentID")) { obj._webAskAFriendCommentID = (string)dr["WebAskAFriendCommentID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AskAFriendComment object or in the case of a zero AskAFriendCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAskAFriendComment");

            db.AddInParameter(dbCommand, "AskAFriendCommentID", DbType.Int32, AskAFriendCommentID);
            db.AddInParameter(dbCommand, "WebAskAFriendCommentID", DbType.String, WebAskAFriendCommentID);
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AskAFriendCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AskAFriendPhoto in the system
    /// </summary>
    public partial class AskAFriendPhoto
    {
        #region Fields and Properties

        private int _askAFriendPhotoID;		//The primary key id of the AskAQuestionPhoto
        private int _askAFriendID;		//The AskAQuestion that the photo belongs to
        private int _photoResourceFileID;		//The ResourceFile reference
        private int _indexOrder;		//The order of the image 1,2 or 3

        Database db;
        /// <summary>
        /// The primary key id of the AskAQuestionPhoto
        /// </summary>
        public int AskAFriendPhotoID
        {
            get { return _askAFriendPhotoID; }
            set { _askAFriendPhotoID = value; }
        }

        /// <summary>
        /// The AskAQuestion that the photo belongs to
        /// </summary>
        public int AskAFriendID
        {
            get { return _askAFriendID; }
            set { _askAFriendID = value; }
        }

        /// <summary>
        /// The ResourceFile reference
        /// </summary>
        public int PhotoResourceFileID
        {
            get { return _photoResourceFileID; }
            set { _photoResourceFileID = value; }
        }

        /// <summary>
        /// The order of the image 1,2 or 3
        /// </summary>
        public int IndexOrder
        {
            get { return _indexOrder; }
            set { _indexOrder = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AskAFriendPhoto()
        {

        }

        /// <summary>
        /// Instanciates a AskAFriendPhoto object from the database via the AskAFriendPhotoID
        /// </summary>
        public AskAFriendPhoto(int AskAFriendPhotoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendPhotoByAskAFriendPhotoID");
            db.AddInParameter(dbCommand, "AskAFriendPhotoID", DbType.Int32, AskAFriendPhotoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AskAFriendPhotoID")) { this._askAFriendPhotoID = (int)dr["AskAFriendPhotoID"]; }
                    if (list.IsColumnPresent("AskAFriendID")) { this._askAFriendID = (int)dr["AskAFriendID"]; }
                    if (list.IsColumnPresent("PhotoResourceFileID")) { this._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                    if (list.IsColumnPresent("IndexOrder")) { this._indexOrder = (int)dr["IndexOrder"]; }

                }
                else
                {
                    throw new Exception("There is no AskAFriendPhoto in the database with the ID " + AskAFriendPhotoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AskAFriendPhoto in the database 
        /// </summary>
        public static List<AskAFriendPhoto> GetAllAskAFriendPhoto()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAskAFriendPhoto");

            List<AskAFriendPhoto> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile PhotoResourceFile { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendPhotos
        /// </summary>
        public static List<AskAFriendPhoto> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendPhoto> arr = new List<AskAFriendPhoto>();

            AskAFriendPhoto obj;

            while (dr.Read())
            {
                obj = new AskAFriendPhoto();
                if (list.IsColumnPresent("AskAFriendPhotoID")) { obj._askAFriendPhotoID = (int)dr["AskAFriendPhotoID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("IndexOrder")) { obj._indexOrder = (int)dr["IndexOrder"]; }

                obj.PhotoResourceFile = new ResourceFile();
                if (list.IsColumnPresent("PhotoResourceFileResourceFileID")) { obj.PhotoResourceFile.ResourceFileID = (int)dr["PhotoResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileWebResourceFileID")) { obj.PhotoResourceFile.WebResourceFileID = (string)dr["PhotoResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileResourceType")) { obj.PhotoResourceFile.ResourceType = (int)dr["PhotoResourceFileResourceType"]; }
                if (list.IsColumnPresent("PhotoResourceFileStorageLocation")) { obj.PhotoResourceFile.StorageLocation = (int)dr["PhotoResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("PhotoResourceFileServer")) { obj.PhotoResourceFile.Server = (int)dr["PhotoResourceFileServer"]; }
                if (list.IsColumnPresent("PhotoResourceFilePath")) { obj.PhotoResourceFile.Path = (string)dr["PhotoResourceFilePath"]; }
                if (list.IsColumnPresent("PhotoResourceFileFileName")) { obj.PhotoResourceFile.FileName = (string)dr["PhotoResourceFileFileName"]; }
                if (list.IsColumnPresent("PhotoResourceFileCreatedDT")) { obj.PhotoResourceFile.CreatedDT = (DateTime)dr["PhotoResourceFileCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendPhotos
        /// </summary>
        public static List<AskAFriendPhoto> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendPhoto> arr = new List<AskAFriendPhoto>();

            AskAFriendPhoto obj;

            while (dr.Read())
            {
                obj = new AskAFriendPhoto();
                if (list.IsColumnPresent("AskAFriendPhotoID")) { obj._askAFriendPhotoID = (int)dr["AskAFriendPhotoID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("IndexOrder")) { obj._indexOrder = (int)dr["IndexOrder"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AskAFriendPhoto object or in the case of a zero AskAFriendPhotoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAskAFriendPhoto");

            db.AddInParameter(dbCommand, "AskAFriendPhotoID", DbType.Int32, AskAFriendPhotoID);
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);
            db.AddInParameter(dbCommand, "PhotoResourceFileID", DbType.Int32, PhotoResourceFileID);
            db.AddInParameter(dbCommand, "IndexOrder", DbType.Int32, IndexOrder);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AskAFriendPhotoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Gets all the AskAFriendPhoto in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static AskAFriendPhoto GetAskAFriendPhotoByAskAFriendPhotoIDWithJoin(int AskAFriendPhotoID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendPhotoByAskAFriendPhotoIDWithJoin");
            db.AddInParameter(dbCommand, "AskAFriendPhotoID", DbType.Int32, AskAFriendPhotoID);

            List<AskAFriendPhoto> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a AskAFriendResponse in the system
    /// </summary>
    public partial class AskAFriendResponse
    {
        #region Fields and Properties

        private int _askAFriendResponseID;		//primary key of the AskAQuestionResponse
        private int _askAFriendID;		//the AskAQuestion that the response belongs to
        private int _memberID;		//The MemberID of the person who posted the response
        private int _result;		//

        Database db;
        /// <summary>
        /// primary key of the AskAQuestionResponse
        /// </summary>
        public int AskAFriendResponseID
        {
            get { return _askAFriendResponseID; }
            set { _askAFriendResponseID = value; }
        }

        /// <summary>
        /// the AskAQuestion that the response belongs to
        /// </summary>
        public int AskAFriendID
        {
            get { return _askAFriendID; }
            set { _askAFriendID = value; }
        }

        /// <summary>
        /// The MemberID of the person who posted the response
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Result
        {
            get { return _result; }
            set { _result = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public AskAFriendResponse()
        {

        }

        /// <summary>
        /// Instanciates a AskAFriendResponse object from the database via the AskAFriendResponseID
        /// </summary>
        public AskAFriendResponse(int AskAFriendResponseID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendResponseByAskAFriendResponseID");
            db.AddInParameter(dbCommand, "AskAFriendResponseID", DbType.Int32, AskAFriendResponseID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("AskAFriendResponseID")) { this._askAFriendResponseID = (int)dr["AskAFriendResponseID"]; }
                    if (list.IsColumnPresent("AskAFriendID")) { this._askAFriendID = (int)dr["AskAFriendID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Result")) { this._result = (int)dr["Result"]; }

                }
                else
                {
                    throw new Exception("There is no AskAFriendResponse in the database with the ID " + AskAFriendResponseID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the AskAFriendResponse in the database 
        /// </summary>
        public static List<AskAFriendResponse> GetAllAskAFriendResponse()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllAskAFriendResponse");

            List<AskAFriendResponse> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendResponses
        /// </summary>
        public static List<AskAFriendResponse> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendResponse> arr = new List<AskAFriendResponse>();

            AskAFriendResponse obj;

            while (dr.Read())
            {
                obj = new AskAFriendResponse();
                if (list.IsColumnPresent("AskAFriendResponseID")) { obj._askAFriendResponseID = (int)dr["AskAFriendResponseID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Result")) { obj._result = (int)dr["Result"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of AskAFriendResponses
        /// </summary>
        public static List<AskAFriendResponse> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<AskAFriendResponse> arr = new List<AskAFriendResponse>();

            AskAFriendResponse obj;

            while (dr.Read())
            {
                obj = new AskAFriendResponse();
                if (list.IsColumnPresent("AskAFriendResponseID")) { obj._askAFriendResponseID = (int)dr["AskAFriendResponseID"]; }
                if (list.IsColumnPresent("AskAFriendID")) { obj._askAFriendID = (int)dr["AskAFriendID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Result")) { obj._result = (int)dr["Result"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the AskAFriendResponse object or in the case of a zero AskAFriendResponseID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveAskAFriendResponse");

            db.AddInParameter(dbCommand, "AskAFriendResponseID", DbType.Int32, AskAFriendResponseID);
            db.AddInParameter(dbCommand, "AskAFriendID", DbType.Int32, AskAFriendID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Result", DbType.Int32, Result);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.AskAFriendResponseID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Banner in the system
    /// </summary>
    public partial class Banner
    {
        /// <summary>
        /// The BannerClick objects for this Banner
        /// </summary>
        public List<BannerClick> BannerClick
        {
            get
            {
                if (bannerClick == null)
                    this.bannerClick = this.GetBannerClickByBannerID();
                return bannerClick;
            }
            set { bannerClick = value; }
        }


        /// <summary>
        /// The BannerImpression objects for this Banner
        /// </summary>
        public List<BannerImpression> BannerImpression
        {
            get
            {
                if (bannerImpression == null)
                    this.bannerImpression = this.GetBannerImpressionByBannerID();
                return bannerImpression;
            }
            set { bannerImpression = value; }
        }


        #region Fields and Properties

        private int _bannerID;		//
        private string _webBannerID = "";		//
        private int _iMSPlanID;		//
        private string _fileLocation = "";		//
        private int _bannerType;		//0 = VideoInjection, 1 = PageBanner, 2 = EmailBanner
        private string _clickThroughURL = "";		//
        private int _totalImpressions;		//
        private int _totalClicks;		//
        private List<BannerClick> bannerClick;		// Foreign object
        private List<BannerImpression> bannerImpression;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BannerID
        {
            get { return _bannerID; }
            set { _bannerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebBannerID
        {
            get { return _webBannerID; }
            set { _webBannerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IMSPlanID
        {
            get { return _iMSPlanID; }
            set { _iMSPlanID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FileLocation
        {
            get { return _fileLocation; }
            set { _fileLocation = value; }
        }

        /// <summary>
        /// 0 = VideoInjection, 1 = PageBanner, 2 = EmailBanner
        /// </summary>
        public int BannerType
        {
            get { return _bannerType; }
            set { _bannerType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ClickThroughURL
        {
            get { return _clickThroughURL; }
            set { _clickThroughURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TotalImpressions
        {
            get { return _totalImpressions; }
            set { _totalImpressions = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TotalClicks
        {
            get { return _totalClicks; }
            set { _totalClicks = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Banner()
        {

        }

        /// <summary>
        /// Instanciates a Banner object from the database via the BannerID
        /// </summary>
        public Banner(int BannerID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerByBannerID");
            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BannerID")) { this._bannerID = (int)dr["BannerID"]; }
                    if (list.IsColumnPresent("WebBannerID")) { this._webBannerID = (string)dr["WebBannerID"]; }
                    if (list.IsColumnPresent("IMSPlanID")) { this._iMSPlanID = (int)dr["IMSPlanID"]; }
                    if (list.IsColumnPresent("FileLocation")) { this._fileLocation = (string)dr["FileLocation"]; }
                    if (list.IsColumnPresent("BannerType")) { this._bannerType = (int)dr["BannerType"]; }
                    if (list.IsColumnPresent("ClickThroughURL")) { this._clickThroughURL = (string)dr["ClickThroughURL"]; }
                    if (list.IsColumnPresent("TotalImpressions")) { this._totalImpressions = (int)dr["TotalImpressions"]; }
                    if (list.IsColumnPresent("TotalClicks")) { this._totalClicks = (int)dr["TotalClicks"]; }

                }
                else
                {
                    throw new Exception("There is no Banner in the database with the ID " + BannerID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Banner in the database 
        /// </summary>
        public static List<Banner> GetAllBanner()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBanner");

            List<Banner> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Banners
        /// </summary>
        public static List<Banner> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Banner> arr = new List<Banner>();

            Banner obj;

            while (dr.Read())
            {
                obj = new Banner();
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("WebBannerID")) { obj._webBannerID = (string)dr["WebBannerID"]; }
                if (list.IsColumnPresent("IMSPlanID")) { obj._iMSPlanID = (int)dr["IMSPlanID"]; }
                if (list.IsColumnPresent("FileLocation")) { obj._fileLocation = (string)dr["FileLocation"]; }
                if (list.IsColumnPresent("BannerType")) { obj._bannerType = (int)dr["BannerType"]; }
                if (list.IsColumnPresent("ClickThroughURL")) { obj._clickThroughURL = (string)dr["ClickThroughURL"]; }
                if (list.IsColumnPresent("TotalImpressions")) { obj._totalImpressions = (int)dr["TotalImpressions"]; }
                if (list.IsColumnPresent("TotalClicks")) { obj._totalClicks = (int)dr["TotalClicks"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Banners
        /// </summary>
        public static List<Banner> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Banner> arr = new List<Banner>();

            Banner obj;

            while (dr.Read())
            {
                obj = new Banner();
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("WebBannerID")) { obj._webBannerID = (string)dr["WebBannerID"]; }
                if (list.IsColumnPresent("IMSPlanID")) { obj._iMSPlanID = (int)dr["IMSPlanID"]; }
                if (list.IsColumnPresent("FileLocation")) { obj._fileLocation = (string)dr["FileLocation"]; }
                if (list.IsColumnPresent("BannerType")) { obj._bannerType = (int)dr["BannerType"]; }
                if (list.IsColumnPresent("ClickThroughURL")) { obj._clickThroughURL = (string)dr["ClickThroughURL"]; }
                if (list.IsColumnPresent("TotalImpressions")) { obj._totalImpressions = (int)dr["TotalImpressions"]; }
                if (list.IsColumnPresent("TotalClicks")) { obj._totalClicks = (int)dr["TotalClicks"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Banner object or in the case of a zero BannerID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBanner");

            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);
            db.AddInParameter(dbCommand, "WebBannerID", DbType.String, WebBannerID);
            db.AddInParameter(dbCommand, "IMSPlanID", DbType.Int32, IMSPlanID);
            db.AddInParameter(dbCommand, "FileLocation", DbType.String, FileLocation);
            db.AddInParameter(dbCommand, "BannerType", DbType.Int32, BannerType);
            db.AddInParameter(dbCommand, "ClickThroughURL", DbType.String, ClickThroughURL);
            db.AddInParameter(dbCommand, "TotalImpressions", DbType.Int32, TotalImpressions);
            db.AddInParameter(dbCommand, "TotalClicks", DbType.Int32, TotalClicks);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BannerID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the BannerClick objects for this Banner
        /// </summary>
        private List<BannerClick> GetBannerClickByBannerID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerClickByBannerID");
            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);

            List<BannerClick> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BannerClick.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the BannerImpression objects for this Banner
        /// </summary>
        private List<BannerImpression> GetBannerImpressionByBannerID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerImpressionByBannerID");
            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);

            List<BannerImpression> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BannerImpression.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a BannerClick in the system
    /// </summary>
    public partial class BannerClick
    {
        #region Fields and Properties

        private int _bannerClickID;		//
        private int _bannerID;		//
        private int _memberClickID;		//
        private string _iPAddress = "";		//
        private DateTime _clickedDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BannerClickID
        {
            get { return _bannerClickID; }
            set { _bannerClickID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BannerID
        {
            get { return _bannerID; }
            set { _bannerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberClickID
        {
            get { return _memberClickID; }
            set { _memberClickID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IPAddress
        {
            get { return _iPAddress; }
            set { _iPAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime ClickedDT
        {
            get { return _clickedDT; }
            set { _clickedDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public BannerClick()
        {

        }

        /// <summary>
        /// Instanciates a BannerClick object from the database via the BannerClickID
        /// </summary>
        public BannerClick(int BannerClickID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerClickByBannerClickID");
            db.AddInParameter(dbCommand, "BannerClickID", DbType.Int32, BannerClickID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BannerClickID")) { this._bannerClickID = (int)dr["BannerClickID"]; }
                    if (list.IsColumnPresent("BannerID")) { this._bannerID = (int)dr["BannerID"]; }
                    if (list.IsColumnPresent("MemberClickID")) { this._memberClickID = (int)dr["MemberClickID"]; }
                    if (list.IsColumnPresent("IPAddress")) { this._iPAddress = (string)dr["IPAddress"]; }
                    if (list.IsColumnPresent("ClickedDT")) { this._clickedDT = (DateTime)dr["ClickedDT"]; }

                }
                else
                {
                    throw new Exception("There is no BannerClick in the database with the ID " + BannerClickID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the BannerClick in the database 
        /// </summary>
        public static List<BannerClick> GetAllBannerClick()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBannerClick");

            List<BannerClick> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BannerClicks
        /// </summary>
        public static List<BannerClick> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BannerClick> arr = new List<BannerClick>();

            BannerClick obj;

            while (dr.Read())
            {
                obj = new BannerClick();
                if (list.IsColumnPresent("BannerClickID")) { obj._bannerClickID = (int)dr["BannerClickID"]; }
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("MemberClickID")) { obj._memberClickID = (int)dr["MemberClickID"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("ClickedDT")) { obj._clickedDT = (DateTime)dr["ClickedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BannerClicks
        /// </summary>
        public static List<BannerClick> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BannerClick> arr = new List<BannerClick>();

            BannerClick obj;

            while (dr.Read())
            {
                obj = new BannerClick();
                if (list.IsColumnPresent("BannerClickID")) { obj._bannerClickID = (int)dr["BannerClickID"]; }
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("MemberClickID")) { obj._memberClickID = (int)dr["MemberClickID"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("ClickedDT")) { obj._clickedDT = (DateTime)dr["ClickedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the BannerClick object or in the case of a zero BannerClickID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBannerClick");

            db.AddInParameter(dbCommand, "BannerClickID", DbType.Int32, BannerClickID);
            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);
            db.AddInParameter(dbCommand, "MemberClickID", DbType.Int32, MemberClickID);
            db.AddInParameter(dbCommand, "IPAddress", DbType.String, IPAddress);
            db.AddInParameter(dbCommand, "ClickedDT", DbType.DateTime, ClickedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BannerClickID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a BannerImpression in the system
    /// </summary>
    public partial class BannerImpression
    {
        #region Fields and Properties

        private int _bannerImpressionID;		//
        private int _bannerID;		//
        private string _uRL = "";		//
        private DateTime _displayedDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BannerImpressionID
        {
            get { return _bannerImpressionID; }
            set { _bannerImpressionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BannerID
        {
            get { return _bannerID; }
            set { _bannerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string URL
        {
            get { return _uRL; }
            set { _uRL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DisplayedDT
        {
            get { return _displayedDT; }
            set { _displayedDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public BannerImpression()
        {

        }

        /// <summary>
        /// Instanciates a BannerImpression object from the database via the BannerImpressionID
        /// </summary>
        public BannerImpression(int BannerImpressionID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerImpressionByBannerImpressionID");
            db.AddInParameter(dbCommand, "BannerImpressionID", DbType.Int32, BannerImpressionID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BannerImpressionID")) { this._bannerImpressionID = (int)dr["BannerImpressionID"]; }
                    if (list.IsColumnPresent("BannerID")) { this._bannerID = (int)dr["BannerID"]; }
                    if (list.IsColumnPresent("URL")) { this._uRL = (string)dr["URL"]; }
                    if (list.IsColumnPresent("DisplayedDT")) { this._displayedDT = (DateTime)dr["DisplayedDT"]; }

                }
                else
                {
                    throw new Exception("There is no BannerImpression in the database with the ID " + BannerImpressionID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the BannerImpression in the database 
        /// </summary>
        public static List<BannerImpression> GetAllBannerImpression()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBannerImpression");

            List<BannerImpression> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BannerImpressions
        /// </summary>
        public static List<BannerImpression> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BannerImpression> arr = new List<BannerImpression>();

            BannerImpression obj;

            while (dr.Read())
            {
                obj = new BannerImpression();
                if (list.IsColumnPresent("BannerImpressionID")) { obj._bannerImpressionID = (int)dr["BannerImpressionID"]; }
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("URL")) { obj._uRL = (string)dr["URL"]; }
                if (list.IsColumnPresent("DisplayedDT")) { obj._displayedDT = (DateTime)dr["DisplayedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BannerImpressions
        /// </summary>
        public static List<BannerImpression> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BannerImpression> arr = new List<BannerImpression>();

            BannerImpression obj;

            while (dr.Read())
            {
                obj = new BannerImpression();
                if (list.IsColumnPresent("BannerImpressionID")) { obj._bannerImpressionID = (int)dr["BannerImpressionID"]; }
                if (list.IsColumnPresent("BannerID")) { obj._bannerID = (int)dr["BannerID"]; }
                if (list.IsColumnPresent("URL")) { obj._uRL = (string)dr["URL"]; }
                if (list.IsColumnPresent("DisplayedDT")) { obj._displayedDT = (DateTime)dr["DisplayedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the BannerImpression object or in the case of a zero BannerImpressionID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBannerImpression");

            db.AddInParameter(dbCommand, "BannerImpressionID", DbType.Int32, BannerImpressionID);
            db.AddInParameter(dbCommand, "BannerID", DbType.Int32, BannerID);
            db.AddInParameter(dbCommand, "URL", DbType.String, URL);
            db.AddInParameter(dbCommand, "DisplayedDT", DbType.DateTime, DisplayedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BannerImpressionID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a BlogEntry in the system
    /// </summary>
    public partial class BlogEntry
    {
        #region Fields and Properties

        private int _blogEntryID;		//
        private string _webBlogEntryID = "";		//
        private int _memberID;		//
        private string _title = "";		//
        private string _body = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BlogEntryID
        {
            get { return _blogEntryID; }
            set { _blogEntryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebBlogEntryID
        {
            get { return _webBlogEntryID; }
            set { _webBlogEntryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Body
        {
            get { return _body; }
            set { _body = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public BlogEntry()
        {

        }

        /// <summary>
        /// Instanciates a BlogEntry object from the database via the BlogEntryID
        /// </summary>
        public BlogEntry(int BlogEntryID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogEntryByBlogEntryID");
            db.AddInParameter(dbCommand, "BlogEntryID", DbType.Int32, BlogEntryID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BlogEntryID")) { this._blogEntryID = (int)dr["BlogEntryID"]; }
                    if (list.IsColumnPresent("WebBlogEntryID")) { this._webBlogEntryID = (string)dr["WebBlogEntryID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Title")) { this._title = (string)dr["Title"]; }
                    if (list.IsColumnPresent("Body")) { this._body = (string)dr["Body"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no BlogEntry in the database with the ID " + BlogEntryID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the BlogEntry in the database 
        /// </summary>
        public static List<BlogEntry> GetAllBlogEntry()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBlogEntry");

            List<BlogEntry> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogEntrys
        /// </summary>
        public static List<BlogEntry> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogEntry> arr = new List<BlogEntry>();

            BlogEntry obj;

            while (dr.Read())
            {
                obj = new BlogEntry();
                if (list.IsColumnPresent("BlogEntryID")) { obj._blogEntryID = (int)dr["BlogEntryID"]; }
                if (list.IsColumnPresent("WebBlogEntryID")) { obj._webBlogEntryID = (string)dr["WebBlogEntryID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Body")) { obj._body = (string)dr["Body"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogEntrys
        /// </summary>
        public static List<BlogEntry> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogEntry> arr = new List<BlogEntry>();

            BlogEntry obj;

            while (dr.Read())
            {
                obj = new BlogEntry();
                if (list.IsColumnPresent("BlogEntryID")) { obj._blogEntryID = (int)dr["BlogEntryID"]; }
                if (list.IsColumnPresent("WebBlogEntryID")) { obj._webBlogEntryID = (string)dr["WebBlogEntryID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Body")) { obj._body = (string)dr["Body"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the BlogEntry object or in the case of a zero BlogEntryID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBlogEntry");

            db.AddInParameter(dbCommand, "BlogEntryID", DbType.Int32, BlogEntryID);
            db.AddInParameter(dbCommand, "WebBlogEntryID", DbType.String, WebBlogEntryID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Title", DbType.String, Title);
            db.AddInParameter(dbCommand, "Body", DbType.String, Body);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BlogEntryID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Gets all the BlogEntry in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static BlogEntry GetBlogEntryByBlogEntryIDWithJoin(int BlogEntryID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogEntryByBlogEntryIDWithJoin");
            db.AddInParameter(dbCommand, "BlogEntryID", DbType.Int32, BlogEntryID);

            List<BlogEntry> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a BlogPhoto in the system
    /// </summary>
    public partial class BlogPhoto
    {
        #region Fields and Properties

        private int _blogPhotoID;		//
        private int _memberID;		//
        private int _photoID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BlogPhotoID
        {
            get { return _blogPhotoID; }
            set { _blogPhotoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public BlogPhoto()
        {

        }

        /// <summary>
        /// Instanciates a BlogPhoto object from the database via the BlogPhotoID
        /// </summary>
        public BlogPhoto(int BlogPhotoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogPhotoByBlogPhotoID");
            db.AddInParameter(dbCommand, "BlogPhotoID", DbType.Int32, BlogPhotoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BlogPhotoID")) { this._blogPhotoID = (int)dr["BlogPhotoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }

                }
                else
                {
                    throw new Exception("There is no BlogPhoto in the database with the ID " + BlogPhotoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the BlogPhoto in the database 
        /// </summary>
        public static List<BlogPhoto> GetAllBlogPhoto()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBlogPhoto");

            List<BlogPhoto> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogPhotos
        /// </summary>
        public static List<BlogPhoto> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogPhoto> arr = new List<BlogPhoto>();

            BlogPhoto obj;

            while (dr.Read())
            {
                obj = new BlogPhoto();
                if (list.IsColumnPresent("BlogPhotoID")) { obj._blogPhotoID = (int)dr["BlogPhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogPhotos
        /// </summary>
        public static List<BlogPhoto> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogPhoto> arr = new List<BlogPhoto>();

            BlogPhoto obj;

            while (dr.Read())
            {
                obj = new BlogPhoto();
                if (list.IsColumnPresent("BlogPhotoID")) { obj._blogPhotoID = (int)dr["BlogPhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the BlogPhoto object or in the case of a zero BlogPhotoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBlogPhoto");

            db.AddInParameter(dbCommand, "BlogPhotoID", DbType.Int32, BlogPhotoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BlogPhotoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a BlogVideo in the system
    /// </summary>
    public partial class BlogVideo
    {
        #region Fields and Properties

        private int _blogVideoID;		//
        private int _memberID;		//
        private int _videoID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BlogVideoID
        {
            get { return _blogVideoID; }
            set { _blogVideoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public BlogVideo()
        {

        }

        /// <summary>
        /// Instanciates a BlogVideo object from the database via the BlogVideoID
        /// </summary>
        public BlogVideo(int BlogVideoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogVideoByBlogVideoID");
            db.AddInParameter(dbCommand, "BlogVideoID", DbType.Int32, BlogVideoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BlogVideoID")) { this._blogVideoID = (int)dr["BlogVideoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no BlogVideo in the database with the ID " + BlogVideoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the BlogVideo in the database 
        /// </summary>
        public static List<BlogVideo> GetAllBlogVideo()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBlogVideo");

            List<BlogVideo> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogVideos
        /// </summary>
        public static List<BlogVideo> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogVideo> arr = new List<BlogVideo>();

            BlogVideo obj;

            while (dr.Read())
            {
                obj = new BlogVideo();
                if (list.IsColumnPresent("BlogVideoID")) { obj._blogVideoID = (int)dr["BlogVideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of BlogVideos
        /// </summary>
        public static List<BlogVideo> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<BlogVideo> arr = new List<BlogVideo>();

            BlogVideo obj;

            while (dr.Read())
            {
                obj = new BlogVideo();
                if (list.IsColumnPresent("BlogVideoID")) { obj._blogVideoID = (int)dr["BlogVideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the BlogVideo object or in the case of a zero BlogVideoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBlogVideo");

            db.AddInParameter(dbCommand, "BlogVideoID", DbType.Int32, BlogVideoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BlogVideoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Business in the system
    /// </summary>
    public partial class Business
    {
        /// <summary>
        /// The IMSPlan objects for this Business
        /// </summary>
        public List<IMSPlan> IMSPlan
        {
            get
            {
                if (iMSPlan == null)
                    this.iMSPlan = this.GetIMSPlanByBusinessID();
                return iMSPlan;
            }
            set { iMSPlan = value; }
        }


        #region Fields and Properties

        private int _businessID;		//
        private int _memberID;		//
        private string _companyName = "";		//
        private int _yearFounded;		//
        private string _industrySector = "";		//
        private int _numberOfEmployees;		//
        private string _basicInfo = "";		//
        private string _companyWebsite = "";		//
        private string _tagLine = "";		//
        private string _contactFirst = "";		//
        private string _contactLast = "";		//
        private string _companySize = "";		//
        private string _streetAddress = "";		//
        private string _city = "";		//
        private string _state = "";		//
        private string _country = "";		//
        private string _zipCode = "";		//
        private string _mySpaceURL = "";		//
        private string _faceBookURL = "";		//
        private string _blogURL = "";		//
        private string _blogFeedURL = "";		//
        private string _otherWebsites = "";		//
        private DateTime _dTLastUpdated = new DateTime(1900, 1, 1);		//
        private string _embeddedContent = "";		//
        private string _ourCompany = "";		//
        private string _businessHeader1 = "";		//
        private string _businessDescription1 = "";		//
        private string _businessHeader2 = "";		//
        private string _businessDescription2 = "";		//
        private string _businessHeader3 = "";		//
        private string _businessDescription3 = "";		//
        private List<IMSPlan> iMSPlan;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int BusinessID
        {
            get { return _businessID; }
            set { _businessID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CompanyName
        {
            get { return _companyName; }
            set { _companyName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int YearFounded
        {
            get { return _yearFounded; }
            set { _yearFounded = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IndustrySector
        {
            get { return _industrySector; }
            set { _industrySector = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfEmployees
        {
            get { return _numberOfEmployees; }
            set { _numberOfEmployees = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BasicInfo
        {
            get { return _basicInfo; }
            set { _basicInfo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CompanyWebsite
        {
            get { return _companyWebsite; }
            set { _companyWebsite = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TagLine
        {
            get { return _tagLine; }
            set { _tagLine = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ContactFirst
        {
            get { return _contactFirst; }
            set { _contactFirst = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ContactLast
        {
            get { return _contactLast; }
            set { _contactLast = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CompanySize
        {
            get { return _companySize; }
            set { _companySize = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string StreetAddress
        {
            get { return _streetAddress; }
            set { _streetAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Country
        {
            get { return _country; }
            set { _country = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ZipCode
        {
            get { return _zipCode; }
            set { _zipCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MySpaceURL
        {
            get { return _mySpaceURL; }
            set { _mySpaceURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FaceBookURL
        {
            get { return _faceBookURL; }
            set { _faceBookURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BlogURL
        {
            get { return _blogURL; }
            set { _blogURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BlogFeedURL
        {
            get { return _blogFeedURL; }
            set { _blogFeedURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OtherWebsites
        {
            get { return _otherWebsites; }
            set { _otherWebsites = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTLastUpdated
        {
            get { return _dTLastUpdated; }
            set { _dTLastUpdated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmbeddedContent
        {
            get { return _embeddedContent; }
            set { _embeddedContent = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string OurCompany
        {
            get { return _ourCompany; }
            set { _ourCompany = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessHeader1
        {
            get { return _businessHeader1; }
            set { _businessHeader1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessDescription1
        {
            get { return _businessDescription1; }
            set { _businessDescription1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessHeader2
        {
            get { return _businessHeader2; }
            set { _businessHeader2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessDescription2
        {
            get { return _businessDescription2; }
            set { _businessDescription2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessHeader3
        {
            get { return _businessHeader3; }
            set { _businessHeader3 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BusinessDescription3
        {
            get { return _businessDescription3; }
            set { _businessDescription3 = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Business()
        {

        }

        /// <summary>
        /// Instanciates a Business object from the database via the BusinessID
        /// </summary>
        public Business(int BusinessID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBusinessByBusinessID");
            db.AddInParameter(dbCommand, "BusinessID", DbType.Int32, BusinessID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("BusinessID")) { this._businessID = (int)dr["BusinessID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("CompanyName")) { this._companyName = (string)dr["CompanyName"]; }
                    if (list.IsColumnPresent("YearFounded")) { this._yearFounded = (int)dr["YearFounded"]; }
                    if (list.IsColumnPresent("IndustrySector")) { this._industrySector = (string)dr["IndustrySector"]; }
                    if (list.IsColumnPresent("NumberOfEmployees")) { this._numberOfEmployees = (int)dr["NumberOfEmployees"]; }
                    if (list.IsColumnPresent("BasicInfo")) { this._basicInfo = (string)dr["BasicInfo"]; }
                    if (list.IsColumnPresent("CompanyWebsite")) { this._companyWebsite = (string)dr["CompanyWebsite"]; }
                    if (list.IsColumnPresent("TagLine")) { this._tagLine = (string)dr["TagLine"]; }
                    if (list.IsColumnPresent("ContactFirst")) { this._contactFirst = (string)dr["ContactFirst"]; }
                    if (list.IsColumnPresent("ContactLast")) { this._contactLast = (string)dr["ContactLast"]; }
                    if (list.IsColumnPresent("CompanySize")) { this._companySize = (string)dr["CompanySize"]; }
                    if (list.IsColumnPresent("StreetAddress")) { this._streetAddress = (string)dr["StreetAddress"]; }
                    if (list.IsColumnPresent("City")) { this._city = (string)dr["City"]; }
                    if (list.IsColumnPresent("State")) { this._state = (string)dr["State"]; }
                    if (list.IsColumnPresent("Country")) { this._country = (string)dr["Country"]; }
                    if (list.IsColumnPresent("ZipCode")) { this._zipCode = (string)dr["ZipCode"]; }
                    if (list.IsColumnPresent("MySpaceURL")) { this._mySpaceURL = (string)dr["MySpaceURL"]; }
                    if (list.IsColumnPresent("FaceBookURL")) { this._faceBookURL = (string)dr["FaceBookURL"]; }
                    if (list.IsColumnPresent("BlogURL")) { this._blogURL = (string)dr["BlogURL"]; }
                    if (list.IsColumnPresent("BlogFeedURL")) { this._blogFeedURL = (string)dr["BlogFeedURL"]; }
                    if (list.IsColumnPresent("OtherWebsites")) { this._otherWebsites = (string)dr["OtherWebsites"]; }
                    if (list.IsColumnPresent("DTLastUpdated")) { this._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                    if (list.IsColumnPresent("EmbeddedContent")) { this._embeddedContent = (string)dr["EmbeddedContent"]; }
                    if (list.IsColumnPresent("OurCompany")) { this._ourCompany = (string)dr["OurCompany"]; }
                    if (list.IsColumnPresent("BusinessHeader1")) { this._businessHeader1 = (string)dr["BusinessHeader1"]; }
                    if (list.IsColumnPresent("BusinessDescription1")) { this._businessDescription1 = (string)dr["BusinessDescription1"]; }
                    if (list.IsColumnPresent("BusinessHeader2")) { this._businessHeader2 = (string)dr["BusinessHeader2"]; }
                    if (list.IsColumnPresent("BusinessDescription2")) { this._businessDescription2 = (string)dr["BusinessDescription2"]; }
                    if (list.IsColumnPresent("BusinessHeader3")) { this._businessHeader3 = (string)dr["BusinessHeader3"]; }
                    if (list.IsColumnPresent("BusinessDescription3")) { this._businessDescription3 = (string)dr["BusinessDescription3"]; }

                }
                else
                {
                    throw new Exception("There is no Business in the database with the ID " + BusinessID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Business in the database 
        /// </summary>
        public static List<Business> GetAllBusiness()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllBusiness");

            List<Business> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Businesss
        /// </summary>
        public static List<Business> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Business> arr = new List<Business>();

            Business obj;

            while (dr.Read())
            {
                obj = new Business();
                if (list.IsColumnPresent("BusinessID")) { obj._businessID = (int)dr["BusinessID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("CompanyName")) { obj._companyName = (string)dr["CompanyName"]; }
                if (list.IsColumnPresent("YearFounded")) { obj._yearFounded = (int)dr["YearFounded"]; }
                if (list.IsColumnPresent("IndustrySector")) { obj._industrySector = (string)dr["IndustrySector"]; }
                if (list.IsColumnPresent("NumberOfEmployees")) { obj._numberOfEmployees = (int)dr["NumberOfEmployees"]; }
                if (list.IsColumnPresent("BasicInfo")) { obj._basicInfo = (string)dr["BasicInfo"]; }
                if (list.IsColumnPresent("CompanyWebsite")) { obj._companyWebsite = (string)dr["CompanyWebsite"]; }
                if (list.IsColumnPresent("TagLine")) { obj._tagLine = (string)dr["TagLine"]; }
                if (list.IsColumnPresent("ContactFirst")) { obj._contactFirst = (string)dr["ContactFirst"]; }
                if (list.IsColumnPresent("ContactLast")) { obj._contactLast = (string)dr["ContactLast"]; }
                if (list.IsColumnPresent("CompanySize")) { obj._companySize = (string)dr["CompanySize"]; }
                if (list.IsColumnPresent("StreetAddress")) { obj._streetAddress = (string)dr["StreetAddress"]; }
                if (list.IsColumnPresent("City")) { obj._city = (string)dr["City"]; }
                if (list.IsColumnPresent("State")) { obj._state = (string)dr["State"]; }
                if (list.IsColumnPresent("Country")) { obj._country = (string)dr["Country"]; }
                if (list.IsColumnPresent("ZipCode")) { obj._zipCode = (string)dr["ZipCode"]; }
                if (list.IsColumnPresent("MySpaceURL")) { obj._mySpaceURL = (string)dr["MySpaceURL"]; }
                if (list.IsColumnPresent("FaceBookURL")) { obj._faceBookURL = (string)dr["FaceBookURL"]; }
                if (list.IsColumnPresent("BlogURL")) { obj._blogURL = (string)dr["BlogURL"]; }
                if (list.IsColumnPresent("BlogFeedURL")) { obj._blogFeedURL = (string)dr["BlogFeedURL"]; }
                if (list.IsColumnPresent("OtherWebsites")) { obj._otherWebsites = (string)dr["OtherWebsites"]; }
                if (list.IsColumnPresent("DTLastUpdated")) { obj._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                if (list.IsColumnPresent("EmbeddedContent")) { obj._embeddedContent = (string)dr["EmbeddedContent"]; }
                if (list.IsColumnPresent("OurCompany")) { obj._ourCompany = (string)dr["OurCompany"]; }
                if (list.IsColumnPresent("BusinessHeader1")) { obj._businessHeader1 = (string)dr["BusinessHeader1"]; }
                if (list.IsColumnPresent("BusinessDescription1")) { obj._businessDescription1 = (string)dr["BusinessDescription1"]; }
                if (list.IsColumnPresent("BusinessHeader2")) { obj._businessHeader2 = (string)dr["BusinessHeader2"]; }
                if (list.IsColumnPresent("BusinessDescription2")) { obj._businessDescription2 = (string)dr["BusinessDescription2"]; }
                if (list.IsColumnPresent("BusinessHeader3")) { obj._businessHeader3 = (string)dr["BusinessHeader3"]; }
                if (list.IsColumnPresent("BusinessDescription3")) { obj._businessDescription3 = (string)dr["BusinessDescription3"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Businesss
        /// </summary>
        public static List<Business> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Business> arr = new List<Business>();

            Business obj;

            while (dr.Read())
            {
                obj = new Business();
                if (list.IsColumnPresent("BusinessID")) { obj._businessID = (int)dr["BusinessID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("CompanyName")) { obj._companyName = (string)dr["CompanyName"]; }
                if (list.IsColumnPresent("YearFounded")) { obj._yearFounded = (int)dr["YearFounded"]; }
                if (list.IsColumnPresent("IndustrySector")) { obj._industrySector = (string)dr["IndustrySector"]; }
                if (list.IsColumnPresent("NumberOfEmployees")) { obj._numberOfEmployees = (int)dr["NumberOfEmployees"]; }
                if (list.IsColumnPresent("BasicInfo")) { obj._basicInfo = (string)dr["BasicInfo"]; }
                if (list.IsColumnPresent("CompanyWebsite")) { obj._companyWebsite = (string)dr["CompanyWebsite"]; }
                if (list.IsColumnPresent("TagLine")) { obj._tagLine = (string)dr["TagLine"]; }
                if (list.IsColumnPresent("ContactFirst")) { obj._contactFirst = (string)dr["ContactFirst"]; }
                if (list.IsColumnPresent("ContactLast")) { obj._contactLast = (string)dr["ContactLast"]; }
                if (list.IsColumnPresent("CompanySize")) { obj._companySize = (string)dr["CompanySize"]; }
                if (list.IsColumnPresent("StreetAddress")) { obj._streetAddress = (string)dr["StreetAddress"]; }
                if (list.IsColumnPresent("City")) { obj._city = (string)dr["City"]; }
                if (list.IsColumnPresent("State")) { obj._state = (string)dr["State"]; }
                if (list.IsColumnPresent("Country")) { obj._country = (string)dr["Country"]; }
                if (list.IsColumnPresent("ZipCode")) { obj._zipCode = (string)dr["ZipCode"]; }
                if (list.IsColumnPresent("MySpaceURL")) { obj._mySpaceURL = (string)dr["MySpaceURL"]; }
                if (list.IsColumnPresent("FaceBookURL")) { obj._faceBookURL = (string)dr["FaceBookURL"]; }
                if (list.IsColumnPresent("BlogURL")) { obj._blogURL = (string)dr["BlogURL"]; }
                if (list.IsColumnPresent("BlogFeedURL")) { obj._blogFeedURL = (string)dr["BlogFeedURL"]; }
                if (list.IsColumnPresent("OtherWebsites")) { obj._otherWebsites = (string)dr["OtherWebsites"]; }
                if (list.IsColumnPresent("DTLastUpdated")) { obj._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                if (list.IsColumnPresent("EmbeddedContent")) { obj._embeddedContent = (string)dr["EmbeddedContent"]; }
                if (list.IsColumnPresent("OurCompany")) { obj._ourCompany = (string)dr["OurCompany"]; }
                if (list.IsColumnPresent("BusinessHeader1")) { obj._businessHeader1 = (string)dr["BusinessHeader1"]; }
                if (list.IsColumnPresent("BusinessDescription1")) { obj._businessDescription1 = (string)dr["BusinessDescription1"]; }
                if (list.IsColumnPresent("BusinessHeader2")) { obj._businessHeader2 = (string)dr["BusinessHeader2"]; }
                if (list.IsColumnPresent("BusinessDescription2")) { obj._businessDescription2 = (string)dr["BusinessDescription2"]; }
                if (list.IsColumnPresent("BusinessHeader3")) { obj._businessHeader3 = (string)dr["BusinessHeader3"]; }
                if (list.IsColumnPresent("BusinessDescription3")) { obj._businessDescription3 = (string)dr["BusinessDescription3"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Business object or in the case of a zero BusinessID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveBusiness");

            db.AddInParameter(dbCommand, "BusinessID", DbType.Int32, BusinessID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "CompanyName", DbType.String, CompanyName);
            db.AddInParameter(dbCommand, "YearFounded", DbType.Int32, YearFounded);
            db.AddInParameter(dbCommand, "IndustrySector", DbType.String, IndustrySector);
            db.AddInParameter(dbCommand, "NumberOfEmployees", DbType.Int32, NumberOfEmployees);
            db.AddInParameter(dbCommand, "BasicInfo", DbType.String, BasicInfo);
            db.AddInParameter(dbCommand, "CompanyWebsite", DbType.String, CompanyWebsite);
            db.AddInParameter(dbCommand, "TagLine", DbType.String, TagLine);
            db.AddInParameter(dbCommand, "ContactFirst", DbType.String, ContactFirst);
            db.AddInParameter(dbCommand, "ContactLast", DbType.String, ContactLast);
            db.AddInParameter(dbCommand, "CompanySize", DbType.String, CompanySize);
            db.AddInParameter(dbCommand, "StreetAddress", DbType.String, StreetAddress);
            db.AddInParameter(dbCommand, "City", DbType.String, City);
            db.AddInParameter(dbCommand, "State", DbType.String, State);
            db.AddInParameter(dbCommand, "Country", DbType.String, Country);
            db.AddInParameter(dbCommand, "ZipCode", DbType.String, ZipCode);
            db.AddInParameter(dbCommand, "MySpaceURL", DbType.String, MySpaceURL);
            db.AddInParameter(dbCommand, "FaceBookURL", DbType.String, FaceBookURL);
            db.AddInParameter(dbCommand, "BlogURL", DbType.String, BlogURL);
            db.AddInParameter(dbCommand, "BlogFeedURL", DbType.String, BlogFeedURL);
            db.AddInParameter(dbCommand, "OtherWebsites", DbType.String, OtherWebsites);
            db.AddInParameter(dbCommand, "DTLastUpdated", DbType.DateTime, DTLastUpdated);
            db.AddInParameter(dbCommand, "EmbeddedContent", DbType.String, EmbeddedContent);
            db.AddInParameter(dbCommand, "OurCompany", DbType.String, OurCompany);
            db.AddInParameter(dbCommand, "BusinessHeader1", DbType.String, BusinessHeader1);
            db.AddInParameter(dbCommand, "BusinessDescription1", DbType.String, BusinessDescription1);
            db.AddInParameter(dbCommand, "BusinessHeader2", DbType.String, BusinessHeader2);
            db.AddInParameter(dbCommand, "BusinessDescription2", DbType.String, BusinessDescription2);
            db.AddInParameter(dbCommand, "BusinessHeader3", DbType.String, BusinessHeader3);
            db.AddInParameter(dbCommand, "BusinessDescription3", DbType.String, BusinessDescription3);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.BusinessID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the IMSPlan objects for this Business
        /// </summary>
        private List<IMSPlan> GetIMSPlanByBusinessID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetIMSPlanByBusinessID");
            db.AddInParameter(dbCommand, "BusinessID", DbType.Int32, BusinessID);

            List<IMSPlan> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.IMSPlan.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the Business in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static Business GetBusinessByBusinessIDWithJoin(int BusinessID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBusinessByBusinessIDWithJoin");
            db.AddInParameter(dbCommand, "BusinessID", DbType.Int32, BusinessID);

            List<Business> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Category in the system
    /// </summary>
    public partial class Category
    {
        /// <summary>
        /// The Photo objects for this Category
        /// </summary>
        public List<Photo> Photo
        {
            get
            {
                if (photo == null)
                    this.photo = this.GetPhotoByCategoryID();
                return photo;
            }
            set { photo = value; }
        }


        #region Fields and Properties

        private int _categoryID;		//DB identifier for the Category
        private string _name = "";		//The Display name for the category
        private string _description = "";		//The text description of the category
        private List<Photo> photo;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the Category
        /// </summary>
        public int CategoryID
        {
            get { return _categoryID; }
            set { _categoryID = value; }
        }

        /// <summary>
        /// The Display name for the category
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// The text description of the category
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Category()
        {

        }

        /// <summary>
        /// Instanciates a Category object from the database via the CategoryID
        /// </summary>
        public Category(int CategoryID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCategoryByCategoryID");
            db.AddInParameter(dbCommand, "CategoryID", DbType.Int32, CategoryID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("CategoryID")) { this._categoryID = (int)dr["CategoryID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }

                }
                else
                {
                    throw new Exception("There is no Category in the database with the ID " + CategoryID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Category in the database 
        /// </summary>
        public static List<Category> GetAllCategory()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllCategory");

            List<Category> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Categorys
        /// </summary>
        public static List<Category> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Category> arr = new List<Category>();

            Category obj;

            while (dr.Read())
            {
                obj = new Category();
                if (list.IsColumnPresent("CategoryID")) { obj._categoryID = (int)dr["CategoryID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Categorys
        /// </summary>
        public static List<Category> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Category> arr = new List<Category>();

            Category obj;

            while (dr.Read())
            {
                obj = new Category();
                if (list.IsColumnPresent("CategoryID")) { obj._categoryID = (int)dr["CategoryID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Category object or in the case of a zero CategoryID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveCategory");

            db.AddInParameter(dbCommand, "CategoryID", DbType.Int32, CategoryID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.CategoryID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the Photo objects for this Category
        /// </summary>
        private List<Photo> GetPhotoByCategoryID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoByCategoryID");
            db.AddInParameter(dbCommand, "CategoryID", DbType.Int32, CategoryID);

            List<Photo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Photo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Channel in the system
    /// </summary>
    public partial class Channel
    {
        /// <summary>
        /// The FeaturedChannel objects for this Channel
        /// </summary>
        public List<FeaturedChannel> FeaturedChannel
        {
            get
            {
                if (featuredChannel == null)
                    this.featuredChannel = this.GetFeaturedChannelByChannelID();
                return featuredChannel;
            }
            set { featuredChannel = value; }
        }


        /// <summary>
        /// The CommunityView objects for this Channel
        /// </summary>
        public List<CommunityView> CommunityView
        {
            get
            {
                if (communityView == null)
                    this.communityView = this.GetCommunityViewByChannelID();
                return communityView;
            }
            set { communityView = value; }
        }


        /// <summary>
        /// The Member objects for this Channel
        /// </summary>
        public List<Member> Member
        {
            get
            {
                if (member == null)
                    this.member = this.GetMemberByChannelID();
                return member;
            }
            set { member = value; }
        }


        #region Fields and Properties

        private int _channelID;		//DB identifier for the Channel
        private int _memberID;		//
        private string _name = "";		//The display name of the channel
        private string _description = "";		//The display description
        private string _thumbnail = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private List<FeaturedChannel> featuredChannel;		// Foreign object
        private List<CommunityView> communityView;		// Foreign object
        private List<Member> member;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the Channel
        /// </summary>
        public int ChannelID
        {
            get { return _channelID; }
            set { _channelID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The display name of the channel
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// The display description
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Thumbnail
        {
            get { return _thumbnail; }
            set { _thumbnail = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Channel()
        {

        }

        /// <summary>
        /// Instanciates a Channel object from the database via the ChannelID
        /// </summary>
        public Channel(int ChannelID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChannelByChannelID");
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ChannelID")) { this._channelID = (int)dr["ChannelID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }
                    if (list.IsColumnPresent("Thumbnail")) { this._thumbnail = (string)dr["Thumbnail"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Channel in the database with the ID " + ChannelID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Channel in the database 
        /// </summary>
        public static List<Channel> GetAllChannel()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllChannel");

            List<Channel> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Channels
        /// </summary>
        public static List<Channel> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Channel> arr = new List<Channel>();

            Channel obj;

            while (dr.Read())
            {
                obj = new Channel();
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("Thumbnail")) { obj._thumbnail = (string)dr["Thumbnail"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Channels
        /// </summary>
        public static List<Channel> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Channel> arr = new List<Channel>();

            Channel obj;

            while (dr.Read())
            {
                obj = new Channel();
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("Thumbnail")) { obj._thumbnail = (string)dr["Thumbnail"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Channel object or in the case of a zero ChannelID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveChannel");

            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);
            db.AddInParameter(dbCommand, "Thumbnail", DbType.String, Thumbnail);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ChannelID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the FeaturedChannel objects for this Channel
        /// </summary>
        private List<FeaturedChannel> GetFeaturedChannelByChannelID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeaturedChannelByChannelID");
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);

            List<FeaturedChannel> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.FeaturedChannel.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the CommunityView objects for this Channel
        /// </summary>
        private List<CommunityView> GetCommunityViewByChannelID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCommunityViewByChannelID");
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);

            List<CommunityView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.CommunityView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Member objects for this Channel
        /// </summary>
        private List<Member> GetMemberByChannelID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberByChannelID");
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);

            List<Member> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Member.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Chat in the system
    /// </summary>
    public partial class Chat
    {
        #region Fields and Properties

        private int _chatID;		//
        private string _chatWebID = "";		//The chat id that can safely go to web browser
        private int _memberIDFrom;		//
        private int _memberIDTo;		//
        private string _message = "";		//
        private bool _delivered;		//
        private string _fakey = "";		//This is fake
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ChatID
        {
            get { return _chatID; }
            set { _chatID = value; }
        }

        /// <summary>
        /// The chat id that can safely go to web browser
        /// </summary>
        public string ChatWebID
        {
            get { return _chatWebID; }
            set { _chatWebID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberIDTo
        {
            get { return _memberIDTo; }
            set { _memberIDTo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Message
        {
            get { return _message; }
            set { _message = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Delivered
        {
            get { return _delivered; }
            set { _delivered = value; }
        }

        /// <summary>
        /// This is fake
        /// </summary>
        public string Fakey
        {
            get { return _fakey; }
            set { _fakey = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Chat()
        {

        }

        /// <summary>
        /// Instanciates a Chat object from the database via the ChatID
        /// </summary>
        public Chat(int ChatID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChatByChatID");
            db.AddInParameter(dbCommand, "ChatID", DbType.Int32, ChatID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ChatID")) { this._chatID = (int)dr["ChatID"]; }
                    if (list.IsColumnPresent("ChatWebID")) { this._chatWebID = (string)dr["ChatWebID"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("MemberIDTo")) { this._memberIDTo = (int)dr["MemberIDTo"]; }
                    if (list.IsColumnPresent("Message")) { this._message = (string)dr["Message"]; }
                    if (list.IsColumnPresent("Delivered")) { this._delivered = (bool)dr["Delivered"]; }
                    if (list.IsColumnPresent("Fakey")) { this._fakey = (string)dr["Fakey"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Chat in the database with the ID " + ChatID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Chat in the database 
        /// </summary>
        public static List<Chat> GetAllChat()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllChat");

            List<Chat> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Chats
        /// </summary>
        public static List<Chat> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Chat> arr = new List<Chat>();

            Chat obj;

            while (dr.Read())
            {
                obj = new Chat();
                if (list.IsColumnPresent("ChatID")) { obj._chatID = (int)dr["ChatID"]; }
                if (list.IsColumnPresent("ChatWebID")) { obj._chatWebID = (string)dr["ChatWebID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("Message")) { obj._message = (string)dr["Message"]; }
                if (list.IsColumnPresent("Delivered")) { obj._delivered = (bool)dr["Delivered"]; }
                if (list.IsColumnPresent("Fakey")) { obj._fakey = (string)dr["Fakey"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Chats
        /// </summary>
        public static List<Chat> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Chat> arr = new List<Chat>();

            Chat obj;

            while (dr.Read())
            {
                obj = new Chat();
                if (list.IsColumnPresent("ChatID")) { obj._chatID = (int)dr["ChatID"]; }
                if (list.IsColumnPresent("ChatWebID")) { obj._chatWebID = (string)dr["ChatWebID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("Message")) { obj._message = (string)dr["Message"]; }
                if (list.IsColumnPresent("Delivered")) { obj._delivered = (bool)dr["Delivered"]; }
                if (list.IsColumnPresent("Fakey")) { obj._fakey = (string)dr["Fakey"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Chat object or in the case of a zero ChatID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveChat");

            db.AddInParameter(dbCommand, "ChatID", DbType.Int32, ChatID);
            db.AddInParameter(dbCommand, "ChatWebID", DbType.String, ChatWebID);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "MemberIDTo", DbType.Int32, MemberIDTo);
            db.AddInParameter(dbCommand, "Message", DbType.String, Message);
            db.AddInParameter(dbCommand, "Delivered", DbType.Boolean, Delivered);
            db.AddInParameter(dbCommand, "Fakey", DbType.String, Fakey);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ChatID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ChatMessage in the system
    /// </summary>
    public partial class ChatMessage
    {
        #region Fields and Properties

        private int _chatMessageID;		//
        private string _chatMessageWebID = "";		//The ChatMessage id that can safely go to web browser
        private int _memberIDFrom;		//
        private int _memberIDTo;		//
        private string _message = "";		//
        private bool _delivered;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ChatMessageID
        {
            get { return _chatMessageID; }
            set { _chatMessageID = value; }
        }

        /// <summary>
        /// The ChatMessage id that can safely go to web browser
        /// </summary>
        public string ChatMessageWebID
        {
            get { return _chatMessageWebID; }
            set { _chatMessageWebID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberIDTo
        {
            get { return _memberIDTo; }
            set { _memberIDTo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Message
        {
            get { return _message; }
            set { _message = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Delivered
        {
            get { return _delivered; }
            set { _delivered = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ChatMessage()
        {

        }

        /// <summary>
        /// Instanciates a ChatMessage object from the database via the ChatMessageID
        /// </summary>
        public ChatMessage(int ChatMessageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChatMessageByChatMessageID");
            db.AddInParameter(dbCommand, "ChatMessageID", DbType.Int32, ChatMessageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ChatMessageID")) { this._chatMessageID = (int)dr["ChatMessageID"]; }
                    if (list.IsColumnPresent("ChatMessageWebID")) { this._chatMessageWebID = (string)dr["ChatMessageWebID"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("MemberIDTo")) { this._memberIDTo = (int)dr["MemberIDTo"]; }
                    if (list.IsColumnPresent("Message")) { this._message = (string)dr["Message"]; }
                    if (list.IsColumnPresent("Delivered")) { this._delivered = (bool)dr["Delivered"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ChatMessage in the database with the ID " + ChatMessageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ChatMessage in the database 
        /// </summary>
        public static List<ChatMessage> GetAllChatMessage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllChatMessage");

            List<ChatMessage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ChatMessages
        /// </summary>
        public static List<ChatMessage> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ChatMessage> arr = new List<ChatMessage>();

            ChatMessage obj;

            while (dr.Read())
            {
                obj = new ChatMessage();
                if (list.IsColumnPresent("ChatMessageID")) { obj._chatMessageID = (int)dr["ChatMessageID"]; }
                if (list.IsColumnPresent("ChatMessageWebID")) { obj._chatMessageWebID = (string)dr["ChatMessageWebID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("Message")) { obj._message = (string)dr["Message"]; }
                if (list.IsColumnPresent("Delivered")) { obj._delivered = (bool)dr["Delivered"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ChatMessages
        /// </summary>
        public static List<ChatMessage> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ChatMessage> arr = new List<ChatMessage>();

            ChatMessage obj;

            while (dr.Read())
            {
                obj = new ChatMessage();
                if (list.IsColumnPresent("ChatMessageID")) { obj._chatMessageID = (int)dr["ChatMessageID"]; }
                if (list.IsColumnPresent("ChatMessageWebID")) { obj._chatMessageWebID = (string)dr["ChatMessageWebID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("Message")) { obj._message = (string)dr["Message"]; }
                if (list.IsColumnPresent("Delivered")) { obj._delivered = (bool)dr["Delivered"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ChatMessage object or in the case of a zero ChatMessageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveChatMessage");

            db.AddInParameter(dbCommand, "ChatMessageID", DbType.Int32, ChatMessageID);
            db.AddInParameter(dbCommand, "ChatMessageWebID", DbType.String, ChatMessageWebID);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "MemberIDTo", DbType.Int32, MemberIDTo);
            db.AddInParameter(dbCommand, "Message", DbType.String, Message);
            db.AddInParameter(dbCommand, "Delivered", DbType.Boolean, Delivered);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ChatMessageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ChatOnline in the system
    /// </summary>
    public partial class ChatOnline
    {
        #region Fields and Properties

        private int _chatOnlineID;		//
        private int _memberID;		//
        private DateTime _lastCommDt = new DateTime(1900, 1, 1);		//
        private int _status;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ChatOnlineID
        {
            get { return _chatOnlineID; }
            set { _chatOnlineID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastCommDt
        {
            get { return _lastCommDt; }
            set { _lastCommDt = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ChatOnline()
        {

        }

        /// <summary>
        /// Instanciates a ChatOnline object from the database via the ChatOnlineID
        /// </summary>
        public ChatOnline(int ChatOnlineID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChatOnlineByChatOnlineID");
            db.AddInParameter(dbCommand, "ChatOnlineID", DbType.Int32, ChatOnlineID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ChatOnlineID")) { this._chatOnlineID = (int)dr["ChatOnlineID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("LastCommDt")) { this._lastCommDt = (DateTime)dr["LastCommDt"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }

                }
                else
                {
                    throw new Exception("There is no ChatOnline in the database with the ID " + ChatOnlineID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ChatOnline in the database 
        /// </summary>
        public static List<ChatOnline> GetAllChatOnline()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllChatOnline");

            List<ChatOnline> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ChatOnlines
        /// </summary>
        public static List<ChatOnline> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ChatOnline> arr = new List<ChatOnline>();

            ChatOnline obj;

            while (dr.Read())
            {
                obj = new ChatOnline();
                if (list.IsColumnPresent("ChatOnlineID")) { obj._chatOnlineID = (int)dr["ChatOnlineID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("LastCommDt")) { obj._lastCommDt = (DateTime)dr["LastCommDt"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ChatOnlines
        /// </summary>
        public static List<ChatOnline> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ChatOnline> arr = new List<ChatOnline>();

            ChatOnline obj;

            while (dr.Read())
            {
                obj = new ChatOnline();
                if (list.IsColumnPresent("ChatOnlineID")) { obj._chatOnlineID = (int)dr["ChatOnlineID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("LastCommDt")) { obj._lastCommDt = (DateTime)dr["LastCommDt"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ChatOnline object or in the case of a zero ChatOnlineID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveChatOnline");

            db.AddInParameter(dbCommand, "ChatOnlineID", DbType.Int32, ChatOnlineID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "LastCommDt", DbType.DateTime, LastCommDt);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ChatOnlineID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Comment in the system
    /// </summary>
    public partial class Comment
    {
        #region Fields and Properties

        private int _commentID;		//
        private string _webCommentID = "";		//
        private int _objectID;		//
        private int _memberIDFrom;		//
        private int _inReplyToCommentID;		//
        private string _text = "";		//
        private bool _isDeleted;		//
        private string _path = "";		//
        private int _commentType;		//
        private int _threadNo;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private int _sentFromMobile;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int CommentID
        {
            get { return _commentID; }
            set { _commentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebCommentID
        {
            get { return _webCommentID; }
            set { _webCommentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectID
        {
            get { return _objectID; }
            set { _objectID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int InReplyToCommentID
        {
            get { return _inReplyToCommentID; }
            set { _inReplyToCommentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Path
        {
            get { return _path; }
            set { _path = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CommentType
        {
            get { return _commentType; }
            set { _commentType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ThreadNo
        {
            get { return _threadNo; }
            set { _threadNo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SentFromMobile
        {
            get { return _sentFromMobile; }
            set { _sentFromMobile = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Comment()
        {

        }

        /// <summary>
        /// Instanciates a Comment object from the database via the CommentID
        /// </summary>
        public Comment(int CommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCommentByCommentID");
            db.AddInParameter(dbCommand, "CommentID", DbType.Int32, CommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("CommentID")) { this._commentID = (int)dr["CommentID"]; }
                    if (list.IsColumnPresent("WebCommentID")) { this._webCommentID = (string)dr["WebCommentID"]; }
                    if (list.IsColumnPresent("ObjectID")) { this._objectID = (int)dr["ObjectID"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("InReplyToCommentID")) { this._inReplyToCommentID = (int)dr["InReplyToCommentID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("IsDeleted")) { this._isDeleted = (bool)dr["IsDeleted"]; }
                    if (list.IsColumnPresent("Path")) { this._path = (string)dr["Path"]; }
                    if (list.IsColumnPresent("CommentType")) { this._commentType = (int)dr["CommentType"]; }
                    if (list.IsColumnPresent("ThreadNo")) { this._threadNo = (int)dr["ThreadNo"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }
                    if (list.IsColumnPresent("SentFromMobile")) { this._sentFromMobile = (int)dr["SentFromMobile"]; }

                }
                else
                {
                    throw new Exception("There is no Comment in the database with the ID " + CommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Comment in the database 
        /// </summary>
        public static List<Comment> GetAllComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllComment");

            List<Comment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Comments
        /// </summary>
        public static List<Comment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Comment> arr = new List<Comment>();

            Comment obj;

            while (dr.Read())
            {
                obj = new Comment();
                if (list.IsColumnPresent("CommentID")) { obj._commentID = (int)dr["CommentID"]; }
                if (list.IsColumnPresent("WebCommentID")) { obj._webCommentID = (string)dr["WebCommentID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("InReplyToCommentID")) { obj._inReplyToCommentID = (int)dr["InReplyToCommentID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("CommentType")) { obj._commentType = (int)dr["CommentType"]; }
                if (list.IsColumnPresent("ThreadNo")) { obj._threadNo = (int)dr["ThreadNo"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("SentFromMobile")) { obj._sentFromMobile = (int)dr["SentFromMobile"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Comments
        /// </summary>
        public static List<Comment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Comment> arr = new List<Comment>();

            Comment obj;

            while (dr.Read())
            {
                obj = new Comment();
                if (list.IsColumnPresent("CommentID")) { obj._commentID = (int)dr["CommentID"]; }
                if (list.IsColumnPresent("WebCommentID")) { obj._webCommentID = (string)dr["WebCommentID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("InReplyToCommentID")) { obj._inReplyToCommentID = (int)dr["InReplyToCommentID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("CommentType")) { obj._commentType = (int)dr["CommentType"]; }
                if (list.IsColumnPresent("ThreadNo")) { obj._threadNo = (int)dr["ThreadNo"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("SentFromMobile")) { obj._sentFromMobile = (int)dr["SentFromMobile"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Comment object or in the case of a zero CommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveComment");

            db.AddInParameter(dbCommand, "CommentID", DbType.Int32, CommentID);
            db.AddInParameter(dbCommand, "WebCommentID", DbType.String, WebCommentID);
            db.AddInParameter(dbCommand, "ObjectID", DbType.Int32, ObjectID);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "InReplyToCommentID", DbType.Int32, InReplyToCommentID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "IsDeleted", DbType.Boolean, IsDeleted);
            db.AddInParameter(dbCommand, "Path", DbType.String, Path);
            db.AddInParameter(dbCommand, "CommentType", DbType.Int32, CommentType);
            db.AddInParameter(dbCommand, "ThreadNo", DbType.Int32, ThreadNo);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);
            db.AddInParameter(dbCommand, "SentFromMobile", DbType.Int32, SentFromMobile);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.CommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ContactImport in the system
    /// </summary>
    public partial class ContactImport
    {
        /// <summary>
        /// The InviteClick objects for this ContactImport
        /// </summary>
        public List<InviteClick> InviteClick
        {
            get
            {
                if (inviteClick == null)
                    this.inviteClick = this.GetInviteClickByContactImportID();
                return inviteClick;
            }
            set { inviteClick = value; }
        }


        /// <summary>
        /// The Referral objects for this ContactImport
        /// </summary>
        public List<Referral> Referral
        {
            get
            {
                if (referral == null)
                    this.referral = this.GetReferralByContactImportID();
                return referral;
            }
            set { referral = value; }
        }


        #region Fields and Properties

        private int _contactImportID;		//
        private int _importerMemberID;		//
        private string _email = "";		//
        private string _name = "";		//
        private int _inviteState;		//
        private int _friendState;		//
        private bool _openedEmailInvite;		//
        private bool _clickedEmailInvite;		//
        private bool _joinedFromInvite;		//
        private int _becameMemberID;		//
        private string _importToken = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private List<InviteClick> inviteClick;		// Foreign object
        private List<Referral> referral;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ContactImportID
        {
            get { return _contactImportID; }
            set { _contactImportID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ImporterMemberID
        {
            get { return _importerMemberID; }
            set { _importerMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int InviteState
        {
            get { return _inviteState; }
            set { _inviteState = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FriendState
        {
            get { return _friendState; }
            set { _friendState = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool OpenedEmailInvite
        {
            get { return _openedEmailInvite; }
            set { _openedEmailInvite = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ClickedEmailInvite
        {
            get { return _clickedEmailInvite; }
            set { _clickedEmailInvite = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool JoinedFromInvite
        {
            get { return _joinedFromInvite; }
            set { _joinedFromInvite = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BecameMemberID
        {
            get { return _becameMemberID; }
            set { _becameMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ImportToken
        {
            get { return _importToken; }
            set { _importToken = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ContactImport()
        {

        }

        /// <summary>
        /// Instanciates a ContactImport object from the database via the ContactImportID
        /// </summary>
        public ContactImport(int ContactImportID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetContactImportByContactImportID");
            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ContactImportID")) { this._contactImportID = (int)dr["ContactImportID"]; }
                    if (list.IsColumnPresent("ImporterMemberID")) { this._importerMemberID = (int)dr["ImporterMemberID"]; }
                    if (list.IsColumnPresent("Email")) { this._email = (string)dr["Email"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("InviteState")) { this._inviteState = (int)dr["InviteState"]; }
                    if (list.IsColumnPresent("FriendState")) { this._friendState = (int)dr["FriendState"]; }
                    if (list.IsColumnPresent("OpenedEmailInvite")) { this._openedEmailInvite = (bool)dr["OpenedEmailInvite"]; }
                    if (list.IsColumnPresent("ClickedEmailInvite")) { this._clickedEmailInvite = (bool)dr["ClickedEmailInvite"]; }
                    if (list.IsColumnPresent("JoinedFromInvite")) { this._joinedFromInvite = (bool)dr["JoinedFromInvite"]; }
                    if (list.IsColumnPresent("BecameMemberID")) { this._becameMemberID = (int)dr["BecameMemberID"]; }
                    if (list.IsColumnPresent("ImportToken")) { this._importToken = (string)dr["ImportToken"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ContactImport in the database with the ID " + ContactImportID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ContactImport in the database 
        /// </summary>
        public static List<ContactImport> GetAllContactImport()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllContactImport");

            List<ContactImport> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContactImports
        /// </summary>
        public static List<ContactImport> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContactImport> arr = new List<ContactImport>();

            ContactImport obj;

            while (dr.Read())
            {
                obj = new ContactImport();
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }
                if (list.IsColumnPresent("ImporterMemberID")) { obj._importerMemberID = (int)dr["ImporterMemberID"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("InviteState")) { obj._inviteState = (int)dr["InviteState"]; }
                if (list.IsColumnPresent("FriendState")) { obj._friendState = (int)dr["FriendState"]; }
                if (list.IsColumnPresent("OpenedEmailInvite")) { obj._openedEmailInvite = (bool)dr["OpenedEmailInvite"]; }
                if (list.IsColumnPresent("ClickedEmailInvite")) { obj._clickedEmailInvite = (bool)dr["ClickedEmailInvite"]; }
                if (list.IsColumnPresent("JoinedFromInvite")) { obj._joinedFromInvite = (bool)dr["JoinedFromInvite"]; }
                if (list.IsColumnPresent("BecameMemberID")) { obj._becameMemberID = (int)dr["BecameMemberID"]; }
                if (list.IsColumnPresent("ImportToken")) { obj._importToken = (string)dr["ImportToken"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContactImports
        /// </summary>
        public static List<ContactImport> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContactImport> arr = new List<ContactImport>();

            ContactImport obj;

            while (dr.Read())
            {
                obj = new ContactImport();
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }
                if (list.IsColumnPresent("ImporterMemberID")) { obj._importerMemberID = (int)dr["ImporterMemberID"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("InviteState")) { obj._inviteState = (int)dr["InviteState"]; }
                if (list.IsColumnPresent("FriendState")) { obj._friendState = (int)dr["FriendState"]; }
                if (list.IsColumnPresent("OpenedEmailInvite")) { obj._openedEmailInvite = (bool)dr["OpenedEmailInvite"]; }
                if (list.IsColumnPresent("ClickedEmailInvite")) { obj._clickedEmailInvite = (bool)dr["ClickedEmailInvite"]; }
                if (list.IsColumnPresent("JoinedFromInvite")) { obj._joinedFromInvite = (bool)dr["JoinedFromInvite"]; }
                if (list.IsColumnPresent("BecameMemberID")) { obj._becameMemberID = (int)dr["BecameMemberID"]; }
                if (list.IsColumnPresent("ImportToken")) { obj._importToken = (string)dr["ImportToken"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ContactImport object or in the case of a zero ContactImportID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveContactImport");

            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);
            db.AddInParameter(dbCommand, "ImporterMemberID", DbType.Int32, ImporterMemberID);
            db.AddInParameter(dbCommand, "Email", DbType.String, Email);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "InviteState", DbType.Int32, InviteState);
            db.AddInParameter(dbCommand, "FriendState", DbType.Int32, FriendState);
            db.AddInParameter(dbCommand, "OpenedEmailInvite", DbType.Boolean, OpenedEmailInvite);
            db.AddInParameter(dbCommand, "ClickedEmailInvite", DbType.Boolean, ClickedEmailInvite);
            db.AddInParameter(dbCommand, "JoinedFromInvite", DbType.Boolean, JoinedFromInvite);
            db.AddInParameter(dbCommand, "BecameMemberID", DbType.Int32, BecameMemberID);
            db.AddInParameter(dbCommand, "ImportToken", DbType.String, ImportToken);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ContactImportID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the InviteClick objects for this ContactImport
        /// </summary>
        private List<InviteClick> GetInviteClickByContactImportID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetInviteClickByContactImportID");
            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);

            List<InviteClick> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.InviteClick.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Referral objects for this ContactImport
        /// </summary>
        private List<Referral> GetReferralByContactImportID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetReferralByContactImportID");
            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);

            List<Referral> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Referral.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ContentInvite in the system
    /// </summary>
    public partial class ContentInvite
    {
        #region Fields and Properties

        private int _contentInviteID;		//
        private int _memberID;		//
        private int _objectID;		//
        private int _objectType;		//
        private string _emailAddress = "";		//
        private string _link = "";		//
        private string _customMessage = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ContentInviteID
        {
            get { return _contentInviteID; }
            set { _contentInviteID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectID
        {
            get { return _objectID; }
            set { _objectID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectType
        {
            get { return _objectType; }
            set { _objectType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Link
        {
            get { return _link; }
            set { _link = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CustomMessage
        {
            get { return _customMessage; }
            set { _customMessage = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ContentInvite()
        {

        }

        /// <summary>
        /// Instanciates a ContentInvite object from the database via the ContentInviteID
        /// </summary>
        public ContentInvite(int ContentInviteID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetContentInviteByContentInviteID");
            db.AddInParameter(dbCommand, "ContentInviteID", DbType.Int32, ContentInviteID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ContentInviteID")) { this._contentInviteID = (int)dr["ContentInviteID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("ObjectID")) { this._objectID = (int)dr["ObjectID"]; }
                    if (list.IsColumnPresent("ObjectType")) { this._objectType = (int)dr["ObjectType"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("Link")) { this._link = (string)dr["Link"]; }
                    if (list.IsColumnPresent("CustomMessage")) { this._customMessage = (string)dr["CustomMessage"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ContentInvite in the database with the ID " + ContentInviteID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ContentInvite in the database 
        /// </summary>
        public static List<ContentInvite> GetAllContentInvite()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllContentInvite");

            List<ContentInvite> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContentInvites
        /// </summary>
        public static List<ContentInvite> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContentInvite> arr = new List<ContentInvite>();

            ContentInvite obj;

            while (dr.Read())
            {
                obj = new ContentInvite();
                if (list.IsColumnPresent("ContentInviteID")) { obj._contentInviteID = (int)dr["ContentInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Link")) { obj._link = (string)dr["Link"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContentInvites
        /// </summary>
        public static List<ContentInvite> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContentInvite> arr = new List<ContentInvite>();

            ContentInvite obj;

            while (dr.Read())
            {
                obj = new ContentInvite();
                if (list.IsColumnPresent("ContentInviteID")) { obj._contentInviteID = (int)dr["ContentInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Link")) { obj._link = (string)dr["Link"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ContentInvite object or in the case of a zero ContentInviteID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveContentInvite");

            db.AddInParameter(dbCommand, "ContentInviteID", DbType.Int32, ContentInviteID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "ObjectID", DbType.Int32, ObjectID);
            db.AddInParameter(dbCommand, "ObjectType", DbType.Int32, ObjectType);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "Link", DbType.String, Link);
            db.AddInParameter(dbCommand, "CustomMessage", DbType.String, CustomMessage);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ContentInviteID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ContentView in the system
    /// </summary>
    public partial class ContentView
    {
        #region Fields and Properties

        private int _contentViewID;		//
        private int _memberID;		//
        private int _objectID;		//
        private int _objectType;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ContentViewID
        {
            get { return _contentViewID; }
            set { _contentViewID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectID
        {
            get { return _objectID; }
            set { _objectID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectType
        {
            get { return _objectType; }
            set { _objectType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ContentView()
        {

        }

        /// <summary>
        /// Instanciates a ContentView object from the database via the ContentViewID
        /// </summary>
        public ContentView(int ContentViewID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetContentViewByContentViewID");
            db.AddInParameter(dbCommand, "ContentViewID", DbType.Int32, ContentViewID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ContentViewID")) { this._contentViewID = (int)dr["ContentViewID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("ObjectID")) { this._objectID = (int)dr["ObjectID"]; }
                    if (list.IsColumnPresent("ObjectType")) { this._objectType = (int)dr["ObjectType"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ContentView in the database with the ID " + ContentViewID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ContentView in the database 
        /// </summary>
        public static List<ContentView> GetAllContentView()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllContentView");

            List<ContentView> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContentViews
        /// </summary>
        public static List<ContentView> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContentView> arr = new List<ContentView>();

            ContentView obj;

            while (dr.Read())
            {
                obj = new ContentView();
                if (list.IsColumnPresent("ContentViewID")) { obj._contentViewID = (int)dr["ContentViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ContentViews
        /// </summary>
        public static List<ContentView> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ContentView> arr = new List<ContentView>();

            ContentView obj;

            while (dr.Read())
            {
                obj = new ContentView();
                if (list.IsColumnPresent("ContentViewID")) { obj._contentViewID = (int)dr["ContentViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("ObjectID")) { obj._objectID = (int)dr["ObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ContentView object or in the case of a zero ContentViewID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveContentView");

            db.AddInParameter(dbCommand, "ContentViewID", DbType.Int32, ContentViewID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "ObjectID", DbType.Int32, ObjectID);
            db.AddInParameter(dbCommand, "ObjectType", DbType.Int32, ObjectType);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ContentViewID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Dashboard in the system
    /// </summary>
    public partial class Dashboard
    {
        #region Fields and Properties

        private int _dashboardID;		//
        private int _memberID;		//
        private int _inbox;		//
        private int _profileComment;		//
        private int _friendRequest;		//
        private int _friendRequestAccept;		//
        private int _friendRequestOutstanding;		//
        private int _networkNewVideo;		//
        private int _networkNewGallery;		//
        private int _networkUpdatedProfile;		//
        private int _networkFavourite;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int DashboardID
        {
            get { return _dashboardID; }
            set { _dashboardID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Inbox
        {
            get { return _inbox; }
            set { _inbox = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ProfileComment
        {
            get { return _profileComment; }
            set { _profileComment = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FriendRequest
        {
            get { return _friendRequest; }
            set { _friendRequest = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FriendRequestAccept
        {
            get { return _friendRequestAccept; }
            set { _friendRequestAccept = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FriendRequestOutstanding
        {
            get { return _friendRequestOutstanding; }
            set { _friendRequestOutstanding = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NetworkNewVideo
        {
            get { return _networkNewVideo; }
            set { _networkNewVideo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NetworkNewGallery
        {
            get { return _networkNewGallery; }
            set { _networkNewGallery = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NetworkUpdatedProfile
        {
            get { return _networkUpdatedProfile; }
            set { _networkUpdatedProfile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NetworkFavourite
        {
            get { return _networkFavourite; }
            set { _networkFavourite = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Dashboard()
        {

        }

        /// <summary>
        /// Instanciates a Dashboard object from the database via the DashboardID
        /// </summary>
        public Dashboard(int DashboardID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDashboardByDashboardID");
            db.AddInParameter(dbCommand, "DashboardID", DbType.Int32, DashboardID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("DashboardID")) { this._dashboardID = (int)dr["DashboardID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Inbox")) { this._inbox = (int)dr["Inbox"]; }
                    if (list.IsColumnPresent("ProfileComment")) { this._profileComment = (int)dr["ProfileComment"]; }
                    if (list.IsColumnPresent("FriendRequest")) { this._friendRequest = (int)dr["FriendRequest"]; }
                    if (list.IsColumnPresent("FriendRequestAccept")) { this._friendRequestAccept = (int)dr["FriendRequestAccept"]; }
                    if (list.IsColumnPresent("FriendRequestOutstanding")) { this._friendRequestOutstanding = (int)dr["FriendRequestOutstanding"]; }
                    if (list.IsColumnPresent("NetworkNewVideo")) { this._networkNewVideo = (int)dr["NetworkNewVideo"]; }
                    if (list.IsColumnPresent("NetworkNewGallery")) { this._networkNewGallery = (int)dr["NetworkNewGallery"]; }
                    if (list.IsColumnPresent("NetworkUpdatedProfile")) { this._networkUpdatedProfile = (int)dr["NetworkUpdatedProfile"]; }
                    if (list.IsColumnPresent("NetworkFavourite")) { this._networkFavourite = (int)dr["NetworkFavourite"]; }

                }
                else
                {
                    throw new Exception("There is no Dashboard in the database with the ID " + DashboardID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Dashboard in the database 
        /// </summary>
        public static List<Dashboard> GetAllDashboard()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllDashboard");

            List<Dashboard> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Dashboards
        /// </summary>
        public static List<Dashboard> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Dashboard> arr = new List<Dashboard>();

            Dashboard obj;

            while (dr.Read())
            {
                obj = new Dashboard();
                if (list.IsColumnPresent("DashboardID")) { obj._dashboardID = (int)dr["DashboardID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Inbox")) { obj._inbox = (int)dr["Inbox"]; }
                if (list.IsColumnPresent("ProfileComment")) { obj._profileComment = (int)dr["ProfileComment"]; }
                if (list.IsColumnPresent("FriendRequest")) { obj._friendRequest = (int)dr["FriendRequest"]; }
                if (list.IsColumnPresent("FriendRequestAccept")) { obj._friendRequestAccept = (int)dr["FriendRequestAccept"]; }
                if (list.IsColumnPresent("FriendRequestOutstanding")) { obj._friendRequestOutstanding = (int)dr["FriendRequestOutstanding"]; }
                if (list.IsColumnPresent("NetworkNewVideo")) { obj._networkNewVideo = (int)dr["NetworkNewVideo"]; }
                if (list.IsColumnPresent("NetworkNewGallery")) { obj._networkNewGallery = (int)dr["NetworkNewGallery"]; }
                if (list.IsColumnPresent("NetworkUpdatedProfile")) { obj._networkUpdatedProfile = (int)dr["NetworkUpdatedProfile"]; }
                if (list.IsColumnPresent("NetworkFavourite")) { obj._networkFavourite = (int)dr["NetworkFavourite"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Dashboards
        /// </summary>
        public static List<Dashboard> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Dashboard> arr = new List<Dashboard>();

            Dashboard obj;

            while (dr.Read())
            {
                obj = new Dashboard();
                if (list.IsColumnPresent("DashboardID")) { obj._dashboardID = (int)dr["DashboardID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Inbox")) { obj._inbox = (int)dr["Inbox"]; }
                if (list.IsColumnPresent("ProfileComment")) { obj._profileComment = (int)dr["ProfileComment"]; }
                if (list.IsColumnPresent("FriendRequest")) { obj._friendRequest = (int)dr["FriendRequest"]; }
                if (list.IsColumnPresent("FriendRequestAccept")) { obj._friendRequestAccept = (int)dr["FriendRequestAccept"]; }
                if (list.IsColumnPresent("FriendRequestOutstanding")) { obj._friendRequestOutstanding = (int)dr["FriendRequestOutstanding"]; }
                if (list.IsColumnPresent("NetworkNewVideo")) { obj._networkNewVideo = (int)dr["NetworkNewVideo"]; }
                if (list.IsColumnPresent("NetworkNewGallery")) { obj._networkNewGallery = (int)dr["NetworkNewGallery"]; }
                if (list.IsColumnPresent("NetworkUpdatedProfile")) { obj._networkUpdatedProfile = (int)dr["NetworkUpdatedProfile"]; }
                if (list.IsColumnPresent("NetworkFavourite")) { obj._networkFavourite = (int)dr["NetworkFavourite"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Dashboard object or in the case of a zero DashboardID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveDashboard");

            db.AddInParameter(dbCommand, "DashboardID", DbType.Int32, DashboardID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Inbox", DbType.Int32, Inbox);
            db.AddInParameter(dbCommand, "ProfileComment", DbType.Int32, ProfileComment);
            db.AddInParameter(dbCommand, "FriendRequest", DbType.Int32, FriendRequest);
            db.AddInParameter(dbCommand, "FriendRequestAccept", DbType.Int32, FriendRequestAccept);
            db.AddInParameter(dbCommand, "FriendRequestOutstanding", DbType.Int32, FriendRequestOutstanding);
            db.AddInParameter(dbCommand, "NetworkNewVideo", DbType.Int32, NetworkNewVideo);
            db.AddInParameter(dbCommand, "NetworkNewGallery", DbType.Int32, NetworkNewGallery);
            db.AddInParameter(dbCommand, "NetworkUpdatedProfile", DbType.Int32, NetworkUpdatedProfile);
            db.AddInParameter(dbCommand, "NetworkFavourite", DbType.Int32, NetworkFavourite);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.DashboardID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Device in the system
    /// </summary>
    public partial class Device
    {
        #region Fields and Properties

        private int _deviceID;		//DB identifier for the Device
        private string _deviceTagID = "";		//Guid for the device
        private int _memberID;		//MemberID owner of the device
        private string _privateEncryptionKey = "";		//Bluetooth Encrytion key
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//The Date and time the device was registered

        Database db;
        /// <summary>
        /// DB identifier for the Device
        /// </summary>
        public int DeviceID
        {
            get { return _deviceID; }
            set { _deviceID = value; }
        }

        /// <summary>
        /// Guid for the device
        /// </summary>
        public string DeviceTagID
        {
            get { return _deviceTagID; }
            set { _deviceTagID = value; }
        }

        /// <summary>
        /// MemberID owner of the device
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Bluetooth Encrytion key
        /// </summary>
        public string PrivateEncryptionKey
        {
            get { return _privateEncryptionKey; }
            set { _privateEncryptionKey = value; }
        }

        /// <summary>
        /// The Date and time the device was registered
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Device()
        {

        }

        /// <summary>
        /// Instanciates a Device object from the database via the DeviceID
        /// </summary>
        public Device(int DeviceID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDeviceByDeviceID");
            db.AddInParameter(dbCommand, "DeviceID", DbType.Int32, DeviceID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("DeviceID")) { this._deviceID = (int)dr["DeviceID"]; }
                    if (list.IsColumnPresent("DeviceTagID")) { this._deviceTagID = (string)dr["DeviceTagID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PrivateEncryptionKey")) { this._privateEncryptionKey = (string)dr["PrivateEncryptionKey"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no Device in the database with the ID " + DeviceID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Device in the database 
        /// </summary>
        public static List<Device> GetAllDevice()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllDevice");

            List<Device> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Devices
        /// </summary>
        public static List<Device> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Device> arr = new List<Device>();

            Device obj;

            while (dr.Read())
            {
                obj = new Device();
                if (list.IsColumnPresent("DeviceID")) { obj._deviceID = (int)dr["DeviceID"]; }
                if (list.IsColumnPresent("DeviceTagID")) { obj._deviceTagID = (string)dr["DeviceTagID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PrivateEncryptionKey")) { obj._privateEncryptionKey = (string)dr["PrivateEncryptionKey"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Devices
        /// </summary>
        public static List<Device> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Device> arr = new List<Device>();

            Device obj;

            while (dr.Read())
            {
                obj = new Device();
                if (list.IsColumnPresent("DeviceID")) { obj._deviceID = (int)dr["DeviceID"]; }
                if (list.IsColumnPresent("DeviceTagID")) { obj._deviceTagID = (string)dr["DeviceTagID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PrivateEncryptionKey")) { obj._privateEncryptionKey = (string)dr["PrivateEncryptionKey"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Device object or in the case of a zero DeviceID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveDevice");

            db.AddInParameter(dbCommand, "DeviceID", DbType.Int32, DeviceID);
            db.AddInParameter(dbCommand, "DeviceTagID", DbType.String, DeviceTagID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PrivateEncryptionKey", DbType.String, PrivateEncryptionKey);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.DeviceID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a DeviceBlock in the system
    /// </summary>
    public partial class DeviceBlock
    {
        #region Fields and Properties

        private int _deviceBlockID;		//
        private string _deviceTagID = "";		//
        private int _memberID;		//The member who made the block request
        private int _blockingMemberID;		//The memberid of the member who is being blocked
        private string _mACAddress = "";		//The bluetooth MAC address of the blocked device
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int DeviceBlockID
        {
            get { return _deviceBlockID; }
            set { _deviceBlockID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string DeviceTagID
        {
            get { return _deviceTagID; }
            set { _deviceTagID = value; }
        }

        /// <summary>
        /// The member who made the block request
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The memberid of the member who is being blocked
        /// </summary>
        public int BlockingMemberID
        {
            get { return _blockingMemberID; }
            set { _blockingMemberID = value; }
        }

        /// <summary>
        /// The bluetooth MAC address of the blocked device
        /// </summary>
        public string MACAddress
        {
            get { return _mACAddress; }
            set { _mACAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public DeviceBlock()
        {

        }

        /// <summary>
        /// Instanciates a DeviceBlock object from the database via the DeviceBlockID
        /// </summary>
        public DeviceBlock(int DeviceBlockID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDeviceBlockByDeviceBlockID");
            db.AddInParameter(dbCommand, "DeviceBlockID", DbType.Int32, DeviceBlockID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("DeviceBlockID")) { this._deviceBlockID = (int)dr["DeviceBlockID"]; }
                    if (list.IsColumnPresent("DeviceTagID")) { this._deviceTagID = (string)dr["DeviceTagID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("BlockingMemberID")) { this._blockingMemberID = (int)dr["BlockingMemberID"]; }
                    if (list.IsColumnPresent("MACAddress")) { this._mACAddress = (string)dr["MACAddress"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no DeviceBlock in the database with the ID " + DeviceBlockID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the DeviceBlock in the database 
        /// </summary>
        public static List<DeviceBlock> GetAllDeviceBlock()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllDeviceBlock");

            List<DeviceBlock> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of DeviceBlocks
        /// </summary>
        public static List<DeviceBlock> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<DeviceBlock> arr = new List<DeviceBlock>();

            DeviceBlock obj;

            while (dr.Read())
            {
                obj = new DeviceBlock();
                if (list.IsColumnPresent("DeviceBlockID")) { obj._deviceBlockID = (int)dr["DeviceBlockID"]; }
                if (list.IsColumnPresent("DeviceTagID")) { obj._deviceTagID = (string)dr["DeviceTagID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BlockingMemberID")) { obj._blockingMemberID = (int)dr["BlockingMemberID"]; }
                if (list.IsColumnPresent("MACAddress")) { obj._mACAddress = (string)dr["MACAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of DeviceBlocks
        /// </summary>
        public static List<DeviceBlock> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<DeviceBlock> arr = new List<DeviceBlock>();

            DeviceBlock obj;

            while (dr.Read())
            {
                obj = new DeviceBlock();
                if (list.IsColumnPresent("DeviceBlockID")) { obj._deviceBlockID = (int)dr["DeviceBlockID"]; }
                if (list.IsColumnPresent("DeviceTagID")) { obj._deviceTagID = (string)dr["DeviceTagID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BlockingMemberID")) { obj._blockingMemberID = (int)dr["BlockingMemberID"]; }
                if (list.IsColumnPresent("MACAddress")) { obj._mACAddress = (string)dr["MACAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the DeviceBlock object or in the case of a zero DeviceBlockID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveDeviceBlock");

            db.AddInParameter(dbCommand, "DeviceBlockID", DbType.Int32, DeviceBlockID);
            db.AddInParameter(dbCommand, "DeviceTagID", DbType.String, DeviceTagID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "BlockingMemberID", DbType.Int32, BlockingMemberID);
            db.AddInParameter(dbCommand, "MACAddress", DbType.String, MACAddress);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.DeviceBlockID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a EmailMessage in the system
    /// </summary>
    public partial class EmailMessage
    {
        #region Fields and Properties

        private int _emailMessageID;		//
        private string _webEmailMessageID = "";		//
        private int _resourceFileID;		//
        private int _memberID;		//
        private string _emailAddress = "";		//
        private string _text = "";		//
        private bool _isRead;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int EmailMessageID
        {
            get { return _emailMessageID; }
            set { _emailMessageID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebEmailMessageID
        {
            get { return _webEmailMessageID; }
            set { _webEmailMessageID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ResourceFileID
        {
            get { return _resourceFileID; }
            set { _resourceFileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsRead
        {
            get { return _isRead; }
            set { _isRead = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public EmailMessage()
        {

        }

        /// <summary>
        /// Instanciates a EmailMessage object from the database via the EmailMessageID
        /// </summary>
        public EmailMessage(int EmailMessageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetEmailMessageByEmailMessageID");
            db.AddInParameter(dbCommand, "EmailMessageID", DbType.Int32, EmailMessageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("EmailMessageID")) { this._emailMessageID = (int)dr["EmailMessageID"]; }
                    if (list.IsColumnPresent("WebEmailMessageID")) { this._webEmailMessageID = (string)dr["WebEmailMessageID"]; }
                    if (list.IsColumnPresent("ResourceFileID")) { this._resourceFileID = (int)dr["ResourceFileID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("IsRead")) { this._isRead = (bool)dr["IsRead"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no EmailMessage in the database with the ID " + EmailMessageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the EmailMessage in the database 
        /// </summary>
        public static List<EmailMessage> GetAllEmailMessage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllEmailMessage");

            List<EmailMessage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile VideoMessage { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of EmailMessages
        /// </summary>
        public static List<EmailMessage> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<EmailMessage> arr = new List<EmailMessage>();

            EmailMessage obj;

            while (dr.Read())
            {
                obj = new EmailMessage();
                if (list.IsColumnPresent("EmailMessageID")) { obj._emailMessageID = (int)dr["EmailMessageID"]; }
                if (list.IsColumnPresent("WebEmailMessageID")) { obj._webEmailMessageID = (string)dr["WebEmailMessageID"]; }
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (int)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                obj.VideoMessage = new ResourceFile();
                if (list.IsColumnPresent("VideoMessageResourceFileID")) { obj.VideoMessage.ResourceFileID = (int)dr["VideoMessageResourceFileID"]; }
                if (list.IsColumnPresent("VideoMessageWebResourceFileID")) { obj.VideoMessage.WebResourceFileID = (string)dr["VideoMessageWebResourceFileID"]; }
                if (list.IsColumnPresent("VideoMessageResourceType")) { obj.VideoMessage.ResourceType = (int)dr["VideoMessageResourceType"]; }
                if (list.IsColumnPresent("VideoMessageStorageLocation")) { obj.VideoMessage.StorageLocation = (int)dr["VideoMessageStorageLocation"]; }
                if (list.IsColumnPresent("VideoMessageServer")) { obj.VideoMessage.Server = (int)dr["VideoMessageServer"]; }
                if (list.IsColumnPresent("VideoMessagePath")) { obj.VideoMessage.Path = (string)dr["VideoMessagePath"]; }
                if (list.IsColumnPresent("VideoMessageFileName")) { obj.VideoMessage.FileName = (string)dr["VideoMessageFileName"]; }
                if (list.IsColumnPresent("VideoMessageCreatedDT")) { obj.VideoMessage.CreatedDT = (DateTime)dr["VideoMessageCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of EmailMessages
        /// </summary>
        public static List<EmailMessage> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<EmailMessage> arr = new List<EmailMessage>();

            EmailMessage obj;

            while (dr.Read())
            {
                obj = new EmailMessage();
                if (list.IsColumnPresent("EmailMessageID")) { obj._emailMessageID = (int)dr["EmailMessageID"]; }
                if (list.IsColumnPresent("WebEmailMessageID")) { obj._webEmailMessageID = (string)dr["WebEmailMessageID"]; }
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (int)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the EmailMessage object or in the case of a zero EmailMessageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveEmailMessage");

            db.AddInParameter(dbCommand, "EmailMessageID", DbType.Int32, EmailMessageID);
            db.AddInParameter(dbCommand, "WebEmailMessageID", DbType.String, WebEmailMessageID);
            db.AddInParameter(dbCommand, "ResourceFileID", DbType.Int32, ResourceFileID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "IsRead", DbType.Boolean, IsRead);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.EmailMessageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Gets all the EmailMessage in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static EmailMessage GetEmailMessageByEmailMessageIDWithJoin(int EmailMessageID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetEmailMessageByEmailMessageIDWithJoin");
            db.AddInParameter(dbCommand, "EmailMessageID", DbType.Int32, EmailMessageID);

            List<EmailMessage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a EmailReferral in the system
    /// </summary>
    public partial class EmailReferral
    {
        #region Fields and Properties

        private int _emailReferralID;		//
        private int _newMemberID;		//
        private string _email = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int EmailReferralID
        {
            get { return _emailReferralID; }
            set { _emailReferralID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NewMemberID
        {
            get { return _newMemberID; }
            set { _newMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public EmailReferral()
        {

        }

        /// <summary>
        /// Instanciates a EmailReferral object from the database via the EmailReferralID
        /// </summary>
        public EmailReferral(int EmailReferralID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetEmailReferralByEmailReferralID");
            db.AddInParameter(dbCommand, "EmailReferralID", DbType.Int32, EmailReferralID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("EmailReferralID")) { this._emailReferralID = (int)dr["EmailReferralID"]; }
                    if (list.IsColumnPresent("NewMemberID")) { this._newMemberID = (int)dr["NewMemberID"]; }
                    if (list.IsColumnPresent("Email")) { this._email = (string)dr["Email"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no EmailReferral in the database with the ID " + EmailReferralID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the EmailReferral in the database 
        /// </summary>
        public static List<EmailReferral> GetAllEmailReferral()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllEmailReferral");

            List<EmailReferral> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of EmailReferrals
        /// </summary>
        public static List<EmailReferral> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<EmailReferral> arr = new List<EmailReferral>();

            EmailReferral obj;

            while (dr.Read())
            {
                obj = new EmailReferral();
                if (list.IsColumnPresent("EmailReferralID")) { obj._emailReferralID = (int)dr["EmailReferralID"]; }
                if (list.IsColumnPresent("NewMemberID")) { obj._newMemberID = (int)dr["NewMemberID"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of EmailReferrals
        /// </summary>
        public static List<EmailReferral> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<EmailReferral> arr = new List<EmailReferral>();

            EmailReferral obj;

            while (dr.Read())
            {
                obj = new EmailReferral();
                if (list.IsColumnPresent("EmailReferralID")) { obj._emailReferralID = (int)dr["EmailReferralID"]; }
                if (list.IsColumnPresent("NewMemberID")) { obj._newMemberID = (int)dr["NewMemberID"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the EmailReferral object or in the case of a zero EmailReferralID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveEmailReferral");

            db.AddInParameter(dbCommand, "EmailReferralID", DbType.Int32, EmailReferralID);
            db.AddInParameter(dbCommand, "NewMemberID", DbType.Int32, NewMemberID);
            db.AddInParameter(dbCommand, "Email", DbType.String, Email);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.EmailReferralID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Favourite in the system
    /// </summary>
    public partial class Favourite
    {
        #region Fields and Properties

        private int _favouriteID;		//
        private int _memberID;		//
        private int _theFavouriteObjectID;		//
        private int _objectType;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FavouriteID
        {
            get { return _favouriteID; }
            set { _favouriteID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TheFavouriteObjectID
        {
            get { return _theFavouriteObjectID; }
            set { _theFavouriteObjectID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ObjectType
        {
            get { return _objectType; }
            set { _objectType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Favourite()
        {

        }

        /// <summary>
        /// Instanciates a Favourite object from the database via the FavouriteID
        /// </summary>
        public Favourite(int FavouriteID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteByFavouriteID");
            db.AddInParameter(dbCommand, "FavouriteID", DbType.Int32, FavouriteID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FavouriteID")) { this._favouriteID = (int)dr["FavouriteID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("TheFavouriteObjectID")) { this._theFavouriteObjectID = (int)dr["TheFavouriteObjectID"]; }
                    if (list.IsColumnPresent("ObjectType")) { this._objectType = (int)dr["ObjectType"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Favourite in the database with the ID " + FavouriteID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Favourite in the database 
        /// </summary>
        public static List<Favourite> GetAllFavourite()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFavourite");

            List<Favourite> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Favourites
        /// </summary>
        public static List<Favourite> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Favourite> arr = new List<Favourite>();

            Favourite obj;

            while (dr.Read())
            {
                obj = new Favourite();
                if (list.IsColumnPresent("FavouriteID")) { obj._favouriteID = (int)dr["FavouriteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteObjectID")) { obj._theFavouriteObjectID = (int)dr["TheFavouriteObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Favourites
        /// </summary>
        public static List<Favourite> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Favourite> arr = new List<Favourite>();

            Favourite obj;

            while (dr.Read())
            {
                obj = new Favourite();
                if (list.IsColumnPresent("FavouriteID")) { obj._favouriteID = (int)dr["FavouriteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteObjectID")) { obj._theFavouriteObjectID = (int)dr["TheFavouriteObjectID"]; }
                if (list.IsColumnPresent("ObjectType")) { obj._objectType = (int)dr["ObjectType"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Favourite object or in the case of a zero FavouriteID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFavourite");

            db.AddInParameter(dbCommand, "FavouriteID", DbType.Int32, FavouriteID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "TheFavouriteObjectID", DbType.Int32, TheFavouriteObjectID);
            db.AddInParameter(dbCommand, "ObjectType", DbType.Int32, ObjectType);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FavouriteID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FavouriteGroup in the system
    /// </summary>
    public partial class FavouriteGroup
    {
        #region Fields and Properties

        private int _favouriteGroupID;		//
        private int _memberID;		//
        private int _theFavouriteGroupID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FavouriteGroupID
        {
            get { return _favouriteGroupID; }
            set { _favouriteGroupID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TheFavouriteGroupID
        {
            get { return _theFavouriteGroupID; }
            set { _theFavouriteGroupID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FavouriteGroup()
        {

        }

        /// <summary>
        /// Instanciates a FavouriteGroup object from the database via the FavouriteGroupID
        /// </summary>
        public FavouriteGroup(int FavouriteGroupID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteGroupByFavouriteGroupID");
            db.AddInParameter(dbCommand, "FavouriteGroupID", DbType.Int32, FavouriteGroupID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FavouriteGroupID")) { this._favouriteGroupID = (int)dr["FavouriteGroupID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("TheFavouriteGroupID")) { this._theFavouriteGroupID = (int)dr["TheFavouriteGroupID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no FavouriteGroup in the database with the ID " + FavouriteGroupID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FavouriteGroup in the database 
        /// </summary>
        public static List<FavouriteGroup> GetAllFavouriteGroup()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFavouriteGroup");

            List<FavouriteGroup> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FavouriteGroups
        /// </summary>
        public static List<FavouriteGroup> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FavouriteGroup> arr = new List<FavouriteGroup>();

            FavouriteGroup obj;

            while (dr.Read())
            {
                obj = new FavouriteGroup();
                if (list.IsColumnPresent("FavouriteGroupID")) { obj._favouriteGroupID = (int)dr["FavouriteGroupID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteGroupID")) { obj._theFavouriteGroupID = (int)dr["TheFavouriteGroupID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FavouriteGroups
        /// </summary>
        public static List<FavouriteGroup> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FavouriteGroup> arr = new List<FavouriteGroup>();

            FavouriteGroup obj;

            while (dr.Read())
            {
                obj = new FavouriteGroup();
                if (list.IsColumnPresent("FavouriteGroupID")) { obj._favouriteGroupID = (int)dr["FavouriteGroupID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteGroupID")) { obj._theFavouriteGroupID = (int)dr["TheFavouriteGroupID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FavouriteGroup object or in the case of a zero FavouriteGroupID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFavouriteGroup");

            db.AddInParameter(dbCommand, "FavouriteGroupID", DbType.Int32, FavouriteGroupID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "TheFavouriteGroupID", DbType.Int32, TheFavouriteGroupID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FavouriteGroupID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FavouriteMember in the system
    /// </summary>
    public partial class FavouriteMember
    {
        #region Fields and Properties

        private int _favouriteMemberID;		//
        private int _memberID;		//
        private int _theFavouriteMemberID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FavouriteMemberID
        {
            get { return _favouriteMemberID; }
            set { _favouriteMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TheFavouriteMemberID
        {
            get { return _theFavouriteMemberID; }
            set { _theFavouriteMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FavouriteMember()
        {

        }

        /// <summary>
        /// Instanciates a FavouriteMember object from the database via the FavouriteMemberID
        /// </summary>
        public FavouriteMember(int FavouriteMemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteMemberByFavouriteMemberID");
            db.AddInParameter(dbCommand, "FavouriteMemberID", DbType.Int32, FavouriteMemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FavouriteMemberID")) { this._favouriteMemberID = (int)dr["FavouriteMemberID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("TheFavouriteMemberID")) { this._theFavouriteMemberID = (int)dr["TheFavouriteMemberID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no FavouriteMember in the database with the ID " + FavouriteMemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FavouriteMember in the database 
        /// </summary>
        public static List<FavouriteMember> GetAllFavouriteMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFavouriteMember");

            List<FavouriteMember> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FavouriteMembers
        /// </summary>
        public static List<FavouriteMember> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FavouriteMember> arr = new List<FavouriteMember>();

            FavouriteMember obj;

            while (dr.Read())
            {
                obj = new FavouriteMember();
                if (list.IsColumnPresent("FavouriteMemberID")) { obj._favouriteMemberID = (int)dr["FavouriteMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteMemberID")) { obj._theFavouriteMemberID = (int)dr["TheFavouriteMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FavouriteMembers
        /// </summary>
        public static List<FavouriteMember> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FavouriteMember> arr = new List<FavouriteMember>();

            FavouriteMember obj;

            while (dr.Read())
            {
                obj = new FavouriteMember();
                if (list.IsColumnPresent("FavouriteMemberID")) { obj._favouriteMemberID = (int)dr["FavouriteMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TheFavouriteMemberID")) { obj._theFavouriteMemberID = (int)dr["TheFavouriteMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FavouriteMember object or in the case of a zero FavouriteMemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFavouriteMember");

            db.AddInParameter(dbCommand, "FavouriteMemberID", DbType.Int32, FavouriteMemberID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "TheFavouriteMemberID", DbType.Int32, TheFavouriteMemberID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FavouriteMemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FeaturedChannel in the system
    /// </summary>
    public partial class FeaturedChannel
    {
        #region Fields and Properties

        private int _featuredChannelID;		//
        private int _position;		//
        private int _channelID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FeaturedChannelID
        {
            get { return _featuredChannelID; }
            set { _featuredChannelID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ChannelID
        {
            get { return _channelID; }
            set { _channelID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FeaturedChannel()
        {

        }

        /// <summary>
        /// Instanciates a FeaturedChannel object from the database via the FeaturedChannelID
        /// </summary>
        public FeaturedChannel(int FeaturedChannelID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeaturedChannelByFeaturedChannelID");
            db.AddInParameter(dbCommand, "FeaturedChannelID", DbType.Int32, FeaturedChannelID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FeaturedChannelID")) { this._featuredChannelID = (int)dr["FeaturedChannelID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("ChannelID")) { this._channelID = (int)dr["ChannelID"]; }

                }
                else
                {
                    throw new Exception("There is no FeaturedChannel in the database with the ID " + FeaturedChannelID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FeaturedChannel in the database 
        /// </summary>
        public static List<FeaturedChannel> GetAllFeaturedChannel()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFeaturedChannel");

            List<FeaturedChannel> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeaturedChannels
        /// </summary>
        public static List<FeaturedChannel> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeaturedChannel> arr = new List<FeaturedChannel>();

            FeaturedChannel obj;

            while (dr.Read())
            {
                obj = new FeaturedChannel();
                if (list.IsColumnPresent("FeaturedChannelID")) { obj._featuredChannelID = (int)dr["FeaturedChannelID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeaturedChannels
        /// </summary>
        public static List<FeaturedChannel> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeaturedChannel> arr = new List<FeaturedChannel>();

            FeaturedChannel obj;

            while (dr.Read())
            {
                obj = new FeaturedChannel();
                if (list.IsColumnPresent("FeaturedChannelID")) { obj._featuredChannelID = (int)dr["FeaturedChannelID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FeaturedChannel object or in the case of a zero FeaturedChannelID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFeaturedChannel");

            db.AddInParameter(dbCommand, "FeaturedChannelID", DbType.Int32, FeaturedChannelID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FeaturedChannelID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FeaturedMember in the system
    /// </summary>
    public partial class FeaturedMember
    {
        #region Fields and Properties

        private int _featuredMemberID;		//The Primary Key of the FeaturedMember
        private int _memberID;		//The MemberID of the Feature Member
        private int _position;		//The position of the featured member 1st or 2nd
        private bool _isDisplayed;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date & Time when the Member was Featured

        Database db;
        /// <summary>
        /// The Primary Key of the FeaturedMember
        /// </summary>
        public int FeaturedMemberID
        {
            get { return _featuredMemberID; }
            set { _featuredMemberID = value; }
        }

        /// <summary>
        /// The MemberID of the Feature Member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The position of the featured member 1st or 2nd
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsDisplayed
        {
            get { return _isDisplayed; }
            set { _isDisplayed = value; }
        }

        /// <summary>
        /// The Date & Time when the Member was Featured
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FeaturedMember()
        {

        }

        /// <summary>
        /// Instanciates a FeaturedMember object from the database via the FeaturedMemberID
        /// </summary>
        public FeaturedMember(int FeaturedMemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeaturedMemberByFeaturedMemberID");
            db.AddInParameter(dbCommand, "FeaturedMemberID", DbType.Int32, FeaturedMemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FeaturedMemberID")) { this._featuredMemberID = (int)dr["FeaturedMemberID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("IsDisplayed")) { this._isDisplayed = (bool)dr["IsDisplayed"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no FeaturedMember in the database with the ID " + FeaturedMemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FeaturedMember in the database 
        /// </summary>
        public static List<FeaturedMember> GetAllFeaturedMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFeaturedMember");

            List<FeaturedMember> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeaturedMembers
        /// </summary>
        public static List<FeaturedMember> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeaturedMember> arr = new List<FeaturedMember>();

            FeaturedMember obj;

            while (dr.Read())
            {
                obj = new FeaturedMember();
                if (list.IsColumnPresent("FeaturedMemberID")) { obj._featuredMemberID = (int)dr["FeaturedMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("IsDisplayed")) { obj._isDisplayed = (bool)dr["IsDisplayed"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FeaturedMembers
        /// </summary>
        public static List<FeaturedMember> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FeaturedMember> arr = new List<FeaturedMember>();

            FeaturedMember obj;

            while (dr.Read())
            {
                obj = new FeaturedMember();
                if (list.IsColumnPresent("FeaturedMemberID")) { obj._featuredMemberID = (int)dr["FeaturedMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("IsDisplayed")) { obj._isDisplayed = (bool)dr["IsDisplayed"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FeaturedMember object or in the case of a zero FeaturedMemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFeaturedMember");

            db.AddInParameter(dbCommand, "FeaturedMemberID", DbType.Int32, FeaturedMemberID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "IsDisplayed", DbType.Boolean, IsDisplayed);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FeaturedMemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Feedback in the system
    /// </summary>
    public partial class Feedback
    {
        #region Fields and Properties

        private int _feedbackID;		//
        private int _memberID;		//
        private string _name = "";		//
        private string _emailAddress = "";		//
        private string _text = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FeedbackID
        {
            get { return _feedbackID; }
            set { _feedbackID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Feedback()
        {

        }

        /// <summary>
        /// Instanciates a Feedback object from the database via the FeedbackID
        /// </summary>
        public Feedback(int FeedbackID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeedbackByFeedbackID");
            db.AddInParameter(dbCommand, "FeedbackID", DbType.Int32, FeedbackID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FeedbackID")) { this._feedbackID = (int)dr["FeedbackID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Feedback in the database with the ID " + FeedbackID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Feedback in the database 
        /// </summary>
        public static List<Feedback> GetAllFeedback()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFeedback");

            List<Feedback> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Feedbacks
        /// </summary>
        public static List<Feedback> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Feedback> arr = new List<Feedback>();

            Feedback obj;

            while (dr.Read())
            {
                obj = new Feedback();
                if (list.IsColumnPresent("FeedbackID")) { obj._feedbackID = (int)dr["FeedbackID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Feedbacks
        /// </summary>
        public static List<Feedback> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Feedback> arr = new List<Feedback>();

            Feedback obj;

            while (dr.Read())
            {
                obj = new Feedback();
                if (list.IsColumnPresent("FeedbackID")) { obj._feedbackID = (int)dr["FeedbackID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Feedback object or in the case of a zero FeedbackID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFeedback");

            db.AddInParameter(dbCommand, "FeedbackID", DbType.Int32, FeedbackID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FeedbackID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ForgottenPassword in the system
    /// </summary>
    public partial class ForgottenPassword
    {
        #region Fields and Properties

        private int _forgottenPasswordID;		//
        private int _memberID;		//
        private string _emailAddress = "";		//
        private string _iPAddress = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ForgottenPasswordID
        {
            get { return _forgottenPasswordID; }
            set { _forgottenPasswordID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IPAddress
        {
            get { return _iPAddress; }
            set { _iPAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ForgottenPassword()
        {

        }

        /// <summary>
        /// Instanciates a ForgottenPassword object from the database via the ForgottenPasswordID
        /// </summary>
        public ForgottenPassword(int ForgottenPasswordID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetForgottenPasswordByForgottenPasswordID");
            db.AddInParameter(dbCommand, "ForgottenPasswordID", DbType.Int32, ForgottenPasswordID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ForgottenPasswordID")) { this._forgottenPasswordID = (int)dr["ForgottenPasswordID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("IPAddress")) { this._iPAddress = (string)dr["IPAddress"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ForgottenPassword in the database with the ID " + ForgottenPasswordID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ForgottenPassword in the database 
        /// </summary>
        public static List<ForgottenPassword> GetAllForgottenPassword()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllForgottenPassword");

            List<ForgottenPassword> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ForgottenPasswords
        /// </summary>
        public static List<ForgottenPassword> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ForgottenPassword> arr = new List<ForgottenPassword>();

            ForgottenPassword obj;

            while (dr.Read())
            {
                obj = new ForgottenPassword();
                if (list.IsColumnPresent("ForgottenPasswordID")) { obj._forgottenPasswordID = (int)dr["ForgottenPasswordID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ForgottenPasswords
        /// </summary>
        public static List<ForgottenPassword> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ForgottenPassword> arr = new List<ForgottenPassword>();

            ForgottenPassword obj;

            while (dr.Read())
            {
                obj = new ForgottenPassword();
                if (list.IsColumnPresent("ForgottenPasswordID")) { obj._forgottenPasswordID = (int)dr["ForgottenPasswordID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ForgottenPassword object or in the case of a zero ForgottenPasswordID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveForgottenPassword");

            db.AddInParameter(dbCommand, "ForgottenPasswordID", DbType.Int32, ForgottenPasswordID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "IPAddress", DbType.String, IPAddress);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ForgottenPasswordID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Friend in the system
    /// </summary>
    public partial class Friend
    {
        #region Fields and Properties

        private int _friendID;		//The primary key of the Friend 
        private int _memberID1;		//The owner of the Friend 
        private int _memberID2;		//The memberID of the friend
        private int _unFriendedMemberID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// The primary key of the Friend 
        /// </summary>
        public int FriendID
        {
            get { return _friendID; }
            set { _friendID = value; }
        }

        /// <summary>
        /// The owner of the Friend 
        /// </summary>
        public int MemberID1
        {
            get { return _memberID1; }
            set { _memberID1 = value; }
        }

        /// <summary>
        /// The memberID of the friend
        /// </summary>
        public int MemberID2
        {
            get { return _memberID2; }
            set { _memberID2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int UnFriendedMemberID
        {
            get { return _unFriendedMemberID; }
            set { _unFriendedMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Friend()
        {

        }

        /// <summary>
        /// Instanciates a Friend object from the database via the FriendID
        /// </summary>
        public Friend(int FriendID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendByFriendID");
            db.AddInParameter(dbCommand, "FriendID", DbType.Int32, FriendID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FriendID")) { this._friendID = (int)dr["FriendID"]; }
                    if (list.IsColumnPresent("MemberID1")) { this._memberID1 = (int)dr["MemberID1"]; }
                    if (list.IsColumnPresent("MemberID2")) { this._memberID2 = (int)dr["MemberID2"]; }
                    if (list.IsColumnPresent("UnFriendedMemberID")) { this._unFriendedMemberID = (int)dr["UnFriendedMemberID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Friend in the database with the ID " + FriendID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Friend in the database 
        /// </summary>
        public static List<Friend> GetAllFriend()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFriend");

            List<Friend> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Friends
        /// </summary>
        public static List<Friend> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Friend> arr = new List<Friend>();

            Friend obj;

            while (dr.Read())
            {
                obj = new Friend();
                if (list.IsColumnPresent("FriendID")) { obj._friendID = (int)dr["FriendID"]; }
                if (list.IsColumnPresent("MemberID1")) { obj._memberID1 = (int)dr["MemberID1"]; }
                if (list.IsColumnPresent("MemberID2")) { obj._memberID2 = (int)dr["MemberID2"]; }
                if (list.IsColumnPresent("UnFriendedMemberID")) { obj._unFriendedMemberID = (int)dr["UnFriendedMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Friends
        /// </summary>
        public static List<Friend> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Friend> arr = new List<Friend>();

            Friend obj;

            while (dr.Read())
            {
                obj = new Friend();
                if (list.IsColumnPresent("FriendID")) { obj._friendID = (int)dr["FriendID"]; }
                if (list.IsColumnPresent("MemberID1")) { obj._memberID1 = (int)dr["MemberID1"]; }
                if (list.IsColumnPresent("MemberID2")) { obj._memberID2 = (int)dr["MemberID2"]; }
                if (list.IsColumnPresent("UnFriendedMemberID")) { obj._unFriendedMemberID = (int)dr["UnFriendedMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Friend object or in the case of a zero FriendID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFriend");

            db.AddInParameter(dbCommand, "FriendID", DbType.Int32, FriendID);
            db.AddInParameter(dbCommand, "MemberID1", DbType.Int32, MemberID1);
            db.AddInParameter(dbCommand, "MemberID2", DbType.Int32, MemberID2);
            db.AddInParameter(dbCommand, "UnFriendedMemberID", DbType.Int32, UnFriendedMemberID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FriendID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Gets all the Friend in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static Friend GetFriendByFriendIDWithJoin(int FriendID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendByFriendIDWithJoin");
            db.AddInParameter(dbCommand, "FriendID", DbType.Int32, FriendID);

            List<Friend> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FriendRequest in the system
    /// </summary>
    public partial class FriendRequest
    {
        #region Fields and Properties

        private int _friendRequestID;		//
        private string _webFriendRequestID = "";		//
        private int _memberID;		//
        private int _friendMemberID;		//
        private int _origin;		//0 = Web | 1 = Bluetooth
        private int _response;		//
        private int _status;		//0 = NotRespondedYet | 1 = Acepted | 2 = NotAccepted
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int FriendRequestID
        {
            get { return _friendRequestID; }
            set { _friendRequestID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebFriendRequestID
        {
            get { return _webFriendRequestID; }
            set { _webFriendRequestID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int FriendMemberID
        {
            get { return _friendMemberID; }
            set { _friendMemberID = value; }
        }

        /// <summary>
        /// 0 = Web | 1 = Bluetooth
        /// </summary>
        public int Origin
        {
            get { return _origin; }
            set { _origin = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Response
        {
            get { return _response; }
            set { _response = value; }
        }

        /// <summary>
        /// 0 = NotRespondedYet | 1 = Acepted | 2 = NotAccepted
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FriendRequest()
        {

        }

        /// <summary>
        /// Instanciates a FriendRequest object from the database via the FriendRequestID
        /// </summary>
        public FriendRequest(int FriendRequestID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendRequestByFriendRequestID");
            db.AddInParameter(dbCommand, "FriendRequestID", DbType.Int32, FriendRequestID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FriendRequestID")) { this._friendRequestID = (int)dr["FriendRequestID"]; }
                    if (list.IsColumnPresent("WebFriendRequestID")) { this._webFriendRequestID = (string)dr["WebFriendRequestID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("FriendMemberID")) { this._friendMemberID = (int)dr["FriendMemberID"]; }
                    if (list.IsColumnPresent("Origin")) { this._origin = (int)dr["Origin"]; }
                    if (list.IsColumnPresent("Response")) { this._response = (int)dr["Response"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no FriendRequest in the database with the ID " + FriendRequestID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FriendRequest in the database 
        /// </summary>
        public static List<FriendRequest> GetAllFriendRequest()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFriendRequest");

            List<FriendRequest> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public Member FriendMember { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FriendRequests
        /// </summary>
        public static List<FriendRequest> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FriendRequest> arr = new List<FriendRequest>();

            FriendRequest obj;

            while (dr.Read())
            {
                obj = new FriendRequest();
                if (list.IsColumnPresent("FriendRequestID")) { obj._friendRequestID = (int)dr["FriendRequestID"]; }
                if (list.IsColumnPresent("WebFriendRequestID")) { obj._webFriendRequestID = (string)dr["WebFriendRequestID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("FriendMemberID")) { obj._friendMemberID = (int)dr["FriendMemberID"]; }
                if (list.IsColumnPresent("Origin")) { obj._origin = (int)dr["Origin"]; }
                if (list.IsColumnPresent("Response")) { obj._response = (int)dr["Response"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                obj.FriendMember = new Member();
                if (list.IsColumnPresent("FriendMemberMemberID")) { obj.FriendMember.MemberID = (int)dr["FriendMemberMemberID"]; }
                if (list.IsColumnPresent("FriendMemberWebMemberID")) { obj.FriendMember.WebMemberID = (string)dr["FriendMemberWebMemberID"]; }
                if (list.IsColumnPresent("FriendMemberAdminStatusID")) { obj.FriendMember.AdminStatusID = (int)dr["FriendMemberAdminStatusID"]; }
                if (list.IsColumnPresent("FriendMemberNickName")) { obj.FriendMember.NickName = (string)dr["FriendMemberNickName"]; }
                if (list.IsColumnPresent("FriendMemberChannelID")) { obj.FriendMember.ChannelID = (int)dr["FriendMemberChannelID"]; }
                if (list.IsColumnPresent("FriendMemberPassword")) { obj.FriendMember.Password = (string)dr["FriendMemberPassword"]; }
                if (list.IsColumnPresent("FriendMemberEmail")) { obj.FriendMember.Email = (string)dr["FriendMemberEmail"]; }
                if (list.IsColumnPresent("FriendMemberGender")) { obj.FriendMember.Gender = (int)dr["FriendMemberGender"]; }
                if (list.IsColumnPresent("FriendMemberFirstName")) { obj.FriendMember.FirstName = (string)dr["FriendMemberFirstName"]; }
                if (list.IsColumnPresent("FriendMemberLastName")) { obj.FriendMember.LastName = (string)dr["FriendMemberLastName"]; }
                if (list.IsColumnPresent("FriendMemberProfilePhotoResourceFileID")) { obj.FriendMember.ProfilePhotoResourceFileID = (int)dr["FriendMemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("FriendMemberDOB")) { obj.FriendMember.DOB = (DateTime)dr["FriendMemberDOB"]; }
                if (list.IsColumnPresent("FriendMemberISOCountry")) { obj.FriendMember.ISOCountry = (string)dr["FriendMemberISOCountry"]; }
                if (list.IsColumnPresent("FriendMemberAccountType")) { obj.FriendMember.AccountType = (int)dr["FriendMemberAccountType"]; }
                if (list.IsColumnPresent("FriendMemberZipPostcode")) { obj.FriendMember.ZipPostcode = (string)dr["FriendMemberZipPostcode"]; }
                if (list.IsColumnPresent("FriendMemberPhoneNumber")) { obj.FriendMember.PhoneNumber = (string)dr["FriendMemberPhoneNumber"]; }
                if (list.IsColumnPresent("FriendMemberMobilePhoneID")) { obj.FriendMember.MobilePhoneID = (int)dr["FriendMemberMobilePhoneID"]; }
                if (list.IsColumnPresent("FriendMemberIPLocationID")) { obj.FriendMember.IPLocationID = (int)dr["FriendMemberIPLocationID"]; }
                if (list.IsColumnPresent("FriendMemberCreatedDT")) { obj.FriendMember.CreatedDT = (DateTime)dr["FriendMemberCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FriendRequests
        /// </summary>
        public static List<FriendRequest> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FriendRequest> arr = new List<FriendRequest>();

            FriendRequest obj;

            while (dr.Read())
            {
                obj = new FriendRequest();
                if (list.IsColumnPresent("FriendRequestID")) { obj._friendRequestID = (int)dr["FriendRequestID"]; }
                if (list.IsColumnPresent("WebFriendRequestID")) { obj._webFriendRequestID = (string)dr["WebFriendRequestID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("FriendMemberID")) { obj._friendMemberID = (int)dr["FriendMemberID"]; }
                if (list.IsColumnPresent("Origin")) { obj._origin = (int)dr["Origin"]; }
                if (list.IsColumnPresent("Response")) { obj._response = (int)dr["Response"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FriendRequest object or in the case of a zero FriendRequestID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFriendRequest");

            db.AddInParameter(dbCommand, "FriendRequestID", DbType.Int32, FriendRequestID);
            db.AddInParameter(dbCommand, "WebFriendRequestID", DbType.String, WebFriendRequestID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "FriendMemberID", DbType.Int32, FriendMemberID);
            db.AddInParameter(dbCommand, "Origin", DbType.Int32, Origin);
            db.AddInParameter(dbCommand, "Response", DbType.Int32, Response);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FriendRequestID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Gets all the FriendRequest in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static FriendRequest GetFriendRequestByFriendRequestIDWithJoin(int FriendRequestID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendRequestByFriendRequestIDWithJoin");
            db.AddInParameter(dbCommand, "FriendRequestID", DbType.Int32, FriendRequestID);

            List<FriendRequest> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a FriendTag in the system
    /// </summary>
    public partial class FriendTag
    {
        #region Fields and Properties

        private int _friendTagID;		//DB identifier for the TopVideosRated
        private int _firstMemberID;		//The memberID of the first member that send the match to the server
        private string _tagValidationString = "";		//
        private DateTime _taggedDT = new DateTime(1900, 1, 1);		//
        private int _secondMemberID;		//The memberID of the second member that send the match to the server
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//The Date and time that the match occured

        Database db;
        /// <summary>
        /// DB identifier for the TopVideosRated
        /// </summary>
        public int FriendTagID
        {
            get { return _friendTagID; }
            set { _friendTagID = value; }
        }

        /// <summary>
        /// The memberID of the first member that send the match to the server
        /// </summary>
        public int FirstMemberID
        {
            get { return _firstMemberID; }
            set { _firstMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TagValidationString
        {
            get { return _tagValidationString; }
            set { _tagValidationString = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime TaggedDT
        {
            get { return _taggedDT; }
            set { _taggedDT = value; }
        }

        /// <summary>
        /// The memberID of the second member that send the match to the server
        /// </summary>
        public int SecondMemberID
        {
            get { return _secondMemberID; }
            set { _secondMemberID = value; }
        }

        /// <summary>
        /// The Date and time that the match occured
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public FriendTag()
        {

        }

        /// <summary>
        /// Instanciates a FriendTag object from the database via the FriendTagID
        /// </summary>
        public FriendTag(int FriendTagID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendTagByFriendTagID");
            db.AddInParameter(dbCommand, "FriendTagID", DbType.Int32, FriendTagID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("FriendTagID")) { this._friendTagID = (int)dr["FriendTagID"]; }
                    if (list.IsColumnPresent("FirstMemberID")) { this._firstMemberID = (int)dr["FirstMemberID"]; }
                    if (list.IsColumnPresent("TagValidationString")) { this._tagValidationString = (string)dr["TagValidationString"]; }
                    if (list.IsColumnPresent("TaggedDT")) { this._taggedDT = (DateTime)dr["TaggedDT"]; }
                    if (list.IsColumnPresent("SecondMemberID")) { this._secondMemberID = (int)dr["SecondMemberID"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no FriendTag in the database with the ID " + FriendTagID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the FriendTag in the database 
        /// </summary>
        public static List<FriendTag> GetAllFriendTag()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllFriendTag");

            List<FriendTag> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FriendTags
        /// </summary>
        public static List<FriendTag> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FriendTag> arr = new List<FriendTag>();

            FriendTag obj;

            while (dr.Read())
            {
                obj = new FriendTag();
                if (list.IsColumnPresent("FriendTagID")) { obj._friendTagID = (int)dr["FriendTagID"]; }
                if (list.IsColumnPresent("FirstMemberID")) { obj._firstMemberID = (int)dr["FirstMemberID"]; }
                if (list.IsColumnPresent("TagValidationString")) { obj._tagValidationString = (string)dr["TagValidationString"]; }
                if (list.IsColumnPresent("TaggedDT")) { obj._taggedDT = (DateTime)dr["TaggedDT"]; }
                if (list.IsColumnPresent("SecondMemberID")) { obj._secondMemberID = (int)dr["SecondMemberID"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of FriendTags
        /// </summary>
        public static List<FriendTag> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<FriendTag> arr = new List<FriendTag>();

            FriendTag obj;

            while (dr.Read())
            {
                obj = new FriendTag();
                if (list.IsColumnPresent("FriendTagID")) { obj._friendTagID = (int)dr["FriendTagID"]; }
                if (list.IsColumnPresent("FirstMemberID")) { obj._firstMemberID = (int)dr["FirstMemberID"]; }
                if (list.IsColumnPresent("TagValidationString")) { obj._tagValidationString = (string)dr["TagValidationString"]; }
                if (list.IsColumnPresent("TaggedDT")) { obj._taggedDT = (DateTime)dr["TaggedDT"]; }
                if (list.IsColumnPresent("SecondMemberID")) { obj._secondMemberID = (int)dr["SecondMemberID"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the FriendTag object or in the case of a zero FriendTagID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveFriendTag");

            db.AddInParameter(dbCommand, "FriendTagID", DbType.Int32, FriendTagID);
            db.AddInParameter(dbCommand, "FirstMemberID", DbType.Int32, FirstMemberID);
            db.AddInParameter(dbCommand, "TagValidationString", DbType.String, TagValidationString);
            db.AddInParameter(dbCommand, "TaggedDT", DbType.DateTime, TaggedDT);
            db.AddInParameter(dbCommand, "SecondMemberID", DbType.Int32, SecondMemberID);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.FriendTagID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a GeoMessage in the system
    /// </summary>
    public partial class GeoMessage
    {
        #region Fields and Properties

        private int _geoMessageID;		//
        private int _messageType;		//
        private int _measureUnits;		//
        private decimal _spot;		//
        private bool _shouldRepeat;		//
        private int _repeatTimes;		//
        private int _locationID;		//
        private string _messageText = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoMessageID
        {
            get { return _geoMessageID; }
            set { _geoMessageID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MessageType
        {
            get { return _messageType; }
            set { _messageType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MeasureUnits
        {
            get { return _measureUnits; }
            set { _measureUnits = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Spot
        {
            get { return _spot; }
            set { _spot = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ShouldRepeat
        {
            get { return _shouldRepeat; }
            set { _shouldRepeat = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RepeatTimes
        {
            get { return _repeatTimes; }
            set { _repeatTimes = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LocationID
        {
            get { return _locationID; }
            set { _locationID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MessageText
        {
            get { return _messageText; }
            set { _messageText = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoMessage()
        {

        }

        /// <summary>
        /// Instanciates a GeoMessage object from the database via the GeoMessageID
        /// </summary>
        public GeoMessage(int GeoMessageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageByGeoMessageID");
            db.AddInParameter(dbCommand, "GeoMessageID", DbType.Int32, GeoMessageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoMessageID")) { this._geoMessageID = (int)dr["GeoMessageID"]; }
                    if (list.IsColumnPresent("MessageType")) { this._messageType = (int)dr["MessageType"]; }
                    if (list.IsColumnPresent("MeasureUnits")) { this._measureUnits = (int)dr["MeasureUnits"]; }
                    if (list.IsColumnPresent("Spot")) { this._spot = (decimal)dr["Spot"]; }
                    if (list.IsColumnPresent("ShouldRepeat")) { this._shouldRepeat = (bool)dr["ShouldRepeat"]; }
                    if (list.IsColumnPresent("RepeatTimes")) { this._repeatTimes = (int)dr["RepeatTimes"]; }
                    if (list.IsColumnPresent("LocationID")) { this._locationID = (int)dr["LocationID"]; }
                    if (list.IsColumnPresent("MessageText")) { this._messageText = (string)dr["MessageText"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no GeoMessage in the database with the ID " + GeoMessageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoMessage in the database 
        /// </summary>
        public static List<GeoMessage> GetAllGeoMessage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoMessage");

            List<GeoMessage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessages
        /// </summary>
        public static List<GeoMessage> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessage> arr = new List<GeoMessage>();

            GeoMessage obj;

            while (dr.Read())
            {
                obj = new GeoMessage();
                if (list.IsColumnPresent("GeoMessageID")) { obj._geoMessageID = (int)dr["GeoMessageID"]; }
                if (list.IsColumnPresent("MessageType")) { obj._messageType = (int)dr["MessageType"]; }
                if (list.IsColumnPresent("MeasureUnits")) { obj._measureUnits = (int)dr["MeasureUnits"]; }
                if (list.IsColumnPresent("Spot")) { obj._spot = (decimal)dr["Spot"]; }
                if (list.IsColumnPresent("ShouldRepeat")) { obj._shouldRepeat = (bool)dr["ShouldRepeat"]; }
                if (list.IsColumnPresent("RepeatTimes")) { obj._repeatTimes = (int)dr["RepeatTimes"]; }
                if (list.IsColumnPresent("LocationID")) { obj._locationID = (int)dr["LocationID"]; }
                if (list.IsColumnPresent("MessageText")) { obj._messageText = (string)dr["MessageText"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessages
        /// </summary>
        public static List<GeoMessage> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessage> arr = new List<GeoMessage>();

            GeoMessage obj;

            while (dr.Read())
            {
                obj = new GeoMessage();
                if (list.IsColumnPresent("GeoMessageID")) { obj._geoMessageID = (int)dr["GeoMessageID"]; }
                if (list.IsColumnPresent("MessageType")) { obj._messageType = (int)dr["MessageType"]; }
                if (list.IsColumnPresent("MeasureUnits")) { obj._measureUnits = (int)dr["MeasureUnits"]; }
                if (list.IsColumnPresent("Spot")) { obj._spot = (decimal)dr["Spot"]; }
                if (list.IsColumnPresent("ShouldRepeat")) { obj._shouldRepeat = (bool)dr["ShouldRepeat"]; }
                if (list.IsColumnPresent("RepeatTimes")) { obj._repeatTimes = (int)dr["RepeatTimes"]; }
                if (list.IsColumnPresent("LocationID")) { obj._locationID = (int)dr["LocationID"]; }
                if (list.IsColumnPresent("MessageText")) { obj._messageText = (string)dr["MessageText"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoMessage object or in the case of a zero GeoMessageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoMessage");

            db.AddInParameter(dbCommand, "GeoMessageID", DbType.Int32, GeoMessageID);
            db.AddInParameter(dbCommand, "MessageType", DbType.Int32, MessageType);
            db.AddInParameter(dbCommand, "MeasureUnits", DbType.Int32, MeasureUnits);
            db.AddInParameter(dbCommand, "Spot", DbType.Decimal, Spot);
            db.AddInParameter(dbCommand, "ShouldRepeat", DbType.Boolean, ShouldRepeat);
            db.AddInParameter(dbCommand, "RepeatTimes", DbType.Int32, RepeatTimes);
            db.AddInParameter(dbCommand, "LocationID", DbType.Int32, LocationID);
            db.AddInParameter(dbCommand, "MessageText", DbType.String, MessageText);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoMessageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a GeoMessageAddressInfo in the system
    /// </summary>
    public partial class GeoMessageAddressInfo
    {
        #region Fields and Properties

        private int _geoMessageAddressInfoID;		//
        private string _extension = "";		//
        private string _street = "";		//
        private string _postalCode = "";		//
        private string _city = "";		//
        private string _county = "";		//
        private string _state = "";		//
        private string _country = "";		//
        private string _countryCode = "";		//
        private string _district = "";		//
        private string _buildingName = "";		//
        private string _buildingFloor = "";		//
        private string _buildingRoom = "";		//
        private string _buildingZone = "";		//
        private string _crossing1 = "";		//
        private string _crossing2 = "";		//
        private string _url = "";		//
        private string _phoneNumber = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoMessageAddressInfoID
        {
            get { return _geoMessageAddressInfoID; }
            set { _geoMessageAddressInfoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Extension
        {
            get { return _extension; }
            set { _extension = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Street
        {
            get { return _street; }
            set { _street = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PostalCode
        {
            get { return _postalCode; }
            set { _postalCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string City
        {
            get { return _city; }
            set { _city = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string County
        {
            get { return _county; }
            set { _county = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string State
        {
            get { return _state; }
            set { _state = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Country
        {
            get { return _country; }
            set { _country = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CountryCode
        {
            get { return _countryCode; }
            set { _countryCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string District
        {
            get { return _district; }
            set { _district = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BuildingName
        {
            get { return _buildingName; }
            set { _buildingName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BuildingFloor
        {
            get { return _buildingFloor; }
            set { _buildingFloor = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BuildingRoom
        {
            get { return _buildingRoom; }
            set { _buildingRoom = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BuildingZone
        {
            get { return _buildingZone; }
            set { _buildingZone = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Crossing1
        {
            get { return _crossing1; }
            set { _crossing1 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Crossing2
        {
            get { return _crossing2; }
            set { _crossing2 = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Url
        {
            get { return _url; }
            set { _url = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set { _phoneNumber = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoMessageAddressInfo()
        {

        }

        /// <summary>
        /// Instanciates a GeoMessageAddressInfo object from the database via the GeoMessageAddressInfoID
        /// </summary>
        public GeoMessageAddressInfo(int GeoMessageAddressInfoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageAddressInfoByGeoMessageAddressInfoID");
            db.AddInParameter(dbCommand, "GeoMessageAddressInfoID", DbType.Int32, GeoMessageAddressInfoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoMessageAddressInfoID")) { this._geoMessageAddressInfoID = (int)dr["GeoMessageAddressInfoID"]; }
                    if (list.IsColumnPresent("Extension")) { this._extension = (string)dr["Extension"]; }
                    if (list.IsColumnPresent("Street")) { this._street = (string)dr["Street"]; }
                    if (list.IsColumnPresent("PostalCode")) { this._postalCode = (string)dr["PostalCode"]; }
                    if (list.IsColumnPresent("City")) { this._city = (string)dr["City"]; }
                    if (list.IsColumnPresent("County")) { this._county = (string)dr["County"]; }
                    if (list.IsColumnPresent("State")) { this._state = (string)dr["State"]; }
                    if (list.IsColumnPresent("Country")) { this._country = (string)dr["Country"]; }
                    if (list.IsColumnPresent("CountryCode")) { this._countryCode = (string)dr["CountryCode"]; }
                    if (list.IsColumnPresent("District")) { this._district = (string)dr["District"]; }
                    if (list.IsColumnPresent("BuildingName")) { this._buildingName = (string)dr["BuildingName"]; }
                    if (list.IsColumnPresent("BuildingFloor")) { this._buildingFloor = (string)dr["BuildingFloor"]; }
                    if (list.IsColumnPresent("BuildingRoom")) { this._buildingRoom = (string)dr["BuildingRoom"]; }
                    if (list.IsColumnPresent("BuildingZone")) { this._buildingZone = (string)dr["BuildingZone"]; }
                    if (list.IsColumnPresent("Crossing1")) { this._crossing1 = (string)dr["Crossing1"]; }
                    if (list.IsColumnPresent("Crossing2")) { this._crossing2 = (string)dr["Crossing2"]; }
                    if (list.IsColumnPresent("Url")) { this._url = (string)dr["Url"]; }
                    if (list.IsColumnPresent("PhoneNumber")) { this._phoneNumber = (string)dr["PhoneNumber"]; }

                }
                else
                {
                    throw new Exception("There is no GeoMessageAddressInfo in the database with the ID " + GeoMessageAddressInfoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoMessageAddressInfo in the database 
        /// </summary>
        public static List<GeoMessageAddressInfo> GetAllGeoMessageAddressInfo()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoMessageAddressInfo");

            List<GeoMessageAddressInfo> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageAddressInfos
        /// </summary>
        public static List<GeoMessageAddressInfo> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageAddressInfo> arr = new List<GeoMessageAddressInfo>();

            GeoMessageAddressInfo obj;

            while (dr.Read())
            {
                obj = new GeoMessageAddressInfo();
                if (list.IsColumnPresent("GeoMessageAddressInfoID")) { obj._geoMessageAddressInfoID = (int)dr["GeoMessageAddressInfoID"]; }
                if (list.IsColumnPresent("Extension")) { obj._extension = (string)dr["Extension"]; }
                if (list.IsColumnPresent("Street")) { obj._street = (string)dr["Street"]; }
                if (list.IsColumnPresent("PostalCode")) { obj._postalCode = (string)dr["PostalCode"]; }
                if (list.IsColumnPresent("City")) { obj._city = (string)dr["City"]; }
                if (list.IsColumnPresent("County")) { obj._county = (string)dr["County"]; }
                if (list.IsColumnPresent("State")) { obj._state = (string)dr["State"]; }
                if (list.IsColumnPresent("Country")) { obj._country = (string)dr["Country"]; }
                if (list.IsColumnPresent("CountryCode")) { obj._countryCode = (string)dr["CountryCode"]; }
                if (list.IsColumnPresent("District")) { obj._district = (string)dr["District"]; }
                if (list.IsColumnPresent("BuildingName")) { obj._buildingName = (string)dr["BuildingName"]; }
                if (list.IsColumnPresent("BuildingFloor")) { obj._buildingFloor = (string)dr["BuildingFloor"]; }
                if (list.IsColumnPresent("BuildingRoom")) { obj._buildingRoom = (string)dr["BuildingRoom"]; }
                if (list.IsColumnPresent("BuildingZone")) { obj._buildingZone = (string)dr["BuildingZone"]; }
                if (list.IsColumnPresent("Crossing1")) { obj._crossing1 = (string)dr["Crossing1"]; }
                if (list.IsColumnPresent("Crossing2")) { obj._crossing2 = (string)dr["Crossing2"]; }
                if (list.IsColumnPresent("Url")) { obj._url = (string)dr["Url"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageAddressInfos
        /// </summary>
        public static List<GeoMessageAddressInfo> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageAddressInfo> arr = new List<GeoMessageAddressInfo>();

            GeoMessageAddressInfo obj;

            while (dr.Read())
            {
                obj = new GeoMessageAddressInfo();
                if (list.IsColumnPresent("GeoMessageAddressInfoID")) { obj._geoMessageAddressInfoID = (int)dr["GeoMessageAddressInfoID"]; }
                if (list.IsColumnPresent("Extension")) { obj._extension = (string)dr["Extension"]; }
                if (list.IsColumnPresent("Street")) { obj._street = (string)dr["Street"]; }
                if (list.IsColumnPresent("PostalCode")) { obj._postalCode = (string)dr["PostalCode"]; }
                if (list.IsColumnPresent("City")) { obj._city = (string)dr["City"]; }
                if (list.IsColumnPresent("County")) { obj._county = (string)dr["County"]; }
                if (list.IsColumnPresent("State")) { obj._state = (string)dr["State"]; }
                if (list.IsColumnPresent("Country")) { obj._country = (string)dr["Country"]; }
                if (list.IsColumnPresent("CountryCode")) { obj._countryCode = (string)dr["CountryCode"]; }
                if (list.IsColumnPresent("District")) { obj._district = (string)dr["District"]; }
                if (list.IsColumnPresent("BuildingName")) { obj._buildingName = (string)dr["BuildingName"]; }
                if (list.IsColumnPresent("BuildingFloor")) { obj._buildingFloor = (string)dr["BuildingFloor"]; }
                if (list.IsColumnPresent("BuildingRoom")) { obj._buildingRoom = (string)dr["BuildingRoom"]; }
                if (list.IsColumnPresent("BuildingZone")) { obj._buildingZone = (string)dr["BuildingZone"]; }
                if (list.IsColumnPresent("Crossing1")) { obj._crossing1 = (string)dr["Crossing1"]; }
                if (list.IsColumnPresent("Crossing2")) { obj._crossing2 = (string)dr["Crossing2"]; }
                if (list.IsColumnPresent("Url")) { obj._url = (string)dr["Url"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoMessageAddressInfo object or in the case of a zero GeoMessageAddressInfoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoMessageAddressInfo");

            db.AddInParameter(dbCommand, "GeoMessageAddressInfoID", DbType.Int32, GeoMessageAddressInfoID);
            db.AddInParameter(dbCommand, "Extension", DbType.String, Extension);
            db.AddInParameter(dbCommand, "Street", DbType.String, Street);
            db.AddInParameter(dbCommand, "PostalCode", DbType.String, PostalCode);
            db.AddInParameter(dbCommand, "City", DbType.String, City);
            db.AddInParameter(dbCommand, "County", DbType.String, County);
            db.AddInParameter(dbCommand, "State", DbType.String, State);
            db.AddInParameter(dbCommand, "Country", DbType.String, Country);
            db.AddInParameter(dbCommand, "CountryCode", DbType.String, CountryCode);
            db.AddInParameter(dbCommand, "District", DbType.String, District);
            db.AddInParameter(dbCommand, "BuildingName", DbType.String, BuildingName);
            db.AddInParameter(dbCommand, "BuildingFloor", DbType.String, BuildingFloor);
            db.AddInParameter(dbCommand, "BuildingRoom", DbType.String, BuildingRoom);
            db.AddInParameter(dbCommand, "BuildingZone", DbType.String, BuildingZone);
            db.AddInParameter(dbCommand, "Crossing1", DbType.String, Crossing1);
            db.AddInParameter(dbCommand, "Crossing2", DbType.String, Crossing2);
            db.AddInParameter(dbCommand, "Url", DbType.String, Url);
            db.AddInParameter(dbCommand, "PhoneNumber", DbType.String, PhoneNumber);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoMessageAddressInfoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a GeoMessageLocation in the system
    /// </summary>
    public partial class GeoMessageLocation
    {
        #region Fields and Properties

        private int _geoMessageLocationID;		//
        private int _addressInfoID;		//
        private decimal _course;		//
        private int _locationMethod;		//
        private int _qualifiedCoordinatesID;		//
        private decimal _speed;		//
        private DateTime _timeStamp = new DateTime(1900, 1, 1);		//
        private bool _isValid;		//
        private string _extraInfo = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoMessageLocationID
        {
            get { return _geoMessageLocationID; }
            set { _geoMessageLocationID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AddressInfoID
        {
            get { return _addressInfoID; }
            set { _addressInfoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Course
        {
            get { return _course; }
            set { _course = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LocationMethod
        {
            get { return _locationMethod; }
            set { _locationMethod = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int QualifiedCoordinatesID
        {
            get { return _qualifiedCoordinatesID; }
            set { _qualifiedCoordinatesID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Speed
        {
            get { return _speed; }
            set { _speed = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime TimeStamp
        {
            get { return _timeStamp; }
            set { _timeStamp = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsValid
        {
            get { return _isValid; }
            set { _isValid = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ExtraInfo
        {
            get { return _extraInfo; }
            set { _extraInfo = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoMessageLocation()
        {

        }

        /// <summary>
        /// Instanciates a GeoMessageLocation object from the database via the GeoMessageLocationID
        /// </summary>
        public GeoMessageLocation(int GeoMessageLocationID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageLocationByGeoMessageLocationID");
            db.AddInParameter(dbCommand, "GeoMessageLocationID", DbType.Int32, GeoMessageLocationID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoMessageLocationID")) { this._geoMessageLocationID = (int)dr["GeoMessageLocationID"]; }
                    if (list.IsColumnPresent("AddressInfoID")) { this._addressInfoID = (int)dr["AddressInfoID"]; }
                    if (list.IsColumnPresent("Course")) { this._course = (decimal)dr["Course"]; }
                    if (list.IsColumnPresent("LocationMethod")) { this._locationMethod = (int)dr["LocationMethod"]; }
                    if (list.IsColumnPresent("QualifiedCoordinatesID")) { this._qualifiedCoordinatesID = (int)dr["QualifiedCoordinatesID"]; }
                    if (list.IsColumnPresent("Speed")) { this._speed = (decimal)dr["Speed"]; }
                    if (list.IsColumnPresent("TimeStamp")) { this._timeStamp = (DateTime)dr["TimeStamp"]; }
                    if (list.IsColumnPresent("IsValid")) { this._isValid = (bool)dr["IsValid"]; }
                    if (list.IsColumnPresent("ExtraInfo")) { this._extraInfo = (string)dr["ExtraInfo"]; }

                }
                else
                {
                    throw new Exception("There is no GeoMessageLocation in the database with the ID " + GeoMessageLocationID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoMessageLocation in the database 
        /// </summary>
        public static List<GeoMessageLocation> GetAllGeoMessageLocation()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoMessageLocation");

            List<GeoMessageLocation> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageLocations
        /// </summary>
        public static List<GeoMessageLocation> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageLocation> arr = new List<GeoMessageLocation>();

            GeoMessageLocation obj;

            while (dr.Read())
            {
                obj = new GeoMessageLocation();
                if (list.IsColumnPresent("GeoMessageLocationID")) { obj._geoMessageLocationID = (int)dr["GeoMessageLocationID"]; }
                if (list.IsColumnPresent("AddressInfoID")) { obj._addressInfoID = (int)dr["AddressInfoID"]; }
                if (list.IsColumnPresent("Course")) { obj._course = (decimal)dr["Course"]; }
                if (list.IsColumnPresent("LocationMethod")) { obj._locationMethod = (int)dr["LocationMethod"]; }
                if (list.IsColumnPresent("QualifiedCoordinatesID")) { obj._qualifiedCoordinatesID = (int)dr["QualifiedCoordinatesID"]; }
                if (list.IsColumnPresent("Speed")) { obj._speed = (decimal)dr["Speed"]; }
                if (list.IsColumnPresent("TimeStamp")) { obj._timeStamp = (DateTime)dr["TimeStamp"]; }
                if (list.IsColumnPresent("IsValid")) { obj._isValid = (bool)dr["IsValid"]; }
                if (list.IsColumnPresent("ExtraInfo")) { obj._extraInfo = (string)dr["ExtraInfo"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageLocations
        /// </summary>
        public static List<GeoMessageLocation> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageLocation> arr = new List<GeoMessageLocation>();

            GeoMessageLocation obj;

            while (dr.Read())
            {
                obj = new GeoMessageLocation();
                if (list.IsColumnPresent("GeoMessageLocationID")) { obj._geoMessageLocationID = (int)dr["GeoMessageLocationID"]; }
                if (list.IsColumnPresent("AddressInfoID")) { obj._addressInfoID = (int)dr["AddressInfoID"]; }
                if (list.IsColumnPresent("Course")) { obj._course = (decimal)dr["Course"]; }
                if (list.IsColumnPresent("LocationMethod")) { obj._locationMethod = (int)dr["LocationMethod"]; }
                if (list.IsColumnPresent("QualifiedCoordinatesID")) { obj._qualifiedCoordinatesID = (int)dr["QualifiedCoordinatesID"]; }
                if (list.IsColumnPresent("Speed")) { obj._speed = (decimal)dr["Speed"]; }
                if (list.IsColumnPresent("TimeStamp")) { obj._timeStamp = (DateTime)dr["TimeStamp"]; }
                if (list.IsColumnPresent("IsValid")) { obj._isValid = (bool)dr["IsValid"]; }
                if (list.IsColumnPresent("ExtraInfo")) { obj._extraInfo = (string)dr["ExtraInfo"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoMessageLocation object or in the case of a zero GeoMessageLocationID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoMessageLocation");

            db.AddInParameter(dbCommand, "GeoMessageLocationID", DbType.Int32, GeoMessageLocationID);
            db.AddInParameter(dbCommand, "AddressInfoID", DbType.Int32, AddressInfoID);
            db.AddInParameter(dbCommand, "Course", DbType.Decimal, Course);
            db.AddInParameter(dbCommand, "LocationMethod", DbType.Int32, LocationMethod);
            db.AddInParameter(dbCommand, "QualifiedCoordinatesID", DbType.Int32, QualifiedCoordinatesID);
            db.AddInParameter(dbCommand, "Speed", DbType.Decimal, Speed);
            db.AddInParameter(dbCommand, "TimeStamp", DbType.DateTime, TimeStamp);
            db.AddInParameter(dbCommand, "IsValid", DbType.Boolean, IsValid);
            db.AddInParameter(dbCommand, "ExtraInfo", DbType.String, ExtraInfo);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoMessageLocationID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a GeoMessageMemberInfo in the system
    /// </summary>
    public partial class GeoMessageMemberInfo
    {
        #region Fields and Properties

        private int _geoMessageMemberInfoID;		//
        private int _messageID;		//
        private int _messageCreatorID;		//
        private int _messageReceiverID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoMessageMemberInfoID
        {
            get { return _geoMessageMemberInfoID; }
            set { _geoMessageMemberInfoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MessageID
        {
            get { return _messageID; }
            set { _messageID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MessageCreatorID
        {
            get { return _messageCreatorID; }
            set { _messageCreatorID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MessageReceiverID
        {
            get { return _messageReceiverID; }
            set { _messageReceiverID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoMessageMemberInfo()
        {

        }

        /// <summary>
        /// Instanciates a GeoMessageMemberInfo object from the database via the GeoMessageMemberInfoID
        /// </summary>
        public GeoMessageMemberInfo(int GeoMessageMemberInfoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageMemberInfoByGeoMessageMemberInfoID");
            db.AddInParameter(dbCommand, "GeoMessageMemberInfoID", DbType.Int32, GeoMessageMemberInfoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoMessageMemberInfoID")) { this._geoMessageMemberInfoID = (int)dr["GeoMessageMemberInfoID"]; }
                    if (list.IsColumnPresent("MessageID")) { this._messageID = (int)dr["MessageID"]; }
                    if (list.IsColumnPresent("MessageCreatorID")) { this._messageCreatorID = (int)dr["MessageCreatorID"]; }
                    if (list.IsColumnPresent("MessageReceiverID")) { this._messageReceiverID = (int)dr["MessageReceiverID"]; }

                }
                else
                {
                    throw new Exception("There is no GeoMessageMemberInfo in the database with the ID " + GeoMessageMemberInfoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoMessageMemberInfo in the database 
        /// </summary>
        public static List<GeoMessageMemberInfo> GetAllGeoMessageMemberInfo()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoMessageMemberInfo");

            List<GeoMessageMemberInfo> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageMemberInfos
        /// </summary>
        public static List<GeoMessageMemberInfo> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageMemberInfo> arr = new List<GeoMessageMemberInfo>();

            GeoMessageMemberInfo obj;

            while (dr.Read())
            {
                obj = new GeoMessageMemberInfo();
                if (list.IsColumnPresent("GeoMessageMemberInfoID")) { obj._geoMessageMemberInfoID = (int)dr["GeoMessageMemberInfoID"]; }
                if (list.IsColumnPresent("MessageID")) { obj._messageID = (int)dr["MessageID"]; }
                if (list.IsColumnPresent("MessageCreatorID")) { obj._messageCreatorID = (int)dr["MessageCreatorID"]; }
                if (list.IsColumnPresent("MessageReceiverID")) { obj._messageReceiverID = (int)dr["MessageReceiverID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageMemberInfos
        /// </summary>
        public static List<GeoMessageMemberInfo> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageMemberInfo> arr = new List<GeoMessageMemberInfo>();

            GeoMessageMemberInfo obj;

            while (dr.Read())
            {
                obj = new GeoMessageMemberInfo();
                if (list.IsColumnPresent("GeoMessageMemberInfoID")) { obj._geoMessageMemberInfoID = (int)dr["GeoMessageMemberInfoID"]; }
                if (list.IsColumnPresent("MessageID")) { obj._messageID = (int)dr["MessageID"]; }
                if (list.IsColumnPresent("MessageCreatorID")) { obj._messageCreatorID = (int)dr["MessageCreatorID"]; }
                if (list.IsColumnPresent("MessageReceiverID")) { obj._messageReceiverID = (int)dr["MessageReceiverID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoMessageMemberInfo object or in the case of a zero GeoMessageMemberInfoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoMessageMemberInfo");

            db.AddInParameter(dbCommand, "GeoMessageMemberInfoID", DbType.Int32, GeoMessageMemberInfoID);
            db.AddInParameter(dbCommand, "MessageID", DbType.Int32, MessageID);
            db.AddInParameter(dbCommand, "MessageCreatorID", DbType.Int32, MessageCreatorID);
            db.AddInParameter(dbCommand, "MessageReceiverID", DbType.Int32, MessageReceiverID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoMessageMemberInfoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a GeoMessageQualifiedCoordinates in the system
    /// </summary>
    public partial class GeoMessageQualifiedCoordinates
    {
        #region Fields and Properties

        private int _geoMessageQualifiedCoordinatesID;		//
        private decimal _latitude;		//
        private decimal _longitude;		//
        private decimal _altitude;		//
        private decimal _horizontalAccuracy;		//
        private decimal _verticalAccuracy;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int GeoMessageQualifiedCoordinatesID
        {
            get { return _geoMessageQualifiedCoordinatesID; }
            set { _geoMessageQualifiedCoordinatesID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Latitude
        {
            get { return _latitude; }
            set { _latitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Longitude
        {
            get { return _longitude; }
            set { _longitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal Altitude
        {
            get { return _altitude; }
            set { _altitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal HorizontalAccuracy
        {
            get { return _horizontalAccuracy; }
            set { _horizontalAccuracy = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal VerticalAccuracy
        {
            get { return _verticalAccuracy; }
            set { _verticalAccuracy = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public GeoMessageQualifiedCoordinates()
        {

        }

        /// <summary>
        /// Instanciates a GeoMessageQualifiedCoordinates object from the database via the GeoMessageQualifiedCoordinatesID
        /// </summary>
        public GeoMessageQualifiedCoordinates(int GeoMessageQualifiedCoordinatesID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageQualifiedCoordinatesByGeoMessageQualifiedCoordinatesID");
            db.AddInParameter(dbCommand, "GeoMessageQualifiedCoordinatesID", DbType.Int32, GeoMessageQualifiedCoordinatesID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("GeoMessageQualifiedCoordinatesID")) { this._geoMessageQualifiedCoordinatesID = (int)dr["GeoMessageQualifiedCoordinatesID"]; }
                    if (list.IsColumnPresent("Latitude")) { this._latitude = (decimal)dr["Latitude"]; }
                    if (list.IsColumnPresent("Longitude")) { this._longitude = (decimal)dr["Longitude"]; }
                    if (list.IsColumnPresent("Altitude")) { this._altitude = (decimal)dr["Altitude"]; }
                    if (list.IsColumnPresent("HorizontalAccuracy")) { this._horizontalAccuracy = (decimal)dr["HorizontalAccuracy"]; }
                    if (list.IsColumnPresent("VerticalAccuracy")) { this._verticalAccuracy = (decimal)dr["VerticalAccuracy"]; }

                }
                else
                {
                    throw new Exception("There is no GeoMessageQualifiedCoordinates in the database with the ID " + GeoMessageQualifiedCoordinatesID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the GeoMessageQualifiedCoordinates in the database 
        /// </summary>
        public static List<GeoMessageQualifiedCoordinates> GetAllGeoMessageQualifiedCoordinates()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllGeoMessageQualifiedCoordinates");

            List<GeoMessageQualifiedCoordinates> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageQualifiedCoordinatess
        /// </summary>
        public static List<GeoMessageQualifiedCoordinates> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageQualifiedCoordinates> arr = new List<GeoMessageQualifiedCoordinates>();

            GeoMessageQualifiedCoordinates obj;

            while (dr.Read())
            {
                obj = new GeoMessageQualifiedCoordinates();
                if (list.IsColumnPresent("GeoMessageQualifiedCoordinatesID")) { obj._geoMessageQualifiedCoordinatesID = (int)dr["GeoMessageQualifiedCoordinatesID"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("Altitude")) { obj._altitude = (decimal)dr["Altitude"]; }
                if (list.IsColumnPresent("HorizontalAccuracy")) { obj._horizontalAccuracy = (decimal)dr["HorizontalAccuracy"]; }
                if (list.IsColumnPresent("VerticalAccuracy")) { obj._verticalAccuracy = (decimal)dr["VerticalAccuracy"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of GeoMessageQualifiedCoordinatess
        /// </summary>
        public static List<GeoMessageQualifiedCoordinates> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<GeoMessageQualifiedCoordinates> arr = new List<GeoMessageQualifiedCoordinates>();

            GeoMessageQualifiedCoordinates obj;

            while (dr.Read())
            {
                obj = new GeoMessageQualifiedCoordinates();
                if (list.IsColumnPresent("GeoMessageQualifiedCoordinatesID")) { obj._geoMessageQualifiedCoordinatesID = (int)dr["GeoMessageQualifiedCoordinatesID"]; }
                if (list.IsColumnPresent("Latitude")) { obj._latitude = (decimal)dr["Latitude"]; }
                if (list.IsColumnPresent("Longitude")) { obj._longitude = (decimal)dr["Longitude"]; }
                if (list.IsColumnPresent("Altitude")) { obj._altitude = (decimal)dr["Altitude"]; }
                if (list.IsColumnPresent("HorizontalAccuracy")) { obj._horizontalAccuracy = (decimal)dr["HorizontalAccuracy"]; }
                if (list.IsColumnPresent("VerticalAccuracy")) { obj._verticalAccuracy = (decimal)dr["VerticalAccuracy"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the GeoMessageQualifiedCoordinates object or in the case of a zero GeoMessageQualifiedCoordinatesID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveGeoMessageQualifiedCoordinates");

            db.AddInParameter(dbCommand, "GeoMessageQualifiedCoordinatesID", DbType.Int32, GeoMessageQualifiedCoordinatesID);
            db.AddInParameter(dbCommand, "Latitude", DbType.Decimal, Latitude);
            db.AddInParameter(dbCommand, "Longitude", DbType.Decimal, Longitude);
            db.AddInParameter(dbCommand, "Altitude", DbType.Decimal, Altitude);
            db.AddInParameter(dbCommand, "HorizontalAccuracy", DbType.Decimal, HorizontalAccuracy);
            db.AddInParameter(dbCommand, "VerticalAccuracy", DbType.Decimal, VerticalAccuracy);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.GeoMessageQualifiedCoordinatesID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Hobby in the system
    /// </summary>
    public partial class Hobby
    {
        /// <summary>
        /// The MatchProfile objects for this Hobby
        /// </summary>
        public List<MatchProfile> MatchProfile
        {
            get
            {
                if (matchProfile == null)
                    this.matchProfile = this.GetMatchProfileByHobbyID();
                return matchProfile;
            }
            set { matchProfile = value; }
        }


        /// <summary>
        /// The MemberProfile objects for this Hobby
        /// </summary>
        public List<MemberProfile> MemberProfile
        {
            get
            {
                if (memberProfile == null)
                    this.memberProfile = this.GetMemberProfileByHobbyID();
                return memberProfile;
            }
            set { memberProfile = value; }
        }


        #region Fields and Properties

        private int _hobbyID;		//
        private string _name = "";		//
        private List<MatchProfile> matchProfile;		// Foreign object
        private List<MemberProfile> memberProfile;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int HobbyID
        {
            get { return _hobbyID; }
            set { _hobbyID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Hobby()
        {

        }

        /// <summary>
        /// Instanciates a Hobby object from the database via the HobbyID
        /// </summary>
        public Hobby(int HobbyID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetHobbyByHobbyID");
            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("HobbyID")) { this._hobbyID = (int)dr["HobbyID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }

                }
                else
                {
                    throw new Exception("There is no Hobby in the database with the ID " + HobbyID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Hobby in the database 
        /// </summary>
        public static List<Hobby> GetAllHobby()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllHobby");

            List<Hobby> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Hobbys
        /// </summary>
        public static List<Hobby> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Hobby> arr = new List<Hobby>();

            Hobby obj;

            while (dr.Read())
            {
                obj = new Hobby();
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Hobbys
        /// </summary>
        public static List<Hobby> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Hobby> arr = new List<Hobby>();

            Hobby obj;

            while (dr.Read())
            {
                obj = new Hobby();
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Hobby object or in the case of a zero HobbyID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveHobby");

            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.HobbyID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the MatchProfile objects for this Hobby
        /// </summary>
        private List<MatchProfile> GetMatchProfileByHobbyID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMatchProfileByHobbyID");
            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);

            List<MatchProfile> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MatchProfile.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberProfile objects for this Hobby
        /// </summary>
        private List<MemberProfile> GetMemberProfileByHobbyID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberProfileByHobbyID");
            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);

            List<MemberProfile> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberProfile.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a IMSCustomer in the system
    /// </summary>
    public partial class IMSCustomer
    {
        #region Fields and Properties

        private int _iMSCustomerID;		//
        private string _contactName = "";		//
        private string _contactEmail = "";		//
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int IMSCustomerID
        {
            get { return _iMSCustomerID; }
            set { _iMSCustomerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ContactName
        {
            get { return _contactName; }
            set { _contactName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ContactEmail
        {
            get { return _contactEmail; }
            set { _contactEmail = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public IMSCustomer()
        {

        }

        /// <summary>
        /// Instanciates a IMSCustomer object from the database via the IMSCustomerID
        /// </summary>
        public IMSCustomer(int IMSCustomerID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetIMSCustomerByIMSCustomerID");
            db.AddInParameter(dbCommand, "IMSCustomerID", DbType.Int32, IMSCustomerID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("IMSCustomerID")) { this._iMSCustomerID = (int)dr["IMSCustomerID"]; }
                    if (list.IsColumnPresent("ContactName")) { this._contactName = (string)dr["ContactName"]; }
                    if (list.IsColumnPresent("ContactEmail")) { this._contactEmail = (string)dr["ContactEmail"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no IMSCustomer in the database with the ID " + IMSCustomerID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the IMSCustomer in the database 
        /// </summary>
        public static List<IMSCustomer> GetAllIMSCustomer()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllIMSCustomer");

            List<IMSCustomer> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IMSCustomers
        /// </summary>
        public static List<IMSCustomer> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IMSCustomer> arr = new List<IMSCustomer>();

            IMSCustomer obj;

            while (dr.Read())
            {
                obj = new IMSCustomer();
                if (list.IsColumnPresent("IMSCustomerID")) { obj._iMSCustomerID = (int)dr["IMSCustomerID"]; }
                if (list.IsColumnPresent("ContactName")) { obj._contactName = (string)dr["ContactName"]; }
                if (list.IsColumnPresent("ContactEmail")) { obj._contactEmail = (string)dr["ContactEmail"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IMSCustomers
        /// </summary>
        public static List<IMSCustomer> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IMSCustomer> arr = new List<IMSCustomer>();

            IMSCustomer obj;

            while (dr.Read())
            {
                obj = new IMSCustomer();
                if (list.IsColumnPresent("IMSCustomerID")) { obj._iMSCustomerID = (int)dr["IMSCustomerID"]; }
                if (list.IsColumnPresent("ContactName")) { obj._contactName = (string)dr["ContactName"]; }
                if (list.IsColumnPresent("ContactEmail")) { obj._contactEmail = (string)dr["ContactEmail"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the IMSCustomer object or in the case of a zero IMSCustomerID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveIMSCustomer");

            db.AddInParameter(dbCommand, "IMSCustomerID", DbType.Int32, IMSCustomerID);
            db.AddInParameter(dbCommand, "ContactName", DbType.String, ContactName);
            db.AddInParameter(dbCommand, "ContactEmail", DbType.String, ContactEmail);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.IMSCustomerID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a IMSPlan in the system
    /// </summary>
    public partial class IMSPlan
    {
        /// <summary>
        /// The Banner objects for this IMSPlan
        /// </summary>
        public List<Banner> Banner
        {
            get
            {
                if (banner == null)
                    this.banner = this.GetBannerByIMSPlanID();
                return banner;
            }
            set { banner = value; }
        }


        #region Fields and Properties

        private int _iMSPlanID;		//
        private string _webIMSPlanID = "";		//
        private int _businessID;		//
        private int _planLevel;		//0 = basic | 1 = Premium | 2 = Enterprise
        private string _clickThroughURL = "";		//
        private string _bannerPath = "";		//
        private DateTime _inceptionDT = new DateTime(1900, 1, 1);		//
        private List<Banner> banner;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int IMSPlanID
        {
            get { return _iMSPlanID; }
            set { _iMSPlanID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebIMSPlanID
        {
            get { return _webIMSPlanID; }
            set { _webIMSPlanID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BusinessID
        {
            get { return _businessID; }
            set { _businessID = value; }
        }

        /// <summary>
        /// 0 = basic | 1 = Premium | 2 = Enterprise
        /// </summary>
        public int PlanLevel
        {
            get { return _planLevel; }
            set { _planLevel = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ClickThroughURL
        {
            get { return _clickThroughURL; }
            set { _clickThroughURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BannerPath
        {
            get { return _bannerPath; }
            set { _bannerPath = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime InceptionDT
        {
            get { return _inceptionDT; }
            set { _inceptionDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public IMSPlan()
        {

        }

        /// <summary>
        /// Instanciates a IMSPlan object from the database via the IMSPlanID
        /// </summary>
        public IMSPlan(int IMSPlanID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetIMSPlanByIMSPlanID");
            db.AddInParameter(dbCommand, "IMSPlanID", DbType.Int32, IMSPlanID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("IMSPlanID")) { this._iMSPlanID = (int)dr["IMSPlanID"]; }
                    if (list.IsColumnPresent("WebIMSPlanID")) { this._webIMSPlanID = (string)dr["WebIMSPlanID"]; }
                    if (list.IsColumnPresent("BusinessID")) { this._businessID = (int)dr["BusinessID"]; }
                    if (list.IsColumnPresent("PlanLevel")) { this._planLevel = (int)dr["PlanLevel"]; }
                    if (list.IsColumnPresent("ClickThroughURL")) { this._clickThroughURL = (string)dr["ClickThroughURL"]; }
                    if (list.IsColumnPresent("BannerPath")) { this._bannerPath = (string)dr["BannerPath"]; }
                    if (list.IsColumnPresent("InceptionDT")) { this._inceptionDT = (DateTime)dr["InceptionDT"]; }

                }
                else
                {
                    throw new Exception("There is no IMSPlan in the database with the ID " + IMSPlanID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the IMSPlan in the database 
        /// </summary>
        public static List<IMSPlan> GetAllIMSPlan()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllIMSPlan");

            List<IMSPlan> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IMSPlans
        /// </summary>
        public static List<IMSPlan> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IMSPlan> arr = new List<IMSPlan>();

            IMSPlan obj;

            while (dr.Read())
            {
                obj = new IMSPlan();
                if (list.IsColumnPresent("IMSPlanID")) { obj._iMSPlanID = (int)dr["IMSPlanID"]; }
                if (list.IsColumnPresent("WebIMSPlanID")) { obj._webIMSPlanID = (string)dr["WebIMSPlanID"]; }
                if (list.IsColumnPresent("BusinessID")) { obj._businessID = (int)dr["BusinessID"]; }
                if (list.IsColumnPresent("PlanLevel")) { obj._planLevel = (int)dr["PlanLevel"]; }
                if (list.IsColumnPresent("ClickThroughURL")) { obj._clickThroughURL = (string)dr["ClickThroughURL"]; }
                if (list.IsColumnPresent("BannerPath")) { obj._bannerPath = (string)dr["BannerPath"]; }
                if (list.IsColumnPresent("InceptionDT")) { obj._inceptionDT = (DateTime)dr["InceptionDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IMSPlans
        /// </summary>
        public static List<IMSPlan> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IMSPlan> arr = new List<IMSPlan>();

            IMSPlan obj;

            while (dr.Read())
            {
                obj = new IMSPlan();
                if (list.IsColumnPresent("IMSPlanID")) { obj._iMSPlanID = (int)dr["IMSPlanID"]; }
                if (list.IsColumnPresent("WebIMSPlanID")) { obj._webIMSPlanID = (string)dr["WebIMSPlanID"]; }
                if (list.IsColumnPresent("BusinessID")) { obj._businessID = (int)dr["BusinessID"]; }
                if (list.IsColumnPresent("PlanLevel")) { obj._planLevel = (int)dr["PlanLevel"]; }
                if (list.IsColumnPresent("ClickThroughURL")) { obj._clickThroughURL = (string)dr["ClickThroughURL"]; }
                if (list.IsColumnPresent("BannerPath")) { obj._bannerPath = (string)dr["BannerPath"]; }
                if (list.IsColumnPresent("InceptionDT")) { obj._inceptionDT = (DateTime)dr["InceptionDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the IMSPlan object or in the case of a zero IMSPlanID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveIMSPlan");

            db.AddInParameter(dbCommand, "IMSPlanID", DbType.Int32, IMSPlanID);
            db.AddInParameter(dbCommand, "WebIMSPlanID", DbType.String, WebIMSPlanID);
            db.AddInParameter(dbCommand, "BusinessID", DbType.Int32, BusinessID);
            db.AddInParameter(dbCommand, "PlanLevel", DbType.Int32, PlanLevel);
            db.AddInParameter(dbCommand, "ClickThroughURL", DbType.String, ClickThroughURL);
            db.AddInParameter(dbCommand, "BannerPath", DbType.String, BannerPath);
            db.AddInParameter(dbCommand, "InceptionDT", DbType.DateTime, InceptionDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.IMSPlanID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the Banner objects for this IMSPlan
        /// </summary>
        private List<Banner> GetBannerByIMSPlanID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBannerByIMSPlanID");
            db.AddInParameter(dbCommand, "IMSPlanID", DbType.Int32, IMSPlanID);

            List<Banner> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Banner.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a InviteClick in the system
    /// </summary>
    public partial class InviteClick
    {
        #region Fields and Properties

        private int _inviteClickID;		//
        private string _webInviteClickID = "";		//
        private string _forwardURL = "";		//
        private int _contactImportID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int InviteClickID
        {
            get { return _inviteClickID; }
            set { _inviteClickID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebInviteClickID
        {
            get { return _webInviteClickID; }
            set { _webInviteClickID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ForwardURL
        {
            get { return _forwardURL; }
            set { _forwardURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ContactImportID
        {
            get { return _contactImportID; }
            set { _contactImportID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public InviteClick()
        {

        }

        /// <summary>
        /// Instanciates a InviteClick object from the database via the InviteClickID
        /// </summary>
        public InviteClick(int InviteClickID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetInviteClickByInviteClickID");
            db.AddInParameter(dbCommand, "InviteClickID", DbType.Int32, InviteClickID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("InviteClickID")) { this._inviteClickID = (int)dr["InviteClickID"]; }
                    if (list.IsColumnPresent("WebInviteClickID")) { this._webInviteClickID = (string)dr["WebInviteClickID"]; }
                    if (list.IsColumnPresent("ForwardURL")) { this._forwardURL = (string)dr["ForwardURL"]; }
                    if (list.IsColumnPresent("ContactImportID")) { this._contactImportID = (int)dr["ContactImportID"]; }

                }
                else
                {
                    throw new Exception("There is no InviteClick in the database with the ID " + InviteClickID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the InviteClick in the database 
        /// </summary>
        public static List<InviteClick> GetAllInviteClick()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllInviteClick");

            List<InviteClick> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of InviteClicks
        /// </summary>
        public static List<InviteClick> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<InviteClick> arr = new List<InviteClick>();

            InviteClick obj;

            while (dr.Read())
            {
                obj = new InviteClick();
                if (list.IsColumnPresent("InviteClickID")) { obj._inviteClickID = (int)dr["InviteClickID"]; }
                if (list.IsColumnPresent("WebInviteClickID")) { obj._webInviteClickID = (string)dr["WebInviteClickID"]; }
                if (list.IsColumnPresent("ForwardURL")) { obj._forwardURL = (string)dr["ForwardURL"]; }
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of InviteClicks
        /// </summary>
        public static List<InviteClick> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<InviteClick> arr = new List<InviteClick>();

            InviteClick obj;

            while (dr.Read())
            {
                obj = new InviteClick();
                if (list.IsColumnPresent("InviteClickID")) { obj._inviteClickID = (int)dr["InviteClickID"]; }
                if (list.IsColumnPresent("WebInviteClickID")) { obj._webInviteClickID = (string)dr["WebInviteClickID"]; }
                if (list.IsColumnPresent("ForwardURL")) { obj._forwardURL = (string)dr["ForwardURL"]; }
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the InviteClick object or in the case of a zero InviteClickID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveInviteClick");

            db.AddInParameter(dbCommand, "InviteClickID", DbType.Int32, InviteClickID);
            db.AddInParameter(dbCommand, "WebInviteClickID", DbType.String, WebInviteClickID);
            db.AddInParameter(dbCommand, "ForwardURL", DbType.String, ForwardURL);
            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.InviteClickID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a IPLocation in the system
    /// </summary>
    public partial class IPLocation
    {
        /// <summary>
        /// The Member objects for this IPLocation
        /// </summary>
        public List<Member> Member
        {
            get
            {
                if (member == null)
                    this.member = this.GetMemberByIPLocationID();
                return member;
            }
            set { member = value; }
        }


        #region Fields and Properties

        private int _iPLocationID;		//
        private int _locId;		//
        private string _country = "";		//
        private string _region = "";		//
        private string _city = "";		//
        private string _postalCode = "";		//
        private decimal _latitude;		//
        private decimal _longitude;		//
        private string _dmaCode = "";		//
        private string _areaCode = "";		//
        private List<Member> member;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int IPLocationID
        {
            get { return _iPLocationID; }
            set { _iPLocationID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int locId
        {
            get { return _locId; }
            set { _locId = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string country
        {
            get { return _country; }
            set { _country = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string region
        {
            get { return _region; }
            set { _region = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string city
        {
            get { return _city; }
            set { _city = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string postalCode
        {
            get { return _postalCode; }
            set { _postalCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal latitude
        {
            get { return _latitude; }
            set { _latitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public decimal longitude
        {
            get { return _longitude; }
            set { _longitude = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string dmaCode
        {
            get { return _dmaCode; }
            set { _dmaCode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string areaCode
        {
            get { return _areaCode; }
            set { _areaCode = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public IPLocation()
        {

        }

        /// <summary>
        /// Instanciates a IPLocation object from the database via the IPLocationID
        /// </summary>
        public IPLocation(int IPLocationID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetIPLocationByIPLocationID");
            db.AddInParameter(dbCommand, "IPLocationID", DbType.Int32, IPLocationID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("IPLocationID")) { this._iPLocationID = (int)dr["IPLocationID"]; }
                    if (list.IsColumnPresent("locId")) { this._locId = (int)dr["locId"]; }
                    if (list.IsColumnPresent("country")) { this._country = (string)dr["country"]; }
                    if (list.IsColumnPresent("region")) { this._region = (string)dr["region"]; }
                    if (list.IsColumnPresent("city")) { this._city = (string)dr["city"]; }
                    if (list.IsColumnPresent("postalCode")) { this._postalCode = (string)dr["postalCode"]; }
                    if (list.IsColumnPresent("latitude")) { this._latitude = (decimal)dr["latitude"]; }
                    if (list.IsColumnPresent("longitude")) { this._longitude = (decimal)dr["longitude"]; }
                    if (list.IsColumnPresent("dmaCode")) { this._dmaCode = (string)dr["dmaCode"]; }
                    if (list.IsColumnPresent("areaCode")) { this._areaCode = (string)dr["areaCode"]; }

                }
                else
                {
                    throw new Exception("There is no IPLocation in the database with the ID " + IPLocationID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the IPLocation in the database 
        /// </summary>
        public static List<IPLocation> GetAllIPLocation()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllIPLocation");

            List<IPLocation> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IPLocations
        /// </summary>
        public static List<IPLocation> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IPLocation> arr = new List<IPLocation>();

            IPLocation obj;

            while (dr.Read())
            {
                obj = new IPLocation();
                if (list.IsColumnPresent("IPLocationID")) { obj._iPLocationID = (int)dr["IPLocationID"]; }
                if (list.IsColumnPresent("locId")) { obj._locId = (int)dr["locId"]; }
                if (list.IsColumnPresent("country")) { obj._country = (string)dr["country"]; }
                if (list.IsColumnPresent("region")) { obj._region = (string)dr["region"]; }
                if (list.IsColumnPresent("city")) { obj._city = (string)dr["city"]; }
                if (list.IsColumnPresent("postalCode")) { obj._postalCode = (string)dr["postalCode"]; }
                if (list.IsColumnPresent("latitude")) { obj._latitude = (decimal)dr["latitude"]; }
                if (list.IsColumnPresent("longitude")) { obj._longitude = (decimal)dr["longitude"]; }
                if (list.IsColumnPresent("dmaCode")) { obj._dmaCode = (string)dr["dmaCode"]; }
                if (list.IsColumnPresent("areaCode")) { obj._areaCode = (string)dr["areaCode"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of IPLocations
        /// </summary>
        public static List<IPLocation> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<IPLocation> arr = new List<IPLocation>();

            IPLocation obj;

            while (dr.Read())
            {
                obj = new IPLocation();
                if (list.IsColumnPresent("IPLocationID")) { obj._iPLocationID = (int)dr["IPLocationID"]; }
                if (list.IsColumnPresent("locId")) { obj._locId = (int)dr["locId"]; }
                if (list.IsColumnPresent("country")) { obj._country = (string)dr["country"]; }
                if (list.IsColumnPresent("region")) { obj._region = (string)dr["region"]; }
                if (list.IsColumnPresent("city")) { obj._city = (string)dr["city"]; }
                if (list.IsColumnPresent("postalCode")) { obj._postalCode = (string)dr["postalCode"]; }
                if (list.IsColumnPresent("latitude")) { obj._latitude = (decimal)dr["latitude"]; }
                if (list.IsColumnPresent("longitude")) { obj._longitude = (decimal)dr["longitude"]; }
                if (list.IsColumnPresent("dmaCode")) { obj._dmaCode = (string)dr["dmaCode"]; }
                if (list.IsColumnPresent("areaCode")) { obj._areaCode = (string)dr["areaCode"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the IPLocation object or in the case of a zero IPLocationID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveIPLocation");

            db.AddInParameter(dbCommand, "IPLocationID", DbType.Int32, IPLocationID);
            db.AddInParameter(dbCommand, "locId", DbType.Int32, locId);
            db.AddInParameter(dbCommand, "country", DbType.String, country);
            db.AddInParameter(dbCommand, "region", DbType.String, region);
            db.AddInParameter(dbCommand, "city", DbType.String, city);
            db.AddInParameter(dbCommand, "postalCode", DbType.String, postalCode);
            db.AddInParameter(dbCommand, "latitude", DbType.Decimal, latitude);
            db.AddInParameter(dbCommand, "longitude", DbType.Decimal, longitude);
            db.AddInParameter(dbCommand, "dmaCode", DbType.String, dmaCode);
            db.AddInParameter(dbCommand, "areaCode", DbType.String, areaCode);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.IPLocationID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the Member objects for this IPLocation
        /// </summary>
        private List<Member> GetMemberByIPLocationID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberByIPLocationID");
            db.AddInParameter(dbCommand, "IPLocationID", DbType.Int32, IPLocationID);

            List<Member> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Member.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ISOCountry in the system
    /// </summary>
    public partial class ISOCountry
    {
        #region Fields and Properties

        private int _iSOCountryID;		//DB Key ID
        private string _iSOCode = "";		//Country code ISO
        private string _countryText = "";		//Country Name

        Database db;
        /// <summary>
        /// DB Key ID
        /// </summary>
        public int ISOCountryID
        {
            get { return _iSOCountryID; }
            set { _iSOCountryID = value; }
        }

        /// <summary>
        /// Country code ISO
        /// </summary>
        public string ISOCode
        {
            get { return _iSOCode; }
            set { _iSOCode = value; }
        }

        /// <summary>
        /// Country Name
        /// </summary>
        public string CountryText
        {
            get { return _countryText; }
            set { _countryText = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ISOCountry()
        {

        }

        /// <summary>
        /// Instanciates a ISOCountry object from the database via the ISOCountryID
        /// </summary>
        public ISOCountry(int ISOCountryID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetISOCountryByISOCountryID");
            db.AddInParameter(dbCommand, "ISOCountryID", DbType.Int32, ISOCountryID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ISOCountryID")) { this._iSOCountryID = (int)dr["ISOCountryID"]; }
                    if (list.IsColumnPresent("ISOCode")) { this._iSOCode = (string)dr["ISOCode"]; }
                    if (list.IsColumnPresent("CountryText")) { this._countryText = (string)dr["CountryText"]; }

                }
                else
                {
                    throw new Exception("There is no ISOCountry in the database with the ID " + ISOCountryID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ISOCountry in the database 
        /// </summary>
        public static List<ISOCountry> GetAllISOCountry()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllISOCountry");

            List<ISOCountry> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ISOCountrys
        /// </summary>
        public static List<ISOCountry> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ISOCountry> arr = new List<ISOCountry>();

            ISOCountry obj;

            while (dr.Read())
            {
                obj = new ISOCountry();
                if (list.IsColumnPresent("ISOCountryID")) { obj._iSOCountryID = (int)dr["ISOCountryID"]; }
                if (list.IsColumnPresent("ISOCode")) { obj._iSOCode = (string)dr["ISOCode"]; }
                if (list.IsColumnPresent("CountryText")) { obj._countryText = (string)dr["CountryText"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ISOCountrys
        /// </summary>
        public static List<ISOCountry> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ISOCountry> arr = new List<ISOCountry>();

            ISOCountry obj;

            while (dr.Read())
            {
                obj = new ISOCountry();
                if (list.IsColumnPresent("ISOCountryID")) { obj._iSOCountryID = (int)dr["ISOCountryID"]; }
                if (list.IsColumnPresent("ISOCode")) { obj._iSOCode = (string)dr["ISOCode"]; }
                if (list.IsColumnPresent("CountryText")) { obj._countryText = (string)dr["CountryText"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ISOCountry object or in the case of a zero ISOCountryID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveISOCountry");

            db.AddInParameter(dbCommand, "ISOCountryID", DbType.Int32, ISOCountryID);
            db.AddInParameter(dbCommand, "ISOCode", DbType.String, ISOCode);
            db.AddInParameter(dbCommand, "CountryText", DbType.String, CountryText);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ISOCountryID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LatestPhotos in the system
    /// </summary>
    public partial class LatestPhotos
    {
        #region Fields and Properties

        private int _latestPhotosID;		//DB identifier for the LatestPhotos
        private int _position;		//The ranked position of the Photo
        private int _photoID;		//DB identifier for the Photo

        Database db;
        /// <summary>
        /// DB identifier for the LatestPhotos
        /// </summary>
        public int LatestPhotosID
        {
            get { return _latestPhotosID; }
            set { _latestPhotosID = value; }
        }

        /// <summary>
        /// The ranked position of the Photo
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Photo
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LatestPhotos()
        {

        }

        /// <summary>
        /// Instanciates a LatestPhotos object from the database via the LatestPhotosID
        /// </summary>
        public LatestPhotos(int LatestPhotosID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLatestPhotosByLatestPhotosID");
            db.AddInParameter(dbCommand, "LatestPhotosID", DbType.Int32, LatestPhotosID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LatestPhotosID")) { this._latestPhotosID = (int)dr["LatestPhotosID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }

                }
                else
                {
                    throw new Exception("There is no LatestPhotos in the database with the ID " + LatestPhotosID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LatestPhotos in the database 
        /// </summary>
        public static List<LatestPhotos> GetAllLatestPhotos()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLatestPhotos");

            List<LatestPhotos> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LatestPhotoss
        /// </summary>
        public static List<LatestPhotos> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LatestPhotos> arr = new List<LatestPhotos>();

            LatestPhotos obj;

            while (dr.Read())
            {
                obj = new LatestPhotos();
                if (list.IsColumnPresent("LatestPhotosID")) { obj._latestPhotosID = (int)dr["LatestPhotosID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LatestPhotoss
        /// </summary>
        public static List<LatestPhotos> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LatestPhotos> arr = new List<LatestPhotos>();

            LatestPhotos obj;

            while (dr.Read())
            {
                obj = new LatestPhotos();
                if (list.IsColumnPresent("LatestPhotosID")) { obj._latestPhotosID = (int)dr["LatestPhotosID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LatestPhotos object or in the case of a zero LatestPhotosID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLatestPhotos");

            db.AddInParameter(dbCommand, "LatestPhotosID", DbType.Int32, LatestPhotosID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LatestPhotosID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LatestVideos in the system
    /// </summary>
    public partial class LatestVideos
    {
        #region Fields and Properties

        private int _latestVideosID;		//DB identifier for the LatestVideo
        private int _position;		//The ranked position of the Video
        private int _videoID;		//The VideoID

        Database db;
        /// <summary>
        /// DB identifier for the LatestVideo
        /// </summary>
        public int LatestVideosID
        {
            get { return _latestVideosID; }
            set { _latestVideosID = value; }
        }

        /// <summary>
        /// The ranked position of the Video
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// The VideoID
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LatestVideos()
        {

        }

        /// <summary>
        /// Instanciates a LatestVideos object from the database via the LatestVideosID
        /// </summary>
        public LatestVideos(int LatestVideosID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLatestVideosByLatestVideosID");
            db.AddInParameter(dbCommand, "LatestVideosID", DbType.Int32, LatestVideosID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LatestVideosID")) { this._latestVideosID = (int)dr["LatestVideosID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no LatestVideos in the database with the ID " + LatestVideosID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LatestVideos in the database 
        /// </summary>
        public static List<LatestVideos> GetAllLatestVideos()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLatestVideos");

            List<LatestVideos> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LatestVideoss
        /// </summary>
        public static List<LatestVideos> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LatestVideos> arr = new List<LatestVideos>();

            LatestVideos obj;

            while (dr.Read())
            {
                obj = new LatestVideos();
                if (list.IsColumnPresent("LatestVideosID")) { obj._latestVideosID = (int)dr["LatestVideosID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LatestVideoss
        /// </summary>
        public static List<LatestVideos> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LatestVideos> arr = new List<LatestVideos>();

            LatestVideos obj;

            while (dr.Read())
            {
                obj = new LatestVideos();
                if (list.IsColumnPresent("LatestVideosID")) { obj._latestVideosID = (int)dr["LatestVideosID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LatestVideos object or in the case of a zero LatestVideosID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLatestVideos");

            db.AddInParameter(dbCommand, "LatestVideosID", DbType.Int32, LatestVideosID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LatestVideosID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LiveBroadcast in the system
    /// </summary>
    public partial class LiveBroadcast
    {
        /// <summary>
        /// The LiveBroadcastViewer objects for this LiveBroadcast
        /// </summary>
        public List<LiveBroadcastViewer> LiveBroadcastViewer
        {
            get
            {
                if (liveBroadcastViewer == null)
                    this.liveBroadcastViewer = this.GetLiveBroadcastViewerByLiveBroadcastID();
                return liveBroadcastViewer;
            }
            set { liveBroadcastViewer = value; }
        }


        /// <summary>
        /// The Video objects for this LiveBroadcast
        /// </summary>
        public List<Video> Video
        {
            get
            {
                if (video == null)
                    this.video = this.GetVideoByLiveBroadcastID();
                return video;
            }
            set { video = value; }
        }


        #region Fields and Properties

        private int _liveBroadcastID;		//
        private string _webLiveBroadcastID = "";		//
        private int _thumbnailResourceFileID;		//
        private int _memberID;		//the MemberID of the broadcaster
        private int _broadcastSource;		//0 = Device | 1 = Desktop
        private string _title = "";		//
        private string _description = "";		//
        private DateTime _dTStart = new DateTime(1900, 1, 1);		//DateTime start if Transmission
        private DateTime _dTEnd = new DateTime(1900, 1, 1);		//DateTime end if Transmission
        private int _duration;		//Duration in seconds
        private bool _liveNow;		//
        private int _privacyFlag;		//
        private bool _isActive;		//
        private string _debugInfo = "";		//
        private List<LiveBroadcastViewer> liveBroadcastViewer;		// Foreign object
        private List<Video> video;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int LiveBroadcastID
        {
            get { return _liveBroadcastID; }
            set { _liveBroadcastID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebLiveBroadcastID
        {
            get { return _webLiveBroadcastID; }
            set { _webLiveBroadcastID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ThumbnailResourceFileID
        {
            get { return _thumbnailResourceFileID; }
            set { _thumbnailResourceFileID = value; }
        }

        /// <summary>
        /// the MemberID of the broadcaster
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 0 = Device | 1 = Desktop
        /// </summary>
        public int BroadcastSource
        {
            get { return _broadcastSource; }
            set { _broadcastSource = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        /// <summary>
        /// DateTime start if Transmission
        /// </summary>
        public DateTime DTStart
        {
            get { return _dTStart; }
            set { _dTStart = value; }
        }

        /// <summary>
        /// DateTime end if Transmission
        /// </summary>
        public DateTime DTEnd
        {
            get { return _dTEnd; }
            set { _dTEnd = value; }
        }

        /// <summary>
        /// Duration in seconds
        /// </summary>
        public int Duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool LiveNow
        {
            get { return _liveNow; }
            set { _liveNow = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PrivacyFlag
        {
            get { return _privacyFlag; }
            set { _privacyFlag = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsActive
        {
            get { return _isActive; }
            set { _isActive = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string DebugInfo
        {
            get { return _debugInfo; }
            set { _debugInfo = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LiveBroadcast()
        {

        }

        /// <summary>
        /// Instanciates a LiveBroadcast object from the database via the LiveBroadcastID
        /// </summary>
        public LiveBroadcast(int LiveBroadcastID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveBroadcastByLiveBroadcastID");
            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LiveBroadcastID")) { this._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                    if (list.IsColumnPresent("WebLiveBroadcastID")) { this._webLiveBroadcastID = (string)dr["WebLiveBroadcastID"]; }
                    if (list.IsColumnPresent("ThumbnailResourceFileID")) { this._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("BroadcastSource")) { this._broadcastSource = (int)dr["BroadcastSource"]; }
                    if (list.IsColumnPresent("Title")) { this._title = (string)dr["Title"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }
                    if (list.IsColumnPresent("DTStart")) { this._dTStart = (DateTime)dr["DTStart"]; }
                    if (list.IsColumnPresent("DTEnd")) { this._dTEnd = (DateTime)dr["DTEnd"]; }
                    if (list.IsColumnPresent("Duration")) { this._duration = (int)dr["Duration"]; }
                    if (list.IsColumnPresent("LiveNow")) { this._liveNow = (bool)dr["LiveNow"]; }
                    if (list.IsColumnPresent("PrivacyFlag")) { this._privacyFlag = (int)dr["PrivacyFlag"]; }
                    if (list.IsColumnPresent("IsActive")) { this._isActive = (bool)dr["IsActive"]; }
                    if (list.IsColumnPresent("DebugInfo")) { this._debugInfo = (string)dr["DebugInfo"]; }

                }
                else
                {
                    throw new Exception("There is no LiveBroadcast in the database with the ID " + LiveBroadcastID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LiveBroadcast in the database 
        /// </summary>
        public static List<LiveBroadcast> GetAllLiveBroadcast()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLiveBroadcast");

            List<LiveBroadcast> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveBroadcasts
        /// </summary>
        public static List<LiveBroadcast> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveBroadcast> arr = new List<LiveBroadcast>();

            LiveBroadcast obj;

            while (dr.Read())
            {
                obj = new LiveBroadcast();
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("WebLiveBroadcastID")) { obj._webLiveBroadcastID = (string)dr["WebLiveBroadcastID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BroadcastSource")) { obj._broadcastSource = (int)dr["BroadcastSource"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("DTStart")) { obj._dTStart = (DateTime)dr["DTStart"]; }
                if (list.IsColumnPresent("DTEnd")) { obj._dTEnd = (DateTime)dr["DTEnd"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (int)dr["Duration"]; }
                if (list.IsColumnPresent("LiveNow")) { obj._liveNow = (bool)dr["LiveNow"]; }
                if (list.IsColumnPresent("PrivacyFlag")) { obj._privacyFlag = (int)dr["PrivacyFlag"]; }
                if (list.IsColumnPresent("IsActive")) { obj._isActive = (bool)dr["IsActive"]; }
                if (list.IsColumnPresent("DebugInfo")) { obj._debugInfo = (string)dr["DebugInfo"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveBroadcasts
        /// </summary>
        public static List<LiveBroadcast> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveBroadcast> arr = new List<LiveBroadcast>();

            LiveBroadcast obj;

            while (dr.Read())
            {
                obj = new LiveBroadcast();
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("WebLiveBroadcastID")) { obj._webLiveBroadcastID = (string)dr["WebLiveBroadcastID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BroadcastSource")) { obj._broadcastSource = (int)dr["BroadcastSource"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("DTStart")) { obj._dTStart = (DateTime)dr["DTStart"]; }
                if (list.IsColumnPresent("DTEnd")) { obj._dTEnd = (DateTime)dr["DTEnd"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (int)dr["Duration"]; }
                if (list.IsColumnPresent("LiveNow")) { obj._liveNow = (bool)dr["LiveNow"]; }
                if (list.IsColumnPresent("PrivacyFlag")) { obj._privacyFlag = (int)dr["PrivacyFlag"]; }
                if (list.IsColumnPresent("IsActive")) { obj._isActive = (bool)dr["IsActive"]; }
                if (list.IsColumnPresent("DebugInfo")) { obj._debugInfo = (string)dr["DebugInfo"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LiveBroadcast object or in the case of a zero LiveBroadcastID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLiveBroadcast");

            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);
            db.AddInParameter(dbCommand, "WebLiveBroadcastID", DbType.String, WebLiveBroadcastID);
            db.AddInParameter(dbCommand, "ThumbnailResourceFileID", DbType.Int32, ThumbnailResourceFileID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "BroadcastSource", DbType.Int32, BroadcastSource);
            db.AddInParameter(dbCommand, "Title", DbType.String, Title);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);
            db.AddInParameter(dbCommand, "DTStart", DbType.DateTime, DTStart);
            db.AddInParameter(dbCommand, "DTEnd", DbType.DateTime, DTEnd);
            db.AddInParameter(dbCommand, "Duration", DbType.Int32, Duration);
            db.AddInParameter(dbCommand, "LiveNow", DbType.Boolean, LiveNow);
            db.AddInParameter(dbCommand, "PrivacyFlag", DbType.Int32, PrivacyFlag);
            db.AddInParameter(dbCommand, "IsActive", DbType.Boolean, IsActive);
            db.AddInParameter(dbCommand, "DebugInfo", DbType.String, DebugInfo);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LiveBroadcastID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the LiveBroadcastViewer objects for this LiveBroadcast
        /// </summary>
        private List<LiveBroadcastViewer> GetLiveBroadcastViewerByLiveBroadcastID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveBroadcastViewerByLiveBroadcastID");
            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);

            List<LiveBroadcastViewer> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LiveBroadcastViewer.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Video objects for this LiveBroadcast
        /// </summary>
        private List<Video> GetVideoByLiveBroadcastID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoByLiveBroadcastID");
            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);

            List<Video> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Video.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LiveBroadcastViewer in the system
    /// </summary>
    public partial class LiveBroadcastViewer
    {
        #region Fields and Properties

        private int _liveBroadcastViewerID;		//
        private int _liveBroadcastID;		//
        private int _memberID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int LiveBroadcastViewerID
        {
            get { return _liveBroadcastViewerID; }
            set { _liveBroadcastViewerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LiveBroadcastID
        {
            get { return _liveBroadcastID; }
            set { _liveBroadcastID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LiveBroadcastViewer()
        {

        }

        /// <summary>
        /// Instanciates a LiveBroadcastViewer object from the database via the LiveBroadcastViewerID
        /// </summary>
        public LiveBroadcastViewer(int LiveBroadcastViewerID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveBroadcastViewerByLiveBroadcastViewerID");
            db.AddInParameter(dbCommand, "LiveBroadcastViewerID", DbType.Int32, LiveBroadcastViewerID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LiveBroadcastViewerID")) { this._liveBroadcastViewerID = (int)dr["LiveBroadcastViewerID"]; }
                    if (list.IsColumnPresent("LiveBroadcastID")) { this._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }

                }
                else
                {
                    throw new Exception("There is no LiveBroadcastViewer in the database with the ID " + LiveBroadcastViewerID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LiveBroadcastViewer in the database 
        /// </summary>
        public static List<LiveBroadcastViewer> GetAllLiveBroadcastViewer()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLiveBroadcastViewer");

            List<LiveBroadcastViewer> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveBroadcastViewers
        /// </summary>
        public static List<LiveBroadcastViewer> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveBroadcastViewer> arr = new List<LiveBroadcastViewer>();

            LiveBroadcastViewer obj;

            while (dr.Read())
            {
                obj = new LiveBroadcastViewer();
                if (list.IsColumnPresent("LiveBroadcastViewerID")) { obj._liveBroadcastViewerID = (int)dr["LiveBroadcastViewerID"]; }
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveBroadcastViewers
        /// </summary>
        public static List<LiveBroadcastViewer> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveBroadcastViewer> arr = new List<LiveBroadcastViewer>();

            LiveBroadcastViewer obj;

            while (dr.Read())
            {
                obj = new LiveBroadcastViewer();
                if (list.IsColumnPresent("LiveBroadcastViewerID")) { obj._liveBroadcastViewerID = (int)dr["LiveBroadcastViewerID"]; }
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LiveBroadcastViewer object or in the case of a zero LiveBroadcastViewerID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLiveBroadcastViewer");

            db.AddInParameter(dbCommand, "LiveBroadcastViewerID", DbType.Int32, LiveBroadcastViewerID);
            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LiveBroadcastViewerID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LiveThumbnailEncoderQueue in the system
    /// </summary>
    public partial class LiveThumbnailEncoderQueue
    {
        #region Fields and Properties

        private int _liveThumbnailEncoderQueueID;		//
        private int _videoID;		//
        private string _videoInputFile = "";		//
        private string _thumbnailOutputFile = "";		//
        private int _status;		//
        private string _error = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int LiveThumbnailEncoderQueueID
        {
            get { return _liveThumbnailEncoderQueueID; }
            set { _liveThumbnailEncoderQueueID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string VideoInputFile
        {
            get { return _videoInputFile; }
            set { _videoInputFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ThumbnailOutputFile
        {
            get { return _thumbnailOutputFile; }
            set { _thumbnailOutputFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Error
        {
            get { return _error; }
            set { _error = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LiveThumbnailEncoderQueue()
        {

        }

        /// <summary>
        /// Instanciates a LiveThumbnailEncoderQueue object from the database via the LiveThumbnailEncoderQueueID
        /// </summary>
        public LiveThumbnailEncoderQueue(int LiveThumbnailEncoderQueueID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveThumbnailEncoderQueueByLiveThumbnailEncoderQueueID");
            db.AddInParameter(dbCommand, "LiveThumbnailEncoderQueueID", DbType.Int32, LiveThumbnailEncoderQueueID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LiveThumbnailEncoderQueueID")) { this._liveThumbnailEncoderQueueID = (int)dr["LiveThumbnailEncoderQueueID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("VideoInputFile")) { this._videoInputFile = (string)dr["VideoInputFile"]; }
                    if (list.IsColumnPresent("ThumbnailOutputFile")) { this._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }
                    if (list.IsColumnPresent("Error")) { this._error = (string)dr["Error"]; }

                }
                else
                {
                    throw new Exception("There is no LiveThumbnailEncoderQueue in the database with the ID " + LiveThumbnailEncoderQueueID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LiveThumbnailEncoderQueue in the database 
        /// </summary>
        public static List<LiveThumbnailEncoderQueue> GetAllLiveThumbnailEncoderQueue()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLiveThumbnailEncoderQueue");

            List<LiveThumbnailEncoderQueue> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveThumbnailEncoderQueues
        /// </summary>
        public static List<LiveThumbnailEncoderQueue> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveThumbnailEncoderQueue> arr = new List<LiveThumbnailEncoderQueue>();

            LiveThumbnailEncoderQueue obj;

            while (dr.Read())
            {
                obj = new LiveThumbnailEncoderQueue();
                if (list.IsColumnPresent("LiveThumbnailEncoderQueueID")) { obj._liveThumbnailEncoderQueueID = (int)dr["LiveThumbnailEncoderQueueID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("VideoInputFile")) { obj._videoInputFile = (string)dr["VideoInputFile"]; }
                if (list.IsColumnPresent("ThumbnailOutputFile")) { obj._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Error")) { obj._error = (string)dr["Error"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LiveThumbnailEncoderQueues
        /// </summary>
        public static List<LiveThumbnailEncoderQueue> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LiveThumbnailEncoderQueue> arr = new List<LiveThumbnailEncoderQueue>();

            LiveThumbnailEncoderQueue obj;

            while (dr.Read())
            {
                obj = new LiveThumbnailEncoderQueue();
                if (list.IsColumnPresent("LiveThumbnailEncoderQueueID")) { obj._liveThumbnailEncoderQueueID = (int)dr["LiveThumbnailEncoderQueueID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("VideoInputFile")) { obj._videoInputFile = (string)dr["VideoInputFile"]; }
                if (list.IsColumnPresent("ThumbnailOutputFile")) { obj._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Error")) { obj._error = (string)dr["Error"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LiveThumbnailEncoderQueue object or in the case of a zero LiveThumbnailEncoderQueueID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLiveThumbnailEncoderQueue");

            db.AddInParameter(dbCommand, "LiveThumbnailEncoderQueueID", DbType.Int32, LiveThumbnailEncoderQueueID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "VideoInputFile", DbType.String, VideoInputFile);
            db.AddInParameter(dbCommand, "ThumbnailOutputFile", DbType.String, ThumbnailOutputFile);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);
            db.AddInParameter(dbCommand, "Error", DbType.String, Error);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LiveThumbnailEncoderQueueID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Log in the system
    /// </summary>
    public partial class Log
    {
        #region Fields and Properties

        private int _logID;		//
        private string _text = "";		//
        private string _source = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int LogID
        {
            get { return _logID; }
            set { _logID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Source
        {
            get { return _source; }
            set { _source = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Log()
        {

        }

        /// <summary>
        /// Instanciates a Log object from the database via the LogID
        /// </summary>
        public Log(int LogID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLogByLogID");
            db.AddInParameter(dbCommand, "LogID", DbType.Int32, LogID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LogID")) { this._logID = (int)dr["LogID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("Source")) { this._source = (string)dr["Source"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Log in the database with the ID " + LogID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Log in the database 
        /// </summary>
        public static List<Log> GetAllLog()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLog");

            List<Log> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Logs
        /// </summary>
        public static List<Log> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Log> arr = new List<Log>();

            Log obj;

            while (dr.Read())
            {
                obj = new Log();
                if (list.IsColumnPresent("LogID")) { obj._logID = (int)dr["LogID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("Source")) { obj._source = (string)dr["Source"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Logs
        /// </summary>
        public static List<Log> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Log> arr = new List<Log>();

            Log obj;

            while (dr.Read())
            {
                obj = new Log();
                if (list.IsColumnPresent("LogID")) { obj._logID = (int)dr["LogID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("Source")) { obj._source = (string)dr["Source"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Log object or in the case of a zero LogID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLog");

            db.AddInParameter(dbCommand, "LogID", DbType.Int32, LogID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "Source", DbType.String, Source);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LogID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a LoggedIn in the system
    /// </summary>
    public partial class LoggedIn
    {
        #region Fields and Properties

        private int _loggedInID;		//
        private string _webLoggedInID = "";		//
        private int _memberID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int LoggedInID
        {
            get { return _loggedInID; }
            set { _loggedInID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebLoggedInID
        {
            get { return _webLoggedInID; }
            set { _webLoggedInID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public LoggedIn()
        {

        }

        /// <summary>
        /// Instanciates a LoggedIn object from the database via the LoggedInID
        /// </summary>
        public LoggedIn(int LoggedInID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLoggedInByLoggedInID");
            db.AddInParameter(dbCommand, "LoggedInID", DbType.Int32, LoggedInID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("LoggedInID")) { this._loggedInID = (int)dr["LoggedInID"]; }
                    if (list.IsColumnPresent("WebLoggedInID")) { this._webLoggedInID = (string)dr["WebLoggedInID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no LoggedIn in the database with the ID " + LoggedInID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the LoggedIn in the database 
        /// </summary>
        public static List<LoggedIn> GetAllLoggedIn()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllLoggedIn");

            List<LoggedIn> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LoggedIns
        /// </summary>
        public static List<LoggedIn> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LoggedIn> arr = new List<LoggedIn>();

            LoggedIn obj;

            while (dr.Read())
            {
                obj = new LoggedIn();
                if (list.IsColumnPresent("LoggedInID")) { obj._loggedInID = (int)dr["LoggedInID"]; }
                if (list.IsColumnPresent("WebLoggedInID")) { obj._webLoggedInID = (string)dr["WebLoggedInID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of LoggedIns
        /// </summary>
        public static List<LoggedIn> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<LoggedIn> arr = new List<LoggedIn>();

            LoggedIn obj;

            while (dr.Read())
            {
                obj = new LoggedIn();
                if (list.IsColumnPresent("LoggedInID")) { obj._loggedInID = (int)dr["LoggedInID"]; }
                if (list.IsColumnPresent("WebLoggedInID")) { obj._webLoggedInID = (string)dr["WebLoggedInID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the LoggedIn object or in the case of a zero LoggedInID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveLoggedIn");

            db.AddInParameter(dbCommand, "LoggedInID", DbType.Int32, LoggedInID);
            db.AddInParameter(dbCommand, "WebLoggedInID", DbType.String, WebLoggedInID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.LoggedInID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MatchProfile in the system
    /// </summary>
    public partial class MatchProfile
    {
        #region Fields and Properties

        private int _matchProfileID;		//
        private int _memberID;		//
        private int _ageRange;		//0 = NONE | 1 = ALL | 2 = 18-24 | 3 = 25 - 30 | 4 = 31 - 35 | 35+
        private int _lookingForGender;		//0 = Both | 1 = Male | 2 = Female
        private int _lookingFor;		//
        private int _sexuality;		//0 = Not Stated | 1 = Gay | 2 = Straight | 3 = Bisexual
        private int _music;		//pointer to array
        private int _interests;		//
        private DateTime _dTModified = new DateTime(1900, 1, 1);		//
        private int _hobbyID;		//
        private int _dayProfessionID;		//
        private int _nightProfessionID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MatchProfileID
        {
            get { return _matchProfileID; }
            set { _matchProfileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 0 = NONE | 1 = ALL | 2 = 18-24 | 3 = 25 - 30 | 4 = 31 - 35 | 35+
        /// </summary>
        public int AgeRange
        {
            get { return _ageRange; }
            set { _ageRange = value; }
        }

        /// <summary>
        /// 0 = Both | 1 = Male | 2 = Female
        /// </summary>
        public int LookingForGender
        {
            get { return _lookingForGender; }
            set { _lookingForGender = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LookingFor
        {
            get { return _lookingFor; }
            set { _lookingFor = value; }
        }

        /// <summary>
        /// 0 = Not Stated | 1 = Gay | 2 = Straight | 3 = Bisexual
        /// </summary>
        public int Sexuality
        {
            get { return _sexuality; }
            set { _sexuality = value; }
        }

        /// <summary>
        /// pointer to array
        /// </summary>
        public int Music
        {
            get { return _music; }
            set { _music = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Interests
        {
            get { return _interests; }
            set { _interests = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTModified
        {
            get { return _dTModified; }
            set { _dTModified = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int HobbyID
        {
            get { return _hobbyID; }
            set { _hobbyID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int DayProfessionID
        {
            get { return _dayProfessionID; }
            set { _dayProfessionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NightProfessionID
        {
            get { return _nightProfessionID; }
            set { _nightProfessionID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MatchProfile()
        {

        }

        /// <summary>
        /// Instanciates a MatchProfile object from the database via the MatchProfileID
        /// </summary>
        public MatchProfile(int MatchProfileID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMatchProfileByMatchProfileID");
            db.AddInParameter(dbCommand, "MatchProfileID", DbType.Int32, MatchProfileID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MatchProfileID")) { this._matchProfileID = (int)dr["MatchProfileID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("AgeRange")) { this._ageRange = (int)dr["AgeRange"]; }
                    if (list.IsColumnPresent("LookingForGender")) { this._lookingForGender = (int)dr["LookingForGender"]; }
                    if (list.IsColumnPresent("LookingFor")) { this._lookingFor = (int)dr["LookingFor"]; }
                    if (list.IsColumnPresent("Sexuality")) { this._sexuality = (int)dr["Sexuality"]; }
                    if (list.IsColumnPresent("Music")) { this._music = (int)dr["Music"]; }
                    if (list.IsColumnPresent("Interests")) { this._interests = (int)dr["Interests"]; }
                    if (list.IsColumnPresent("DTModified")) { this._dTModified = (DateTime)dr["DTModified"]; }
                    if (list.IsColumnPresent("HobbyID")) { this._hobbyID = (int)dr["HobbyID"]; }
                    if (list.IsColumnPresent("DayProfessionID")) { this._dayProfessionID = (int)dr["DayProfessionID"]; }
                    if (list.IsColumnPresent("NightProfessionID")) { this._nightProfessionID = (int)dr["NightProfessionID"]; }

                }
                else
                {
                    throw new Exception("There is no MatchProfile in the database with the ID " + MatchProfileID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MatchProfile in the database 
        /// </summary>
        public static List<MatchProfile> GetAllMatchProfile()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMatchProfile");

            List<MatchProfile> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MatchProfiles
        /// </summary>
        public static List<MatchProfile> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MatchProfile> arr = new List<MatchProfile>();

            MatchProfile obj;

            while (dr.Read())
            {
                obj = new MatchProfile();
                if (list.IsColumnPresent("MatchProfileID")) { obj._matchProfileID = (int)dr["MatchProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AgeRange")) { obj._ageRange = (int)dr["AgeRange"]; }
                if (list.IsColumnPresent("LookingForGender")) { obj._lookingForGender = (int)dr["LookingForGender"]; }
                if (list.IsColumnPresent("LookingFor")) { obj._lookingFor = (int)dr["LookingFor"]; }
                if (list.IsColumnPresent("Sexuality")) { obj._sexuality = (int)dr["Sexuality"]; }
                if (list.IsColumnPresent("Music")) { obj._music = (int)dr["Music"]; }
                if (list.IsColumnPresent("Interests")) { obj._interests = (int)dr["Interests"]; }
                if (list.IsColumnPresent("DTModified")) { obj._dTModified = (DateTime)dr["DTModified"]; }
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }
                if (list.IsColumnPresent("DayProfessionID")) { obj._dayProfessionID = (int)dr["DayProfessionID"]; }
                if (list.IsColumnPresent("NightProfessionID")) { obj._nightProfessionID = (int)dr["NightProfessionID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MatchProfiles
        /// </summary>
        public static List<MatchProfile> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MatchProfile> arr = new List<MatchProfile>();

            MatchProfile obj;

            while (dr.Read())
            {
                obj = new MatchProfile();
                if (list.IsColumnPresent("MatchProfileID")) { obj._matchProfileID = (int)dr["MatchProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AgeRange")) { obj._ageRange = (int)dr["AgeRange"]; }
                if (list.IsColumnPresent("LookingForGender")) { obj._lookingForGender = (int)dr["LookingForGender"]; }
                if (list.IsColumnPresent("LookingFor")) { obj._lookingFor = (int)dr["LookingFor"]; }
                if (list.IsColumnPresent("Sexuality")) { obj._sexuality = (int)dr["Sexuality"]; }
                if (list.IsColumnPresent("Music")) { obj._music = (int)dr["Music"]; }
                if (list.IsColumnPresent("Interests")) { obj._interests = (int)dr["Interests"]; }
                if (list.IsColumnPresent("DTModified")) { obj._dTModified = (DateTime)dr["DTModified"]; }
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }
                if (list.IsColumnPresent("DayProfessionID")) { obj._dayProfessionID = (int)dr["DayProfessionID"]; }
                if (list.IsColumnPresent("NightProfessionID")) { obj._nightProfessionID = (int)dr["NightProfessionID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MatchProfile object or in the case of a zero MatchProfileID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMatchProfile");

            db.AddInParameter(dbCommand, "MatchProfileID", DbType.Int32, MatchProfileID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "AgeRange", DbType.Int32, AgeRange);
            db.AddInParameter(dbCommand, "LookingForGender", DbType.Int32, LookingForGender);
            db.AddInParameter(dbCommand, "LookingFor", DbType.Int32, LookingFor);
            db.AddInParameter(dbCommand, "Sexuality", DbType.Int32, Sexuality);
            db.AddInParameter(dbCommand, "Music", DbType.Int32, Music);
            db.AddInParameter(dbCommand, "Interests", DbType.Int32, Interests);
            db.AddInParameter(dbCommand, "DTModified", DbType.DateTime, DTModified);
            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);
            db.AddInParameter(dbCommand, "DayProfessionID", DbType.Int32, DayProfessionID);
            db.AddInParameter(dbCommand, "NightProfessionID", DbType.Int32, NightProfessionID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MatchProfileID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Member in the system
    /// </summary>
    public partial class Member
    {
        /// <summary>
        /// The FeaturedMember objects for this Member
        /// </summary>
        public List<FeaturedMember> FeaturedMember
        {
            get
            {
                if (featuredMember == null)
                    this.featuredMember = this.GetFeaturedMemberByMemberID();
                return featuredMember;
            }
            set { featuredMember = value; }
        }


        /// <summary>
        /// The MemberAccount objects for this Member
        /// </summary>
        public List<MemberAccount> MemberAccount
        {
            get
            {
                if (memberAccount == null)
                    this.memberAccount = this.GetMemberAccountByMemberID();
                return memberAccount;
            }
            set { memberAccount = value; }
        }


        /// <summary>
        /// The BlogVideo objects for this Member
        /// </summary>
        public List<BlogVideo> BlogVideo
        {
            get
            {
                if (blogVideo == null)
                    this.blogVideo = this.GetBlogVideoByMemberID();
                return blogVideo;
            }
            set { blogVideo = value; }
        }


        /// <summary>
        /// The FriendRequest objects for this Member
        /// </summary>
        public List<FriendRequest> FriendRequest
        {
            get
            {
                if (friendRequest == null)
                    this.friendRequest = this.GetFriendRequestByMemberID();
                return friendRequest;
            }
            set { friendRequest = value; }
        }


        /// <summary>
        /// The ChatOnline objects for this Member
        /// </summary>
        public List<ChatOnline> ChatOnline
        {
            get
            {
                if (chatOnline == null)
                    this.chatOnline = this.GetChatOnlineByMemberID();
                return chatOnline;
            }
            set { chatOnline = value; }
        }


        /// <summary>
        /// The ContentView objects for this Member
        /// </summary>
        public List<ContentView> ContentView
        {
            get
            {
                if (contentView == null)
                    this.contentView = this.GetContentViewByMemberID();
                return contentView;
            }
            set { contentView = value; }
        }


        /// <summary>
        /// The TopPhotoPosterByViews objects for this Member
        /// </summary>
        public List<TopPhotoPosterByViews> TopPhotoPosterByViews
        {
            get
            {
                if (topPhotoPosterByViews == null)
                    this.topPhotoPosterByViews = this.GetTopPhotoPosterByViewsByMemberID();
                return topPhotoPosterByViews;
            }
            set { topPhotoPosterByViews = value; }
        }


        /// <summary>
        /// The BlogEntry objects for this Member
        /// </summary>
        public List<BlogEntry> BlogEntry
        {
            get
            {
                if (blogEntry == null)
                    this.blogEntry = this.GetBlogEntryByMemberID();
                return blogEntry;
            }
            set { blogEntry = value; }
        }


        /// <summary>
        /// The NSpot objects for this Member
        /// </summary>
        public List<NSpot> NSpot
        {
            get
            {
                if (nSpot == null)
                    this.nSpot = this.GetNSpotByMemberID();
                return nSpot;
            }
            set { nSpot = value; }
        }


        /// <summary>
        /// The MemberStatus objects for this Member
        /// </summary>
        public List<MemberStatus> MemberStatus
        {
            get
            {
                if (memberStatus == null)
                    this.memberStatus = this.GetMemberStatusByMemberID();
                return memberStatus;
            }
            set { memberStatus = value; }
        }


        /// <summary>
        /// The BlogPhoto objects for this Member
        /// </summary>
        public List<BlogPhoto> BlogPhoto
        {
            get
            {
                if (blogPhoto == null)
                    this.blogPhoto = this.GetBlogPhotoByMemberID();
                return blogPhoto;
            }
            set { blogPhoto = value; }
        }


        /// <summary>
        /// The EmailMessage objects for this Member
        /// </summary>
        public List<EmailMessage> EmailMessage
        {
            get
            {
                if (emailMessage == null)
                    this.emailMessage = this.GetEmailMessageByMemberID();
                return emailMessage;
            }
            set { emailMessage = value; }
        }


        /// <summary>
        /// The LiveBroadcast objects for this Member
        /// </summary>
        public List<LiveBroadcast> LiveBroadcast
        {
            get
            {
                if (liveBroadcast == null)
                    this.liveBroadcast = this.GetLiveBroadcastByMemberID();
                return liveBroadcast;
            }
            set { liveBroadcast = value; }
        }


        /// <summary>
        /// The Video objects for this Member
        /// </summary>
        public List<Video> Video
        {
            get
            {
                if (video == null)
                    this.video = this.GetVideoByMemberID();
                return video;
            }
            set { video = value; }
        }


        /// <summary>
        /// The ProfileInvite objects for this Member
        /// </summary>
        public List<ProfileInvite> ProfileInvite
        {
            get
            {
                if (profileInvite == null)
                    this.profileInvite = this.GetProfileInviteByMemberID();
                return profileInvite;
            }
            set { profileInvite = value; }
        }


        /// <summary>
        /// The VideoView objects for this Member
        /// </summary>
        public List<VideoView> VideoView
        {
            get
            {
                if (videoView == null)
                    this.videoView = this.GetVideoViewByMemberID();
                return videoView;
            }
            set { videoView = value; }
        }


        /// <summary>
        /// The Channel objects for this Member
        /// </summary>
        public List<Channel> Channel
        {
            get
            {
                if (channel == null)
                    this.channel = this.GetChannelByMemberID();
                return channel;
            }
            set { channel = value; }
        }


        /// <summary>
        /// The OnlineNow objects for this Member
        /// </summary>
        public List<OnlineNow> OnlineNow
        {
            get
            {
                if (onlineNow == null)
                    this.onlineNow = this.GetOnlineNowByMemberID();
                return onlineNow;
            }
            set { onlineNow = value; }
        }


        /// <summary>
        /// The MemberBlogSettings objects for this Member
        /// </summary>
        public List<MemberBlogSettings> MemberBlogSettings
        {
            get
            {
                if (memberBlogSettings == null)
                    this.memberBlogSettings = this.GetMemberBlogSettingsByMemberID();
                return memberBlogSettings;
            }
            set { memberBlogSettings = value; }
        }


        /// <summary>
        /// The MemberProfile objects for this Member
        /// </summary>
        public List<MemberProfile> MemberProfile
        {
            get
            {
                if (memberProfile == null)
                    this.memberProfile = this.GetMemberProfileByMemberID();
                return memberProfile;
            }
            set { memberProfile = value; }
        }


        /// <summary>
        /// The PhotoCollection objects for this Member
        /// </summary>
        public List<PhotoCollection> PhotoCollection
        {
            get
            {
                if (photoCollection == null)
                    this.photoCollection = this.GetPhotoCollectionByMemberID();
                return photoCollection;
            }
            set { photoCollection = value; }
        }


        /// <summary>
        /// The SearchRequest objects for this Member
        /// </summary>
        public List<SearchRequest> SearchRequest
        {
            get
            {
                if (searchRequest == null)
                    this.searchRequest = this.GetSearchRequestByMemberID();
                return searchRequest;
            }
            set { searchRequest = value; }
        }


        /// <summary>
        /// The MemberStatusText objects for this Member
        /// </summary>
        public List<MemberStatusText> MemberStatusText
        {
            get
            {
                if (memberStatusText == null)
                    this.memberStatusText = this.GetMemberStatusTextByMemberID();
                return memberStatusText;
            }
            set { memberStatusText = value; }
        }


        /// <summary>
        /// The ForgottenPassword objects for this Member
        /// </summary>
        public List<ForgottenPassword> ForgottenPassword
        {
            get
            {
                if (forgottenPassword == null)
                    this.forgottenPassword = this.GetForgottenPasswordByMemberID();
                return forgottenPassword;
            }
            set { forgottenPassword = value; }
        }


        /// <summary>
        /// The Abuse objects for this Member
        /// </summary>
        public List<Abuse> Abuse
        {
            get
            {
                if (abuse == null)
                    this.abuse = this.GetAbuseByMemberID();
                return abuse;
            }
            set { abuse = value; }
        }


        /// <summary>
        /// The MatchProfile objects for this Member
        /// </summary>
        public List<MatchProfile> MatchProfile
        {
            get
            {
                if (matchProfile == null)
                    this.matchProfile = this.GetMatchProfileByMemberID();
                return matchProfile;
            }
            set { matchProfile = value; }
        }


        /// <summary>
        /// The MP3Upload objects for this Member
        /// </summary>
        public List<MP3Upload> MP3Upload
        {
            get
            {
                if (mP3Upload == null)
                    this.mP3Upload = this.GetMP3UploadByMemberID();
                return mP3Upload;
            }
            set { mP3Upload = value; }
        }


        /// <summary>
        /// The MemberOnline objects for this Member
        /// </summary>
        public List<MemberOnline> MemberOnline
        {
            get
            {
                if (memberOnline == null)
                    this.memberOnline = this.GetMemberOnlineByMemberID();
                return memberOnline;
            }
            set { memberOnline = value; }
        }


        /// <summary>
        /// The Vote objects for this Member
        /// </summary>
        public List<Vote> Vote
        {
            get
            {
                if (vote == null)
                    this.vote = this.GetVoteByMemberID();
                return vote;
            }
            set { vote = value; }
        }


        /// <summary>
        /// The Business objects for this Member
        /// </summary>
        public List<Business> Business
        {
            get
            {
                if (business == null)
                    this.business = this.GetBusinessByMemberID();
                return business;
            }
            set { business = value; }
        }


        /// <summary>
        /// The LoggedIn objects for this Member
        /// </summary>
        public List<LoggedIn> LoggedIn
        {
            get
            {
                if (loggedIn == null)
                    this.loggedIn = this.GetLoggedInByMemberID();
                return loggedIn;
            }
            set { loggedIn = value; }
        }


        /// <summary>
        /// The AskAFriendComment objects for this Member
        /// </summary>
        public List<AskAFriendComment> AskAFriendComment
        {
            get
            {
                if (askAFriendComment == null)
                    this.askAFriendComment = this.GetAskAFriendCommentByMemberID();
                return askAFriendComment;
            }
            set { askAFriendComment = value; }
        }


        /// <summary>
        /// The Favourite objects for this Member
        /// </summary>
        public List<Favourite> Favourite
        {
            get
            {
                if (favourite == null)
                    this.favourite = this.GetFavouriteByMemberID();
                return favourite;
            }
            set { favourite = value; }
        }


        /// <summary>
        /// The TopVideoPosterByViews objects for this Member
        /// </summary>
        public List<TopVideoPosterByViews> TopVideoPosterByViews
        {
            get
            {
                if (topVideoPosterByViews == null)
                    this.topVideoPosterByViews = this.GetTopVideoPosterByViewsByMemberID();
                return topVideoPosterByViews;
            }
            set { topVideoPosterByViews = value; }
        }


        /// <summary>
        /// The PhotoComment objects for this Member
        /// </summary>
        public List<PhotoComment> PhotoComment
        {
            get
            {
                if (photoComment == null)
                    this.photoComment = this.GetPhotoCommentByMemberID();
                return photoComment;
            }
            set { photoComment = value; }
        }


        /// <summary>
        /// The FavouriteGroup objects for this Member
        /// </summary>
        public List<FavouriteGroup> FavouriteGroup
        {
            get
            {
                if (favouriteGroup == null)
                    this.favouriteGroup = this.GetFavouriteGroupByMemberID();
                return favouriteGroup;
            }
            set { favouriteGroup = value; }
        }


        /// <summary>
        /// The Dashboard objects for this Member
        /// </summary>
        public List<Dashboard> Dashboard
        {
            get
            {
                if (dashboard == null)
                    this.dashboard = this.GetDashboardByMemberID();
                return dashboard;
            }
            set { dashboard = value; }
        }


        /// <summary>
        /// The FavouriteMember objects for this Member
        /// </summary>
        public List<FavouriteMember> FavouriteMember
        {
            get
            {
                if (favouriteMember == null)
                    this.favouriteMember = this.GetFavouriteMemberByMemberID();
                return favouriteMember;
            }
            set { favouriteMember = value; }
        }


        /// <summary>
        /// The LiveBroadcastViewer objects for this Member
        /// </summary>
        public List<LiveBroadcastViewer> LiveBroadcastViewer
        {
            get
            {
                if (liveBroadcastViewer == null)
                    this.liveBroadcastViewer = this.GetLiveBroadcastViewerByMemberID();
                return liveBroadcastViewer;
            }
            set { liveBroadcastViewer = value; }
        }


        /// <summary>
        /// The MemberMusic objects for this Member
        /// </summary>
        public List<MemberMusic> MemberMusic
        {
            get
            {
                if (memberMusic == null)
                    this.memberMusic = this.GetMemberMusicByMemberID();
                return memberMusic;
            }
            set { memberMusic = value; }
        }


        /// <summary>
        /// The ContentInvite objects for this Member
        /// </summary>
        public List<ContentInvite> ContentInvite
        {
            get
            {
                if (contentInvite == null)
                    this.contentInvite = this.GetContentInviteByMemberID();
                return contentInvite;
            }
            set { contentInvite = value; }
        }


        /// <summary>
        /// The MemberInvite objects for this Member
        /// </summary>
        public List<MemberInvite> MemberInvite
        {
            get
            {
                if (memberInvite == null)
                    this.memberInvite = this.GetMemberInviteByMemberID();
                return memberInvite;
            }
            set { memberInvite = value; }
        }


        /// <summary>
        /// The SubscriptionMember objects for this Member
        /// </summary>
        public List<SubscriptionMember> SubscriptionMember
        {
            get
            {
                if (subscriptionMember == null)
                    this.subscriptionMember = this.GetSubscriptionMemberByMemberID();
                return subscriptionMember;
            }
            set { subscriptionMember = value; }
        }


        /// <summary>
        /// The AskAFriend objects for this Member
        /// </summary>
        public List<AskAFriend> AskAFriend
        {
            get
            {
                if (askAFriend == null)
                    this.askAFriend = this.GetAskAFriendByMemberID();
                return askAFriend;
            }
            set { askAFriend = value; }
        }


        /// <summary>
        /// The CommunityView objects for this Member
        /// </summary>
        public List<CommunityView> CommunityView
        {
            get
            {
                if (communityView == null)
                    this.communityView = this.GetCommunityViewByMemberID();
                return communityView;
            }
            set { communityView = value; }
        }


        /// <summary>
        /// The MemberBlock objects for this Member
        /// </summary>
        public List<MemberBlock> MemberBlock
        {
            get
            {
                if (memberBlock == null)
                    this.memberBlock = this.GetMemberBlockByMemberID();
                return memberBlock;
            }
            set { memberBlock = value; }
        }


        /// <summary>
        /// The PremiumMember objects for this Member
        /// </summary>
        public List<PremiumMember> PremiumMember
        {
            get
            {
                if (premiumMember == null)
                    this.premiumMember = this.GetPremiumMemberByMemberID();
                return premiumMember;
            }
            set { premiumMember = value; }
        }


        /// <summary>
        /// The MemberAccountActivity objects for this Member
        /// </summary>
        public List<MemberAccountActivity> MemberAccountActivity
        {
            get
            {
                if (memberAccountActivity == null)
                    this.memberAccountActivity = this.GetMemberAccountActivityByMemberID();
                return memberAccountActivity;
            }
            set { memberAccountActivity = value; }
        }


        /// <summary>
        /// The PhotoView objects for this Member
        /// </summary>
        public List<PhotoView> PhotoView
        {
            get
            {
                if (photoView == null)
                    this.photoView = this.GetPhotoViewByMemberID();
                return photoView;
            }
            set { photoView = value; }
        }


        /// <summary>
        /// The NSpotMember objects for this Member
        /// </summary>
        public List<NSpotMember> NSpotMember
        {
            get
            {
                if (nSpotMember == null)
                    this.nSpotMember = this.GetNSpotMemberByMemberID();
                return nSpotMember;
            }
            set { nSpotMember = value; }
        }


        /// <summary>
        /// The SubscriptionGroup objects for this Member
        /// </summary>
        public List<SubscriptionGroup> SubscriptionGroup
        {
            get
            {
                if (subscriptionGroup == null)
                    this.subscriptionGroup = this.GetSubscriptionGroupByMemberID();
                return subscriptionGroup;
            }
            set { subscriptionGroup = value; }
        }


        /// <summary>
        /// The MemberComment objects for this Member
        /// </summary>
        public List<MemberComment> MemberComment
        {
            get
            {
                if (memberComment == null)
                    this.memberComment = this.GetMemberCommentByMemberID();
                return memberComment;
            }
            set { memberComment = value; }
        }


        /// <summary>
        /// The Profile objects for this Member
        /// </summary>
        public List<Profile> Profile
        {
            get
            {
                if (profile == null)
                    this.profile = this.GetProfileByMemberID();
                return profile;
            }
            set { profile = value; }
        }


        /// <summary>
        /// The AskAFriendResponse objects for this Member
        /// </summary>
        public List<AskAFriendResponse> AskAFriendResponse
        {
            get
            {
                if (askAFriendResponse == null)
                    this.askAFriendResponse = this.GetAskAFriendResponseByMemberID();
                return askAFriendResponse;
            }
            set { askAFriendResponse = value; }
        }


        /// <summary>
        /// The DeviceBlock objects for this Member
        /// </summary>
        public List<DeviceBlock> DeviceBlock
        {
            get
            {
                if (deviceBlock == null)
                    this.deviceBlock = this.GetDeviceBlockByMemberID();
                return deviceBlock;
            }
            set { deviceBlock = value; }
        }


        /// <summary>
        /// The VideoRating objects for this Member
        /// </summary>
        public List<VideoRating> VideoRating
        {
            get
            {
                if (videoRating == null)
                    this.videoRating = this.GetVideoRatingByMemberID();
                return videoRating;
            }
            set { videoRating = value; }
        }


        /// <summary>
        /// The Feedback objects for this Member
        /// </summary>
        public List<Feedback> Feedback
        {
            get
            {
                if (feedback == null)
                    this.feedback = this.GetFeedbackByMemberID();
                return feedback;
            }
            set { feedback = value; }
        }


        /// <summary>
        /// The Device objects for this Member
        /// </summary>
        public List<Device> Device
        {
            get
            {
                if (device == null)
                    this.device = this.GetDeviceByMemberID();
                return device;
            }
            set { device = value; }
        }


        /// <summary>
        /// The Photo objects for this Member
        /// </summary>
        public List<Photo> Photo
        {
            get
            {
                if (photo == null)
                    this.photo = this.GetPhotoByMemberID();
                return photo;
            }
            set { photo = value; }
        }


        /// <summary>
        /// The VideoComment objects for this Member
        /// </summary>
        public List<VideoComment> VideoComment
        {
            get
            {
                if (videoComment == null)
                    this.videoComment = this.GetVideoCommentByMemberID();
                return videoComment;
            }
            set { videoComment = value; }
        }


        /// <summary>
        /// The VideoWatch objects for this Member
        /// </summary>
        public List<VideoWatch> VideoWatch
        {
            get
            {
                if (videoWatch == null)
                    this.videoWatch = this.GetVideoWatchByMemberID();
                return videoWatch;
            }
            set { videoWatch = value; }
        }


        /// <summary>
        /// The PhotoRating objects for this Member
        /// </summary>
        public List<PhotoRating> PhotoRating
        {
            get
            {
                if (photoRating == null)
                    this.photoRating = this.GetPhotoRatingByMemberID();
                return photoRating;
            }
            set { photoRating = value; }
        }


        /// <summary>
        /// The NSpotComment objects for this Member
        /// </summary>
        public List<NSpotComment> NSpotComment
        {
            get
            {
                if (nSpotComment == null)
                    this.nSpotComment = this.GetNSpotCommentByMemberID();
                return nSpotComment;
            }
            set { nSpotComment = value; }
        }


        /// <summary>
        /// The MemberSettings objects for this Member
        /// </summary>
        public List<MemberSettings> MemberSettings
        {
            get
            {
                if (memberSettings == null)
                    this.memberSettings = this.GetMemberSettingsByMemberID();
                return memberSettings;
            }
            set { memberSettings = value; }
        }


        #region Fields and Properties

        private int _memberID;		//DB identifier for the Member
        private string _webMemberID = "";		//Base64 Guid for the Member
        private int _adminStatusID;		//
        private string _nickName = "";		//The display nickname of the  member
        private int _channelID;		//The members channel (this is their home page profile/video/hotspots/photos)
        private string _password = "";		//The logon password of the member
        private string _email = "";		//The members email address
        private int _gender;		//NotSet | Female | Male
        private string _firstName = "";		//The members First Name
        private string _lastName = "";		//The members Last Name
        private int _profilePhotoResourceFileID;		//
        private DateTime _dOB = new DateTime(1900, 1, 1);		//The members Date Of Birth
        private string _iSOCountry = "";		//The ISo country code that the member resides in
        private int _accountType;		//
        private string _zipPostcode = "";		//
        private string _phoneNumber = "";		//
        private int _mobilePhoneID;		//
        private int _iPLocationID;		//
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//The date the user regiestered
        private List<FeaturedMember> featuredMember;		// Foreign object
        private List<MemberAccount> memberAccount;		// Foreign object
        private List<BlogVideo> blogVideo;		// Foreign object
        private List<FriendRequest> friendRequest;		// Foreign object
        private List<ChatOnline> chatOnline;		// Foreign object
        private List<ContentView> contentView;		// Foreign object
        private List<TopPhotoPosterByViews> topPhotoPosterByViews;		// Foreign object
        private List<BlogEntry> blogEntry;		// Foreign object
        private List<NSpot> nSpot;		// Foreign object
        private List<MemberStatus> memberStatus;		// Foreign object
        private List<BlogPhoto> blogPhoto;		// Foreign object
        private List<EmailMessage> emailMessage;		// Foreign object
        private List<LiveBroadcast> liveBroadcast;		// Foreign object
        private List<Video> video;		// Foreign object
        private List<ProfileInvite> profileInvite;		// Foreign object
        private List<VideoView> videoView;		// Foreign object
        private List<Channel> channel;		// Foreign object
        private List<OnlineNow> onlineNow;		// Foreign object
        private List<MemberBlogSettings> memberBlogSettings;		// Foreign object
        private List<MemberProfile> memberProfile;		// Foreign object
        private List<PhotoCollection> photoCollection;		// Foreign object
        private List<SearchRequest> searchRequest;		// Foreign object
        private List<MemberStatusText> memberStatusText;		// Foreign object
        private List<ForgottenPassword> forgottenPassword;		// Foreign object
        private List<Abuse> abuse;		// Foreign object
        private List<MatchProfile> matchProfile;		// Foreign object
        private List<MP3Upload> mP3Upload;		// Foreign object
        private List<MemberOnline> memberOnline;		// Foreign object
        private List<Vote> vote;		// Foreign object
        private List<Business> business;		// Foreign object
        private List<LoggedIn> loggedIn;		// Foreign object
        private List<AskAFriendComment> askAFriendComment;		// Foreign object
        private List<Favourite> favourite;		// Foreign object
        private List<TopVideoPosterByViews> topVideoPosterByViews;		// Foreign object
        private List<PhotoComment> photoComment;		// Foreign object
        private List<FavouriteGroup> favouriteGroup;		// Foreign object
        private List<Dashboard> dashboard;		// Foreign object
        private List<FavouriteMember> favouriteMember;		// Foreign object
        private List<LiveBroadcastViewer> liveBroadcastViewer;		// Foreign object
        private List<MemberMusic> memberMusic;		// Foreign object
        private List<ContentInvite> contentInvite;		// Foreign object
        private List<MemberInvite> memberInvite;		// Foreign object
        private List<SubscriptionMember> subscriptionMember;		// Foreign object
        private List<AskAFriend> askAFriend;		// Foreign object
        private List<CommunityView> communityView;		// Foreign object
        private List<MemberBlock> memberBlock;		// Foreign object
        private List<PremiumMember> premiumMember;		// Foreign object
        private List<MemberAccountActivity> memberAccountActivity;		// Foreign object
        private List<PhotoView> photoView;		// Foreign object
        private List<NSpotMember> nSpotMember;		// Foreign object
        private List<SubscriptionGroup> subscriptionGroup;		// Foreign object
        private List<MemberComment> memberComment;		// Foreign object
        private List<Profile> profile;		// Foreign object
        private List<AskAFriendResponse> askAFriendResponse;		// Foreign object
        private List<DeviceBlock> deviceBlock;		// Foreign object
        private List<VideoRating> videoRating;		// Foreign object
        private List<Feedback> feedback;		// Foreign object
        private List<Device> device;		// Foreign object
        private List<Photo> photo;		// Foreign object
        private List<VideoComment> videoComment;		// Foreign object
        private List<VideoWatch> videoWatch;		// Foreign object
        private List<PhotoRating> photoRating;		// Foreign object
        private List<NSpotComment> nSpotComment;		// Foreign object
        private List<MemberSettings> memberSettings;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the Member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Base64 Guid for the Member
        /// </summary>
        public string WebMemberID
        {
            get { return _webMemberID; }
            set { _webMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AdminStatusID
        {
            get { return _adminStatusID; }
            set { _adminStatusID = value; }
        }

        /// <summary>
        /// The display nickname of the  member
        /// </summary>
        public string NickName
        {
            get { return _nickName; }
            set { _nickName = value; }
        }

        /// <summary>
        /// The members channel (this is their home page profile/video/hotspots/photos)
        /// </summary>
        public int ChannelID
        {
            get { return _channelID; }
            set { _channelID = value; }
        }

        /// <summary>
        /// The logon password of the member
        /// </summary>
        public string Password
        {
            get { return _password; }
            set { _password = value; }
        }

        /// <summary>
        /// The members email address
        /// </summary>
        public string Email
        {
            get { return _email; }
            set { _email = value; }
        }

        /// <summary>
        /// NotSet | Female | Male
        /// </summary>
        public int Gender
        {
            get { return _gender; }
            set { _gender = value; }
        }

        /// <summary>
        /// The members First Name
        /// </summary>
        public string FirstName
        {
            get { return _firstName; }
            set { _firstName = value; }
        }

        /// <summary>
        /// The members Last Name
        /// </summary>
        public string LastName
        {
            get { return _lastName; }
            set { _lastName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ProfilePhotoResourceFileID
        {
            get { return _profilePhotoResourceFileID; }
            set { _profilePhotoResourceFileID = value; }
        }

        /// <summary>
        /// The members Date Of Birth
        /// </summary>
        public DateTime DOB
        {
            get { return _dOB; }
            set { _dOB = value; }
        }

        /// <summary>
        /// The ISo country code that the member resides in
        /// </summary>
        public string ISOCountry
        {
            get { return _iSOCountry; }
            set { _iSOCountry = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AccountType
        {
            get { return _accountType; }
            set { _accountType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ZipPostcode
        {
            get { return _zipPostcode; }
            set { _zipPostcode = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PhoneNumber
        {
            get { return _phoneNumber; }
            set { _phoneNumber = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MobilePhoneID
        {
            get { return _mobilePhoneID; }
            set { _mobilePhoneID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int IPLocationID
        {
            get { return _iPLocationID; }
            set { _iPLocationID = value; }
        }

        /// <summary>
        /// The date the user regiestered
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Member()
        {

        }

        /// <summary>
        /// Instanciates a Member object from the database via the MemberID
        /// </summary>
        public Member(int MemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("WebMemberID")) { this._webMemberID = (string)dr["WebMemberID"]; }
                    if (list.IsColumnPresent("AdminStatusID")) { this._adminStatusID = (int)dr["AdminStatusID"]; }
                    if (list.IsColumnPresent("NickName")) { this._nickName = (string)dr["NickName"]; }
                    if (list.IsColumnPresent("ChannelID")) { this._channelID = (int)dr["ChannelID"]; }
                    if (list.IsColumnPresent("Password")) { this._password = (string)dr["Password"]; }
                    if (list.IsColumnPresent("Email")) { this._email = (string)dr["Email"]; }
                    if (list.IsColumnPresent("Gender")) { this._gender = (int)dr["Gender"]; }
                    if (list.IsColumnPresent("FirstName")) { this._firstName = (string)dr["FirstName"]; }
                    if (list.IsColumnPresent("LastName")) { this._lastName = (string)dr["LastName"]; }
                    if (list.IsColumnPresent("ProfilePhotoResourceFileID")) { this._profilePhotoResourceFileID = (int)dr["ProfilePhotoResourceFileID"]; }
                    if (list.IsColumnPresent("DOB")) { this._dOB = (DateTime)dr["DOB"]; }
                    if (list.IsColumnPresent("ISOCountry")) { this._iSOCountry = (string)dr["ISOCountry"]; }
                    if (list.IsColumnPresent("AccountType")) { this._accountType = (int)dr["AccountType"]; }
                    if (list.IsColumnPresent("ZipPostcode")) { this._zipPostcode = (string)dr["ZipPostcode"]; }
                    if (list.IsColumnPresent("PhoneNumber")) { this._phoneNumber = (string)dr["PhoneNumber"]; }
                    if (list.IsColumnPresent("MobilePhoneID")) { this._mobilePhoneID = (int)dr["MobilePhoneID"]; }
                    if (list.IsColumnPresent("IPLocationID")) { this._iPLocationID = (int)dr["IPLocationID"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no Member in the database with the ID " + MemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Member in the database 
        /// </summary>
        public static List<Member> GetAllMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMember");

            List<Member> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile DefaultPhoto { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Members
        /// </summary>
        public static List<Member> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Member> arr = new List<Member>();

            Member obj;

            while (dr.Read())
            {
                obj = new Member();
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("WebMemberID")) { obj._webMemberID = (string)dr["WebMemberID"]; }
                if (list.IsColumnPresent("AdminStatusID")) { obj._adminStatusID = (int)dr["AdminStatusID"]; }
                if (list.IsColumnPresent("NickName")) { obj._nickName = (string)dr["NickName"]; }
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("Gender")) { obj._gender = (int)dr["Gender"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("ProfilePhotoResourceFileID")) { obj._profilePhotoResourceFileID = (int)dr["ProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("DOB")) { obj._dOB = (DateTime)dr["DOB"]; }
                if (list.IsColumnPresent("ISOCountry")) { obj._iSOCountry = (string)dr["ISOCountry"]; }
                if (list.IsColumnPresent("AccountType")) { obj._accountType = (int)dr["AccountType"]; }
                if (list.IsColumnPresent("ZipPostcode")) { obj._zipPostcode = (string)dr["ZipPostcode"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }
                if (list.IsColumnPresent("MobilePhoneID")) { obj._mobilePhoneID = (int)dr["MobilePhoneID"]; }
                if (list.IsColumnPresent("IPLocationID")) { obj._iPLocationID = (int)dr["IPLocationID"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                obj.DefaultPhoto = new ResourceFile();
                if (list.IsColumnPresent("DefaultPhotoResourceFileID")) { obj.DefaultPhoto.ResourceFileID = (int)dr["DefaultPhotoResourceFileID"]; }
                if (list.IsColumnPresent("DefaultPhotoWebResourceFileID")) { obj.DefaultPhoto.WebResourceFileID = (string)dr["DefaultPhotoWebResourceFileID"]; }
                if (list.IsColumnPresent("DefaultPhotoResourceType")) { obj.DefaultPhoto.ResourceType = (int)dr["DefaultPhotoResourceType"]; }
                if (list.IsColumnPresent("DefaultPhotoStorageLocation")) { obj.DefaultPhoto.StorageLocation = (int)dr["DefaultPhotoStorageLocation"]; }
                if (list.IsColumnPresent("DefaultPhotoServer")) { obj.DefaultPhoto.Server = (int)dr["DefaultPhotoServer"]; }
                if (list.IsColumnPresent("DefaultPhotoPath")) { obj.DefaultPhoto.Path = (string)dr["DefaultPhotoPath"]; }
                if (list.IsColumnPresent("DefaultPhotoFileName")) { obj.DefaultPhoto.FileName = (string)dr["DefaultPhotoFileName"]; }
                if (list.IsColumnPresent("DefaultPhotoCreatedDT")) { obj.DefaultPhoto.CreatedDT = (DateTime)dr["DefaultPhotoCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Members
        /// </summary>
        public static List<Member> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Member> arr = new List<Member>();

            Member obj;

            while (dr.Read())
            {
                obj = new Member();
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("WebMemberID")) { obj._webMemberID = (string)dr["WebMemberID"]; }
                if (list.IsColumnPresent("AdminStatusID")) { obj._adminStatusID = (int)dr["AdminStatusID"]; }
                if (list.IsColumnPresent("NickName")) { obj._nickName = (string)dr["NickName"]; }
                if (list.IsColumnPresent("ChannelID")) { obj._channelID = (int)dr["ChannelID"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }
                if (list.IsColumnPresent("Email")) { obj._email = (string)dr["Email"]; }
                if (list.IsColumnPresent("Gender")) { obj._gender = (int)dr["Gender"]; }
                if (list.IsColumnPresent("FirstName")) { obj._firstName = (string)dr["FirstName"]; }
                if (list.IsColumnPresent("LastName")) { obj._lastName = (string)dr["LastName"]; }
                if (list.IsColumnPresent("ProfilePhotoResourceFileID")) { obj._profilePhotoResourceFileID = (int)dr["ProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("DOB")) { obj._dOB = (DateTime)dr["DOB"]; }
                if (list.IsColumnPresent("ISOCountry")) { obj._iSOCountry = (string)dr["ISOCountry"]; }
                if (list.IsColumnPresent("AccountType")) { obj._accountType = (int)dr["AccountType"]; }
                if (list.IsColumnPresent("ZipPostcode")) { obj._zipPostcode = (string)dr["ZipPostcode"]; }
                if (list.IsColumnPresent("PhoneNumber")) { obj._phoneNumber = (string)dr["PhoneNumber"]; }
                if (list.IsColumnPresent("MobilePhoneID")) { obj._mobilePhoneID = (int)dr["MobilePhoneID"]; }
                if (list.IsColumnPresent("IPLocationID")) { obj._iPLocationID = (int)dr["IPLocationID"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Member object or in the case of a zero MemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMember");

            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "WebMemberID", DbType.String, WebMemberID);
            db.AddInParameter(dbCommand, "AdminStatusID", DbType.Int32, AdminStatusID);
            db.AddInParameter(dbCommand, "NickName", DbType.String, NickName);
            db.AddInParameter(dbCommand, "ChannelID", DbType.Int32, ChannelID);
            db.AddInParameter(dbCommand, "Password", DbType.String, Password);
            db.AddInParameter(dbCommand, "Email", DbType.String, Email);
            db.AddInParameter(dbCommand, "Gender", DbType.Int32, Gender);
            db.AddInParameter(dbCommand, "FirstName", DbType.String, FirstName);
            db.AddInParameter(dbCommand, "LastName", DbType.String, LastName);
            db.AddInParameter(dbCommand, "ProfilePhotoResourceFileID", DbType.Int32, ProfilePhotoResourceFileID);
            db.AddInParameter(dbCommand, "DOB", DbType.DateTime, DOB);
            db.AddInParameter(dbCommand, "ISOCountry", DbType.String, ISOCountry);
            db.AddInParameter(dbCommand, "AccountType", DbType.Int32, AccountType);
            db.AddInParameter(dbCommand, "ZipPostcode", DbType.String, ZipPostcode);
            db.AddInParameter(dbCommand, "PhoneNumber", DbType.String, PhoneNumber);
            db.AddInParameter(dbCommand, "MobilePhoneID", DbType.Int32, MobilePhoneID);
            db.AddInParameter(dbCommand, "IPLocationID", DbType.Int32, IPLocationID);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the FeaturedMember objects for this Member
        /// </summary>
        private List<FeaturedMember> GetFeaturedMemberByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeaturedMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<FeaturedMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.FeaturedMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberAccount objects for this Member
        /// </summary>
        private List<MemberAccount> GetMemberAccountByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberAccountByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberAccount> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberAccount.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the BlogVideo objects for this Member
        /// </summary>
        private List<BlogVideo> GetBlogVideoByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogVideoByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<BlogVideo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BlogVideo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the FriendRequest objects for this Member
        /// </summary>
        private List<FriendRequest> GetFriendRequestByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFriendRequestByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<FriendRequest> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.FriendRequest.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the ChatOnline objects for this Member
        /// </summary>
        private List<ChatOnline> GetChatOnlineByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChatOnlineByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<ChatOnline> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.ChatOnline.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the ContentView objects for this Member
        /// </summary>
        private List<ContentView> GetContentViewByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetContentViewByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<ContentView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.ContentView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopPhotoPosterByViews objects for this Member
        /// </summary>
        private List<TopPhotoPosterByViews> GetTopPhotoPosterByViewsByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotoPosterByViewsByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<TopPhotoPosterByViews> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopPhotoPosterByViews.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the BlogEntry objects for this Member
        /// </summary>
        private List<BlogEntry> GetBlogEntryByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogEntryByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<BlogEntry> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BlogEntry.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the NSpot objects for this Member
        /// </summary>
        private List<NSpot> GetNSpotByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<NSpot> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.NSpot.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberStatus objects for this Member
        /// </summary>
        private List<MemberStatus> GetMemberStatusByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberStatusByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberStatus> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberStatus.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the BlogPhoto objects for this Member
        /// </summary>
        private List<BlogPhoto> GetBlogPhotoByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogPhotoByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<BlogPhoto> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BlogPhoto.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the EmailMessage objects for this Member
        /// </summary>
        private List<EmailMessage> GetEmailMessageByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetEmailMessageByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<EmailMessage> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.EmailMessage.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LiveBroadcast objects for this Member
        /// </summary>
        private List<LiveBroadcast> GetLiveBroadcastByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveBroadcastByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<LiveBroadcast> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LiveBroadcast.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Video objects for this Member
        /// </summary>
        private List<Video> GetVideoByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Video> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Video.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the ProfileInvite objects for this Member
        /// </summary>
        private List<ProfileInvite> GetProfileInviteByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetProfileInviteByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<ProfileInvite> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.ProfileInvite.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoView objects for this Member
        /// </summary>
        private List<VideoView> GetVideoViewByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoViewByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<VideoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Channel objects for this Member
        /// </summary>
        private List<Channel> GetChannelByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetChannelByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Channel> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Channel.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the OnlineNow objects for this Member
        /// </summary>
        private List<OnlineNow> GetOnlineNowByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetOnlineNowByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<OnlineNow> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.OnlineNow.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberBlogSettings objects for this Member
        /// </summary>
        private List<MemberBlogSettings> GetMemberBlogSettingsByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberBlogSettingsByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberBlogSettings> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberBlogSettings.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberProfile objects for this Member
        /// </summary>
        private List<MemberProfile> GetMemberProfileByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberProfileByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberProfile> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberProfile.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoCollection objects for this Member
        /// </summary>
        private List<PhotoCollection> GetPhotoCollectionByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoCollectionByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<PhotoCollection> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoCollection.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the SearchRequest objects for this Member
        /// </summary>
        private List<SearchRequest> GetSearchRequestByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSearchRequestByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<SearchRequest> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.SearchRequest.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberStatusText objects for this Member
        /// </summary>
        private List<MemberStatusText> GetMemberStatusTextByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberStatusTextByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberStatusText> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberStatusText.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the ForgottenPassword objects for this Member
        /// </summary>
        private List<ForgottenPassword> GetForgottenPasswordByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetForgottenPasswordByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<ForgottenPassword> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.ForgottenPassword.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Abuse objects for this Member
        /// </summary>
        private List<Abuse> GetAbuseByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAbuseByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Abuse> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Abuse.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MatchProfile objects for this Member
        /// </summary>
        private List<MatchProfile> GetMatchProfileByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMatchProfileByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MatchProfile> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MatchProfile.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MP3Upload objects for this Member
        /// </summary>
        private List<MP3Upload> GetMP3UploadByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMP3UploadByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MP3Upload> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MP3Upload.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberOnline objects for this Member
        /// </summary>
        private List<MemberOnline> GetMemberOnlineByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberOnlineByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberOnline> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberOnline.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Vote objects for this Member
        /// </summary>
        private List<Vote> GetVoteByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVoteByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Vote> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Vote.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Business objects for this Member
        /// </summary>
        private List<Business> GetBusinessByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBusinessByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Business> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Business.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LoggedIn objects for this Member
        /// </summary>
        private List<LoggedIn> GetLoggedInByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLoggedInByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<LoggedIn> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LoggedIn.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the AskAFriendComment objects for this Member
        /// </summary>
        private List<AskAFriendComment> GetAskAFriendCommentByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendCommentByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<AskAFriendComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriendComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Favourite objects for this Member
        /// </summary>
        private List<Favourite> GetFavouriteByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Favourite> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Favourite.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopVideoPosterByViews objects for this Member
        /// </summary>
        private List<TopVideoPosterByViews> GetTopVideoPosterByViewsByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideoPosterByViewsByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<TopVideoPosterByViews> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopVideoPosterByViews.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoComment objects for this Member
        /// </summary>
        private List<PhotoComment> GetPhotoCommentByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoCommentByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<PhotoComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the FavouriteGroup objects for this Member
        /// </summary>
        private List<FavouriteGroup> GetFavouriteGroupByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteGroupByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<FavouriteGroup> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.FavouriteGroup.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Dashboard objects for this Member
        /// </summary>
        private List<Dashboard> GetDashboardByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDashboardByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Dashboard> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Dashboard.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the FavouriteMember objects for this Member
        /// </summary>
        private List<FavouriteMember> GetFavouriteMemberByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFavouriteMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<FavouriteMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.FavouriteMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LiveBroadcastViewer objects for this Member
        /// </summary>
        private List<LiveBroadcastViewer> GetLiveBroadcastViewerByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveBroadcastViewerByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<LiveBroadcastViewer> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LiveBroadcastViewer.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberMusic objects for this Member
        /// </summary>
        private List<MemberMusic> GetMemberMusicByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberMusicByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberMusic> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberMusic.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the ContentInvite objects for this Member
        /// </summary>
        private List<ContentInvite> GetContentInviteByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetContentInviteByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<ContentInvite> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.ContentInvite.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberInvite objects for this Member
        /// </summary>
        private List<MemberInvite> GetMemberInviteByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberInviteByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberInvite> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberInvite.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the SubscriptionMember objects for this Member
        /// </summary>
        private List<SubscriptionMember> GetSubscriptionMemberByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSubscriptionMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<SubscriptionMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.SubscriptionMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the AskAFriend objects for this Member
        /// </summary>
        private List<AskAFriend> GetAskAFriendByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<AskAFriend> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriend.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the CommunityView objects for this Member
        /// </summary>
        private List<CommunityView> GetCommunityViewByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetCommunityViewByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<CommunityView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.CommunityView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberBlock objects for this Member
        /// </summary>
        private List<MemberBlock> GetMemberBlockByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberBlockByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberBlock> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberBlock.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PremiumMember objects for this Member
        /// </summary>
        private List<PremiumMember> GetPremiumMemberByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPremiumMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<PremiumMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PremiumMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberAccountActivity objects for this Member
        /// </summary>
        private List<MemberAccountActivity> GetMemberAccountActivityByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberAccountActivityByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberAccountActivity> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberAccountActivity.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoView objects for this Member
        /// </summary>
        private List<PhotoView> GetPhotoViewByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoViewByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<PhotoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the NSpotMember objects for this Member
        /// </summary>
        private List<NSpotMember> GetNSpotMemberByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotMemberByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<NSpotMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.NSpotMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the SubscriptionGroup objects for this Member
        /// </summary>
        private List<SubscriptionGroup> GetSubscriptionGroupByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSubscriptionGroupByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<SubscriptionGroup> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.SubscriptionGroup.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberComment objects for this Member
        /// </summary>
        private List<MemberComment> GetMemberCommentByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberCommentByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Profile objects for this Member
        /// </summary>
        private List<Profile> GetProfileByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetProfileByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Profile> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Profile.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the AskAFriendResponse objects for this Member
        /// </summary>
        private List<AskAFriendResponse> GetAskAFriendResponseByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAskAFriendResponseByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<AskAFriendResponse> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.AskAFriendResponse.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the DeviceBlock objects for this Member
        /// </summary>
        private List<DeviceBlock> GetDeviceBlockByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDeviceBlockByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<DeviceBlock> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.DeviceBlock.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoRating objects for this Member
        /// </summary>
        private List<VideoRating> GetVideoRatingByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoRatingByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<VideoRating> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoRating.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Feedback objects for this Member
        /// </summary>
        private List<Feedback> GetFeedbackByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetFeedbackByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Feedback> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Feedback.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Device objects for this Member
        /// </summary>
        private List<Device> GetDeviceByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetDeviceByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Device> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Device.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Photo objects for this Member
        /// </summary>
        private List<Photo> GetPhotoByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Photo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Photo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoComment objects for this Member
        /// </summary>
        private List<VideoComment> GetVideoCommentByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoCommentByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<VideoComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoWatch objects for this Member
        /// </summary>
        private List<VideoWatch> GetVideoWatchByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoWatchByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<VideoWatch> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoWatch.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoRating objects for this Member
        /// </summary>
        private List<PhotoRating> GetPhotoRatingByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoRatingByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<PhotoRating> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoRating.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the NSpotComment objects for this Member
        /// </summary>
        private List<NSpotComment> GetNSpotCommentByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotCommentByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<NSpotComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.NSpotComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the MemberSettings objects for this Member
        /// </summary>
        private List<MemberSettings> GetMemberSettingsByMemberID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberSettingsByMemberID");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<MemberSettings> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberSettings.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the Member in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static Member GetMemberByMemberIDWithJoin(int MemberID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberByMemberIDWithJoin");
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            List<Member> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberAccount in the system
    /// </summary>
    public partial class MemberAccount
    {
        /// <summary>
        /// The MemberAccountActivity objects for this MemberAccount
        /// </summary>
        public List<MemberAccountActivity> MemberAccountActivity
        {
            get
            {
                if (memberAccountActivity == null)
                    this.memberAccountActivity = this.GetMemberAccountActivityByMemberAccountID();
                return memberAccountActivity;
            }
            set { memberAccountActivity = value; }
        }


        #region Fields and Properties

        private int _memberAccountID;		//
        private int _memberID;		//
        private int _accountType;		//0 - None, 1 - Twitter.
        private string _username = "";		//
        private string _password = "";		//
        private List<MemberAccountActivity> memberAccountActivity;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberAccountID
        {
            get { return _memberAccountID; }
            set { _memberAccountID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 0 - None, 1 - Twitter.
        /// </summary>
        public int AccountType
        {
            get { return _accountType; }
            set { _accountType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Username
        {
            get { return _username; }
            set { _username = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Password
        {
            get { return _password; }
            set { _password = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberAccount()
        {

        }

        /// <summary>
        /// Instanciates a MemberAccount object from the database via the MemberAccountID
        /// </summary>
        public MemberAccount(int MemberAccountID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberAccountByMemberAccountID");
            db.AddInParameter(dbCommand, "MemberAccountID", DbType.Int32, MemberAccountID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberAccountID")) { this._memberAccountID = (int)dr["MemberAccountID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("AccountType")) { this._accountType = (int)dr["AccountType"]; }
                    if (list.IsColumnPresent("Username")) { this._username = (string)dr["Username"]; }
                    if (list.IsColumnPresent("Password")) { this._password = (string)dr["Password"]; }

                }
                else
                {
                    throw new Exception("There is no MemberAccount in the database with the ID " + MemberAccountID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberAccount in the database 
        /// </summary>
        public static List<MemberAccount> GetAllMemberAccount()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberAccount");

            List<MemberAccount> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberAccounts
        /// </summary>
        public static List<MemberAccount> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberAccount> arr = new List<MemberAccount>();

            MemberAccount obj;

            while (dr.Read())
            {
                obj = new MemberAccount();
                if (list.IsColumnPresent("MemberAccountID")) { obj._memberAccountID = (int)dr["MemberAccountID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AccountType")) { obj._accountType = (int)dr["AccountType"]; }
                if (list.IsColumnPresent("Username")) { obj._username = (string)dr["Username"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberAccounts
        /// </summary>
        public static List<MemberAccount> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberAccount> arr = new List<MemberAccount>();

            MemberAccount obj;

            while (dr.Read())
            {
                obj = new MemberAccount();
                if (list.IsColumnPresent("MemberAccountID")) { obj._memberAccountID = (int)dr["MemberAccountID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AccountType")) { obj._accountType = (int)dr["AccountType"]; }
                if (list.IsColumnPresent("Username")) { obj._username = (string)dr["Username"]; }
                if (list.IsColumnPresent("Password")) { obj._password = (string)dr["Password"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberAccount object or in the case of a zero MemberAccountID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberAccount");

            db.AddInParameter(dbCommand, "MemberAccountID", DbType.Int32, MemberAccountID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "AccountType", DbType.Int32, AccountType);
            db.AddInParameter(dbCommand, "Username", DbType.String, Username);
            db.AddInParameter(dbCommand, "Password", DbType.String, Password);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberAccountID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the MemberAccountActivity objects for this MemberAccount
        /// </summary>
        private List<MemberAccountActivity> GetMemberAccountActivityByMemberAccountID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberAccountActivityByMemberAccountID");
            db.AddInParameter(dbCommand, "MemberAccountID", DbType.Int32, MemberAccountID);

            List<MemberAccountActivity> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.MemberAccountActivity.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberAccountActivity in the system
    /// </summary>
    public partial class MemberAccountActivity
    {
        #region Fields and Properties

        private int _memberAccountActivityID;		//
        private int _memberID;		//
        private int _memberAccountID;		//
        private int _activityType;		//0 - None, 1- Video, 2 - PhotoGallery, 3 - Photo, 4 - Status
        private DateTime _lastDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberAccountActivityID
        {
            get { return _memberAccountActivityID; }
            set { _memberAccountActivityID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberAccountID
        {
            get { return _memberAccountID; }
            set { _memberAccountID = value; }
        }

        /// <summary>
        /// 0 - None, 1- Video, 2 - PhotoGallery, 3 - Photo, 4 - Status
        /// </summary>
        public int ActivityType
        {
            get { return _activityType; }
            set { _activityType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime LastDT
        {
            get { return _lastDT; }
            set { _lastDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberAccountActivity()
        {

        }

        /// <summary>
        /// Instanciates a MemberAccountActivity object from the database via the MemberAccountActivityID
        /// </summary>
        public MemberAccountActivity(int MemberAccountActivityID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberAccountActivityByMemberAccountActivityID");
            db.AddInParameter(dbCommand, "MemberAccountActivityID", DbType.Int32, MemberAccountActivityID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberAccountActivityID")) { this._memberAccountActivityID = (int)dr["MemberAccountActivityID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("MemberAccountID")) { this._memberAccountID = (int)dr["MemberAccountID"]; }
                    if (list.IsColumnPresent("ActivityType")) { this._activityType = (int)dr["ActivityType"]; }
                    if (list.IsColumnPresent("LastDT")) { this._lastDT = (DateTime)dr["LastDT"]; }

                }
                else
                {
                    throw new Exception("There is no MemberAccountActivity in the database with the ID " + MemberAccountActivityID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberAccountActivity in the database 
        /// </summary>
        public static List<MemberAccountActivity> GetAllMemberAccountActivity()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberAccountActivity");

            List<MemberAccountActivity> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberAccountActivitys
        /// </summary>
        public static List<MemberAccountActivity> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberAccountActivity> arr = new List<MemberAccountActivity>();

            MemberAccountActivity obj;

            while (dr.Read())
            {
                obj = new MemberAccountActivity();
                if (list.IsColumnPresent("MemberAccountActivityID")) { obj._memberAccountActivityID = (int)dr["MemberAccountActivityID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("MemberAccountID")) { obj._memberAccountID = (int)dr["MemberAccountID"]; }
                if (list.IsColumnPresent("ActivityType")) { obj._activityType = (int)dr["ActivityType"]; }
                if (list.IsColumnPresent("LastDT")) { obj._lastDT = (DateTime)dr["LastDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberAccountActivitys
        /// </summary>
        public static List<MemberAccountActivity> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberAccountActivity> arr = new List<MemberAccountActivity>();

            MemberAccountActivity obj;

            while (dr.Read())
            {
                obj = new MemberAccountActivity();
                if (list.IsColumnPresent("MemberAccountActivityID")) { obj._memberAccountActivityID = (int)dr["MemberAccountActivityID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("MemberAccountID")) { obj._memberAccountID = (int)dr["MemberAccountID"]; }
                if (list.IsColumnPresent("ActivityType")) { obj._activityType = (int)dr["ActivityType"]; }
                if (list.IsColumnPresent("LastDT")) { obj._lastDT = (DateTime)dr["LastDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberAccountActivity object or in the case of a zero MemberAccountActivityID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberAccountActivity");

            db.AddInParameter(dbCommand, "MemberAccountActivityID", DbType.Int32, MemberAccountActivityID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "MemberAccountID", DbType.Int32, MemberAccountID);
            db.AddInParameter(dbCommand, "ActivityType", DbType.Int32, ActivityType);
            db.AddInParameter(dbCommand, "LastDT", DbType.DateTime, LastDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberAccountActivityID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberBlock in the system
    /// </summary>
    public partial class MemberBlock
    {
        #region Fields and Properties

        private int _memberBlockID;		//The primary key of the BTBlock
        private int _memberID;		//The member id who is block another member
        private int _blockMemberID;		//The MemberID who is blocked
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//When was the member blocked

        Database db;
        /// <summary>
        /// The primary key of the BTBlock
        /// </summary>
        public int MemberBlockID
        {
            get { return _memberBlockID; }
            set { _memberBlockID = value; }
        }

        /// <summary>
        /// The member id who is block another member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The MemberID who is blocked
        /// </summary>
        public int BlockMemberID
        {
            get { return _blockMemberID; }
            set { _blockMemberID = value; }
        }

        /// <summary>
        /// When was the member blocked
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberBlock()
        {

        }

        /// <summary>
        /// Instanciates a MemberBlock object from the database via the MemberBlockID
        /// </summary>
        public MemberBlock(int MemberBlockID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberBlockByMemberBlockID");
            db.AddInParameter(dbCommand, "MemberBlockID", DbType.Int32, MemberBlockID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberBlockID")) { this._memberBlockID = (int)dr["MemberBlockID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("BlockMemberID")) { this._blockMemberID = (int)dr["BlockMemberID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no MemberBlock in the database with the ID " + MemberBlockID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberBlock in the database 
        /// </summary>
        public static List<MemberBlock> GetAllMemberBlock()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberBlock");

            List<MemberBlock> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberBlocks
        /// </summary>
        public static List<MemberBlock> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberBlock> arr = new List<MemberBlock>();

            MemberBlock obj;

            while (dr.Read())
            {
                obj = new MemberBlock();
                if (list.IsColumnPresent("MemberBlockID")) { obj._memberBlockID = (int)dr["MemberBlockID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BlockMemberID")) { obj._blockMemberID = (int)dr["BlockMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberBlocks
        /// </summary>
        public static List<MemberBlock> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberBlock> arr = new List<MemberBlock>();

            MemberBlock obj;

            while (dr.Read())
            {
                obj = new MemberBlock();
                if (list.IsColumnPresent("MemberBlockID")) { obj._memberBlockID = (int)dr["MemberBlockID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BlockMemberID")) { obj._blockMemberID = (int)dr["BlockMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberBlock object or in the case of a zero MemberBlockID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberBlock");

            db.AddInParameter(dbCommand, "MemberBlockID", DbType.Int32, MemberBlockID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "BlockMemberID", DbType.Int32, BlockMemberID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberBlockID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberBlogSettings in the system
    /// </summary>
    public partial class MemberBlogSettings
    {
        #region Fields and Properties

        private int _memberBlogSettingsID;		//
        private int _memberID;		//
        private string _bloggerUserName = "";		//
        private string _bloggerPassword = "";		//
        private bool _bloggerAutoSubmit;		//
        private string _liveJournalUserName = "";		//
        private string _liveJournalPassword = "";		//
        private bool _liveJournalAutoSubmit;		//
        private string _wordPressUserName = "";		//
        private string _wordPressPassword = "";		//
        private string _wordPressURL = "";		//
        private bool _wordPressAutoSubmit;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberBlogSettingsID
        {
            get { return _memberBlogSettingsID; }
            set { _memberBlogSettingsID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BloggerUserName
        {
            get { return _bloggerUserName; }
            set { _bloggerUserName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BloggerPassword
        {
            get { return _bloggerPassword; }
            set { _bloggerPassword = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool BloggerAutoSubmit
        {
            get { return _bloggerAutoSubmit; }
            set { _bloggerAutoSubmit = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LiveJournalUserName
        {
            get { return _liveJournalUserName; }
            set { _liveJournalUserName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string LiveJournalPassword
        {
            get { return _liveJournalPassword; }
            set { _liveJournalPassword = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool LiveJournalAutoSubmit
        {
            get { return _liveJournalAutoSubmit; }
            set { _liveJournalAutoSubmit = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WordPressUserName
        {
            get { return _wordPressUserName; }
            set { _wordPressUserName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WordPressPassword
        {
            get { return _wordPressPassword; }
            set { _wordPressPassword = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WordPressURL
        {
            get { return _wordPressURL; }
            set { _wordPressURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool WordPressAutoSubmit
        {
            get { return _wordPressAutoSubmit; }
            set { _wordPressAutoSubmit = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberBlogSettings()
        {

        }

        /// <summary>
        /// Instanciates a MemberBlogSettings object from the database via the MemberBlogSettingsID
        /// </summary>
        public MemberBlogSettings(int MemberBlogSettingsID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberBlogSettingsByMemberBlogSettingsID");
            db.AddInParameter(dbCommand, "MemberBlogSettingsID", DbType.Int32, MemberBlogSettingsID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberBlogSettingsID")) { this._memberBlogSettingsID = (int)dr["MemberBlogSettingsID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("BloggerUserName")) { this._bloggerUserName = (string)dr["BloggerUserName"]; }
                    if (list.IsColumnPresent("BloggerPassword")) { this._bloggerPassword = (string)dr["BloggerPassword"]; }
                    if (list.IsColumnPresent("BloggerAutoSubmit")) { this._bloggerAutoSubmit = (bool)dr["BloggerAutoSubmit"]; }
                    if (list.IsColumnPresent("LiveJournalUserName")) { this._liveJournalUserName = (string)dr["LiveJournalUserName"]; }
                    if (list.IsColumnPresent("LiveJournalPassword")) { this._liveJournalPassword = (string)dr["LiveJournalPassword"]; }
                    if (list.IsColumnPresent("LiveJournalAutoSubmit")) { this._liveJournalAutoSubmit = (bool)dr["LiveJournalAutoSubmit"]; }
                    if (list.IsColumnPresent("WordPressUserName")) { this._wordPressUserName = (string)dr["WordPressUserName"]; }
                    if (list.IsColumnPresent("WordPressPassword")) { this._wordPressPassword = (string)dr["WordPressPassword"]; }
                    if (list.IsColumnPresent("WordPressURL")) { this._wordPressURL = (string)dr["WordPressURL"]; }
                    if (list.IsColumnPresent("WordPressAutoSubmit")) { this._wordPressAutoSubmit = (bool)dr["WordPressAutoSubmit"]; }

                }
                else
                {
                    throw new Exception("There is no MemberBlogSettings in the database with the ID " + MemberBlogSettingsID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberBlogSettings in the database 
        /// </summary>
        public static List<MemberBlogSettings> GetAllMemberBlogSettings()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberBlogSettings");

            List<MemberBlogSettings> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberBlogSettingss
        /// </summary>
        public static List<MemberBlogSettings> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberBlogSettings> arr = new List<MemberBlogSettings>();

            MemberBlogSettings obj;

            while (dr.Read())
            {
                obj = new MemberBlogSettings();
                if (list.IsColumnPresent("MemberBlogSettingsID")) { obj._memberBlogSettingsID = (int)dr["MemberBlogSettingsID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BloggerUserName")) { obj._bloggerUserName = (string)dr["BloggerUserName"]; }
                if (list.IsColumnPresent("BloggerPassword")) { obj._bloggerPassword = (string)dr["BloggerPassword"]; }
                if (list.IsColumnPresent("BloggerAutoSubmit")) { obj._bloggerAutoSubmit = (bool)dr["BloggerAutoSubmit"]; }
                if (list.IsColumnPresent("LiveJournalUserName")) { obj._liveJournalUserName = (string)dr["LiveJournalUserName"]; }
                if (list.IsColumnPresent("LiveJournalPassword")) { obj._liveJournalPassword = (string)dr["LiveJournalPassword"]; }
                if (list.IsColumnPresent("LiveJournalAutoSubmit")) { obj._liveJournalAutoSubmit = (bool)dr["LiveJournalAutoSubmit"]; }
                if (list.IsColumnPresent("WordPressUserName")) { obj._wordPressUserName = (string)dr["WordPressUserName"]; }
                if (list.IsColumnPresent("WordPressPassword")) { obj._wordPressPassword = (string)dr["WordPressPassword"]; }
                if (list.IsColumnPresent("WordPressURL")) { obj._wordPressURL = (string)dr["WordPressURL"]; }
                if (list.IsColumnPresent("WordPressAutoSubmit")) { obj._wordPressAutoSubmit = (bool)dr["WordPressAutoSubmit"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberBlogSettingss
        /// </summary>
        public static List<MemberBlogSettings> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberBlogSettings> arr = new List<MemberBlogSettings>();

            MemberBlogSettings obj;

            while (dr.Read())
            {
                obj = new MemberBlogSettings();
                if (list.IsColumnPresent("MemberBlogSettingsID")) { obj._memberBlogSettingsID = (int)dr["MemberBlogSettingsID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("BloggerUserName")) { obj._bloggerUserName = (string)dr["BloggerUserName"]; }
                if (list.IsColumnPresent("BloggerPassword")) { obj._bloggerPassword = (string)dr["BloggerPassword"]; }
                if (list.IsColumnPresent("BloggerAutoSubmit")) { obj._bloggerAutoSubmit = (bool)dr["BloggerAutoSubmit"]; }
                if (list.IsColumnPresent("LiveJournalUserName")) { obj._liveJournalUserName = (string)dr["LiveJournalUserName"]; }
                if (list.IsColumnPresent("LiveJournalPassword")) { obj._liveJournalPassword = (string)dr["LiveJournalPassword"]; }
                if (list.IsColumnPresent("LiveJournalAutoSubmit")) { obj._liveJournalAutoSubmit = (bool)dr["LiveJournalAutoSubmit"]; }
                if (list.IsColumnPresent("WordPressUserName")) { obj._wordPressUserName = (string)dr["WordPressUserName"]; }
                if (list.IsColumnPresent("WordPressPassword")) { obj._wordPressPassword = (string)dr["WordPressPassword"]; }
                if (list.IsColumnPresent("WordPressURL")) { obj._wordPressURL = (string)dr["WordPressURL"]; }
                if (list.IsColumnPresent("WordPressAutoSubmit")) { obj._wordPressAutoSubmit = (bool)dr["WordPressAutoSubmit"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberBlogSettings object or in the case of a zero MemberBlogSettingsID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberBlogSettings");

            db.AddInParameter(dbCommand, "MemberBlogSettingsID", DbType.Int32, MemberBlogSettingsID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "BloggerUserName", DbType.String, BloggerUserName);
            db.AddInParameter(dbCommand, "BloggerPassword", DbType.String, BloggerPassword);
            db.AddInParameter(dbCommand, "BloggerAutoSubmit", DbType.Boolean, BloggerAutoSubmit);
            db.AddInParameter(dbCommand, "LiveJournalUserName", DbType.String, LiveJournalUserName);
            db.AddInParameter(dbCommand, "LiveJournalPassword", DbType.String, LiveJournalPassword);
            db.AddInParameter(dbCommand, "LiveJournalAutoSubmit", DbType.Boolean, LiveJournalAutoSubmit);
            db.AddInParameter(dbCommand, "WordPressUserName", DbType.String, WordPressUserName);
            db.AddInParameter(dbCommand, "WordPressPassword", DbType.String, WordPressPassword);
            db.AddInParameter(dbCommand, "WordPressURL", DbType.String, WordPressURL);
            db.AddInParameter(dbCommand, "WordPressAutoSubmit", DbType.Boolean, WordPressAutoSubmit);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberBlogSettingsID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberComment in the system
    /// </summary>
    public partial class MemberComment
    {
        #region Fields and Properties

        private int _memberCommentID;		//DB identifier for the MemberComment
        private int _memberID;		//The owner of the Comment
        private int _memberIDFrom;		//The member who posted the comment
        private string _text = "";		//The text contents of the Comment
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date and Time that the Comment was Posted

        Database db;
        /// <summary>
        /// DB identifier for the MemberComment
        /// </summary>
        public int MemberCommentID
        {
            get { return _memberCommentID; }
            set { _memberCommentID = value; }
        }

        /// <summary>
        /// The owner of the Comment
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The member who posted the comment
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// The text contents of the Comment
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// The Date and Time that the Comment was Posted
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberComment()
        {

        }

        /// <summary>
        /// Instanciates a MemberComment object from the database via the MemberCommentID
        /// </summary>
        public MemberComment(int MemberCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberCommentByMemberCommentID");
            db.AddInParameter(dbCommand, "MemberCommentID", DbType.Int32, MemberCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberCommentID")) { this._memberCommentID = (int)dr["MemberCommentID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no MemberComment in the database with the ID " + MemberCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberComment in the database 
        /// </summary>
        public static List<MemberComment> GetAllMemberComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberComment");

            List<MemberComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberComments
        /// </summary>
        public static List<MemberComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberComment> arr = new List<MemberComment>();

            MemberComment obj;

            while (dr.Read())
            {
                obj = new MemberComment();
                if (list.IsColumnPresent("MemberCommentID")) { obj._memberCommentID = (int)dr["MemberCommentID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberComments
        /// </summary>
        public static List<MemberComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberComment> arr = new List<MemberComment>();

            MemberComment obj;

            while (dr.Read())
            {
                obj = new MemberComment();
                if (list.IsColumnPresent("MemberCommentID")) { obj._memberCommentID = (int)dr["MemberCommentID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberComment object or in the case of a zero MemberCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberComment");

            db.AddInParameter(dbCommand, "MemberCommentID", DbType.Int32, MemberCommentID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberInvite in the system
    /// </summary>
    public partial class MemberInvite
    {
        #region Fields and Properties

        private int _memberInviteID;		//
        private int _memberID;		//
        private string _emailAddress = "";		//
        private string _customMessage = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberInviteID
        {
            get { return _memberInviteID; }
            set { _memberInviteID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CustomMessage
        {
            get { return _customMessage; }
            set { _customMessage = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberInvite()
        {

        }

        /// <summary>
        /// Instanciates a MemberInvite object from the database via the MemberInviteID
        /// </summary>
        public MemberInvite(int MemberInviteID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberInviteByMemberInviteID");
            db.AddInParameter(dbCommand, "MemberInviteID", DbType.Int32, MemberInviteID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberInviteID")) { this._memberInviteID = (int)dr["MemberInviteID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("CustomMessage")) { this._customMessage = (string)dr["CustomMessage"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no MemberInvite in the database with the ID " + MemberInviteID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberInvite in the database 
        /// </summary>
        public static List<MemberInvite> GetAllMemberInvite()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberInvite");

            List<MemberInvite> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberInvites
        /// </summary>
        public static List<MemberInvite> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberInvite> arr = new List<MemberInvite>();

            MemberInvite obj;

            while (dr.Read())
            {
                obj = new MemberInvite();
                if (list.IsColumnPresent("MemberInviteID")) { obj._memberInviteID = (int)dr["MemberInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberInvites
        /// </summary>
        public static List<MemberInvite> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberInvite> arr = new List<MemberInvite>();

            MemberInvite obj;

            while (dr.Read())
            {
                obj = new MemberInvite();
                if (list.IsColumnPresent("MemberInviteID")) { obj._memberInviteID = (int)dr["MemberInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberInvite object or in the case of a zero MemberInviteID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberInvite");

            db.AddInParameter(dbCommand, "MemberInviteID", DbType.Int32, MemberInviteID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "CustomMessage", DbType.String, CustomMessage);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberInviteID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberMusic in the system
    /// </summary>
    public partial class MemberMusic
    {
        #region Fields and Properties

        private int _memberMusicID;		//
        private int _memberID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberMusicID
        {
            get { return _memberMusicID; }
            set { _memberMusicID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberMusic()
        {

        }

        /// <summary>
        /// Instanciates a MemberMusic object from the database via the MemberMusicID
        /// </summary>
        public MemberMusic(int MemberMusicID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberMusicByMemberMusicID");
            db.AddInParameter(dbCommand, "MemberMusicID", DbType.Int32, MemberMusicID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberMusicID")) { this._memberMusicID = (int)dr["MemberMusicID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }

                }
                else
                {
                    throw new Exception("There is no MemberMusic in the database with the ID " + MemberMusicID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberMusic in the database 
        /// </summary>
        public static List<MemberMusic> GetAllMemberMusic()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberMusic");

            List<MemberMusic> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberMusics
        /// </summary>
        public static List<MemberMusic> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberMusic> arr = new List<MemberMusic>();

            MemberMusic obj;

            while (dr.Read())
            {
                obj = new MemberMusic();
                if (list.IsColumnPresent("MemberMusicID")) { obj._memberMusicID = (int)dr["MemberMusicID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberMusics
        /// </summary>
        public static List<MemberMusic> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberMusic> arr = new List<MemberMusic>();

            MemberMusic obj;

            while (dr.Read())
            {
                obj = new MemberMusic();
                if (list.IsColumnPresent("MemberMusicID")) { obj._memberMusicID = (int)dr["MemberMusicID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberMusic object or in the case of a zero MemberMusicID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberMusic");

            db.AddInParameter(dbCommand, "MemberMusicID", DbType.Int32, MemberMusicID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberMusicID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberOnline in the system
    /// </summary>
    public partial class MemberOnline
    {
        #region Fields and Properties

        private int _memberOnlineID;		//The primary key of the MemberOnline
        private int _memberID;		//The member who logged in
        private Guid _temporaryPassKey;		//Unique Key validated for session (used for validating video streams)
        private DateTime _dTLoggedIn = new DateTime(1900, 1, 1);		//When the member logged in

        Database db;
        /// <summary>
        /// The primary key of the MemberOnline
        /// </summary>
        public int MemberOnlineID
        {
            get { return _memberOnlineID; }
            set { _memberOnlineID = value; }
        }

        /// <summary>
        /// The member who logged in
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Unique Key validated for session (used for validating video streams)
        /// </summary>
        public Guid TemporaryPassKey
        {
            get { return _temporaryPassKey; }
            set { _temporaryPassKey = value; }
        }

        /// <summary>
        /// When the member logged in
        /// </summary>
        public DateTime DTLoggedIn
        {
            get { return _dTLoggedIn; }
            set { _dTLoggedIn = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberOnline()
        {

        }

        /// <summary>
        /// Instanciates a MemberOnline object from the database via the MemberOnlineID
        /// </summary>
        public MemberOnline(int MemberOnlineID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberOnlineByMemberOnlineID");
            db.AddInParameter(dbCommand, "MemberOnlineID", DbType.Int32, MemberOnlineID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberOnlineID")) { this._memberOnlineID = (int)dr["MemberOnlineID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("TemporaryPassKey")) { this._temporaryPassKey = (Guid)dr["TemporaryPassKey"]; }
                    if (list.IsColumnPresent("DTLoggedIn")) { this._dTLoggedIn = (DateTime)dr["DTLoggedIn"]; }

                }
                else
                {
                    throw new Exception("There is no MemberOnline in the database with the ID " + MemberOnlineID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberOnline in the database 
        /// </summary>
        public static List<MemberOnline> GetAllMemberOnline()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberOnline");

            List<MemberOnline> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberOnlines
        /// </summary>
        public static List<MemberOnline> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberOnline> arr = new List<MemberOnline>();

            MemberOnline obj;

            while (dr.Read())
            {
                obj = new MemberOnline();
                if (list.IsColumnPresent("MemberOnlineID")) { obj._memberOnlineID = (int)dr["MemberOnlineID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TemporaryPassKey")) { obj._temporaryPassKey = (Guid)dr["TemporaryPassKey"]; }
                if (list.IsColumnPresent("DTLoggedIn")) { obj._dTLoggedIn = (DateTime)dr["DTLoggedIn"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberOnlines
        /// </summary>
        public static List<MemberOnline> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberOnline> arr = new List<MemberOnline>();

            MemberOnline obj;

            while (dr.Read())
            {
                obj = new MemberOnline();
                if (list.IsColumnPresent("MemberOnlineID")) { obj._memberOnlineID = (int)dr["MemberOnlineID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("TemporaryPassKey")) { obj._temporaryPassKey = (Guid)dr["TemporaryPassKey"]; }
                if (list.IsColumnPresent("DTLoggedIn")) { obj._dTLoggedIn = (DateTime)dr["DTLoggedIn"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberOnline object or in the case of a zero MemberOnlineID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberOnline");

            db.AddInParameter(dbCommand, "MemberOnlineID", DbType.Int32, MemberOnlineID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "TemporaryPassKey", DbType.Guid, TemporaryPassKey);
            db.AddInParameter(dbCommand, "DTLoggedIn", DbType.DateTime, DTLoggedIn);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberOnlineID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberProfile in the system
    /// </summary>
    public partial class MemberProfile
    {
        #region Fields and Properties

        private int _memberProfileID;		//
        private int _memberID;		//
        private int _numberOfViews;		//The Number of time the members profile has been viewed
        private int _numberOfPhotos;		//
        private int _numberOfVideos;		//
        private int _numberOfFriends;		//
        private int _profilePhotoResourceFile;		//
        private bool _reserializeXML;		//
        private int _defaultPhotoCollectionID;		//
        private string _tagLine = "";		//
        private string _homeTown = "";		//
        private string _books = "";		//
        private string _music = "";		//
        private string _movies = "";		//
        private string _myLife = "";		//
        private int _relationshipStatus;		//
        private int _otherHalfID;		//
        private string _mySpaceURL = "";		//
        private string _faceBookURL = "";		//
        private string _blogURL = "";		//
        private int _colorScheme;		//
        private string _blogFeedURL = "";		//
        private DateTime _dTLastUpdated = new DateTime(1900, 1, 1);		//
        private string _embeddedContent = "";		//
        private int _dayProfessionID;		//
        private int _nightProfessionID;		//
        private int _hobbyID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberProfileID
        {
            get { return _memberProfileID; }
            set { _memberProfileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The Number of time the members profile has been viewed
        /// </summary>
        public int NumberOfViews
        {
            get { return _numberOfViews; }
            set { _numberOfViews = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfPhotos
        {
            get { return _numberOfPhotos; }
            set { _numberOfPhotos = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfVideos
        {
            get { return _numberOfVideos; }
            set { _numberOfVideos = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfFriends
        {
            get { return _numberOfFriends; }
            set { _numberOfFriends = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ProfilePhotoResourceFile
        {
            get { return _profilePhotoResourceFile; }
            set { _profilePhotoResourceFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool ReserializeXML
        {
            get { return _reserializeXML; }
            set { _reserializeXML = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int DefaultPhotoCollectionID
        {
            get { return _defaultPhotoCollectionID; }
            set { _defaultPhotoCollectionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TagLine
        {
            get { return _tagLine; }
            set { _tagLine = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string HomeTown
        {
            get { return _homeTown; }
            set { _homeTown = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Books
        {
            get { return _books; }
            set { _books = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Music
        {
            get { return _music; }
            set { _music = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Movies
        {
            get { return _movies; }
            set { _movies = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MyLife
        {
            get { return _myLife; }
            set { _myLife = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int RelationshipStatus
        {
            get { return _relationshipStatus; }
            set { _relationshipStatus = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int OtherHalfID
        {
            get { return _otherHalfID; }
            set { _otherHalfID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string MySpaceURL
        {
            get { return _mySpaceURL; }
            set { _mySpaceURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FaceBookURL
        {
            get { return _faceBookURL; }
            set { _faceBookURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BlogURL
        {
            get { return _blogURL; }
            set { _blogURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ColorScheme
        {
            get { return _colorScheme; }
            set { _colorScheme = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string BlogFeedURL
        {
            get { return _blogFeedURL; }
            set { _blogFeedURL = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTLastUpdated
        {
            get { return _dTLastUpdated; }
            set { _dTLastUpdated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmbeddedContent
        {
            get { return _embeddedContent; }
            set { _embeddedContent = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int DayProfessionID
        {
            get { return _dayProfessionID; }
            set { _dayProfessionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NightProfessionID
        {
            get { return _nightProfessionID; }
            set { _nightProfessionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int HobbyID
        {
            get { return _hobbyID; }
            set { _hobbyID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberProfile()
        {

        }

        /// <summary>
        /// Instanciates a MemberProfile object from the database via the MemberProfileID
        /// </summary>
        public MemberProfile(int MemberProfileID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberProfileByMemberProfileID");
            db.AddInParameter(dbCommand, "MemberProfileID", DbType.Int32, MemberProfileID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberProfileID")) { this._memberProfileID = (int)dr["MemberProfileID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("NumberOfViews")) { this._numberOfViews = (int)dr["NumberOfViews"]; }
                    if (list.IsColumnPresent("NumberOfPhotos")) { this._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                    if (list.IsColumnPresent("NumberOfVideos")) { this._numberOfVideos = (int)dr["NumberOfVideos"]; }
                    if (list.IsColumnPresent("NumberOfFriends")) { this._numberOfFriends = (int)dr["NumberOfFriends"]; }
                    if (list.IsColumnPresent("ProfilePhotoResourceFile")) { this._profilePhotoResourceFile = (int)dr["ProfilePhotoResourceFile"]; }
                    if (list.IsColumnPresent("ReserializeXML")) { this._reserializeXML = (bool)dr["ReserializeXML"]; }
                    if (list.IsColumnPresent("DefaultPhotoCollectionID")) { this._defaultPhotoCollectionID = (int)dr["DefaultPhotoCollectionID"]; }
                    if (list.IsColumnPresent("TagLine")) { this._tagLine = (string)dr["TagLine"]; }
                    if (list.IsColumnPresent("HomeTown")) { this._homeTown = (string)dr["HomeTown"]; }
                    if (list.IsColumnPresent("Books")) { this._books = (string)dr["Books"]; }
                    if (list.IsColumnPresent("Music")) { this._music = (string)dr["Music"]; }
                    if (list.IsColumnPresent("Movies")) { this._movies = (string)dr["Movies"]; }
                    if (list.IsColumnPresent("MyLife")) { this._myLife = (string)dr["MyLife"]; }
                    if (list.IsColumnPresent("RelationshipStatus")) { this._relationshipStatus = (int)dr["RelationshipStatus"]; }
                    if (list.IsColumnPresent("OtherHalfID")) { this._otherHalfID = (int)dr["OtherHalfID"]; }
                    if (list.IsColumnPresent("MySpaceURL")) { this._mySpaceURL = (string)dr["MySpaceURL"]; }
                    if (list.IsColumnPresent("FaceBookURL")) { this._faceBookURL = (string)dr["FaceBookURL"]; }
                    if (list.IsColumnPresent("BlogURL")) { this._blogURL = (string)dr["BlogURL"]; }
                    if (list.IsColumnPresent("ColorScheme")) { this._colorScheme = (int)dr["ColorScheme"]; }
                    if (list.IsColumnPresent("BlogFeedURL")) { this._blogFeedURL = (string)dr["BlogFeedURL"]; }
                    if (list.IsColumnPresent("DTLastUpdated")) { this._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                    if (list.IsColumnPresent("EmbeddedContent")) { this._embeddedContent = (string)dr["EmbeddedContent"]; }
                    if (list.IsColumnPresent("DayProfessionID")) { this._dayProfessionID = (int)dr["DayProfessionID"]; }
                    if (list.IsColumnPresent("NightProfessionID")) { this._nightProfessionID = (int)dr["NightProfessionID"]; }
                    if (list.IsColumnPresent("HobbyID")) { this._hobbyID = (int)dr["HobbyID"]; }

                }
                else
                {
                    throw new Exception("There is no MemberProfile in the database with the ID " + MemberProfileID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberProfile in the database 
        /// </summary>
        public static List<MemberProfile> GetAllMemberProfile()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberProfile");

            List<MemberProfile> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberProfiles
        /// </summary>
        public static List<MemberProfile> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberProfile> arr = new List<MemberProfile>();

            MemberProfile obj;

            while (dr.Read())
            {
                obj = new MemberProfile();
                if (list.IsColumnPresent("MemberProfileID")) { obj._memberProfileID = (int)dr["MemberProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("NumberOfVideos")) { obj._numberOfVideos = (int)dr["NumberOfVideos"]; }
                if (list.IsColumnPresent("NumberOfFriends")) { obj._numberOfFriends = (int)dr["NumberOfFriends"]; }
                if (list.IsColumnPresent("ProfilePhotoResourceFile")) { obj._profilePhotoResourceFile = (int)dr["ProfilePhotoResourceFile"]; }
                if (list.IsColumnPresent("ReserializeXML")) { obj._reserializeXML = (bool)dr["ReserializeXML"]; }
                if (list.IsColumnPresent("DefaultPhotoCollectionID")) { obj._defaultPhotoCollectionID = (int)dr["DefaultPhotoCollectionID"]; }
                if (list.IsColumnPresent("TagLine")) { obj._tagLine = (string)dr["TagLine"]; }
                if (list.IsColumnPresent("HomeTown")) { obj._homeTown = (string)dr["HomeTown"]; }
                if (list.IsColumnPresent("Books")) { obj._books = (string)dr["Books"]; }
                if (list.IsColumnPresent("Music")) { obj._music = (string)dr["Music"]; }
                if (list.IsColumnPresent("Movies")) { obj._movies = (string)dr["Movies"]; }
                if (list.IsColumnPresent("MyLife")) { obj._myLife = (string)dr["MyLife"]; }
                if (list.IsColumnPresent("RelationshipStatus")) { obj._relationshipStatus = (int)dr["RelationshipStatus"]; }
                if (list.IsColumnPresent("OtherHalfID")) { obj._otherHalfID = (int)dr["OtherHalfID"]; }
                if (list.IsColumnPresent("MySpaceURL")) { obj._mySpaceURL = (string)dr["MySpaceURL"]; }
                if (list.IsColumnPresent("FaceBookURL")) { obj._faceBookURL = (string)dr["FaceBookURL"]; }
                if (list.IsColumnPresent("BlogURL")) { obj._blogURL = (string)dr["BlogURL"]; }
                if (list.IsColumnPresent("ColorScheme")) { obj._colorScheme = (int)dr["ColorScheme"]; }
                if (list.IsColumnPresent("BlogFeedURL")) { obj._blogFeedURL = (string)dr["BlogFeedURL"]; }
                if (list.IsColumnPresent("DTLastUpdated")) { obj._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                if (list.IsColumnPresent("EmbeddedContent")) { obj._embeddedContent = (string)dr["EmbeddedContent"]; }
                if (list.IsColumnPresent("DayProfessionID")) { obj._dayProfessionID = (int)dr["DayProfessionID"]; }
                if (list.IsColumnPresent("NightProfessionID")) { obj._nightProfessionID = (int)dr["NightProfessionID"]; }
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberProfiles
        /// </summary>
        public static List<MemberProfile> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberProfile> arr = new List<MemberProfile>();

            MemberProfile obj;

            while (dr.Read())
            {
                obj = new MemberProfile();
                if (list.IsColumnPresent("MemberProfileID")) { obj._memberProfileID = (int)dr["MemberProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("NumberOfVideos")) { obj._numberOfVideos = (int)dr["NumberOfVideos"]; }
                if (list.IsColumnPresent("NumberOfFriends")) { obj._numberOfFriends = (int)dr["NumberOfFriends"]; }
                if (list.IsColumnPresent("ProfilePhotoResourceFile")) { obj._profilePhotoResourceFile = (int)dr["ProfilePhotoResourceFile"]; }
                if (list.IsColumnPresent("ReserializeXML")) { obj._reserializeXML = (bool)dr["ReserializeXML"]; }
                if (list.IsColumnPresent("DefaultPhotoCollectionID")) { obj._defaultPhotoCollectionID = (int)dr["DefaultPhotoCollectionID"]; }
                if (list.IsColumnPresent("TagLine")) { obj._tagLine = (string)dr["TagLine"]; }
                if (list.IsColumnPresent("HomeTown")) { obj._homeTown = (string)dr["HomeTown"]; }
                if (list.IsColumnPresent("Books")) { obj._books = (string)dr["Books"]; }
                if (list.IsColumnPresent("Music")) { obj._music = (string)dr["Music"]; }
                if (list.IsColumnPresent("Movies")) { obj._movies = (string)dr["Movies"]; }
                if (list.IsColumnPresent("MyLife")) { obj._myLife = (string)dr["MyLife"]; }
                if (list.IsColumnPresent("RelationshipStatus")) { obj._relationshipStatus = (int)dr["RelationshipStatus"]; }
                if (list.IsColumnPresent("OtherHalfID")) { obj._otherHalfID = (int)dr["OtherHalfID"]; }
                if (list.IsColumnPresent("MySpaceURL")) { obj._mySpaceURL = (string)dr["MySpaceURL"]; }
                if (list.IsColumnPresent("FaceBookURL")) { obj._faceBookURL = (string)dr["FaceBookURL"]; }
                if (list.IsColumnPresent("BlogURL")) { obj._blogURL = (string)dr["BlogURL"]; }
                if (list.IsColumnPresent("ColorScheme")) { obj._colorScheme = (int)dr["ColorScheme"]; }
                if (list.IsColumnPresent("BlogFeedURL")) { obj._blogFeedURL = (string)dr["BlogFeedURL"]; }
                if (list.IsColumnPresent("DTLastUpdated")) { obj._dTLastUpdated = (DateTime)dr["DTLastUpdated"]; }
                if (list.IsColumnPresent("EmbeddedContent")) { obj._embeddedContent = (string)dr["EmbeddedContent"]; }
                if (list.IsColumnPresent("DayProfessionID")) { obj._dayProfessionID = (int)dr["DayProfessionID"]; }
                if (list.IsColumnPresent("NightProfessionID")) { obj._nightProfessionID = (int)dr["NightProfessionID"]; }
                if (list.IsColumnPresent("HobbyID")) { obj._hobbyID = (int)dr["HobbyID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberProfile object or in the case of a zero MemberProfileID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberProfile");

            db.AddInParameter(dbCommand, "MemberProfileID", DbType.Int32, MemberProfileID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "NumberOfViews", DbType.Int32, NumberOfViews);
            db.AddInParameter(dbCommand, "NumberOfPhotos", DbType.Int32, NumberOfPhotos);
            db.AddInParameter(dbCommand, "NumberOfVideos", DbType.Int32, NumberOfVideos);
            db.AddInParameter(dbCommand, "NumberOfFriends", DbType.Int32, NumberOfFriends);
            db.AddInParameter(dbCommand, "ProfilePhotoResourceFile", DbType.Int32, ProfilePhotoResourceFile);
            db.AddInParameter(dbCommand, "ReserializeXML", DbType.Boolean, ReserializeXML);
            db.AddInParameter(dbCommand, "DefaultPhotoCollectionID", DbType.Int32, DefaultPhotoCollectionID);
            db.AddInParameter(dbCommand, "TagLine", DbType.String, TagLine);
            db.AddInParameter(dbCommand, "HomeTown", DbType.String, HomeTown);
            db.AddInParameter(dbCommand, "Books", DbType.String, Books);
            db.AddInParameter(dbCommand, "Music", DbType.String, Music);
            db.AddInParameter(dbCommand, "Movies", DbType.String, Movies);
            db.AddInParameter(dbCommand, "MyLife", DbType.String, MyLife);
            db.AddInParameter(dbCommand, "RelationshipStatus", DbType.Int32, RelationshipStatus);
            db.AddInParameter(dbCommand, "OtherHalfID", DbType.Int32, OtherHalfID);
            db.AddInParameter(dbCommand, "MySpaceURL", DbType.String, MySpaceURL);
            db.AddInParameter(dbCommand, "FaceBookURL", DbType.String, FaceBookURL);
            db.AddInParameter(dbCommand, "BlogURL", DbType.String, BlogURL);
            db.AddInParameter(dbCommand, "ColorScheme", DbType.Int32, ColorScheme);
            db.AddInParameter(dbCommand, "BlogFeedURL", DbType.String, BlogFeedURL);
            db.AddInParameter(dbCommand, "DTLastUpdated", DbType.DateTime, DTLastUpdated);
            db.AddInParameter(dbCommand, "EmbeddedContent", DbType.String, EmbeddedContent);
            db.AddInParameter(dbCommand, "DayProfessionID", DbType.Int32, DayProfessionID);
            db.AddInParameter(dbCommand, "NightProfessionID", DbType.Int32, NightProfessionID);
            db.AddInParameter(dbCommand, "HobbyID", DbType.Int32, HobbyID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberProfileID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberSettings in the system
    /// </summary>
    public partial class MemberSettings
    {
        #region Fields and Properties

        private int _memberSettingsID;		//
        private int _memberID;		//
        private bool _notifyOnNewMessage;		//Notifty the Member via email when another member posts a message
        private bool _notifyOnAAFComment;		//Notifty the Member via email when someone posts an AAF comment
        private bool _notifyOnFriendRequest;		//Notifty the Member via email when a nother member has made a friend request
        private bool _notifyOnSubscriberEvent;		//Notifty the Member via email when a Subsciber event occurs
        private bool _notifyOnNewsLetter;		//Notifty the Member via email with a newsletter
        private bool _notifyNewProfileComment;		//
        private bool _notifyNewPhotoComment;		//
        private bool _notifyNewVideoComment;		//
        private bool _notifyOnNewVideo;		//
        private bool _notifyOnNewBlog;		//
        private bool _notifyOnThreadReply;		//
        private int _autoLoadChatMode;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberSettingsID
        {
            get { return _memberSettingsID; }
            set { _memberSettingsID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Notifty the Member via email when another member posts a message
        /// </summary>
        public bool NotifyOnNewMessage
        {
            get { return _notifyOnNewMessage; }
            set { _notifyOnNewMessage = value; }
        }

        /// <summary>
        /// Notifty the Member via email when someone posts an AAF comment
        /// </summary>
        public bool NotifyOnAAFComment
        {
            get { return _notifyOnAAFComment; }
            set { _notifyOnAAFComment = value; }
        }

        /// <summary>
        /// Notifty the Member via email when a nother member has made a friend request
        /// </summary>
        public bool NotifyOnFriendRequest
        {
            get { return _notifyOnFriendRequest; }
            set { _notifyOnFriendRequest = value; }
        }

        /// <summary>
        /// Notifty the Member via email when a Subsciber event occurs
        /// </summary>
        public bool NotifyOnSubscriberEvent
        {
            get { return _notifyOnSubscriberEvent; }
            set { _notifyOnSubscriberEvent = value; }
        }

        /// <summary>
        /// Notifty the Member via email with a newsletter
        /// </summary>
        public bool NotifyOnNewsLetter
        {
            get { return _notifyOnNewsLetter; }
            set { _notifyOnNewsLetter = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyNewProfileComment
        {
            get { return _notifyNewProfileComment; }
            set { _notifyNewProfileComment = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyNewPhotoComment
        {
            get { return _notifyNewPhotoComment; }
            set { _notifyNewPhotoComment = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyNewVideoComment
        {
            get { return _notifyNewVideoComment; }
            set { _notifyNewVideoComment = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyOnNewVideo
        {
            get { return _notifyOnNewVideo; }
            set { _notifyOnNewVideo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyOnNewBlog
        {
            get { return _notifyOnNewBlog; }
            set { _notifyOnNewBlog = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool NotifyOnThreadReply
        {
            get { return _notifyOnThreadReply; }
            set { _notifyOnThreadReply = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int AutoLoadChatMode
        {
            get { return _autoLoadChatMode; }
            set { _autoLoadChatMode = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberSettings()
        {

        }

        /// <summary>
        /// Instanciates a MemberSettings object from the database via the MemberSettingsID
        /// </summary>
        public MemberSettings(int MemberSettingsID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberSettingsByMemberSettingsID");
            db.AddInParameter(dbCommand, "MemberSettingsID", DbType.Int32, MemberSettingsID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberSettingsID")) { this._memberSettingsID = (int)dr["MemberSettingsID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("NotifyOnNewMessage")) { this._notifyOnNewMessage = (bool)dr["NotifyOnNewMessage"]; }
                    if (list.IsColumnPresent("NotifyOnAAFComment")) { this._notifyOnAAFComment = (bool)dr["NotifyOnAAFComment"]; }
                    if (list.IsColumnPresent("NotifyOnFriendRequest")) { this._notifyOnFriendRequest = (bool)dr["NotifyOnFriendRequest"]; }
                    if (list.IsColumnPresent("NotifyOnSubscriberEvent")) { this._notifyOnSubscriberEvent = (bool)dr["NotifyOnSubscriberEvent"]; }
                    if (list.IsColumnPresent("NotifyOnNewsLetter")) { this._notifyOnNewsLetter = (bool)dr["NotifyOnNewsLetter"]; }
                    if (list.IsColumnPresent("NotifyNewProfileComment")) { this._notifyNewProfileComment = (bool)dr["NotifyNewProfileComment"]; }
                    if (list.IsColumnPresent("NotifyNewPhotoComment")) { this._notifyNewPhotoComment = (bool)dr["NotifyNewPhotoComment"]; }
                    if (list.IsColumnPresent("NotifyNewVideoComment")) { this._notifyNewVideoComment = (bool)dr["NotifyNewVideoComment"]; }
                    if (list.IsColumnPresent("NotifyOnNewVideo")) { this._notifyOnNewVideo = (bool)dr["NotifyOnNewVideo"]; }
                    if (list.IsColumnPresent("NotifyOnNewBlog")) { this._notifyOnNewBlog = (bool)dr["NotifyOnNewBlog"]; }
                    if (list.IsColumnPresent("NotifyOnThreadReply")) { this._notifyOnThreadReply = (bool)dr["NotifyOnThreadReply"]; }
                    if (list.IsColumnPresent("AutoLoadChatMode")) { this._autoLoadChatMode = (int)dr["AutoLoadChatMode"]; }

                }
                else
                {
                    throw new Exception("There is no MemberSettings in the database with the ID " + MemberSettingsID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberSettings in the database 
        /// </summary>
        public static List<MemberSettings> GetAllMemberSettings()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberSettings");

            List<MemberSettings> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberSettingss
        /// </summary>
        public static List<MemberSettings> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberSettings> arr = new List<MemberSettings>();

            MemberSettings obj;

            while (dr.Read())
            {
                obj = new MemberSettings();
                if (list.IsColumnPresent("MemberSettingsID")) { obj._memberSettingsID = (int)dr["MemberSettingsID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("NotifyOnNewMessage")) { obj._notifyOnNewMessage = (bool)dr["NotifyOnNewMessage"]; }
                if (list.IsColumnPresent("NotifyOnAAFComment")) { obj._notifyOnAAFComment = (bool)dr["NotifyOnAAFComment"]; }
                if (list.IsColumnPresent("NotifyOnFriendRequest")) { obj._notifyOnFriendRequest = (bool)dr["NotifyOnFriendRequest"]; }
                if (list.IsColumnPresent("NotifyOnSubscriberEvent")) { obj._notifyOnSubscriberEvent = (bool)dr["NotifyOnSubscriberEvent"]; }
                if (list.IsColumnPresent("NotifyOnNewsLetter")) { obj._notifyOnNewsLetter = (bool)dr["NotifyOnNewsLetter"]; }
                if (list.IsColumnPresent("NotifyNewProfileComment")) { obj._notifyNewProfileComment = (bool)dr["NotifyNewProfileComment"]; }
                if (list.IsColumnPresent("NotifyNewPhotoComment")) { obj._notifyNewPhotoComment = (bool)dr["NotifyNewPhotoComment"]; }
                if (list.IsColumnPresent("NotifyNewVideoComment")) { obj._notifyNewVideoComment = (bool)dr["NotifyNewVideoComment"]; }
                if (list.IsColumnPresent("NotifyOnNewVideo")) { obj._notifyOnNewVideo = (bool)dr["NotifyOnNewVideo"]; }
                if (list.IsColumnPresent("NotifyOnNewBlog")) { obj._notifyOnNewBlog = (bool)dr["NotifyOnNewBlog"]; }
                if (list.IsColumnPresent("NotifyOnThreadReply")) { obj._notifyOnThreadReply = (bool)dr["NotifyOnThreadReply"]; }
                if (list.IsColumnPresent("AutoLoadChatMode")) { obj._autoLoadChatMode = (int)dr["AutoLoadChatMode"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberSettingss
        /// </summary>
        public static List<MemberSettings> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberSettings> arr = new List<MemberSettings>();

            MemberSettings obj;

            while (dr.Read())
            {
                obj = new MemberSettings();
                if (list.IsColumnPresent("MemberSettingsID")) { obj._memberSettingsID = (int)dr["MemberSettingsID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("NotifyOnNewMessage")) { obj._notifyOnNewMessage = (bool)dr["NotifyOnNewMessage"]; }
                if (list.IsColumnPresent("NotifyOnAAFComment")) { obj._notifyOnAAFComment = (bool)dr["NotifyOnAAFComment"]; }
                if (list.IsColumnPresent("NotifyOnFriendRequest")) { obj._notifyOnFriendRequest = (bool)dr["NotifyOnFriendRequest"]; }
                if (list.IsColumnPresent("NotifyOnSubscriberEvent")) { obj._notifyOnSubscriberEvent = (bool)dr["NotifyOnSubscriberEvent"]; }
                if (list.IsColumnPresent("NotifyOnNewsLetter")) { obj._notifyOnNewsLetter = (bool)dr["NotifyOnNewsLetter"]; }
                if (list.IsColumnPresent("NotifyNewProfileComment")) { obj._notifyNewProfileComment = (bool)dr["NotifyNewProfileComment"]; }
                if (list.IsColumnPresent("NotifyNewPhotoComment")) { obj._notifyNewPhotoComment = (bool)dr["NotifyNewPhotoComment"]; }
                if (list.IsColumnPresent("NotifyNewVideoComment")) { obj._notifyNewVideoComment = (bool)dr["NotifyNewVideoComment"]; }
                if (list.IsColumnPresent("NotifyOnNewVideo")) { obj._notifyOnNewVideo = (bool)dr["NotifyOnNewVideo"]; }
                if (list.IsColumnPresent("NotifyOnNewBlog")) { obj._notifyOnNewBlog = (bool)dr["NotifyOnNewBlog"]; }
                if (list.IsColumnPresent("NotifyOnThreadReply")) { obj._notifyOnThreadReply = (bool)dr["NotifyOnThreadReply"]; }
                if (list.IsColumnPresent("AutoLoadChatMode")) { obj._autoLoadChatMode = (int)dr["AutoLoadChatMode"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberSettings object or in the case of a zero MemberSettingsID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberSettings");

            db.AddInParameter(dbCommand, "MemberSettingsID", DbType.Int32, MemberSettingsID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "NotifyOnNewMessage", DbType.Boolean, NotifyOnNewMessage);
            db.AddInParameter(dbCommand, "NotifyOnAAFComment", DbType.Boolean, NotifyOnAAFComment);
            db.AddInParameter(dbCommand, "NotifyOnFriendRequest", DbType.Boolean, NotifyOnFriendRequest);
            db.AddInParameter(dbCommand, "NotifyOnSubscriberEvent", DbType.Boolean, NotifyOnSubscriberEvent);
            db.AddInParameter(dbCommand, "NotifyOnNewsLetter", DbType.Boolean, NotifyOnNewsLetter);
            db.AddInParameter(dbCommand, "NotifyNewProfileComment", DbType.Boolean, NotifyNewProfileComment);
            db.AddInParameter(dbCommand, "NotifyNewPhotoComment", DbType.Boolean, NotifyNewPhotoComment);
            db.AddInParameter(dbCommand, "NotifyNewVideoComment", DbType.Boolean, NotifyNewVideoComment);
            db.AddInParameter(dbCommand, "NotifyOnNewVideo", DbType.Boolean, NotifyOnNewVideo);
            db.AddInParameter(dbCommand, "NotifyOnNewBlog", DbType.Boolean, NotifyOnNewBlog);
            db.AddInParameter(dbCommand, "NotifyOnThreadReply", DbType.Boolean, NotifyOnThreadReply);
            db.AddInParameter(dbCommand, "AutoLoadChatMode", DbType.Int32, AutoLoadChatMode);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberSettingsID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberStatus in the system
    /// </summary>
    public partial class MemberStatus
    {
        #region Fields and Properties

        private int _memberStatusID;		//
        private int _memberID;		//
        private int _status;		//
        private string _adminNotes = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberStatusID
        {
            get { return _memberStatusID; }
            set { _memberStatusID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string AdminNotes
        {
            get { return _adminNotes; }
            set { _adminNotes = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberStatus()
        {

        }

        /// <summary>
        /// Instanciates a MemberStatus object from the database via the MemberStatusID
        /// </summary>
        public MemberStatus(int MemberStatusID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberStatusByMemberStatusID");
            db.AddInParameter(dbCommand, "MemberStatusID", DbType.Int32, MemberStatusID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberStatusID")) { this._memberStatusID = (int)dr["MemberStatusID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }
                    if (list.IsColumnPresent("AdminNotes")) { this._adminNotes = (string)dr["AdminNotes"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no MemberStatus in the database with the ID " + MemberStatusID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberStatus in the database 
        /// </summary>
        public static List<MemberStatus> GetAllMemberStatus()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberStatus");

            List<MemberStatus> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberStatuss
        /// </summary>
        public static List<MemberStatus> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberStatus> arr = new List<MemberStatus>();

            MemberStatus obj;

            while (dr.Read())
            {
                obj = new MemberStatus();
                if (list.IsColumnPresent("MemberStatusID")) { obj._memberStatusID = (int)dr["MemberStatusID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("AdminNotes")) { obj._adminNotes = (string)dr["AdminNotes"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberStatuss
        /// </summary>
        public static List<MemberStatus> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberStatus> arr = new List<MemberStatus>();

            MemberStatus obj;

            while (dr.Read())
            {
                obj = new MemberStatus();
                if (list.IsColumnPresent("MemberStatusID")) { obj._memberStatusID = (int)dr["MemberStatusID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("AdminNotes")) { obj._adminNotes = (string)dr["AdminNotes"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberStatus object or in the case of a zero MemberStatusID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberStatus");

            db.AddInParameter(dbCommand, "MemberStatusID", DbType.Int32, MemberStatusID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);
            db.AddInParameter(dbCommand, "AdminNotes", DbType.String, AdminNotes);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberStatusID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MemberStatusText in the system
    /// </summary>
    public partial class MemberStatusText
    {
        #region Fields and Properties

        private int _memberStatusTextID;		//
        private int _memberID;		//
        private string _statusText = "";		//
        private DateTime _updatedDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int MemberStatusTextID
        {
            get { return _memberStatusTextID; }
            set { _memberStatusTextID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string StatusText
        {
            get { return _statusText; }
            set { _statusText = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime UpdatedDT
        {
            get { return _updatedDT; }
            set { _updatedDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MemberStatusText()
        {

        }

        /// <summary>
        /// Instanciates a MemberStatusText object from the database via the MemberStatusTextID
        /// </summary>
        public MemberStatusText(int MemberStatusTextID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMemberStatusTextByMemberStatusTextID");
            db.AddInParameter(dbCommand, "MemberStatusTextID", DbType.Int32, MemberStatusTextID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MemberStatusTextID")) { this._memberStatusTextID = (int)dr["MemberStatusTextID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("StatusText")) { this._statusText = (string)dr["StatusText"]; }
                    if (list.IsColumnPresent("UpdatedDT")) { this._updatedDT = (DateTime)dr["UpdatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no MemberStatusText in the database with the ID " + MemberStatusTextID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MemberStatusText in the database 
        /// </summary>
        public static List<MemberStatusText> GetAllMemberStatusText()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMemberStatusText");

            List<MemberStatusText> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberStatusTexts
        /// </summary>
        public static List<MemberStatusText> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberStatusText> arr = new List<MemberStatusText>();

            MemberStatusText obj;

            while (dr.Read())
            {
                obj = new MemberStatusText();
                if (list.IsColumnPresent("MemberStatusTextID")) { obj._memberStatusTextID = (int)dr["MemberStatusTextID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("StatusText")) { obj._statusText = (string)dr["StatusText"]; }
                if (list.IsColumnPresent("UpdatedDT")) { obj._updatedDT = (DateTime)dr["UpdatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MemberStatusTexts
        /// </summary>
        public static List<MemberStatusText> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MemberStatusText> arr = new List<MemberStatusText>();

            MemberStatusText obj;

            while (dr.Read())
            {
                obj = new MemberStatusText();
                if (list.IsColumnPresent("MemberStatusTextID")) { obj._memberStatusTextID = (int)dr["MemberStatusTextID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("StatusText")) { obj._statusText = (string)dr["StatusText"]; }
                if (list.IsColumnPresent("UpdatedDT")) { obj._updatedDT = (DateTime)dr["UpdatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MemberStatusText object or in the case of a zero MemberStatusTextID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMemberStatusText");

            db.AddInParameter(dbCommand, "MemberStatusTextID", DbType.Int32, MemberStatusTextID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "StatusText", DbType.String, StatusText);
            db.AddInParameter(dbCommand, "UpdatedDT", DbType.DateTime, UpdatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MemberStatusTextID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Message in the system
    /// </summary>
    public partial class Message
    {
        /// <summary>
        /// The GeoMessageMemberInfo objects for this Message
        /// </summary>
        public List<GeoMessageMemberInfo> GeoMessageMemberInfo
        {
            get
            {
                if (geoMessageMemberInfo == null)
                    this.geoMessageMemberInfo = this.GetGeoMessageMemberInfoByMessageID();
                return geoMessageMemberInfo;
            }
            set { geoMessageMemberInfo = value; }
        }


        #region Fields and Properties

        private int _messageID;		//the primary key id of the message
        private string _webMessageID = "";		//The message id that can safely go to web browser
        private int _videoMessageResourceFileID;		//The optional Resource file containing a Video Message
        private string _videoMessageToken = "";		//Temporary token for Video Message
        private int _memberIDFrom;		//The person sending the message
        private int _memberIDTo;		//The person receiving the message
        private string _externalEmailTo = "";		//
        private int _inReplyToID;		//The messageID that this message was in reply to
        private string _body = "";		//The message text body
        private bool _isRead;		//Has the mesage been read?
        private bool _isFetched;		//Has the message been fetched from the server (via AJAX or Page method)
        private bool _isSentTrash;		//
        private bool _isTrash;		//
        private bool _isDeleted;		//Is the message deleted?
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private bool _isSentDeleted;		//
        private string _passKey = "";		//
        private List<GeoMessageMemberInfo> geoMessageMemberInfo;		// Foreign object

        Database db;
        /// <summary>
        /// the primary key id of the message
        /// </summary>
        public int MessageID
        {
            get { return _messageID; }
            set { _messageID = value; }
        }

        /// <summary>
        /// The message id that can safely go to web browser
        /// </summary>
        public string WebMessageID
        {
            get { return _webMessageID; }
            set { _webMessageID = value; }
        }

        /// <summary>
        /// The optional Resource file containing a Video Message
        /// </summary>
        public int VideoMessageResourceFileID
        {
            get { return _videoMessageResourceFileID; }
            set { _videoMessageResourceFileID = value; }
        }

        /// <summary>
        /// Temporary token for Video Message
        /// </summary>
        public string VideoMessageToken
        {
            get { return _videoMessageToken; }
            set { _videoMessageToken = value; }
        }

        /// <summary>
        /// The person sending the message
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// The person receiving the message
        /// </summary>
        public int MemberIDTo
        {
            get { return _memberIDTo; }
            set { _memberIDTo = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ExternalEmailTo
        {
            get { return _externalEmailTo; }
            set { _externalEmailTo = value; }
        }

        /// <summary>
        /// The messageID that this message was in reply to
        /// </summary>
        public int InReplyToID
        {
            get { return _inReplyToID; }
            set { _inReplyToID = value; }
        }

        /// <summary>
        /// The message text body
        /// </summary>
        public string Body
        {
            get { return _body; }
            set { _body = value; }
        }

        /// <summary>
        /// Has the mesage been read?
        /// </summary>
        public bool IsRead
        {
            get { return _isRead; }
            set { _isRead = value; }
        }

        /// <summary>
        /// Has the message been fetched from the server (via AJAX or Page method)
        /// </summary>
        public bool IsFetched
        {
            get { return _isFetched; }
            set { _isFetched = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsSentTrash
        {
            get { return _isSentTrash; }
            set { _isSentTrash = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsTrash
        {
            get { return _isTrash; }
            set { _isTrash = value; }
        }

        /// <summary>
        /// Is the message deleted?
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsSentDeleted
        {
            get { return _isSentDeleted; }
            set { _isSentDeleted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PassKey
        {
            get { return _passKey; }
            set { _passKey = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Message()
        {

        }

        /// <summary>
        /// Instanciates a Message object from the database via the MessageID
        /// </summary>
        public Message(int MessageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMessageByMessageID");
            db.AddInParameter(dbCommand, "MessageID", DbType.Int32, MessageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("MessageID")) { this._messageID = (int)dr["MessageID"]; }
                    if (list.IsColumnPresent("WebMessageID")) { this._webMessageID = (string)dr["WebMessageID"]; }
                    if (list.IsColumnPresent("VideoMessageResourceFileID")) { this._videoMessageResourceFileID = (int)dr["VideoMessageResourceFileID"]; }
                    if (list.IsColumnPresent("VideoMessageToken")) { this._videoMessageToken = (string)dr["VideoMessageToken"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("MemberIDTo")) { this._memberIDTo = (int)dr["MemberIDTo"]; }
                    if (list.IsColumnPresent("ExternalEmailTo")) { this._externalEmailTo = (string)dr["ExternalEmailTo"]; }
                    if (list.IsColumnPresent("InReplyToID")) { this._inReplyToID = (int)dr["InReplyToID"]; }
                    if (list.IsColumnPresent("Body")) { this._body = (string)dr["Body"]; }
                    if (list.IsColumnPresent("IsRead")) { this._isRead = (bool)dr["IsRead"]; }
                    if (list.IsColumnPresent("IsFetched")) { this._isFetched = (bool)dr["IsFetched"]; }
                    if (list.IsColumnPresent("IsSentTrash")) { this._isSentTrash = (bool)dr["IsSentTrash"]; }
                    if (list.IsColumnPresent("IsTrash")) { this._isTrash = (bool)dr["IsTrash"]; }
                    if (list.IsColumnPresent("IsDeleted")) { this._isDeleted = (bool)dr["IsDeleted"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }
                    if (list.IsColumnPresent("IsSentDeleted")) { this._isSentDeleted = (bool)dr["IsSentDeleted"]; }
                    if (list.IsColumnPresent("PassKey")) { this._passKey = (string)dr["PassKey"]; }

                }
                else
                {
                    throw new Exception("There is no Message in the database with the ID " + MessageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Message in the database 
        /// </summary>
        public static List<Message> GetAllMessage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMessage");

            List<Message> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Messages
        /// </summary>
        public static List<Message> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Message> arr = new List<Message>();

            Message obj;

            while (dr.Read())
            {
                obj = new Message();
                if (list.IsColumnPresent("MessageID")) { obj._messageID = (int)dr["MessageID"]; }
                if (list.IsColumnPresent("WebMessageID")) { obj._webMessageID = (string)dr["WebMessageID"]; }
                if (list.IsColumnPresent("VideoMessageResourceFileID")) { obj._videoMessageResourceFileID = (int)dr["VideoMessageResourceFileID"]; }
                if (list.IsColumnPresent("VideoMessageToken")) { obj._videoMessageToken = (string)dr["VideoMessageToken"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("ExternalEmailTo")) { obj._externalEmailTo = (string)dr["ExternalEmailTo"]; }
                if (list.IsColumnPresent("InReplyToID")) { obj._inReplyToID = (int)dr["InReplyToID"]; }
                if (list.IsColumnPresent("Body")) { obj._body = (string)dr["Body"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("IsFetched")) { obj._isFetched = (bool)dr["IsFetched"]; }
                if (list.IsColumnPresent("IsSentTrash")) { obj._isSentTrash = (bool)dr["IsSentTrash"]; }
                if (list.IsColumnPresent("IsTrash")) { obj._isTrash = (bool)dr["IsTrash"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("IsSentDeleted")) { obj._isSentDeleted = (bool)dr["IsSentDeleted"]; }
                if (list.IsColumnPresent("PassKey")) { obj._passKey = (string)dr["PassKey"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Messages
        /// </summary>
        public static List<Message> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Message> arr = new List<Message>();

            Message obj;

            while (dr.Read())
            {
                obj = new Message();
                if (list.IsColumnPresent("MessageID")) { obj._messageID = (int)dr["MessageID"]; }
                if (list.IsColumnPresent("WebMessageID")) { obj._webMessageID = (string)dr["WebMessageID"]; }
                if (list.IsColumnPresent("VideoMessageResourceFileID")) { obj._videoMessageResourceFileID = (int)dr["VideoMessageResourceFileID"]; }
                if (list.IsColumnPresent("VideoMessageToken")) { obj._videoMessageToken = (string)dr["VideoMessageToken"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("ExternalEmailTo")) { obj._externalEmailTo = (string)dr["ExternalEmailTo"]; }
                if (list.IsColumnPresent("InReplyToID")) { obj._inReplyToID = (int)dr["InReplyToID"]; }
                if (list.IsColumnPresent("Body")) { obj._body = (string)dr["Body"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("IsFetched")) { obj._isFetched = (bool)dr["IsFetched"]; }
                if (list.IsColumnPresent("IsSentTrash")) { obj._isSentTrash = (bool)dr["IsSentTrash"]; }
                if (list.IsColumnPresent("IsTrash")) { obj._isTrash = (bool)dr["IsTrash"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("IsSentDeleted")) { obj._isSentDeleted = (bool)dr["IsSentDeleted"]; }
                if (list.IsColumnPresent("PassKey")) { obj._passKey = (string)dr["PassKey"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Message object or in the case of a zero MessageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMessage");

            db.AddInParameter(dbCommand, "MessageID", DbType.Int32, MessageID);
            db.AddInParameter(dbCommand, "WebMessageID", DbType.String, WebMessageID);
            db.AddInParameter(dbCommand, "VideoMessageResourceFileID", DbType.Int32, VideoMessageResourceFileID);
            db.AddInParameter(dbCommand, "VideoMessageToken", DbType.String, VideoMessageToken);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "MemberIDTo", DbType.Int32, MemberIDTo);
            db.AddInParameter(dbCommand, "ExternalEmailTo", DbType.String, ExternalEmailTo);
            db.AddInParameter(dbCommand, "InReplyToID", DbType.Int32, InReplyToID);
            db.AddInParameter(dbCommand, "Body", DbType.String, Body);
            db.AddInParameter(dbCommand, "IsRead", DbType.Boolean, IsRead);
            db.AddInParameter(dbCommand, "IsFetched", DbType.Boolean, IsFetched);
            db.AddInParameter(dbCommand, "IsSentTrash", DbType.Boolean, IsSentTrash);
            db.AddInParameter(dbCommand, "IsTrash", DbType.Boolean, IsTrash);
            db.AddInParameter(dbCommand, "IsDeleted", DbType.Boolean, IsDeleted);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);
            db.AddInParameter(dbCommand, "IsSentDeleted", DbType.Boolean, IsSentDeleted);
            db.AddInParameter(dbCommand, "PassKey", DbType.String, PassKey);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.MessageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the GeoMessageMemberInfo objects for this Message
        /// </summary>
        private List<GeoMessageMemberInfo> GetGeoMessageMemberInfoByMessageID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetGeoMessageMemberInfoByMessageID");
            db.AddInParameter(dbCommand, "MessageID", DbType.Int32, MessageID);

            List<GeoMessageMemberInfo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.GeoMessageMemberInfo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a MP3Upload in the system
    /// </summary>
    public partial class MP3Upload
    {
        #region Fields and Properties

        private int _mp3UploadID;		//
        private string _webMP3UploadID = "";		//
        private int _memberID;		//
        private string _title = "";		//
        private string _path = "";		//
        private DateTime _uploadedDT = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int Mp3UploadID
        {
            get { return _mp3UploadID; }
            set { _mp3UploadID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebMP3UploadID
        {
            get { return _webMP3UploadID; }
            set { _webMP3UploadID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Path
        {
            get { return _path; }
            set { _path = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime UploadedDT
        {
            get { return _uploadedDT; }
            set { _uploadedDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public MP3Upload()
        {

        }

        /// <summary>
        /// Instanciates a MP3Upload object from the database via the Mp3UploadID
        /// </summary>
        public MP3Upload(int Mp3UploadID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetMP3UploadByMp3UploadID");
            db.AddInParameter(dbCommand, "Mp3UploadID", DbType.Int32, Mp3UploadID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("Mp3UploadID")) { this._mp3UploadID = (int)dr["Mp3UploadID"]; }
                    if (list.IsColumnPresent("WebMP3UploadID")) { this._webMP3UploadID = (string)dr["WebMP3UploadID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Title")) { this._title = (string)dr["Title"]; }
                    if (list.IsColumnPresent("Path")) { this._path = (string)dr["Path"]; }
                    if (list.IsColumnPresent("UploadedDT")) { this._uploadedDT = (DateTime)dr["UploadedDT"]; }

                }
                else
                {
                    throw new Exception("There is no MP3Upload in the database with the ID " + Mp3UploadID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the MP3Upload in the database 
        /// </summary>
        public static List<MP3Upload> GetAllMP3Upload()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllMP3Upload");

            List<MP3Upload> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MP3Uploads
        /// </summary>
        public static List<MP3Upload> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MP3Upload> arr = new List<MP3Upload>();

            MP3Upload obj;

            while (dr.Read())
            {
                obj = new MP3Upload();
                if (list.IsColumnPresent("Mp3UploadID")) { obj._mp3UploadID = (int)dr["Mp3UploadID"]; }
                if (list.IsColumnPresent("WebMP3UploadID")) { obj._webMP3UploadID = (string)dr["WebMP3UploadID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("UploadedDT")) { obj._uploadedDT = (DateTime)dr["UploadedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of MP3Uploads
        /// </summary>
        public static List<MP3Upload> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<MP3Upload> arr = new List<MP3Upload>();

            MP3Upload obj;

            while (dr.Read())
            {
                obj = new MP3Upload();
                if (list.IsColumnPresent("Mp3UploadID")) { obj._mp3UploadID = (int)dr["Mp3UploadID"]; }
                if (list.IsColumnPresent("WebMP3UploadID")) { obj._webMP3UploadID = (string)dr["WebMP3UploadID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("UploadedDT")) { obj._uploadedDT = (DateTime)dr["UploadedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the MP3Upload object or in the case of a zero Mp3UploadID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveMP3Upload");

            db.AddInParameter(dbCommand, "Mp3UploadID", DbType.Int32, Mp3UploadID);
            db.AddInParameter(dbCommand, "WebMP3UploadID", DbType.String, WebMP3UploadID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Title", DbType.String, Title);
            db.AddInParameter(dbCommand, "Path", DbType.String, Path);
            db.AddInParameter(dbCommand, "UploadedDT", DbType.DateTime, UploadedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.Mp3UploadID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a NSpot in the system
    /// </summary>
    public partial class NSpot
    {
        /// <summary>
        /// The NSpotComment objects for this NSpot
        /// </summary>
        public List<NSpotComment> NSpotComment
        {
            get
            {
                if (nSpotComment == null)
                    this.nSpotComment = this.GetNSpotCommentByNSpotID();
                return nSpotComment;
            }
            set { nSpotComment = value; }
        }


        /// <summary>
        /// The NSpotMember objects for this NSpot
        /// </summary>
        public List<NSpotMember> NSpotMember
        {
            get
            {
                if (nSpotMember == null)
                    this.nSpotMember = this.GetNSpotMemberByNSpotID();
                return nSpotMember;
            }
            set { nSpotMember = value; }
        }


        /// <summary>
        /// The Vote objects for this NSpot
        /// </summary>
        public List<Vote> Vote
        {
            get
            {
                if (vote == null)
                    this.vote = this.GetVoteByNSpotID();
                return vote;
            }
            set { vote = value; }
        }


        #region Fields and Properties

        private int _nSpotID;		//
        private string _webNSpotID = "";		//
        private int _memberID;		//
        private int _photoResourceFileID;		//
        private int _thumbnailResourceFileID;		//
        private string _name = "";		//
        private string _description = "";		//
        private int _totalVoteScore;		//
        private int _numberOfViews;		//
        private int _numberOfComments;		//
        private int _numberOfMembers;		//
        private int _numberOfPhotos;		//
        private int _numberOfVideos;		//
        private bool _askBeforeJoining;		//
        private DateTime _startDateTime = new DateTime(1900, 1, 1);		//
        private DateTime _endDateTime = new DateTime(1900, 1, 1);		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private List<NSpotComment> nSpotComment;		// Foreign object
        private List<NSpotMember> nSpotMember;		// Foreign object
        private List<Vote> vote;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int NSpotID
        {
            get { return _nSpotID; }
            set { _nSpotID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebNSpotID
        {
            get { return _webNSpotID; }
            set { _webNSpotID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhotoResourceFileID
        {
            get { return _photoResourceFileID; }
            set { _photoResourceFileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ThumbnailResourceFileID
        {
            get { return _thumbnailResourceFileID; }
            set { _thumbnailResourceFileID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TotalVoteScore
        {
            get { return _totalVoteScore; }
            set { _totalVoteScore = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfViews
        {
            get { return _numberOfViews; }
            set { _numberOfViews = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfComments
        {
            get { return _numberOfComments; }
            set { _numberOfComments = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfMembers
        {
            get { return _numberOfMembers; }
            set { _numberOfMembers = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfPhotos
        {
            get { return _numberOfPhotos; }
            set { _numberOfPhotos = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfVideos
        {
            get { return _numberOfVideos; }
            set { _numberOfVideos = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool AskBeforeJoining
        {
            get { return _askBeforeJoining; }
            set { _askBeforeJoining = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime StartDateTime
        {
            get { return _startDateTime; }
            set { _startDateTime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime EndDateTime
        {
            get { return _endDateTime; }
            set { _endDateTime = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public NSpot()
        {

        }

        /// <summary>
        /// Instanciates a NSpot object from the database via the NSpotID
        /// </summary>
        public NSpot(int NSpotID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotByNSpotID");
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("NSpotID")) { this._nSpotID = (int)dr["NSpotID"]; }
                    if (list.IsColumnPresent("WebNSpotID")) { this._webNSpotID = (string)dr["WebNSpotID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PhotoResourceFileID")) { this._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                    if (list.IsColumnPresent("ThumbnailResourceFileID")) { this._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }
                    if (list.IsColumnPresent("TotalVoteScore")) { this._totalVoteScore = (int)dr["TotalVoteScore"]; }
                    if (list.IsColumnPresent("NumberOfViews")) { this._numberOfViews = (int)dr["NumberOfViews"]; }
                    if (list.IsColumnPresent("NumberOfComments")) { this._numberOfComments = (int)dr["NumberOfComments"]; }
                    if (list.IsColumnPresent("NumberOfMembers")) { this._numberOfMembers = (int)dr["NumberOfMembers"]; }
                    if (list.IsColumnPresent("NumberOfPhotos")) { this._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                    if (list.IsColumnPresent("NumberOfVideos")) { this._numberOfVideos = (int)dr["NumberOfVideos"]; }
                    if (list.IsColumnPresent("AskBeforeJoining")) { this._askBeforeJoining = (bool)dr["AskBeforeJoining"]; }
                    if (list.IsColumnPresent("StartDateTime")) { this._startDateTime = (DateTime)dr["StartDateTime"]; }
                    if (list.IsColumnPresent("EndDateTime")) { this._endDateTime = (DateTime)dr["EndDateTime"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no NSpot in the database with the ID " + NSpotID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the NSpot in the database 
        /// </summary>
        public static List<NSpot> GetAllNSpot()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllNSpot");

            List<NSpot> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile PhotoResourceFile { get; set; }
        public ResourceFile ThumbnailResourceFile { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpots
        /// </summary>
        public static List<NSpot> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpot> arr = new List<NSpot>();

            NSpot obj;

            while (dr.Read())
            {
                obj = new NSpot();
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("WebNSpotID")) { obj._webNSpotID = (string)dr["WebNSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("NumberOfMembers")) { obj._numberOfMembers = (int)dr["NumberOfMembers"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("NumberOfVideos")) { obj._numberOfVideos = (int)dr["NumberOfVideos"]; }
                if (list.IsColumnPresent("AskBeforeJoining")) { obj._askBeforeJoining = (bool)dr["AskBeforeJoining"]; }
                if (list.IsColumnPresent("StartDateTime")) { obj._startDateTime = (DateTime)dr["StartDateTime"]; }
                if (list.IsColumnPresent("EndDateTime")) { obj._endDateTime = (DateTime)dr["EndDateTime"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                obj.PhotoResourceFile = new ResourceFile();
                if (list.IsColumnPresent("PhotoResourceFileResourceFileID")) { obj.PhotoResourceFile.ResourceFileID = (int)dr["PhotoResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileWebResourceFileID")) { obj.PhotoResourceFile.WebResourceFileID = (string)dr["PhotoResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileResourceType")) { obj.PhotoResourceFile.ResourceType = (int)dr["PhotoResourceFileResourceType"]; }
                if (list.IsColumnPresent("PhotoResourceFileStorageLocation")) { obj.PhotoResourceFile.StorageLocation = (int)dr["PhotoResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("PhotoResourceFileServer")) { obj.PhotoResourceFile.Server = (int)dr["PhotoResourceFileServer"]; }
                if (list.IsColumnPresent("PhotoResourceFilePath")) { obj.PhotoResourceFile.Path = (string)dr["PhotoResourceFilePath"]; }
                if (list.IsColumnPresent("PhotoResourceFileFileName")) { obj.PhotoResourceFile.FileName = (string)dr["PhotoResourceFileFileName"]; }
                if (list.IsColumnPresent("PhotoResourceFileCreatedDT")) { obj.PhotoResourceFile.CreatedDT = (DateTime)dr["PhotoResourceFileCreatedDT"]; }

                obj.ThumbnailResourceFile = new ResourceFile();
                if (list.IsColumnPresent("ThumbnailResourceFileResourceFileID")) { obj.ThumbnailResourceFile.ResourceFileID = (int)dr["ThumbnailResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileWebResourceFileID")) { obj.ThumbnailResourceFile.WebResourceFileID = (string)dr["ThumbnailResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileResourceType")) { obj.ThumbnailResourceFile.ResourceType = (int)dr["ThumbnailResourceFileResourceType"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileStorageLocation")) { obj.ThumbnailResourceFile.StorageLocation = (int)dr["ThumbnailResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileServer")) { obj.ThumbnailResourceFile.Server = (int)dr["ThumbnailResourceFileServer"]; }
                if (list.IsColumnPresent("ThumbnailResourceFilePath")) { obj.ThumbnailResourceFile.Path = (string)dr["ThumbnailResourceFilePath"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileFileName")) { obj.ThumbnailResourceFile.FileName = (string)dr["ThumbnailResourceFileFileName"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileCreatedDT")) { obj.ThumbnailResourceFile.CreatedDT = (DateTime)dr["ThumbnailResourceFileCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpots
        /// </summary>
        public static List<NSpot> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpot> arr = new List<NSpot>();

            NSpot obj;

            while (dr.Read())
            {
                obj = new NSpot();
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("WebNSpotID")) { obj._webNSpotID = (string)dr["WebNSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("NumberOfMembers")) { obj._numberOfMembers = (int)dr["NumberOfMembers"]; }
                if (list.IsColumnPresent("NumberOfPhotos")) { obj._numberOfPhotos = (int)dr["NumberOfPhotos"]; }
                if (list.IsColumnPresent("NumberOfVideos")) { obj._numberOfVideos = (int)dr["NumberOfVideos"]; }
                if (list.IsColumnPresent("AskBeforeJoining")) { obj._askBeforeJoining = (bool)dr["AskBeforeJoining"]; }
                if (list.IsColumnPresent("StartDateTime")) { obj._startDateTime = (DateTime)dr["StartDateTime"]; }
                if (list.IsColumnPresent("EndDateTime")) { obj._endDateTime = (DateTime)dr["EndDateTime"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the NSpot object or in the case of a zero NSpotID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveNSpot");

            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);
            db.AddInParameter(dbCommand, "WebNSpotID", DbType.String, WebNSpotID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PhotoResourceFileID", DbType.Int32, PhotoResourceFileID);
            db.AddInParameter(dbCommand, "ThumbnailResourceFileID", DbType.Int32, ThumbnailResourceFileID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);
            db.AddInParameter(dbCommand, "TotalVoteScore", DbType.Int32, TotalVoteScore);
            db.AddInParameter(dbCommand, "NumberOfViews", DbType.Int32, NumberOfViews);
            db.AddInParameter(dbCommand, "NumberOfComments", DbType.Int32, NumberOfComments);
            db.AddInParameter(dbCommand, "NumberOfMembers", DbType.Int32, NumberOfMembers);
            db.AddInParameter(dbCommand, "NumberOfPhotos", DbType.Int32, NumberOfPhotos);
            db.AddInParameter(dbCommand, "NumberOfVideos", DbType.Int32, NumberOfVideos);
            db.AddInParameter(dbCommand, "AskBeforeJoining", DbType.Boolean, AskBeforeJoining);
            db.AddInParameter(dbCommand, "StartDateTime", DbType.DateTime, StartDateTime);
            db.AddInParameter(dbCommand, "EndDateTime", DbType.DateTime, EndDateTime);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.NSpotID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the NSpotComment objects for this NSpot
        /// </summary>
        private List<NSpotComment> GetNSpotCommentByNSpotID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotCommentByNSpotID");
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);

            List<NSpotComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.NSpotComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the NSpotMember objects for this NSpot
        /// </summary>
        private List<NSpotMember> GetNSpotMemberByNSpotID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotMemberByNSpotID");
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);

            List<NSpotMember> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.NSpotMember.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Vote objects for this NSpot
        /// </summary>
        private List<Vote> GetVoteByNSpotID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVoteByNSpotID");
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);

            List<Vote> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Vote.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the NSpot in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static NSpot GetNSpotByNSpotIDWithJoin(int NSpotID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotByNSpotIDWithJoin");
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);

            List<NSpot> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a NSpotComment in the system
    /// </summary>
    public partial class NSpotComment
    {
        #region Fields and Properties

        private int _nSpotCommentID;		//DB identifier for the PhotoComment
        private int _nSpotID;		//The PhotoID that the comment relates to
        private int _memberID;		//The memberID of the Comment Poster
        private string _text = "";		//The text contents of the Comment
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date and Time that the Comment was Posted

        Database db;
        /// <summary>
        /// DB identifier for the PhotoComment
        /// </summary>
        public int NSpotCommentID
        {
            get { return _nSpotCommentID; }
            set { _nSpotCommentID = value; }
        }

        /// <summary>
        /// The PhotoID that the comment relates to
        /// </summary>
        public int NSpotID
        {
            get { return _nSpotID; }
            set { _nSpotID = value; }
        }

        /// <summary>
        /// The memberID of the Comment Poster
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The text contents of the Comment
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// The Date and Time that the Comment was Posted
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public NSpotComment()
        {

        }

        /// <summary>
        /// Instanciates a NSpotComment object from the database via the NSpotCommentID
        /// </summary>
        public NSpotComment(int NSpotCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotCommentByNSpotCommentID");
            db.AddInParameter(dbCommand, "NSpotCommentID", DbType.Int32, NSpotCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("NSpotCommentID")) { this._nSpotCommentID = (int)dr["NSpotCommentID"]; }
                    if (list.IsColumnPresent("NSpotID")) { this._nSpotID = (int)dr["NSpotID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no NSpotComment in the database with the ID " + NSpotCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the NSpotComment in the database 
        /// </summary>
        public static List<NSpotComment> GetAllNSpotComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllNSpotComment");

            List<NSpotComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpotComments
        /// </summary>
        public static List<NSpotComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpotComment> arr = new List<NSpotComment>();

            NSpotComment obj;

            while (dr.Read())
            {
                obj = new NSpotComment();
                if (list.IsColumnPresent("NSpotCommentID")) { obj._nSpotCommentID = (int)dr["NSpotCommentID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpotComments
        /// </summary>
        public static List<NSpotComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpotComment> arr = new List<NSpotComment>();

            NSpotComment obj;

            while (dr.Read())
            {
                obj = new NSpotComment();
                if (list.IsColumnPresent("NSpotCommentID")) { obj._nSpotCommentID = (int)dr["NSpotCommentID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the NSpotComment object or in the case of a zero NSpotCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveNSpotComment");

            db.AddInParameter(dbCommand, "NSpotCommentID", DbType.Int32, NSpotCommentID);
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.NSpotCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a NSpotMember in the system
    /// </summary>
    public partial class NSpotMember
    {
        #region Fields and Properties

        private int _nSpotMemberID;		//
        private string _webNSpotMemberID = "";		//
        private int _nSpotID;		//
        private int _memberID;		//
        private bool _optin;		//Does the member want to join the hotspot?
        private bool _isDeleted;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int NSpotMemberID
        {
            get { return _nSpotMemberID; }
            set { _nSpotMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebNSpotMemberID
        {
            get { return _webNSpotMemberID; }
            set { _webNSpotMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NSpotID
        {
            get { return _nSpotID; }
            set { _nSpotID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Does the member want to join the hotspot?
        /// </summary>
        public bool Optin
        {
            get { return _optin; }
            set { _optin = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool IsDeleted
        {
            get { return _isDeleted; }
            set { _isDeleted = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public NSpotMember()
        {

        }

        /// <summary>
        /// Instanciates a NSpotMember object from the database via the NSpotMemberID
        /// </summary>
        public NSpotMember(int NSpotMemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetNSpotMemberByNSpotMemberID");
            db.AddInParameter(dbCommand, "NSpotMemberID", DbType.Int32, NSpotMemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("NSpotMemberID")) { this._nSpotMemberID = (int)dr["NSpotMemberID"]; }
                    if (list.IsColumnPresent("WebNSpotMemberID")) { this._webNSpotMemberID = (string)dr["WebNSpotMemberID"]; }
                    if (list.IsColumnPresent("NSpotID")) { this._nSpotID = (int)dr["NSpotID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Optin")) { this._optin = (bool)dr["Optin"]; }
                    if (list.IsColumnPresent("IsDeleted")) { this._isDeleted = (bool)dr["IsDeleted"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no NSpotMember in the database with the ID " + NSpotMemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the NSpotMember in the database 
        /// </summary>
        public static List<NSpotMember> GetAllNSpotMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllNSpotMember");

            List<NSpotMember> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpotMembers
        /// </summary>
        public static List<NSpotMember> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpotMember> arr = new List<NSpotMember>();

            NSpotMember obj;

            while (dr.Read())
            {
                obj = new NSpotMember();
                if (list.IsColumnPresent("NSpotMemberID")) { obj._nSpotMemberID = (int)dr["NSpotMemberID"]; }
                if (list.IsColumnPresent("WebNSpotMemberID")) { obj._webNSpotMemberID = (string)dr["WebNSpotMemberID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Optin")) { obj._optin = (bool)dr["Optin"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of NSpotMembers
        /// </summary>
        public static List<NSpotMember> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<NSpotMember> arr = new List<NSpotMember>();

            NSpotMember obj;

            while (dr.Read())
            {
                obj = new NSpotMember();
                if (list.IsColumnPresent("NSpotMemberID")) { obj._nSpotMemberID = (int)dr["NSpotMemberID"]; }
                if (list.IsColumnPresent("WebNSpotMemberID")) { obj._webNSpotMemberID = (string)dr["WebNSpotMemberID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Optin")) { obj._optin = (bool)dr["Optin"]; }
                if (list.IsColumnPresent("IsDeleted")) { obj._isDeleted = (bool)dr["IsDeleted"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the NSpotMember object or in the case of a zero NSpotMemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveNSpotMember");

            db.AddInParameter(dbCommand, "NSpotMemberID", DbType.Int32, NSpotMemberID);
            db.AddInParameter(dbCommand, "WebNSpotMemberID", DbType.String, WebNSpotMemberID);
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Optin", DbType.Boolean, Optin);
            db.AddInParameter(dbCommand, "IsDeleted", DbType.Boolean, IsDeleted);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.NSpotMemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a OnlineNow in the system
    /// </summary>
    public partial class OnlineNow
    {
        #region Fields and Properties

        private int _onlineNowID;		//The primary Keyid for OnlineNow
        private int _memberID;		//The MemberID of the peson logged in
        private DateTime _dTOnline = new DateTime(1900, 1, 1);		//The datetime they logged on

        Database db;
        /// <summary>
        /// The primary Keyid for OnlineNow
        /// </summary>
        public int OnlineNowID
        {
            get { return _onlineNowID; }
            set { _onlineNowID = value; }
        }

        /// <summary>
        /// The MemberID of the peson logged in
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The datetime they logged on
        /// </summary>
        public DateTime DTOnline
        {
            get { return _dTOnline; }
            set { _dTOnline = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public OnlineNow()
        {

        }

        /// <summary>
        /// Instanciates a OnlineNow object from the database via the OnlineNowID
        /// </summary>
        public OnlineNow(int OnlineNowID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetOnlineNowByOnlineNowID");
            db.AddInParameter(dbCommand, "OnlineNowID", DbType.Int32, OnlineNowID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("OnlineNowID")) { this._onlineNowID = (int)dr["OnlineNowID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("DTOnline")) { this._dTOnline = (DateTime)dr["DTOnline"]; }

                }
                else
                {
                    throw new Exception("There is no OnlineNow in the database with the ID " + OnlineNowID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the OnlineNow in the database 
        /// </summary>
        public static List<OnlineNow> GetAllOnlineNow()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllOnlineNow");

            List<OnlineNow> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of OnlineNows
        /// </summary>
        public static List<OnlineNow> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<OnlineNow> arr = new List<OnlineNow>();

            OnlineNow obj;

            while (dr.Read())
            {
                obj = new OnlineNow();
                if (list.IsColumnPresent("OnlineNowID")) { obj._onlineNowID = (int)dr["OnlineNowID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("DTOnline")) { obj._dTOnline = (DateTime)dr["DTOnline"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of OnlineNows
        /// </summary>
        public static List<OnlineNow> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<OnlineNow> arr = new List<OnlineNow>();

            OnlineNow obj;

            while (dr.Read())
            {
                obj = new OnlineNow();
                if (list.IsColumnPresent("OnlineNowID")) { obj._onlineNowID = (int)dr["OnlineNowID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("DTOnline")) { obj._dTOnline = (DateTime)dr["DTOnline"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the OnlineNow object or in the case of a zero OnlineNowID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveOnlineNow");

            db.AddInParameter(dbCommand, "OnlineNowID", DbType.Int32, OnlineNowID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "DTOnline", DbType.DateTime, DTOnline);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.OnlineNowID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Photo in the system
    /// </summary>
    public partial class Photo
    {
        /// <summary>
        /// The PhotoRating objects for this Photo
        /// </summary>
        public List<PhotoRating> PhotoRating
        {
            get
            {
                if (photoRating == null)
                    this.photoRating = this.GetPhotoRatingByPhotoID();
                return photoRating;
            }
            set { photoRating = value; }
        }


        /// <summary>
        /// The PhotoTag objects for this Photo
        /// </summary>
        public List<PhotoTag> PhotoTag
        {
            get
            {
                if (photoTag == null)
                    this.photoTag = this.GetPhotoTagByPhotoID();
                return photoTag;
            }
            set { photoTag = value; }
        }


        /// <summary>
        /// The PhotoView objects for this Photo
        /// </summary>
        public List<PhotoView> PhotoView
        {
            get
            {
                if (photoView == null)
                    this.photoView = this.GetPhotoViewByPhotoID();
                return photoView;
            }
            set { photoView = value; }
        }


        /// <summary>
        /// The LatestPhotos objects for this Photo
        /// </summary>
        public List<LatestPhotos> LatestPhotos
        {
            get
            {
                if (latestPhotos == null)
                    this.latestPhotos = this.GetLatestPhotosByPhotoID();
                return latestPhotos;
            }
            set { latestPhotos = value; }
        }


        /// <summary>
        /// The PhotoComment objects for this Photo
        /// </summary>
        public List<PhotoComment> PhotoComment
        {
            get
            {
                if (photoComment == null)
                    this.photoComment = this.GetPhotoCommentByPhotoID();
                return photoComment;
            }
            set { photoComment = value; }
        }


        /// <summary>
        /// The TopPhotosRated objects for this Photo
        /// </summary>
        public List<TopPhotosRated> TopPhotosRated
        {
            get
            {
                if (topPhotosRated == null)
                    this.topPhotosRated = this.GetTopPhotosRatedByPhotoID();
                return topPhotosRated;
            }
            set { topPhotosRated = value; }
        }


        /// <summary>
        /// The TopPhotosViewed objects for this Photo
        /// </summary>
        public List<TopPhotosViewed> TopPhotosViewed
        {
            get
            {
                if (topPhotosViewed == null)
                    this.topPhotosViewed = this.GetTopPhotosViewedByPhotoID();
                return topPhotosViewed;
            }
            set { topPhotosViewed = value; }
        }


        /// <summary>
        /// The Vote objects for this Photo
        /// </summary>
        public List<Vote> Vote
        {
            get
            {
                if (vote == null)
                    this.vote = this.GetVoteByPhotoID();
                return vote;
            }
            set { vote = value; }
        }


        /// <summary>
        /// The BlogPhoto objects for this Photo
        /// </summary>
        public List<BlogPhoto> BlogPhoto
        {
            get
            {
                if (blogPhoto == null)
                    this.blogPhoto = this.GetBlogPhotoByPhotoID();
                return blogPhoto;
            }
            set { blogPhoto = value; }
        }


        #region Fields and Properties

        private int _photoID;		//DB identifier for the Photo
        private string _webPhotoID = "";		//The Base64 Guid identifier
        private int _photoCollectionID;		//The primary key id for the collection it belongs to
        private int _memberID;		//The memberID of the owner of the photo
        private int _photoResourceFileID;		//The disk or network location of the photo
        private int _thumbnailResourceFileID;		//The disk or network location of the thumbnail
        private int _width;		//The width of the photo
        private int _height;		//The height of the photo
        private string _title = "";		//
        private string _caption = "";		//
        private int _totalVoteScore;		//The average rating for the photo computed at rate-time
        private int _numberOfViews;		//The number of times the photo has been viewed
        private int _numberOfComments;		//The Number of comments posted for the photo
        private bool _active;		//Active is true if the photo has been deleted or removed
        private bool _mobile;		//
        private int _categoryID;		//
        private string _tags = "";		//
        private DateTime _takenDT = new DateTime(1900, 1, 1);		//The Date and Time that the photo was taken
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//The Date and Time that the photo was uploaded
        private List<PhotoRating> photoRating;		// Foreign object
        private List<PhotoTag> photoTag;		// Foreign object
        private List<PhotoView> photoView;		// Foreign object
        private List<LatestPhotos> latestPhotos;		// Foreign object
        private List<PhotoComment> photoComment;		// Foreign object
        private List<TopPhotosRated> topPhotosRated;		// Foreign object
        private List<TopPhotosViewed> topPhotosViewed;		// Foreign object
        private List<Vote> vote;		// Foreign object
        private List<BlogPhoto> blogPhoto;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the Photo
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// The Base64 Guid identifier
        /// </summary>
        public string WebPhotoID
        {
            get { return _webPhotoID; }
            set { _webPhotoID = value; }
        }

        /// <summary>
        /// The primary key id for the collection it belongs to
        /// </summary>
        public int PhotoCollectionID
        {
            get { return _photoCollectionID; }
            set { _photoCollectionID = value; }
        }

        /// <summary>
        /// The memberID of the owner of the photo
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The disk or network location of the photo
        /// </summary>
        public int PhotoResourceFileID
        {
            get { return _photoResourceFileID; }
            set { _photoResourceFileID = value; }
        }

        /// <summary>
        /// The disk or network location of the thumbnail
        /// </summary>
        public int ThumbnailResourceFileID
        {
            get { return _thumbnailResourceFileID; }
            set { _thumbnailResourceFileID = value; }
        }

        /// <summary>
        /// The width of the photo
        /// </summary>
        public int Width
        {
            get { return _width; }
            set { _width = value; }
        }

        /// <summary>
        /// The height of the photo
        /// </summary>
        public int Height
        {
            get { return _height; }
            set { _height = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Caption
        {
            get { return _caption; }
            set { _caption = value; }
        }

        /// <summary>
        /// The average rating for the photo computed at rate-time
        /// </summary>
        public int TotalVoteScore
        {
            get { return _totalVoteScore; }
            set { _totalVoteScore = value; }
        }

        /// <summary>
        /// The number of times the photo has been viewed
        /// </summary>
        public int NumberOfViews
        {
            get { return _numberOfViews; }
            set { _numberOfViews = value; }
        }

        /// <summary>
        /// The Number of comments posted for the photo
        /// </summary>
        public int NumberOfComments
        {
            get { return _numberOfComments; }
            set { _numberOfComments = value; }
        }

        /// <summary>
        /// Active is true if the photo has been deleted or removed
        /// </summary>
        public bool Active
        {
            get { return _active; }
            set { _active = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Mobile
        {
            get { return _mobile; }
            set { _mobile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CategoryID
        {
            get { return _categoryID; }
            set { _categoryID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Tags
        {
            get { return _tags; }
            set { _tags = value; }
        }

        /// <summary>
        /// The Date and Time that the photo was taken
        /// </summary>
        public DateTime TakenDT
        {
            get { return _takenDT; }
            set { _takenDT = value; }
        }

        /// <summary>
        /// The Date and Time that the photo was uploaded
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Photo()
        {

        }

        /// <summary>
        /// Instanciates a Photo object from the database via the PhotoID
        /// </summary>
        public Photo(int PhotoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("WebPhotoID")) { this._webPhotoID = (string)dr["WebPhotoID"]; }
                    if (list.IsColumnPresent("PhotoCollectionID")) { this._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PhotoResourceFileID")) { this._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                    if (list.IsColumnPresent("ThumbnailResourceFileID")) { this._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                    if (list.IsColumnPresent("Width")) { this._width = (int)dr["Width"]; }
                    if (list.IsColumnPresent("Height")) { this._height = (int)dr["Height"]; }
                    if (list.IsColumnPresent("Title")) { this._title = (string)dr["Title"]; }
                    if (list.IsColumnPresent("Caption")) { this._caption = (string)dr["Caption"]; }
                    if (list.IsColumnPresent("TotalVoteScore")) { this._totalVoteScore = (int)dr["TotalVoteScore"]; }
                    if (list.IsColumnPresent("NumberOfViews")) { this._numberOfViews = (int)dr["NumberOfViews"]; }
                    if (list.IsColumnPresent("NumberOfComments")) { this._numberOfComments = (int)dr["NumberOfComments"]; }
                    if (list.IsColumnPresent("Active")) { this._active = (bool)dr["Active"]; }
                    if (list.IsColumnPresent("Mobile")) { this._mobile = (bool)dr["Mobile"]; }
                    if (list.IsColumnPresent("CategoryID")) { this._categoryID = (int)dr["CategoryID"]; }
                    if (list.IsColumnPresent("Tags")) { this._tags = (string)dr["Tags"]; }
                    if (list.IsColumnPresent("TakenDT")) { this._takenDT = (DateTime)dr["TakenDT"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no Photo in the database with the ID " + PhotoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Photo in the database 
        /// </summary>
        public static List<Photo> GetAllPhoto()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhoto");

            List<Photo> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public PhotoCollection ParentPhotoCollection { get; set; }
        public ResourceFile PhotoResourceFile { get; set; }
        public ResourceFile ThumbnailResourceFile { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Photos
        /// </summary>
        public static List<Photo> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Photo> arr = new List<Photo>();

            Photo obj;

            while (dr.Read())
            {
                obj = new Photo();
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("WebPhotoID")) { obj._webPhotoID = (string)dr["WebPhotoID"]; }
                if (list.IsColumnPresent("PhotoCollectionID")) { obj._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Width")) { obj._width = (int)dr["Width"]; }
                if (list.IsColumnPresent("Height")) { obj._height = (int)dr["Height"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Caption")) { obj._caption = (string)dr["Caption"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("Mobile")) { obj._mobile = (bool)dr["Mobile"]; }
                if (list.IsColumnPresent("CategoryID")) { obj._categoryID = (int)dr["CategoryID"]; }
                if (list.IsColumnPresent("Tags")) { obj._tags = (string)dr["Tags"]; }
                if (list.IsColumnPresent("TakenDT")) { obj._takenDT = (DateTime)dr["TakenDT"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                obj.ParentPhotoCollection = new PhotoCollection();
                if (list.IsColumnPresent("ParentPhotoCollectionPhotoCollectionID")) { obj.ParentPhotoCollection.PhotoCollectionID = (int)dr["ParentPhotoCollectionPhotoCollectionID"]; }
                if (list.IsColumnPresent("ParentPhotoCollectionWebPhotoCollectionID")) { obj.ParentPhotoCollection.WebPhotoCollectionID = (string)dr["ParentPhotoCollectionWebPhotoCollectionID"]; }
                if (list.IsColumnPresent("ParentPhotoCollectionMemberID")) { obj.ParentPhotoCollection.MemberID = (int)dr["ParentPhotoCollectionMemberID"]; }
                if (list.IsColumnPresent("ParentPhotoCollectionName")) { obj.ParentPhotoCollection.Name = (string)dr["ParentPhotoCollectionName"]; }
                if (list.IsColumnPresent("ParentPhotoCollectionDescription")) { obj.ParentPhotoCollection.Description = (string)dr["ParentPhotoCollectionDescription"]; }
                if (list.IsColumnPresent("ParentPhotoCollectionDTCreated")) { obj.ParentPhotoCollection.DTCreated = (DateTime)dr["ParentPhotoCollectionDTCreated"]; }

                obj.PhotoResourceFile = new ResourceFile();
                if (list.IsColumnPresent("PhotoResourceFileResourceFileID")) { obj.PhotoResourceFile.ResourceFileID = (int)dr["PhotoResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileWebResourceFileID")) { obj.PhotoResourceFile.WebResourceFileID = (string)dr["PhotoResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("PhotoResourceFileResourceType")) { obj.PhotoResourceFile.ResourceType = (int)dr["PhotoResourceFileResourceType"]; }
                if (list.IsColumnPresent("PhotoResourceFileStorageLocation")) { obj.PhotoResourceFile.StorageLocation = (int)dr["PhotoResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("PhotoResourceFileServer")) { obj.PhotoResourceFile.Server = (int)dr["PhotoResourceFileServer"]; }
                if (list.IsColumnPresent("PhotoResourceFilePath")) { obj.PhotoResourceFile.Path = (string)dr["PhotoResourceFilePath"]; }
                if (list.IsColumnPresent("PhotoResourceFileFileName")) { obj.PhotoResourceFile.FileName = (string)dr["PhotoResourceFileFileName"]; }
                if (list.IsColumnPresent("PhotoResourceFileCreatedDT")) { obj.PhotoResourceFile.CreatedDT = (DateTime)dr["PhotoResourceFileCreatedDT"]; }

                obj.ThumbnailResourceFile = new ResourceFile();
                if (list.IsColumnPresent("ThumbnailResourceFileResourceFileID")) { obj.ThumbnailResourceFile.ResourceFileID = (int)dr["ThumbnailResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileWebResourceFileID")) { obj.ThumbnailResourceFile.WebResourceFileID = (string)dr["ThumbnailResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileResourceType")) { obj.ThumbnailResourceFile.ResourceType = (int)dr["ThumbnailResourceFileResourceType"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileStorageLocation")) { obj.ThumbnailResourceFile.StorageLocation = (int)dr["ThumbnailResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileServer")) { obj.ThumbnailResourceFile.Server = (int)dr["ThumbnailResourceFileServer"]; }
                if (list.IsColumnPresent("ThumbnailResourceFilePath")) { obj.ThumbnailResourceFile.Path = (string)dr["ThumbnailResourceFilePath"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileFileName")) { obj.ThumbnailResourceFile.FileName = (string)dr["ThumbnailResourceFileFileName"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileCreatedDT")) { obj.ThumbnailResourceFile.CreatedDT = (DateTime)dr["ThumbnailResourceFileCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Photos
        /// </summary>
        public static List<Photo> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Photo> arr = new List<Photo>();

            Photo obj;

            while (dr.Read())
            {
                obj = new Photo();
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("WebPhotoID")) { obj._webPhotoID = (string)dr["WebPhotoID"]; }
                if (list.IsColumnPresent("PhotoCollectionID")) { obj._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoResourceFileID")) { obj._photoResourceFileID = (int)dr["PhotoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Width")) { obj._width = (int)dr["Width"]; }
                if (list.IsColumnPresent("Height")) { obj._height = (int)dr["Height"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Caption")) { obj._caption = (string)dr["Caption"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("Active")) { obj._active = (bool)dr["Active"]; }
                if (list.IsColumnPresent("Mobile")) { obj._mobile = (bool)dr["Mobile"]; }
                if (list.IsColumnPresent("CategoryID")) { obj._categoryID = (int)dr["CategoryID"]; }
                if (list.IsColumnPresent("Tags")) { obj._tags = (string)dr["Tags"]; }
                if (list.IsColumnPresent("TakenDT")) { obj._takenDT = (DateTime)dr["TakenDT"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Photo object or in the case of a zero PhotoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhoto");

            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "WebPhotoID", DbType.String, WebPhotoID);
            db.AddInParameter(dbCommand, "PhotoCollectionID", DbType.Int32, PhotoCollectionID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PhotoResourceFileID", DbType.Int32, PhotoResourceFileID);
            db.AddInParameter(dbCommand, "ThumbnailResourceFileID", DbType.Int32, ThumbnailResourceFileID);
            db.AddInParameter(dbCommand, "Width", DbType.Int32, Width);
            db.AddInParameter(dbCommand, "Height", DbType.Int32, Height);
            db.AddInParameter(dbCommand, "Title", DbType.String, Title);
            db.AddInParameter(dbCommand, "Caption", DbType.String, Caption);
            db.AddInParameter(dbCommand, "TotalVoteScore", DbType.Int32, TotalVoteScore);
            db.AddInParameter(dbCommand, "NumberOfViews", DbType.Int32, NumberOfViews);
            db.AddInParameter(dbCommand, "NumberOfComments", DbType.Int32, NumberOfComments);
            db.AddInParameter(dbCommand, "Active", DbType.Boolean, Active);
            db.AddInParameter(dbCommand, "Mobile", DbType.Boolean, Mobile);
            db.AddInParameter(dbCommand, "CategoryID", DbType.Int32, CategoryID);
            db.AddInParameter(dbCommand, "Tags", DbType.String, Tags);
            db.AddInParameter(dbCommand, "TakenDT", DbType.DateTime, TakenDT);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the PhotoRating objects for this Photo
        /// </summary>
        private List<PhotoRating> GetPhotoRatingByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoRatingByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<PhotoRating> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoRating.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoTag objects for this Photo
        /// </summary>
        private List<PhotoTag> GetPhotoTagByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoTagByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<PhotoTag> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoTag.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoView objects for this Photo
        /// </summary>
        private List<PhotoView> GetPhotoViewByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoViewByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<PhotoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LatestPhotos objects for this Photo
        /// </summary>
        private List<LatestPhotos> GetLatestPhotosByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLatestPhotosByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<LatestPhotos> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LatestPhotos.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the PhotoComment objects for this Photo
        /// </summary>
        private List<PhotoComment> GetPhotoCommentByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoCommentByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<PhotoComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopPhotosRated objects for this Photo
        /// </summary>
        private List<TopPhotosRated> GetTopPhotosRatedByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotosRatedByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<TopPhotosRated> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopPhotosRated.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopPhotosViewed objects for this Photo
        /// </summary>
        private List<TopPhotosViewed> GetTopPhotosViewedByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotosViewedByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<TopPhotosViewed> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopPhotosViewed.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Vote objects for this Photo
        /// </summary>
        private List<Vote> GetVoteByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVoteByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<Vote> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Vote.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the BlogPhoto objects for this Photo
        /// </summary>
        private List<BlogPhoto> GetBlogPhotoByPhotoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogPhotoByPhotoID");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<BlogPhoto> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BlogPhoto.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the Photo in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static Photo GetPhotoByPhotoIDWithJoin(int PhotoID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoByPhotoIDWithJoin");
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            List<Photo> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PhotoCollection in the system
    /// </summary>
    public partial class PhotoCollection
    {
        /// <summary>
        /// The Photo objects for this PhotoCollection
        /// </summary>
        public List<Photo> Photo
        {
            get
            {
                if (photo == null)
                    this.photo = this.GetPhotoByPhotoCollectionID();
                return photo;
            }
            set { photo = value; }
        }


        #region Fields and Properties

        private int _photoCollectionID;		//Primry key id for the photo collection
        private string _webPhotoCollectionID = "";		//
        private int _memberID;		//The member owner of the photo
        private string _name = "";		//The visible name of photo collection
        private string _description = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The date time the photo collection was created
        private List<Photo> photo;		// Foreign object

        Database db;
        /// <summary>
        /// Primry key id for the photo collection
        /// </summary>
        public int PhotoCollectionID
        {
            get { return _photoCollectionID; }
            set { _photoCollectionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebPhotoCollectionID
        {
            get { return _webPhotoCollectionID; }
            set { _webPhotoCollectionID = value; }
        }

        /// <summary>
        /// The member owner of the photo
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The visible name of photo collection
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        /// <summary>
        /// The date time the photo collection was created
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PhotoCollection()
        {

        }

        /// <summary>
        /// Instanciates a PhotoCollection object from the database via the PhotoCollectionID
        /// </summary>
        public PhotoCollection(int PhotoCollectionID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoCollectionByPhotoCollectionID");
            db.AddInParameter(dbCommand, "PhotoCollectionID", DbType.Int32, PhotoCollectionID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoCollectionID")) { this._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                    if (list.IsColumnPresent("WebPhotoCollectionID")) { this._webPhotoCollectionID = (string)dr["WebPhotoCollectionID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no PhotoCollection in the database with the ID " + PhotoCollectionID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PhotoCollection in the database 
        /// </summary>
        public static List<PhotoCollection> GetAllPhotoCollection()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhotoCollection");

            List<PhotoCollection> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoCollections
        /// </summary>
        public static List<PhotoCollection> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoCollection> arr = new List<PhotoCollection>();

            PhotoCollection obj;

            while (dr.Read())
            {
                obj = new PhotoCollection();
                if (list.IsColumnPresent("PhotoCollectionID")) { obj._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                if (list.IsColumnPresent("WebPhotoCollectionID")) { obj._webPhotoCollectionID = (string)dr["WebPhotoCollectionID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoCollections
        /// </summary>
        public static List<PhotoCollection> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoCollection> arr = new List<PhotoCollection>();

            PhotoCollection obj;

            while (dr.Read())
            {
                obj = new PhotoCollection();
                if (list.IsColumnPresent("PhotoCollectionID")) { obj._photoCollectionID = (int)dr["PhotoCollectionID"]; }
                if (list.IsColumnPresent("WebPhotoCollectionID")) { obj._webPhotoCollectionID = (string)dr["WebPhotoCollectionID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PhotoCollection object or in the case of a zero PhotoCollectionID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhotoCollection");

            db.AddInParameter(dbCommand, "PhotoCollectionID", DbType.Int32, PhotoCollectionID);
            db.AddInParameter(dbCommand, "WebPhotoCollectionID", DbType.String, WebPhotoCollectionID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoCollectionID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the Photo objects for this PhotoCollection
        /// </summary>
        private List<Photo> GetPhotoByPhotoCollectionID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoByPhotoCollectionID");
            db.AddInParameter(dbCommand, "PhotoCollectionID", DbType.Int32, PhotoCollectionID);

            List<Photo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Photo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PhotoComment in the system
    /// </summary>
    public partial class PhotoComment
    {
        #region Fields and Properties

        private int _photoCommentID;		//DB identifier for the PhotoComment
        private int _photoID;		//The PhotoID that the comment relates to
        private int _memberID;		//The memberID of the Comment Poster
        private string _text = "";		//The text contents of the Comment
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date and Time that the Comment was Posted

        Database db;
        /// <summary>
        /// DB identifier for the PhotoComment
        /// </summary>
        public int PhotoCommentID
        {
            get { return _photoCommentID; }
            set { _photoCommentID = value; }
        }

        /// <summary>
        /// The PhotoID that the comment relates to
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// The memberID of the Comment Poster
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The text contents of the Comment
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// The Date and Time that the Comment was Posted
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PhotoComment()
        {

        }

        /// <summary>
        /// Instanciates a PhotoComment object from the database via the PhotoCommentID
        /// </summary>
        public PhotoComment(int PhotoCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoCommentByPhotoCommentID");
            db.AddInParameter(dbCommand, "PhotoCommentID", DbType.Int32, PhotoCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoCommentID")) { this._photoCommentID = (int)dr["PhotoCommentID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no PhotoComment in the database with the ID " + PhotoCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PhotoComment in the database 
        /// </summary>
        public static List<PhotoComment> GetAllPhotoComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhotoComment");

            List<PhotoComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoComments
        /// </summary>
        public static List<PhotoComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoComment> arr = new List<PhotoComment>();

            PhotoComment obj;

            while (dr.Read())
            {
                obj = new PhotoComment();
                if (list.IsColumnPresent("PhotoCommentID")) { obj._photoCommentID = (int)dr["PhotoCommentID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoComments
        /// </summary>
        public static List<PhotoComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoComment> arr = new List<PhotoComment>();

            PhotoComment obj;

            while (dr.Read())
            {
                obj = new PhotoComment();
                if (list.IsColumnPresent("PhotoCommentID")) { obj._photoCommentID = (int)dr["PhotoCommentID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PhotoComment object or in the case of a zero PhotoCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhotoComment");

            db.AddInParameter(dbCommand, "PhotoCommentID", DbType.Int32, PhotoCommentID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PhotoRating in the system
    /// </summary>
    public partial class PhotoRating
    {
        #region Fields and Properties

        private int _photoRatingID;		//Primary key field
        private int _photoID;		//PhotoID of the photo
        private int _memberID;		//MemberID of the member who rated it
        private int _rating;		//The value that the Member rated

        Database db;
        /// <summary>
        /// Primary key field
        /// </summary>
        public int PhotoRatingID
        {
            get { return _photoRatingID; }
            set { _photoRatingID = value; }
        }

        /// <summary>
        /// PhotoID of the photo
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// MemberID of the member who rated it
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The value that the Member rated
        /// </summary>
        public int Rating
        {
            get { return _rating; }
            set { _rating = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PhotoRating()
        {

        }

        /// <summary>
        /// Instanciates a PhotoRating object from the database via the PhotoRatingID
        /// </summary>
        public PhotoRating(int PhotoRatingID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoRatingByPhotoRatingID");
            db.AddInParameter(dbCommand, "PhotoRatingID", DbType.Int32, PhotoRatingID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoRatingID")) { this._photoRatingID = (int)dr["PhotoRatingID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Rating")) { this._rating = (int)dr["Rating"]; }

                }
                else
                {
                    throw new Exception("There is no PhotoRating in the database with the ID " + PhotoRatingID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PhotoRating in the database 
        /// </summary>
        public static List<PhotoRating> GetAllPhotoRating()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhotoRating");

            List<PhotoRating> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoRatings
        /// </summary>
        public static List<PhotoRating> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoRating> arr = new List<PhotoRating>();

            PhotoRating obj;

            while (dr.Read())
            {
                obj = new PhotoRating();
                if (list.IsColumnPresent("PhotoRatingID")) { obj._photoRatingID = (int)dr["PhotoRatingID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoRatings
        /// </summary>
        public static List<PhotoRating> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoRating> arr = new List<PhotoRating>();

            PhotoRating obj;

            while (dr.Read())
            {
                obj = new PhotoRating();
                if (list.IsColumnPresent("PhotoRatingID")) { obj._photoRatingID = (int)dr["PhotoRatingID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PhotoRating object or in the case of a zero PhotoRatingID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhotoRating");

            db.AddInParameter(dbCommand, "PhotoRatingID", DbType.Int32, PhotoRatingID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Rating", DbType.Int32, Rating);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoRatingID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PhotoTag in the system
    /// </summary>
    public partial class PhotoTag
    {
        #region Fields and Properties

        private int _photoTagID;		//
        private int _photoID;		//
        private int _tagWordID;		//
        private string _tag = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int PhotoTagID
        {
            get { return _photoTagID; }
            set { _photoTagID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int TagWordID
        {
            get { return _tagWordID; }
            set { _tagWordID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Tag
        {
            get { return _tag; }
            set { _tag = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PhotoTag()
        {

        }

        /// <summary>
        /// Instanciates a PhotoTag object from the database via the PhotoTagID
        /// </summary>
        public PhotoTag(int PhotoTagID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoTagByPhotoTagID");
            db.AddInParameter(dbCommand, "PhotoTagID", DbType.Int32, PhotoTagID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoTagID")) { this._photoTagID = (int)dr["PhotoTagID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("TagWordID")) { this._tagWordID = (int)dr["TagWordID"]; }
                    if (list.IsColumnPresent("Tag")) { this._tag = (string)dr["Tag"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no PhotoTag in the database with the ID " + PhotoTagID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PhotoTag in the database 
        /// </summary>
        public static List<PhotoTag> GetAllPhotoTag()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhotoTag");

            List<PhotoTag> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoTags
        /// </summary>
        public static List<PhotoTag> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoTag> arr = new List<PhotoTag>();

            PhotoTag obj;

            while (dr.Read())
            {
                obj = new PhotoTag();
                if (list.IsColumnPresent("PhotoTagID")) { obj._photoTagID = (int)dr["PhotoTagID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("TagWordID")) { obj._tagWordID = (int)dr["TagWordID"]; }
                if (list.IsColumnPresent("Tag")) { obj._tag = (string)dr["Tag"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoTags
        /// </summary>
        public static List<PhotoTag> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoTag> arr = new List<PhotoTag>();

            PhotoTag obj;

            while (dr.Read())
            {
                obj = new PhotoTag();
                if (list.IsColumnPresent("PhotoTagID")) { obj._photoTagID = (int)dr["PhotoTagID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("TagWordID")) { obj._tagWordID = (int)dr["TagWordID"]; }
                if (list.IsColumnPresent("Tag")) { obj._tag = (string)dr["Tag"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PhotoTag object or in the case of a zero PhotoTagID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhotoTag");

            db.AddInParameter(dbCommand, "PhotoTagID", DbType.Int32, PhotoTagID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "TagWordID", DbType.Int32, TagWordID);
            db.AddInParameter(dbCommand, "Tag", DbType.String, Tag);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoTagID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PhotoView in the system
    /// </summary>
    public partial class PhotoView
    {
        #region Fields and Properties

        private int _photoViewID;		//
        private int _memberID;		//
        private Guid _sessionID;		//
        private int _photoID;		//
        private Guid _referrerID;		//
        private int _searchTermID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int PhotoViewID
        {
            get { return _photoViewID; }
            set { _photoViewID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Guid SessionID
        {
            get { return _sessionID; }
            set { _sessionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Guid ReferrerID
        {
            get { return _referrerID; }
            set { _referrerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SearchTermID
        {
            get { return _searchTermID; }
            set { _searchTermID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PhotoView()
        {

        }

        /// <summary>
        /// Instanciates a PhotoView object from the database via the PhotoViewID
        /// </summary>
        public PhotoView(int PhotoViewID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoViewByPhotoViewID");
            db.AddInParameter(dbCommand, "PhotoViewID", DbType.Int32, PhotoViewID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PhotoViewID")) { this._photoViewID = (int)dr["PhotoViewID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("SessionID")) { this._sessionID = (Guid)dr["SessionID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("ReferrerID")) { this._referrerID = (Guid)dr["ReferrerID"]; }
                    if (list.IsColumnPresent("SearchTermID")) { this._searchTermID = (int)dr["SearchTermID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no PhotoView in the database with the ID " + PhotoViewID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PhotoView in the database 
        /// </summary>
        public static List<PhotoView> GetAllPhotoView()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPhotoView");

            List<PhotoView> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoViews
        /// </summary>
        public static List<PhotoView> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoView> arr = new List<PhotoView>();

            PhotoView obj;

            while (dr.Read())
            {
                obj = new PhotoView();
                if (list.IsColumnPresent("PhotoViewID")) { obj._photoViewID = (int)dr["PhotoViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SessionID")) { obj._sessionID = (Guid)dr["SessionID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("ReferrerID")) { obj._referrerID = (Guid)dr["ReferrerID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PhotoViews
        /// </summary>
        public static List<PhotoView> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PhotoView> arr = new List<PhotoView>();

            PhotoView obj;

            while (dr.Read())
            {
                obj = new PhotoView();
                if (list.IsColumnPresent("PhotoViewID")) { obj._photoViewID = (int)dr["PhotoViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SessionID")) { obj._sessionID = (Guid)dr["SessionID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("ReferrerID")) { obj._referrerID = (Guid)dr["ReferrerID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PhotoView object or in the case of a zero PhotoViewID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePhotoView");

            db.AddInParameter(dbCommand, "PhotoViewID", DbType.Int32, PhotoViewID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "SessionID", DbType.Guid, SessionID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "ReferrerID", DbType.Guid, ReferrerID);
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PhotoViewID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PremiumMember in the system
    /// </summary>
    public partial class PremiumMember
    {
        #region Fields and Properties

        private int _premiumMemberID;		//
        private int _memberID;		//
        private int _premiumStatus;		//What premium level the Member is assign to

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int PremiumMemberID
        {
            get { return _premiumMemberID; }
            set { _premiumMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// What premium level the Member is assign to
        /// </summary>
        public int PremiumStatus
        {
            get { return _premiumStatus; }
            set { _premiumStatus = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PremiumMember()
        {

        }

        /// <summary>
        /// Instanciates a PremiumMember object from the database via the PremiumMemberID
        /// </summary>
        public PremiumMember(int PremiumMemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPremiumMemberByPremiumMemberID");
            db.AddInParameter(dbCommand, "PremiumMemberID", DbType.Int32, PremiumMemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PremiumMemberID")) { this._premiumMemberID = (int)dr["PremiumMemberID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PremiumStatus")) { this._premiumStatus = (int)dr["PremiumStatus"]; }

                }
                else
                {
                    throw new Exception("There is no PremiumMember in the database with the ID " + PremiumMemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PremiumMember in the database 
        /// </summary>
        public static List<PremiumMember> GetAllPremiumMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPremiumMember");

            List<PremiumMember> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PremiumMembers
        /// </summary>
        public static List<PremiumMember> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PremiumMember> arr = new List<PremiumMember>();

            PremiumMember obj;

            while (dr.Read())
            {
                obj = new PremiumMember();
                if (list.IsColumnPresent("PremiumMemberID")) { obj._premiumMemberID = (int)dr["PremiumMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PremiumStatus")) { obj._premiumStatus = (int)dr["PremiumStatus"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PremiumMembers
        /// </summary>
        public static List<PremiumMember> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PremiumMember> arr = new List<PremiumMember>();

            PremiumMember obj;

            while (dr.Read())
            {
                obj = new PremiumMember();
                if (list.IsColumnPresent("PremiumMemberID")) { obj._premiumMemberID = (int)dr["PremiumMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PremiumStatus")) { obj._premiumStatus = (int)dr["PremiumStatus"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PremiumMember object or in the case of a zero PremiumMemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePremiumMember");

            db.AddInParameter(dbCommand, "PremiumMemberID", DbType.Int32, PremiumMemberID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PremiumStatus", DbType.Int32, PremiumStatus);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PremiumMemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a PrivateMessage in the system
    /// </summary>
    public partial class PrivateMessage
    {
        #region Fields and Properties

        private int _privateMessageID;		//Primary key of the VideoMessage
        private int _memberIDFrom;		//The Member sending the video message
        private int _memberIDTo;		//The MemberID if the recipient
        private int _inReplyToMessageID;		//the optional id of a Message that is a reply to another message specifically
        private string _privateTripleBase64GUID = "";		//The private key that allows the video message file to be hidden on the file server
        private bool _isRead;		//Has he mesage been read?
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//the date and time that the message was sent

        Database db;
        /// <summary>
        /// Primary key of the VideoMessage
        /// </summary>
        public int PrivateMessageID
        {
            get { return _privateMessageID; }
            set { _privateMessageID = value; }
        }

        /// <summary>
        /// The Member sending the video message
        /// </summary>
        public int MemberIDFrom
        {
            get { return _memberIDFrom; }
            set { _memberIDFrom = value; }
        }

        /// <summary>
        /// The MemberID if the recipient
        /// </summary>
        public int MemberIDTo
        {
            get { return _memberIDTo; }
            set { _memberIDTo = value; }
        }

        /// <summary>
        /// the optional id of a Message that is a reply to another message specifically
        /// </summary>
        public int InReplyToMessageID
        {
            get { return _inReplyToMessageID; }
            set { _inReplyToMessageID = value; }
        }

        /// <summary>
        /// The private key that allows the video message file to be hidden on the file server
        /// </summary>
        public string PrivateTripleBase64GUID
        {
            get { return _privateTripleBase64GUID; }
            set { _privateTripleBase64GUID = value; }
        }

        /// <summary>
        /// Has he mesage been read?
        /// </summary>
        public bool IsRead
        {
            get { return _isRead; }
            set { _isRead = value; }
        }

        /// <summary>
        /// the date and time that the message was sent
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public PrivateMessage()
        {

        }

        /// <summary>
        /// Instanciates a PrivateMessage object from the database via the PrivateMessageID
        /// </summary>
        public PrivateMessage(int PrivateMessageID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPrivateMessageByPrivateMessageID");
            db.AddInParameter(dbCommand, "PrivateMessageID", DbType.Int32, PrivateMessageID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("PrivateMessageID")) { this._privateMessageID = (int)dr["PrivateMessageID"]; }
                    if (list.IsColumnPresent("MemberIDFrom")) { this._memberIDFrom = (int)dr["MemberIDFrom"]; }
                    if (list.IsColumnPresent("MemberIDTo")) { this._memberIDTo = (int)dr["MemberIDTo"]; }
                    if (list.IsColumnPresent("InReplyToMessageID")) { this._inReplyToMessageID = (int)dr["InReplyToMessageID"]; }
                    if (list.IsColumnPresent("PrivateTripleBase64GUID")) { this._privateTripleBase64GUID = (string)dr["PrivateTripleBase64GUID"]; }
                    if (list.IsColumnPresent("IsRead")) { this._isRead = (bool)dr["IsRead"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no PrivateMessage in the database with the ID " + PrivateMessageID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the PrivateMessage in the database 
        /// </summary>
        public static List<PrivateMessage> GetAllPrivateMessage()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllPrivateMessage");

            List<PrivateMessage> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PrivateMessages
        /// </summary>
        public static List<PrivateMessage> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PrivateMessage> arr = new List<PrivateMessage>();

            PrivateMessage obj;

            while (dr.Read())
            {
                obj = new PrivateMessage();
                if (list.IsColumnPresent("PrivateMessageID")) { obj._privateMessageID = (int)dr["PrivateMessageID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("InReplyToMessageID")) { obj._inReplyToMessageID = (int)dr["InReplyToMessageID"]; }
                if (list.IsColumnPresent("PrivateTripleBase64GUID")) { obj._privateTripleBase64GUID = (string)dr["PrivateTripleBase64GUID"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of PrivateMessages
        /// </summary>
        public static List<PrivateMessage> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<PrivateMessage> arr = new List<PrivateMessage>();

            PrivateMessage obj;

            while (dr.Read())
            {
                obj = new PrivateMessage();
                if (list.IsColumnPresent("PrivateMessageID")) { obj._privateMessageID = (int)dr["PrivateMessageID"]; }
                if (list.IsColumnPresent("MemberIDFrom")) { obj._memberIDFrom = (int)dr["MemberIDFrom"]; }
                if (list.IsColumnPresent("MemberIDTo")) { obj._memberIDTo = (int)dr["MemberIDTo"]; }
                if (list.IsColumnPresent("InReplyToMessageID")) { obj._inReplyToMessageID = (int)dr["InReplyToMessageID"]; }
                if (list.IsColumnPresent("PrivateTripleBase64GUID")) { obj._privateTripleBase64GUID = (string)dr["PrivateTripleBase64GUID"]; }
                if (list.IsColumnPresent("IsRead")) { obj._isRead = (bool)dr["IsRead"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the PrivateMessage object or in the case of a zero PrivateMessageID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SavePrivateMessage");

            db.AddInParameter(dbCommand, "PrivateMessageID", DbType.Int32, PrivateMessageID);
            db.AddInParameter(dbCommand, "MemberIDFrom", DbType.Int32, MemberIDFrom);
            db.AddInParameter(dbCommand, "MemberIDTo", DbType.Int32, MemberIDTo);
            db.AddInParameter(dbCommand, "InReplyToMessageID", DbType.Int32, InReplyToMessageID);
            db.AddInParameter(dbCommand, "PrivateTripleBase64GUID", DbType.String, PrivateTripleBase64GUID);
            db.AddInParameter(dbCommand, "IsRead", DbType.Boolean, IsRead);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.PrivateMessageID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Profession in the system
    /// </summary>
    public partial class Profession
    {
        #region Fields and Properties

        private int _professionID;		//
        private string _name = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ProfessionID
        {
            get { return _professionID; }
            set { _professionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _name; }
            set { _name = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Profession()
        {

        }

        /// <summary>
        /// Instanciates a Profession object from the database via the ProfessionID
        /// </summary>
        public Profession(int ProfessionID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetProfessionByProfessionID");
            db.AddInParameter(dbCommand, "ProfessionID", DbType.Int32, ProfessionID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ProfessionID")) { this._professionID = (int)dr["ProfessionID"]; }
                    if (list.IsColumnPresent("Name")) { this._name = (string)dr["Name"]; }

                }
                else
                {
                    throw new Exception("There is no Profession in the database with the ID " + ProfessionID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Profession in the database 
        /// </summary>
        public static List<Profession> GetAllProfession()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllProfession");

            List<Profession> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Professions
        /// </summary>
        public static List<Profession> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Profession> arr = new List<Profession>();

            Profession obj;

            while (dr.Read())
            {
                obj = new Profession();
                if (list.IsColumnPresent("ProfessionID")) { obj._professionID = (int)dr["ProfessionID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Professions
        /// </summary>
        public static List<Profession> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Profession> arr = new List<Profession>();

            Profession obj;

            while (dr.Read())
            {
                obj = new Profession();
                if (list.IsColumnPresent("ProfessionID")) { obj._professionID = (int)dr["ProfessionID"]; }
                if (list.IsColumnPresent("Name")) { obj._name = (string)dr["Name"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Profession object or in the case of a zero ProfessionID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveProfession");

            db.AddInParameter(dbCommand, "ProfessionID", DbType.Int32, ProfessionID);
            db.AddInParameter(dbCommand, "Name", DbType.String, Name);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ProfessionID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Profile in the system
    /// </summary>
    public partial class Profile
    {
        #region Fields and Properties

        private int _profileID;		//DB identifier for the Profile
        private int _memberID;		//DB identifier for the Member
        private string _aboutMe = "";		//Member text Introduction
        private string _favoriteHobbies = "";		//
        private string _favoriteMovies = "";		//
        private string _favoriteMusic = "";		//
        private string _favoriteBooks = "";		//
        private string _personalWebsite = "";		//
        private DateTime _lastModified = new DateTime(1900, 1, 1);		//The Date and Time the profile was last modified

        Database db;
        /// <summary>
        /// DB identifier for the Profile
        /// </summary>
        public int ProfileID
        {
            get { return _profileID; }
            set { _profileID = value; }
        }

        /// <summary>
        /// DB identifier for the Member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// Member text Introduction
        /// </summary>
        public string AboutMe
        {
            get { return _aboutMe; }
            set { _aboutMe = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FavoriteHobbies
        {
            get { return _favoriteHobbies; }
            set { _favoriteHobbies = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FavoriteMovies
        {
            get { return _favoriteMovies; }
            set { _favoriteMovies = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FavoriteMusic
        {
            get { return _favoriteMusic; }
            set { _favoriteMusic = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FavoriteBooks
        {
            get { return _favoriteBooks; }
            set { _favoriteBooks = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string PersonalWebsite
        {
            get { return _personalWebsite; }
            set { _personalWebsite = value; }
        }

        /// <summary>
        /// The Date and Time the profile was last modified
        /// </summary>
        public DateTime LastModified
        {
            get { return _lastModified; }
            set { _lastModified = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Profile()
        {

        }

        /// <summary>
        /// Instanciates a Profile object from the database via the ProfileID
        /// </summary>
        public Profile(int ProfileID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetProfileByProfileID");
            db.AddInParameter(dbCommand, "ProfileID", DbType.Int32, ProfileID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ProfileID")) { this._profileID = (int)dr["ProfileID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("AboutMe")) { this._aboutMe = (string)dr["AboutMe"]; }
                    if (list.IsColumnPresent("FavoriteHobbies")) { this._favoriteHobbies = (string)dr["FavoriteHobbies"]; }
                    if (list.IsColumnPresent("FavoriteMovies")) { this._favoriteMovies = (string)dr["FavoriteMovies"]; }
                    if (list.IsColumnPresent("FavoriteMusic")) { this._favoriteMusic = (string)dr["FavoriteMusic"]; }
                    if (list.IsColumnPresent("FavoriteBooks")) { this._favoriteBooks = (string)dr["FavoriteBooks"]; }
                    if (list.IsColumnPresent("PersonalWebsite")) { this._personalWebsite = (string)dr["PersonalWebsite"]; }
                    if (list.IsColumnPresent("LastModified")) { this._lastModified = (DateTime)dr["LastModified"]; }

                }
                else
                {
                    throw new Exception("There is no Profile in the database with the ID " + ProfileID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Profile in the database 
        /// </summary>
        public static List<Profile> GetAllProfile()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllProfile");

            List<Profile> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Profiles
        /// </summary>
        public static List<Profile> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Profile> arr = new List<Profile>();

            Profile obj;

            while (dr.Read())
            {
                obj = new Profile();
                if (list.IsColumnPresent("ProfileID")) { obj._profileID = (int)dr["ProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AboutMe")) { obj._aboutMe = (string)dr["AboutMe"]; }
                if (list.IsColumnPresent("FavoriteHobbies")) { obj._favoriteHobbies = (string)dr["FavoriteHobbies"]; }
                if (list.IsColumnPresent("FavoriteMovies")) { obj._favoriteMovies = (string)dr["FavoriteMovies"]; }
                if (list.IsColumnPresent("FavoriteMusic")) { obj._favoriteMusic = (string)dr["FavoriteMusic"]; }
                if (list.IsColumnPresent("FavoriteBooks")) { obj._favoriteBooks = (string)dr["FavoriteBooks"]; }
                if (list.IsColumnPresent("PersonalWebsite")) { obj._personalWebsite = (string)dr["PersonalWebsite"]; }
                if (list.IsColumnPresent("LastModified")) { obj._lastModified = (DateTime)dr["LastModified"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Profiles
        /// </summary>
        public static List<Profile> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Profile> arr = new List<Profile>();

            Profile obj;

            while (dr.Read())
            {
                obj = new Profile();
                if (list.IsColumnPresent("ProfileID")) { obj._profileID = (int)dr["ProfileID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("AboutMe")) { obj._aboutMe = (string)dr["AboutMe"]; }
                if (list.IsColumnPresent("FavoriteHobbies")) { obj._favoriteHobbies = (string)dr["FavoriteHobbies"]; }
                if (list.IsColumnPresent("FavoriteMovies")) { obj._favoriteMovies = (string)dr["FavoriteMovies"]; }
                if (list.IsColumnPresent("FavoriteMusic")) { obj._favoriteMusic = (string)dr["FavoriteMusic"]; }
                if (list.IsColumnPresent("FavoriteBooks")) { obj._favoriteBooks = (string)dr["FavoriteBooks"]; }
                if (list.IsColumnPresent("PersonalWebsite")) { obj._personalWebsite = (string)dr["PersonalWebsite"]; }
                if (list.IsColumnPresent("LastModified")) { obj._lastModified = (DateTime)dr["LastModified"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Profile object or in the case of a zero ProfileID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveProfile");

            db.AddInParameter(dbCommand, "ProfileID", DbType.Int32, ProfileID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "AboutMe", DbType.String, AboutMe);
            db.AddInParameter(dbCommand, "FavoriteHobbies", DbType.String, FavoriteHobbies);
            db.AddInParameter(dbCommand, "FavoriteMovies", DbType.String, FavoriteMovies);
            db.AddInParameter(dbCommand, "FavoriteMusic", DbType.String, FavoriteMusic);
            db.AddInParameter(dbCommand, "FavoriteBooks", DbType.String, FavoriteBooks);
            db.AddInParameter(dbCommand, "PersonalWebsite", DbType.String, PersonalWebsite);
            db.AddInParameter(dbCommand, "LastModified", DbType.DateTime, LastModified);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ProfileID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ProfileInvite in the system
    /// </summary>
    public partial class ProfileInvite
    {
        #region Fields and Properties

        private int _profileInviteID;		//
        private int _memberID;		//
        private string _emailAddress = "";		//
        private string _customMessage = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ProfileInviteID
        {
            get { return _profileInviteID; }
            set { _profileInviteID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string EmailAddress
        {
            get { return _emailAddress; }
            set { _emailAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string CustomMessage
        {
            get { return _customMessage; }
            set { _customMessage = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ProfileInvite()
        {

        }

        /// <summary>
        /// Instanciates a ProfileInvite object from the database via the ProfileInviteID
        /// </summary>
        public ProfileInvite(int ProfileInviteID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetProfileInviteByProfileInviteID");
            db.AddInParameter(dbCommand, "ProfileInviteID", DbType.Int32, ProfileInviteID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ProfileInviteID")) { this._profileInviteID = (int)dr["ProfileInviteID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("EmailAddress")) { this._emailAddress = (string)dr["EmailAddress"]; }
                    if (list.IsColumnPresent("CustomMessage")) { this._customMessage = (string)dr["CustomMessage"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no ProfileInvite in the database with the ID " + ProfileInviteID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ProfileInvite in the database 
        /// </summary>
        public static List<ProfileInvite> GetAllProfileInvite()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllProfileInvite");

            List<ProfileInvite> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ProfileInvites
        /// </summary>
        public static List<ProfileInvite> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ProfileInvite> arr = new List<ProfileInvite>();

            ProfileInvite obj;

            while (dr.Read())
            {
                obj = new ProfileInvite();
                if (list.IsColumnPresent("ProfileInviteID")) { obj._profileInviteID = (int)dr["ProfileInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ProfileInvites
        /// </summary>
        public static List<ProfileInvite> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ProfileInvite> arr = new List<ProfileInvite>();

            ProfileInvite obj;

            while (dr.Read())
            {
                obj = new ProfileInvite();
                if (list.IsColumnPresent("ProfileInviteID")) { obj._profileInviteID = (int)dr["ProfileInviteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("EmailAddress")) { obj._emailAddress = (string)dr["EmailAddress"]; }
                if (list.IsColumnPresent("CustomMessage")) { obj._customMessage = (string)dr["CustomMessage"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ProfileInvite object or in the case of a zero ProfileInviteID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveProfileInvite");

            db.AddInParameter(dbCommand, "ProfileInviteID", DbType.Int32, ProfileInviteID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "EmailAddress", DbType.String, EmailAddress);
            db.AddInParameter(dbCommand, "CustomMessage", DbType.String, CustomMessage);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ProfileInviteID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Referral in the system
    /// </summary>
    public partial class Referral
    {
        #region Fields and Properties

        private int _referralID;		//
        private int _referralType;		//
        private int _becameMemberID;		//
        private int _referrerMemberID;		//
        private int _contactImportID;		//
        private int _campaignID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int ReferralID
        {
            get { return _referralID; }
            set { _referralID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReferralType
        {
            get { return _referralType; }
            set { _referralType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int BecameMemberID
        {
            get { return _becameMemberID; }
            set { _becameMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ReferrerMemberID
        {
            get { return _referrerMemberID; }
            set { _referrerMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int ContactImportID
        {
            get { return _contactImportID; }
            set { _contactImportID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int CampaignID
        {
            get { return _campaignID; }
            set { _campaignID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Referral()
        {

        }

        /// <summary>
        /// Instanciates a Referral object from the database via the ReferralID
        /// </summary>
        public Referral(int ReferralID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetReferralByReferralID");
            db.AddInParameter(dbCommand, "ReferralID", DbType.Int32, ReferralID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ReferralID")) { this._referralID = (int)dr["ReferralID"]; }
                    if (list.IsColumnPresent("ReferralType")) { this._referralType = (int)dr["ReferralType"]; }
                    if (list.IsColumnPresent("BecameMemberID")) { this._becameMemberID = (int)dr["BecameMemberID"]; }
                    if (list.IsColumnPresent("ReferrerMemberID")) { this._referrerMemberID = (int)dr["ReferrerMemberID"]; }
                    if (list.IsColumnPresent("ContactImportID")) { this._contactImportID = (int)dr["ContactImportID"]; }
                    if (list.IsColumnPresent("CampaignID")) { this._campaignID = (int)dr["CampaignID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Referral in the database with the ID " + ReferralID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Referral in the database 
        /// </summary>
        public static List<Referral> GetAllReferral()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllReferral");

            List<Referral> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Referrals
        /// </summary>
        public static List<Referral> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Referral> arr = new List<Referral>();

            Referral obj;

            while (dr.Read())
            {
                obj = new Referral();
                if (list.IsColumnPresent("ReferralID")) { obj._referralID = (int)dr["ReferralID"]; }
                if (list.IsColumnPresent("ReferralType")) { obj._referralType = (int)dr["ReferralType"]; }
                if (list.IsColumnPresent("BecameMemberID")) { obj._becameMemberID = (int)dr["BecameMemberID"]; }
                if (list.IsColumnPresent("ReferrerMemberID")) { obj._referrerMemberID = (int)dr["ReferrerMemberID"]; }
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }
                if (list.IsColumnPresent("CampaignID")) { obj._campaignID = (int)dr["CampaignID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Referrals
        /// </summary>
        public static List<Referral> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Referral> arr = new List<Referral>();

            Referral obj;

            while (dr.Read())
            {
                obj = new Referral();
                if (list.IsColumnPresent("ReferralID")) { obj._referralID = (int)dr["ReferralID"]; }
                if (list.IsColumnPresent("ReferralType")) { obj._referralType = (int)dr["ReferralType"]; }
                if (list.IsColumnPresent("BecameMemberID")) { obj._becameMemberID = (int)dr["BecameMemberID"]; }
                if (list.IsColumnPresent("ReferrerMemberID")) { obj._referrerMemberID = (int)dr["ReferrerMemberID"]; }
                if (list.IsColumnPresent("ContactImportID")) { obj._contactImportID = (int)dr["ContactImportID"]; }
                if (list.IsColumnPresent("CampaignID")) { obj._campaignID = (int)dr["CampaignID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Referral object or in the case of a zero ReferralID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveReferral");

            db.AddInParameter(dbCommand, "ReferralID", DbType.Int32, ReferralID);
            db.AddInParameter(dbCommand, "ReferralType", DbType.Int32, ReferralType);
            db.AddInParameter(dbCommand, "BecameMemberID", DbType.Int32, BecameMemberID);
            db.AddInParameter(dbCommand, "ReferrerMemberID", DbType.Int32, ReferrerMemberID);
            db.AddInParameter(dbCommand, "ContactImportID", DbType.Int32, ContactImportID);
            db.AddInParameter(dbCommand, "CampaignID", DbType.Int32, CampaignID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ReferralID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a ResourceFile in the system
    /// </summary>
    public partial class ResourceFile
    {
        /// <summary>
        /// The EmailMessage objects for this ResourceFile
        /// </summary>
        public List<EmailMessage> EmailMessage
        {
            get
            {
                if (emailMessage == null)
                    this.emailMessage = this.GetEmailMessageByResourceFileID();
                return emailMessage;
            }
            set { emailMessage = value; }
        }


        /// <summary>
        /// The Abuse objects for this ResourceFile
        /// </summary>
        public List<Abuse> Abuse
        {
            get
            {
                if (abuse == null)
                    this.abuse = this.GetAbuseByResourceFileID();
                return abuse;
            }
            set { abuse = value; }
        }


        #region Fields and Properties

        private int _resourceFileID;		//Uniqly generated ID created before database insertion
        private string _webResourceFileID = "";		//Uniqly generated ID created before database insertion
        private int _resourceType;		//NoneSet | Video | Photo | Hotspot | Profile
        private int _storageLocation;		//
        private int _server;		//
        private string _path = "";		//
        private string _fileName = "";		//
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//
        private List<EmailMessage> emailMessage;		// Foreign object
        private List<Abuse> abuse;		// Foreign object

        Database db;
        /// <summary>
        /// Uniqly generated ID created before database insertion
        /// </summary>
        public int ResourceFileID
        {
            get { return _resourceFileID; }
            set { _resourceFileID = value; }
        }

        /// <summary>
        /// Uniqly generated ID created before database insertion
        /// </summary>
        public string WebResourceFileID
        {
            get { return _webResourceFileID; }
            set { _webResourceFileID = value; }
        }

        /// <summary>
        /// NoneSet | Video | Photo | Hotspot | Profile
        /// </summary>
        public int ResourceType
        {
            get { return _resourceType; }
            set { _resourceType = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int StorageLocation
        {
            get { return _storageLocation; }
            set { _storageLocation = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Server
        {
            get { return _server; }
            set { _server = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Path
        {
            get { return _path; }
            set { _path = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string FileName
        {
            get { return _fileName; }
            set { _fileName = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public ResourceFile()
        {

        }

        /// <summary>
        /// Instanciates a ResourceFile object from the database via the ResourceFileID
        /// </summary>
        public ResourceFile(int ResourceFileID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetResourceFileByResourceFileID");
            db.AddInParameter(dbCommand, "ResourceFileID", DbType.Int32, ResourceFileID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ResourceFileID")) { this._resourceFileID = (int)dr["ResourceFileID"]; }
                    if (list.IsColumnPresent("WebResourceFileID")) { this._webResourceFileID = (string)dr["WebResourceFileID"]; }
                    if (list.IsColumnPresent("ResourceType")) { this._resourceType = (int)dr["ResourceType"]; }
                    if (list.IsColumnPresent("StorageLocation")) { this._storageLocation = (int)dr["StorageLocation"]; }
                    if (list.IsColumnPresent("Server")) { this._server = (int)dr["Server"]; }
                    if (list.IsColumnPresent("Path")) { this._path = (string)dr["Path"]; }
                    if (list.IsColumnPresent("FileName")) { this._fileName = (string)dr["FileName"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no ResourceFile in the database with the ID " + ResourceFileID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the ResourceFile in the database 
        /// </summary>
        public static List<ResourceFile> GetAllResourceFile()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllResourceFile");

            List<ResourceFile> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ResourceFiles
        /// </summary>
        public static List<ResourceFile> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ResourceFile> arr = new List<ResourceFile>();

            ResourceFile obj;

            while (dr.Read())
            {
                obj = new ResourceFile();
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (int)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("WebResourceFileID")) { obj._webResourceFileID = (string)dr["WebResourceFileID"]; }
                if (list.IsColumnPresent("ResourceType")) { obj._resourceType = (int)dr["ResourceType"]; }
                if (list.IsColumnPresent("StorageLocation")) { obj._storageLocation = (int)dr["StorageLocation"]; }
                if (list.IsColumnPresent("Server")) { obj._server = (int)dr["Server"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("FileName")) { obj._fileName = (string)dr["FileName"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of ResourceFiles
        /// </summary>
        public static List<ResourceFile> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<ResourceFile> arr = new List<ResourceFile>();

            ResourceFile obj;

            while (dr.Read())
            {
                obj = new ResourceFile();
                if (list.IsColumnPresent("ResourceFileID")) { obj._resourceFileID = (int)dr["ResourceFileID"]; }
                if (list.IsColumnPresent("WebResourceFileID")) { obj._webResourceFileID = (string)dr["WebResourceFileID"]; }
                if (list.IsColumnPresent("ResourceType")) { obj._resourceType = (int)dr["ResourceType"]; }
                if (list.IsColumnPresent("StorageLocation")) { obj._storageLocation = (int)dr["StorageLocation"]; }
                if (list.IsColumnPresent("Server")) { obj._server = (int)dr["Server"]; }
                if (list.IsColumnPresent("Path")) { obj._path = (string)dr["Path"]; }
                if (list.IsColumnPresent("FileName")) { obj._fileName = (string)dr["FileName"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the ResourceFile object or in the case of a zero ResourceFileID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveResourceFile");

            db.AddInParameter(dbCommand, "ResourceFileID", DbType.Int32, ResourceFileID);
            db.AddInParameter(dbCommand, "WebResourceFileID", DbType.String, WebResourceFileID);
            db.AddInParameter(dbCommand, "ResourceType", DbType.Int32, ResourceType);
            db.AddInParameter(dbCommand, "StorageLocation", DbType.Int32, StorageLocation);
            db.AddInParameter(dbCommand, "Server", DbType.Int32, Server);
            db.AddInParameter(dbCommand, "Path", DbType.String, Path);
            db.AddInParameter(dbCommand, "FileName", DbType.String, FileName);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ResourceFileID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the EmailMessage objects for this ResourceFile
        /// </summary>
        private List<EmailMessage> GetEmailMessageByResourceFileID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetEmailMessageByResourceFileID");
            db.AddInParameter(dbCommand, "ResourceFileID", DbType.Int32, ResourceFileID);

            List<EmailMessage> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.EmailMessage.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Abuse objects for this ResourceFile
        /// </summary>
        private List<Abuse> GetAbuseByResourceFileID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAbuseByResourceFileID");
            db.AddInParameter(dbCommand, "ResourceFileID", DbType.Int32, ResourceFileID);

            List<Abuse> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Abuse.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Script in the system
    /// </summary>
    public partial class Script
    {
        #region Fields and Properties

        private int _scriptID;		//DB identifier for the Script
        private string _text = "";		//The script syntax
        private DateTime _modifiedDT = new DateTime(1900, 1, 1);		//When the script was last modified
        private DateTime _createdDT = new DateTime(1900, 1, 1);		//When the script was created

        Database db;
        /// <summary>
        /// DB identifier for the Script
        /// </summary>
        public int ScriptID
        {
            get { return _scriptID; }
            set { _scriptID = value; }
        }

        /// <summary>
        /// The script syntax
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// When the script was last modified
        /// </summary>
        public DateTime ModifiedDT
        {
            get { return _modifiedDT; }
            set { _modifiedDT = value; }
        }

        /// <summary>
        /// When the script was created
        /// </summary>
        public DateTime CreatedDT
        {
            get { return _createdDT; }
            set { _createdDT = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Script()
        {

        }

        /// <summary>
        /// Instanciates a Script object from the database via the ScriptID
        /// </summary>
        public Script(int ScriptID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetScriptByScriptID");
            db.AddInParameter(dbCommand, "ScriptID", DbType.Int32, ScriptID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("ScriptID")) { this._scriptID = (int)dr["ScriptID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("ModifiedDT")) { this._modifiedDT = (DateTime)dr["ModifiedDT"]; }
                    if (list.IsColumnPresent("CreatedDT")) { this._createdDT = (DateTime)dr["CreatedDT"]; }

                }
                else
                {
                    throw new Exception("There is no Script in the database with the ID " + ScriptID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Script in the database 
        /// </summary>
        public static List<Script> GetAllScript()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllScript");

            List<Script> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Scripts
        /// </summary>
        public static List<Script> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Script> arr = new List<Script>();

            Script obj;

            while (dr.Read())
            {
                obj = new Script();
                if (list.IsColumnPresent("ScriptID")) { obj._scriptID = (int)dr["ScriptID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("ModifiedDT")) { obj._modifiedDT = (DateTime)dr["ModifiedDT"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Scripts
        /// </summary>
        public static List<Script> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Script> arr = new List<Script>();

            Script obj;

            while (dr.Read())
            {
                obj = new Script();
                if (list.IsColumnPresent("ScriptID")) { obj._scriptID = (int)dr["ScriptID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("ModifiedDT")) { obj._modifiedDT = (DateTime)dr["ModifiedDT"]; }
                if (list.IsColumnPresent("CreatedDT")) { obj._createdDT = (DateTime)dr["CreatedDT"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Script object or in the case of a zero ScriptID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveScript");

            db.AddInParameter(dbCommand, "ScriptID", DbType.Int32, ScriptID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "ModifiedDT", DbType.DateTime, ModifiedDT);
            db.AddInParameter(dbCommand, "CreatedDT", DbType.DateTime, CreatedDT);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.ScriptID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a SearchRequest in the system
    /// </summary>
    public partial class SearchRequest
    {
        #region Fields and Properties

        private int _searchRequestID;		//
        private int _memberID;		//
        private int _searchTermID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int SearchRequestID
        {
            get { return _searchRequestID; }
            set { _searchRequestID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SearchTermID
        {
            get { return _searchTermID; }
            set { _searchTermID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public SearchRequest()
        {

        }

        /// <summary>
        /// Instanciates a SearchRequest object from the database via the SearchRequestID
        /// </summary>
        public SearchRequest(int SearchRequestID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSearchRequestBySearchRequestID");
            db.AddInParameter(dbCommand, "SearchRequestID", DbType.Int32, SearchRequestID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("SearchRequestID")) { this._searchRequestID = (int)dr["SearchRequestID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("SearchTermID")) { this._searchTermID = (int)dr["SearchTermID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no SearchRequest in the database with the ID " + SearchRequestID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the SearchRequest in the database 
        /// </summary>
        public static List<SearchRequest> GetAllSearchRequest()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllSearchRequest");

            List<SearchRequest> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SearchRequests
        /// </summary>
        public static List<SearchRequest> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SearchRequest> arr = new List<SearchRequest>();

            SearchRequest obj;

            while (dr.Read())
            {
                obj = new SearchRequest();
                if (list.IsColumnPresent("SearchRequestID")) { obj._searchRequestID = (int)dr["SearchRequestID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SearchRequests
        /// </summary>
        public static List<SearchRequest> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SearchRequest> arr = new List<SearchRequest>();

            SearchRequest obj;

            while (dr.Read())
            {
                obj = new SearchRequest();
                if (list.IsColumnPresent("SearchRequestID")) { obj._searchRequestID = (int)dr["SearchRequestID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the SearchRequest object or in the case of a zero SearchRequestID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveSearchRequest");

            db.AddInParameter(dbCommand, "SearchRequestID", DbType.Int32, SearchRequestID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.SearchRequestID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a SearchTerm in the system
    /// </summary>
    public partial class SearchTerm
    {
        /// <summary>
        /// The PhotoView objects for this SearchTerm
        /// </summary>
        public List<PhotoView> PhotoView
        {
            get
            {
                if (photoView == null)
                    this.photoView = this.GetPhotoViewBySearchTermID();
                return photoView;
            }
            set { photoView = value; }
        }


        /// <summary>
        /// The SearchRequest objects for this SearchTerm
        /// </summary>
        public List<SearchRequest> SearchRequest
        {
            get
            {
                if (searchRequest == null)
                    this.searchRequest = this.GetSearchRequestBySearchTermID();
                return searchRequest;
            }
            set { searchRequest = value; }
        }


        /// <summary>
        /// The VideoView objects for this SearchTerm
        /// </summary>
        public List<VideoView> VideoView
        {
            get
            {
                if (videoView == null)
                    this.videoView = this.GetVideoViewBySearchTermID();
                return videoView;
            }
            set { videoView = value; }
        }


        #region Fields and Properties

        private int _searchTermID;		//
        private string _termValue = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//
        private List<PhotoView> photoView;		// Foreign object
        private List<SearchRequest> searchRequest;		// Foreign object
        private List<VideoView> videoView;		// Foreign object

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int SearchTermID
        {
            get { return _searchTermID; }
            set { _searchTermID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string TermValue
        {
            get { return _termValue; }
            set { _termValue = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public SearchTerm()
        {

        }

        /// <summary>
        /// Instanciates a SearchTerm object from the database via the SearchTermID
        /// </summary>
        public SearchTerm(int SearchTermID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSearchTermBySearchTermID");
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("SearchTermID")) { this._searchTermID = (int)dr["SearchTermID"]; }
                    if (list.IsColumnPresent("TermValue")) { this._termValue = (string)dr["TermValue"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no SearchTerm in the database with the ID " + SearchTermID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the SearchTerm in the database 
        /// </summary>
        public static List<SearchTerm> GetAllSearchTerm()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllSearchTerm");

            List<SearchTerm> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SearchTerms
        /// </summary>
        public static List<SearchTerm> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SearchTerm> arr = new List<SearchTerm>();

            SearchTerm obj;

            while (dr.Read())
            {
                obj = new SearchTerm();
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("TermValue")) { obj._termValue = (string)dr["TermValue"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SearchTerms
        /// </summary>
        public static List<SearchTerm> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SearchTerm> arr = new List<SearchTerm>();

            SearchTerm obj;

            while (dr.Read())
            {
                obj = new SearchTerm();
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("TermValue")) { obj._termValue = (string)dr["TermValue"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the SearchTerm object or in the case of a zero SearchTermID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveSearchTerm");

            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);
            db.AddInParameter(dbCommand, "TermValue", DbType.String, TermValue);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.SearchTermID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the PhotoView objects for this SearchTerm
        /// </summary>
        private List<PhotoView> GetPhotoViewBySearchTermID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoViewBySearchTermID");
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);

            List<PhotoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the SearchRequest objects for this SearchTerm
        /// </summary>
        private List<SearchRequest> GetSearchRequestBySearchTermID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSearchRequestBySearchTermID");
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);

            List<SearchRequest> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.SearchRequest.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoView objects for this SearchTerm
        /// </summary>
        private List<VideoView> GetVideoViewBySearchTermID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoViewBySearchTermID");
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);

            List<VideoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a SubscriptionGroup in the system
    /// </summary>
    public partial class SubscriptionGroup
    {
        #region Fields and Properties

        private int _subscriptionGroupID;		//
        private int _memberID;		//
        private int _subscribeToGroupID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int SubscriptionGroupID
        {
            get { return _subscriptionGroupID; }
            set { _subscriptionGroupID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SubscribeToGroupID
        {
            get { return _subscribeToGroupID; }
            set { _subscribeToGroupID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public SubscriptionGroup()
        {

        }

        /// <summary>
        /// Instanciates a SubscriptionGroup object from the database via the SubscriptionGroupID
        /// </summary>
        public SubscriptionGroup(int SubscriptionGroupID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSubscriptionGroupBySubscriptionGroupID");
            db.AddInParameter(dbCommand, "SubscriptionGroupID", DbType.Int32, SubscriptionGroupID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("SubscriptionGroupID")) { this._subscriptionGroupID = (int)dr["SubscriptionGroupID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("SubscribeToGroupID")) { this._subscribeToGroupID = (int)dr["SubscribeToGroupID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no SubscriptionGroup in the database with the ID " + SubscriptionGroupID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the SubscriptionGroup in the database 
        /// </summary>
        public static List<SubscriptionGroup> GetAllSubscriptionGroup()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllSubscriptionGroup");

            List<SubscriptionGroup> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SubscriptionGroups
        /// </summary>
        public static List<SubscriptionGroup> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SubscriptionGroup> arr = new List<SubscriptionGroup>();

            SubscriptionGroup obj;

            while (dr.Read())
            {
                obj = new SubscriptionGroup();
                if (list.IsColumnPresent("SubscriptionGroupID")) { obj._subscriptionGroupID = (int)dr["SubscriptionGroupID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SubscribeToGroupID")) { obj._subscribeToGroupID = (int)dr["SubscribeToGroupID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SubscriptionGroups
        /// </summary>
        public static List<SubscriptionGroup> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SubscriptionGroup> arr = new List<SubscriptionGroup>();

            SubscriptionGroup obj;

            while (dr.Read())
            {
                obj = new SubscriptionGroup();
                if (list.IsColumnPresent("SubscriptionGroupID")) { obj._subscriptionGroupID = (int)dr["SubscriptionGroupID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SubscribeToGroupID")) { obj._subscribeToGroupID = (int)dr["SubscribeToGroupID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the SubscriptionGroup object or in the case of a zero SubscriptionGroupID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveSubscriptionGroup");

            db.AddInParameter(dbCommand, "SubscriptionGroupID", DbType.Int32, SubscriptionGroupID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "SubscribeToGroupID", DbType.Int32, SubscribeToGroupID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.SubscriptionGroupID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a SubscriptionMember in the system
    /// </summary>
    public partial class SubscriptionMember
    {
        #region Fields and Properties

        private int _subscriptionMemberID;		//
        private int _memberID;		//
        private int _subscribeToMemberID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int SubscriptionMemberID
        {
            get { return _subscriptionMemberID; }
            set { _subscriptionMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SubscribeToMemberID
        {
            get { return _subscribeToMemberID; }
            set { _subscribeToMemberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public SubscriptionMember()
        {

        }

        /// <summary>
        /// Instanciates a SubscriptionMember object from the database via the SubscriptionMemberID
        /// </summary>
        public SubscriptionMember(int SubscriptionMemberID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetSubscriptionMemberBySubscriptionMemberID");
            db.AddInParameter(dbCommand, "SubscriptionMemberID", DbType.Int32, SubscriptionMemberID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("SubscriptionMemberID")) { this._subscriptionMemberID = (int)dr["SubscriptionMemberID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("SubscribeToMemberID")) { this._subscribeToMemberID = (int)dr["SubscribeToMemberID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no SubscriptionMember in the database with the ID " + SubscriptionMemberID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the SubscriptionMember in the database 
        /// </summary>
        public static List<SubscriptionMember> GetAllSubscriptionMember()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllSubscriptionMember");

            List<SubscriptionMember> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SubscriptionMembers
        /// </summary>
        public static List<SubscriptionMember> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SubscriptionMember> arr = new List<SubscriptionMember>();

            SubscriptionMember obj;

            while (dr.Read())
            {
                obj = new SubscriptionMember();
                if (list.IsColumnPresent("SubscriptionMemberID")) { obj._subscriptionMemberID = (int)dr["SubscriptionMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SubscribeToMemberID")) { obj._subscribeToMemberID = (int)dr["SubscribeToMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of SubscriptionMembers
        /// </summary>
        public static List<SubscriptionMember> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<SubscriptionMember> arr = new List<SubscriptionMember>();

            SubscriptionMember obj;

            while (dr.Read())
            {
                obj = new SubscriptionMember();
                if (list.IsColumnPresent("SubscriptionMemberID")) { obj._subscriptionMemberID = (int)dr["SubscriptionMemberID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SubscribeToMemberID")) { obj._subscribeToMemberID = (int)dr["SubscribeToMemberID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the SubscriptionMember object or in the case of a zero SubscriptionMemberID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveSubscriptionMember");

            db.AddInParameter(dbCommand, "SubscriptionMemberID", DbType.Int32, SubscriptionMemberID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "SubscribeToMemberID", DbType.Int32, SubscribeToMemberID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.SubscriptionMemberID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TagWord in the system
    /// </summary>
    public partial class TagWord
    {
        /// <summary>
        /// The PhotoTag objects for this TagWord
        /// </summary>
        public List<PhotoTag> PhotoTag
        {
            get
            {
                if (photoTag == null)
                    this.photoTag = this.GetPhotoTagByTagWordID();
                return photoTag;
            }
            set { photoTag = value; }
        }


        #region Fields and Properties

        private int _tagWordID;		//DB identifier for the TagWord
        private string _word = "";		//The word
        private List<PhotoTag> photoTag;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the TagWord
        /// </summary>
        public int TagWordID
        {
            get { return _tagWordID; }
            set { _tagWordID = value; }
        }

        /// <summary>
        /// The word
        /// </summary>
        public string Word
        {
            get { return _word; }
            set { _word = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TagWord()
        {

        }

        /// <summary>
        /// Instanciates a TagWord object from the database via the TagWordID
        /// </summary>
        public TagWord(int TagWordID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTagWordByTagWordID");
            db.AddInParameter(dbCommand, "TagWordID", DbType.Int32, TagWordID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TagWordID")) { this._tagWordID = (int)dr["TagWordID"]; }
                    if (list.IsColumnPresent("Word")) { this._word = (string)dr["Word"]; }

                }
                else
                {
                    throw new Exception("There is no TagWord in the database with the ID " + TagWordID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TagWord in the database 
        /// </summary>
        public static List<TagWord> GetAllTagWord()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTagWord");

            List<TagWord> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TagWords
        /// </summary>
        public static List<TagWord> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TagWord> arr = new List<TagWord>();

            TagWord obj;

            while (dr.Read())
            {
                obj = new TagWord();
                if (list.IsColumnPresent("TagWordID")) { obj._tagWordID = (int)dr["TagWordID"]; }
                if (list.IsColumnPresent("Word")) { obj._word = (string)dr["Word"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TagWords
        /// </summary>
        public static List<TagWord> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TagWord> arr = new List<TagWord>();

            TagWord obj;

            while (dr.Read())
            {
                obj = new TagWord();
                if (list.IsColumnPresent("TagWordID")) { obj._tagWordID = (int)dr["TagWordID"]; }
                if (list.IsColumnPresent("Word")) { obj._word = (string)dr["Word"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TagWord object or in the case of a zero TagWordID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTagWord");

            db.AddInParameter(dbCommand, "TagWordID", DbType.Int32, TagWordID);
            db.AddInParameter(dbCommand, "Word", DbType.String, Word);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TagWordID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the PhotoTag objects for this TagWord
        /// </summary>
        private List<PhotoTag> GetPhotoTagByTagWordID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetPhotoTagByTagWordID");
            db.AddInParameter(dbCommand, "TagWordID", DbType.Int32, TagWordID);

            List<PhotoTag> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.PhotoTag.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopPhotoPosterByViews in the system
    /// </summary>
    public partial class TopPhotoPosterByViews
    {
        #region Fields and Properties

        private int _topPhotoPosterByViewsID;		//DB identifier for the TopPhotoPosterByViews
        private int _postion;		//The ranked position of the Photo
        private int _memberID;		//DB identifier for the Member

        Database db;
        /// <summary>
        /// DB identifier for the TopPhotoPosterByViews
        /// </summary>
        public int TopPhotoPosterByViewsID
        {
            get { return _topPhotoPosterByViewsID; }
            set { _topPhotoPosterByViewsID = value; }
        }

        /// <summary>
        /// The ranked position of the Photo
        /// </summary>
        public int Postion
        {
            get { return _postion; }
            set { _postion = value; }
        }

        /// <summary>
        /// DB identifier for the Member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopPhotoPosterByViews()
        {

        }

        /// <summary>
        /// Instanciates a TopPhotoPosterByViews object from the database via the TopPhotoPosterByViewsID
        /// </summary>
        public TopPhotoPosterByViews(int TopPhotoPosterByViewsID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotoPosterByViewsByTopPhotoPosterByViewsID");
            db.AddInParameter(dbCommand, "TopPhotoPosterByViewsID", DbType.Int32, TopPhotoPosterByViewsID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopPhotoPosterByViewsID")) { this._topPhotoPosterByViewsID = (int)dr["TopPhotoPosterByViewsID"]; }
                    if (list.IsColumnPresent("Postion")) { this._postion = (int)dr["Postion"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }

                }
                else
                {
                    throw new Exception("There is no TopPhotoPosterByViews in the database with the ID " + TopPhotoPosterByViewsID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopPhotoPosterByViews in the database 
        /// </summary>
        public static List<TopPhotoPosterByViews> GetAllTopPhotoPosterByViews()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopPhotoPosterByViews");

            List<TopPhotoPosterByViews> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotoPosterByViewss
        /// </summary>
        public static List<TopPhotoPosterByViews> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotoPosterByViews> arr = new List<TopPhotoPosterByViews>();

            TopPhotoPosterByViews obj;

            while (dr.Read())
            {
                obj = new TopPhotoPosterByViews();
                if (list.IsColumnPresent("TopPhotoPosterByViewsID")) { obj._topPhotoPosterByViewsID = (int)dr["TopPhotoPosterByViewsID"]; }
                if (list.IsColumnPresent("Postion")) { obj._postion = (int)dr["Postion"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotoPosterByViewss
        /// </summary>
        public static List<TopPhotoPosterByViews> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotoPosterByViews> arr = new List<TopPhotoPosterByViews>();

            TopPhotoPosterByViews obj;

            while (dr.Read())
            {
                obj = new TopPhotoPosterByViews();
                if (list.IsColumnPresent("TopPhotoPosterByViewsID")) { obj._topPhotoPosterByViewsID = (int)dr["TopPhotoPosterByViewsID"]; }
                if (list.IsColumnPresent("Postion")) { obj._postion = (int)dr["Postion"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopPhotoPosterByViews object or in the case of a zero TopPhotoPosterByViewsID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopPhotoPosterByViews");

            db.AddInParameter(dbCommand, "TopPhotoPosterByViewsID", DbType.Int32, TopPhotoPosterByViewsID);
            db.AddInParameter(dbCommand, "Postion", DbType.Int32, Postion);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopPhotoPosterByViewsID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopPhotosRated in the system
    /// </summary>
    public partial class TopPhotosRated
    {
        #region Fields and Properties

        private int _topPhotosRatedID;		//DB identifier for the TopVideosRatedID
        private int _position;		//The ranked position of the Photo
        private int _photoID;		//DB identifier for the Photo

        Database db;
        /// <summary>
        /// DB identifier for the TopVideosRatedID
        /// </summary>
        public int TopPhotosRatedID
        {
            get { return _topPhotosRatedID; }
            set { _topPhotosRatedID = value; }
        }

        /// <summary>
        /// The ranked position of the Photo
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Photo
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopPhotosRated()
        {

        }

        /// <summary>
        /// Instanciates a TopPhotosRated object from the database via the TopPhotosRatedID
        /// </summary>
        public TopPhotosRated(int TopPhotosRatedID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotosRatedByTopPhotosRatedID");
            db.AddInParameter(dbCommand, "TopPhotosRatedID", DbType.Int32, TopPhotosRatedID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopPhotosRatedID")) { this._topPhotosRatedID = (int)dr["TopPhotosRatedID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }

                }
                else
                {
                    throw new Exception("There is no TopPhotosRated in the database with the ID " + TopPhotosRatedID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopPhotosRated in the database 
        /// </summary>
        public static List<TopPhotosRated> GetAllTopPhotosRated()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopPhotosRated");

            List<TopPhotosRated> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotosRateds
        /// </summary>
        public static List<TopPhotosRated> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotosRated> arr = new List<TopPhotosRated>();

            TopPhotosRated obj;

            while (dr.Read())
            {
                obj = new TopPhotosRated();
                if (list.IsColumnPresent("TopPhotosRatedID")) { obj._topPhotosRatedID = (int)dr["TopPhotosRatedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotosRateds
        /// </summary>
        public static List<TopPhotosRated> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotosRated> arr = new List<TopPhotosRated>();

            TopPhotosRated obj;

            while (dr.Read())
            {
                obj = new TopPhotosRated();
                if (list.IsColumnPresent("TopPhotosRatedID")) { obj._topPhotosRatedID = (int)dr["TopPhotosRatedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopPhotosRated object or in the case of a zero TopPhotosRatedID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopPhotosRated");

            db.AddInParameter(dbCommand, "TopPhotosRatedID", DbType.Int32, TopPhotosRatedID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopPhotosRatedID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopPhotosViewed in the system
    /// </summary>
    public partial class TopPhotosViewed
    {
        #region Fields and Properties

        private int _topPhotosViewedID;		//DB identifier for the TopPhotosViewed
        private int _position;		//The ranked position of the Photo
        private int _photoID;		//DB identifier for the Photo
        private int _views;		//Number of Views

        Database db;
        /// <summary>
        /// DB identifier for the TopPhotosViewed
        /// </summary>
        public int TopPhotosViewedID
        {
            get { return _topPhotosViewedID; }
            set { _topPhotosViewedID = value; }
        }

        /// <summary>
        /// The ranked position of the Photo
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Photo
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// Number of Views
        /// </summary>
        public int Views
        {
            get { return _views; }
            set { _views = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopPhotosViewed()
        {

        }

        /// <summary>
        /// Instanciates a TopPhotosViewed object from the database via the TopPhotosViewedID
        /// </summary>
        public TopPhotosViewed(int TopPhotosViewedID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopPhotosViewedByTopPhotosViewedID");
            db.AddInParameter(dbCommand, "TopPhotosViewedID", DbType.Int32, TopPhotosViewedID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopPhotosViewedID")) { this._topPhotosViewedID = (int)dr["TopPhotosViewedID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("Views")) { this._views = (int)dr["Views"]; }

                }
                else
                {
                    throw new Exception("There is no TopPhotosViewed in the database with the ID " + TopPhotosViewedID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopPhotosViewed in the database 
        /// </summary>
        public static List<TopPhotosViewed> GetAllTopPhotosViewed()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopPhotosViewed");

            List<TopPhotosViewed> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotosVieweds
        /// </summary>
        public static List<TopPhotosViewed> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotosViewed> arr = new List<TopPhotosViewed>();

            TopPhotosViewed obj;

            while (dr.Read())
            {
                obj = new TopPhotosViewed();
                if (list.IsColumnPresent("TopPhotosViewedID")) { obj._topPhotosViewedID = (int)dr["TopPhotosViewedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("Views")) { obj._views = (int)dr["Views"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopPhotosVieweds
        /// </summary>
        public static List<TopPhotosViewed> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopPhotosViewed> arr = new List<TopPhotosViewed>();

            TopPhotosViewed obj;

            while (dr.Read())
            {
                obj = new TopPhotosViewed();
                if (list.IsColumnPresent("TopPhotosViewedID")) { obj._topPhotosViewedID = (int)dr["TopPhotosViewedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("Views")) { obj._views = (int)dr["Views"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopPhotosViewed object or in the case of a zero TopPhotosViewedID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopPhotosViewed");

            db.AddInParameter(dbCommand, "TopPhotosViewedID", DbType.Int32, TopPhotosViewedID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "Views", DbType.Int32, Views);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopPhotosViewedID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopVideoPosterByViews in the system
    /// </summary>
    public partial class TopVideoPosterByViews
    {
        #region Fields and Properties

        private int _topVideoPosterByViewsID;		//DB identifier for the TopVideoPosterByViews
        private int _position;		//The ranked position of the Video
        private int _memberID;		//DB identifier for the Member

        Database db;
        /// <summary>
        /// DB identifier for the TopVideoPosterByViews
        /// </summary>
        public int TopVideoPosterByViewsID
        {
            get { return _topVideoPosterByViewsID; }
            set { _topVideoPosterByViewsID = value; }
        }

        /// <summary>
        /// The ranked position of the Video
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Member
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopVideoPosterByViews()
        {

        }

        /// <summary>
        /// Instanciates a TopVideoPosterByViews object from the database via the TopVideoPosterByViewsID
        /// </summary>
        public TopVideoPosterByViews(int TopVideoPosterByViewsID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideoPosterByViewsByTopVideoPosterByViewsID");
            db.AddInParameter(dbCommand, "TopVideoPosterByViewsID", DbType.Int32, TopVideoPosterByViewsID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopVideoPosterByViewsID")) { this._topVideoPosterByViewsID = (int)dr["TopVideoPosterByViewsID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }

                }
                else
                {
                    throw new Exception("There is no TopVideoPosterByViews in the database with the ID " + TopVideoPosterByViewsID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopVideoPosterByViews in the database 
        /// </summary>
        public static List<TopVideoPosterByViews> GetAllTopVideoPosterByViews()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopVideoPosterByViews");

            List<TopVideoPosterByViews> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideoPosterByViewss
        /// </summary>
        public static List<TopVideoPosterByViews> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideoPosterByViews> arr = new List<TopVideoPosterByViews>();

            TopVideoPosterByViews obj;

            while (dr.Read())
            {
                obj = new TopVideoPosterByViews();
                if (list.IsColumnPresent("TopVideoPosterByViewsID")) { obj._topVideoPosterByViewsID = (int)dr["TopVideoPosterByViewsID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideoPosterByViewss
        /// </summary>
        public static List<TopVideoPosterByViews> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideoPosterByViews> arr = new List<TopVideoPosterByViews>();

            TopVideoPosterByViews obj;

            while (dr.Read())
            {
                obj = new TopVideoPosterByViews();
                if (list.IsColumnPresent("TopVideoPosterByViewsID")) { obj._topVideoPosterByViewsID = (int)dr["TopVideoPosterByViewsID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopVideoPosterByViews object or in the case of a zero TopVideoPosterByViewsID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopVideoPosterByViews");

            db.AddInParameter(dbCommand, "TopVideoPosterByViewsID", DbType.Int32, TopVideoPosterByViewsID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopVideoPosterByViewsID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopVideosComment in the system
    /// </summary>
    public partial class TopVideosComment
    {
        #region Fields and Properties

        private int _topVideosCommentID;		//
        private int _position;		//
        private int _videoID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int TopVideosCommentID
        {
            get { return _topVideosCommentID; }
            set { _topVideosCommentID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopVideosComment()
        {

        }

        /// <summary>
        /// Instanciates a TopVideosComment object from the database via the TopVideosCommentID
        /// </summary>
        public TopVideosComment(int TopVideosCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosCommentByTopVideosCommentID");
            db.AddInParameter(dbCommand, "TopVideosCommentID", DbType.Int32, TopVideosCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopVideosCommentID")) { this._topVideosCommentID = (int)dr["TopVideosCommentID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no TopVideosComment in the database with the ID " + TopVideosCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopVideosComment in the database 
        /// </summary>
        public static List<TopVideosComment> GetAllTopVideosComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopVideosComment");

            List<TopVideosComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosComments
        /// </summary>
        public static List<TopVideosComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosComment> arr = new List<TopVideosComment>();

            TopVideosComment obj;

            while (dr.Read())
            {
                obj = new TopVideosComment();
                if (list.IsColumnPresent("TopVideosCommentID")) { obj._topVideosCommentID = (int)dr["TopVideosCommentID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosComments
        /// </summary>
        public static List<TopVideosComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosComment> arr = new List<TopVideosComment>();

            TopVideosComment obj;

            while (dr.Read())
            {
                obj = new TopVideosComment();
                if (list.IsColumnPresent("TopVideosCommentID")) { obj._topVideosCommentID = (int)dr["TopVideosCommentID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopVideosComment object or in the case of a zero TopVideosCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopVideosComment");

            db.AddInParameter(dbCommand, "TopVideosCommentID", DbType.Int32, TopVideosCommentID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopVideosCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopVideosFeatured in the system
    /// </summary>
    public partial class TopVideosFeatured
    {
        #region Fields and Properties

        private int _topVideosFeaturedID;		//
        private int _position;		//
        private int _videoID;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int TopVideosFeaturedID
        {
            get { return _topVideosFeaturedID; }
            set { _topVideosFeaturedID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopVideosFeatured()
        {

        }

        /// <summary>
        /// Instanciates a TopVideosFeatured object from the database via the TopVideosFeaturedID
        /// </summary>
        public TopVideosFeatured(int TopVideosFeaturedID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosFeaturedByTopVideosFeaturedID");
            db.AddInParameter(dbCommand, "TopVideosFeaturedID", DbType.Int32, TopVideosFeaturedID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopVideosFeaturedID")) { this._topVideosFeaturedID = (int)dr["TopVideosFeaturedID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no TopVideosFeatured in the database with the ID " + TopVideosFeaturedID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopVideosFeatured in the database 
        /// </summary>
        public static List<TopVideosFeatured> GetAllTopVideosFeatured()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopVideosFeatured");

            List<TopVideosFeatured> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosFeatureds
        /// </summary>
        public static List<TopVideosFeatured> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosFeatured> arr = new List<TopVideosFeatured>();

            TopVideosFeatured obj;

            while (dr.Read())
            {
                obj = new TopVideosFeatured();
                if (list.IsColumnPresent("TopVideosFeaturedID")) { obj._topVideosFeaturedID = (int)dr["TopVideosFeaturedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosFeatureds
        /// </summary>
        public static List<TopVideosFeatured> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosFeatured> arr = new List<TopVideosFeatured>();

            TopVideosFeatured obj;

            while (dr.Read())
            {
                obj = new TopVideosFeatured();
                if (list.IsColumnPresent("TopVideosFeaturedID")) { obj._topVideosFeaturedID = (int)dr["TopVideosFeaturedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopVideosFeatured object or in the case of a zero TopVideosFeaturedID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopVideosFeatured");

            db.AddInParameter(dbCommand, "TopVideosFeaturedID", DbType.Int32, TopVideosFeaturedID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopVideosFeaturedID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopVideosRated in the system
    /// </summary>
    public partial class TopVideosRated
    {
        #region Fields and Properties

        private int _topVideosRatedID;		//DB identifier for the TopVideosRated
        private int _position;		//The ranked position of the Video
        private int _videoID;		//DB identifier for the Video

        Database db;
        /// <summary>
        /// DB identifier for the TopVideosRated
        /// </summary>
        public int TopVideosRatedID
        {
            get { return _topVideosRatedID; }
            set { _topVideosRatedID = value; }
        }

        /// <summary>
        /// The ranked position of the Video
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Video
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopVideosRated()
        {

        }

        /// <summary>
        /// Instanciates a TopVideosRated object from the database via the TopVideosRatedID
        /// </summary>
        public TopVideosRated(int TopVideosRatedID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosRatedByTopVideosRatedID");
            db.AddInParameter(dbCommand, "TopVideosRatedID", DbType.Int32, TopVideosRatedID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopVideosRatedID")) { this._topVideosRatedID = (int)dr["TopVideosRatedID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no TopVideosRated in the database with the ID " + TopVideosRatedID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopVideosRated in the database 
        /// </summary>
        public static List<TopVideosRated> GetAllTopVideosRated()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopVideosRated");

            List<TopVideosRated> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosRateds
        /// </summary>
        public static List<TopVideosRated> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosRated> arr = new List<TopVideosRated>();

            TopVideosRated obj;

            while (dr.Read())
            {
                obj = new TopVideosRated();
                if (list.IsColumnPresent("TopVideosRatedID")) { obj._topVideosRatedID = (int)dr["TopVideosRatedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosRateds
        /// </summary>
        public static List<TopVideosRated> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosRated> arr = new List<TopVideosRated>();

            TopVideosRated obj;

            while (dr.Read())
            {
                obj = new TopVideosRated();
                if (list.IsColumnPresent("TopVideosRatedID")) { obj._topVideosRatedID = (int)dr["TopVideosRatedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopVideosRated object or in the case of a zero TopVideosRatedID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopVideosRated");

            db.AddInParameter(dbCommand, "TopVideosRatedID", DbType.Int32, TopVideosRatedID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopVideosRatedID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a TopVideosViewed in the system
    /// </summary>
    public partial class TopVideosViewed
    {
        #region Fields and Properties

        private int _topVideosViewedID;		//DB identifier for the TopVideosViewed
        private int _position;		//The ranked position of the Video
        private int _videoID;		//DB identifier for the Video

        Database db;
        /// <summary>
        /// DB identifier for the TopVideosViewed
        /// </summary>
        public int TopVideosViewedID
        {
            get { return _topVideosViewedID; }
            set { _topVideosViewedID = value; }
        }

        /// <summary>
        /// The ranked position of the Video
        /// </summary>
        public int Position
        {
            get { return _position; }
            set { _position = value; }
        }

        /// <summary>
        /// DB identifier for the Video
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public TopVideosViewed()
        {

        }

        /// <summary>
        /// Instanciates a TopVideosViewed object from the database via the TopVideosViewedID
        /// </summary>
        public TopVideosViewed(int TopVideosViewedID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosViewedByTopVideosViewedID");
            db.AddInParameter(dbCommand, "TopVideosViewedID", DbType.Int32, TopVideosViewedID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TopVideosViewedID")) { this._topVideosViewedID = (int)dr["TopVideosViewedID"]; }
                    if (list.IsColumnPresent("Position")) { this._position = (int)dr["Position"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }

                }
                else
                {
                    throw new Exception("There is no TopVideosViewed in the database with the ID " + TopVideosViewedID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the TopVideosViewed in the database 
        /// </summary>
        public static List<TopVideosViewed> GetAllTopVideosViewed()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTopVideosViewed");

            List<TopVideosViewed> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosVieweds
        /// </summary>
        public static List<TopVideosViewed> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosViewed> arr = new List<TopVideosViewed>();

            TopVideosViewed obj;

            while (dr.Read())
            {
                obj = new TopVideosViewed();
                if (list.IsColumnPresent("TopVideosViewedID")) { obj._topVideosViewedID = (int)dr["TopVideosViewedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of TopVideosVieweds
        /// </summary>
        public static List<TopVideosViewed> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<TopVideosViewed> arr = new List<TopVideosViewed>();

            TopVideosViewed obj;

            while (dr.Read())
            {
                obj = new TopVideosViewed();
                if (list.IsColumnPresent("TopVideosViewedID")) { obj._topVideosViewedID = (int)dr["TopVideosViewedID"]; }
                if (list.IsColumnPresent("Position")) { obj._position = (int)dr["Position"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the TopVideosViewed object or in the case of a zero TopVideosViewedID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTopVideosViewed");

            db.AddInParameter(dbCommand, "TopVideosViewedID", DbType.Int32, TopVideosViewedID);
            db.AddInParameter(dbCommand, "Position", DbType.Int32, Position);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TopVideosViewedID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Trace in the system
    /// </summary>
    public partial class Trace
    {
        #region Fields and Properties

        private int _traceID;		//
        private string _text = "";		//
        private string _source = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int TraceID
        {
            get { return _traceID; }
            set { _traceID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Source
        {
            get { return _source; }
            set { _source = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Trace()
        {

        }

        /// <summary>
        /// Instanciates a Trace object from the database via the TraceID
        /// </summary>
        public Trace(int TraceID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTraceByTraceID");
            db.AddInParameter(dbCommand, "TraceID", DbType.Int32, TraceID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("TraceID")) { this._traceID = (int)dr["TraceID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("Source")) { this._source = (string)dr["Source"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no Trace in the database with the ID " + TraceID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Trace in the database 
        /// </summary>
        public static List<Trace> GetAllTrace()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllTrace");

            List<Trace> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Traces
        /// </summary>
        public static List<Trace> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Trace> arr = new List<Trace>();

            Trace obj;

            while (dr.Read())
            {
                obj = new Trace();
                if (list.IsColumnPresent("TraceID")) { obj._traceID = (int)dr["TraceID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("Source")) { obj._source = (string)dr["Source"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Traces
        /// </summary>
        public static List<Trace> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Trace> arr = new List<Trace>();

            Trace obj;

            while (dr.Read())
            {
                obj = new Trace();
                if (list.IsColumnPresent("TraceID")) { obj._traceID = (int)dr["TraceID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("Source")) { obj._source = (string)dr["Source"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Trace object or in the case of a zero TraceID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveTrace");

            db.AddInParameter(dbCommand, "TraceID", DbType.Int32, TraceID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "Source", DbType.String, Source);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.TraceID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Video in the system
    /// </summary>
    public partial class Video
    {
        /// <summary>
        /// The BlogVideo objects for this Video
        /// </summary>
        public List<BlogVideo> BlogVideo
        {
            get
            {
                if (blogVideo == null)
                    this.blogVideo = this.GetBlogVideoByVideoID();
                return blogVideo;
            }
            set { blogVideo = value; }
        }


        /// <summary>
        /// The VideoComment objects for this Video
        /// </summary>
        public List<VideoComment> VideoComment
        {
            get
            {
                if (videoComment == null)
                    this.videoComment = this.GetVideoCommentByVideoID();
                return videoComment;
            }
            set { videoComment = value; }
        }


        /// <summary>
        /// The VideoWatch objects for this Video
        /// </summary>
        public List<VideoWatch> VideoWatch
        {
            get
            {
                if (videoWatch == null)
                    this.videoWatch = this.GetVideoWatchByVideoID();
                return videoWatch;
            }
            set { videoWatch = value; }
        }


        /// <summary>
        /// The VideoRating objects for this Video
        /// </summary>
        public List<VideoRating> VideoRating
        {
            get
            {
                if (videoRating == null)
                    this.videoRating = this.GetVideoRatingByVideoID();
                return videoRating;
            }
            set { videoRating = value; }
        }


        /// <summary>
        /// The VideoEncoderQueue objects for this Video
        /// </summary>
        public List<VideoEncoderQueue> VideoEncoderQueue
        {
            get
            {
                if (videoEncoderQueue == null)
                    this.videoEncoderQueue = this.GetVideoEncoderQueueByVideoID();
                return videoEncoderQueue;
            }
            set { videoEncoderQueue = value; }
        }


        /// <summary>
        /// The VideoTag objects for this Video
        /// </summary>
        public List<VideoTag> VideoTag
        {
            get
            {
                if (videoTag == null)
                    this.videoTag = this.GetVideoTagByVideoID();
                return videoTag;
            }
            set { videoTag = value; }
        }


        /// <summary>
        /// The TopVideosComment objects for this Video
        /// </summary>
        public List<TopVideosComment> TopVideosComment
        {
            get
            {
                if (topVideosComment == null)
                    this.topVideosComment = this.GetTopVideosCommentByVideoID();
                return topVideosComment;
            }
            set { topVideosComment = value; }
        }


        /// <summary>
        /// The TopVideosFeatured objects for this Video
        /// </summary>
        public List<TopVideosFeatured> TopVideosFeatured
        {
            get
            {
                if (topVideosFeatured == null)
                    this.topVideosFeatured = this.GetTopVideosFeaturedByVideoID();
                return topVideosFeatured;
            }
            set { topVideosFeatured = value; }
        }


        /// <summary>
        /// The LatestVideos objects for this Video
        /// </summary>
        public List<LatestVideos> LatestVideos
        {
            get
            {
                if (latestVideos == null)
                    this.latestVideos = this.GetLatestVideosByVideoID();
                return latestVideos;
            }
            set { latestVideos = value; }
        }


        /// <summary>
        /// The TopVideosViewed objects for this Video
        /// </summary>
        public List<TopVideosViewed> TopVideosViewed
        {
            get
            {
                if (topVideosViewed == null)
                    this.topVideosViewed = this.GetTopVideosViewedByVideoID();
                return topVideosViewed;
            }
            set { topVideosViewed = value; }
        }


        /// <summary>
        /// The TopVideosRated objects for this Video
        /// </summary>
        public List<TopVideosRated> TopVideosRated
        {
            get
            {
                if (topVideosRated == null)
                    this.topVideosRated = this.GetTopVideosRatedByVideoID();
                return topVideosRated;
            }
            set { topVideosRated = value; }
        }


        /// <summary>
        /// The Vote objects for this Video
        /// </summary>
        public List<Vote> Vote
        {
            get
            {
                if (vote == null)
                    this.vote = this.GetVoteByVideoID();
                return vote;
            }
            set { vote = value; }
        }


        /// <summary>
        /// The LiveThumbnailEncoderQueue objects for this Video
        /// </summary>
        public List<LiveThumbnailEncoderQueue> LiveThumbnailEncoderQueue
        {
            get
            {
                if (liveThumbnailEncoderQueue == null)
                    this.liveThumbnailEncoderQueue = this.GetLiveThumbnailEncoderQueueByVideoID();
                return liveThumbnailEncoderQueue;
            }
            set { liveThumbnailEncoderQueue = value; }
        }


        /// <summary>
        /// The VideoView objects for this Video
        /// </summary>
        public List<VideoView> VideoView
        {
            get
            {
                if (videoView == null)
                    this.videoView = this.GetVideoViewByVideoID();
                return videoView;
            }
            set { videoView = value; }
        }


        #region Fields and Properties

        private int _videoID;		//DB identifier for the Video
        private string _webVideoID = "";		//
        private int _memberID;		//The MemberID of the member who posted the video
        private int _liveBroadcastID;		//
        private string _title = "";		//The display title of the video
        private string _description = "";		//The text display description of the video
        private int _videoResourceFileID;		//The ResourceFileID for the Video
        private int _thumbnailResourceFileID;		//The ResourceFileID for the video thumbnail
        private decimal _duration;		//The length in minues and seconds of the video
        private int _numberOfViews;		//How many times the video has been viewed
        private int _numberOfComments;		//
        private string _tagWords = "";		//Comma delimited list of tag strings
        private int _rating;		//
        private int _status;		//
        private int _category;		//
        private string _tags = "";		//
        private int _totalVoteScore;		//The average rating of the Video
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date and Time that the Video was Posted
        private int _privacyFlag;		//
        private List<BlogVideo> blogVideo;		// Foreign object
        private List<VideoComment> videoComment;		// Foreign object
        private List<VideoWatch> videoWatch;		// Foreign object
        private List<VideoRating> videoRating;		// Foreign object
        private List<VideoEncoderQueue> videoEncoderQueue;		// Foreign object
        private List<VideoTag> videoTag;		// Foreign object
        private List<TopVideosComment> topVideosComment;		// Foreign object
        private List<TopVideosFeatured> topVideosFeatured;		// Foreign object
        private List<LatestVideos> latestVideos;		// Foreign object
        private List<TopVideosViewed> topVideosViewed;		// Foreign object
        private List<TopVideosRated> topVideosRated;		// Foreign object
        private List<Vote> vote;		// Foreign object
        private List<LiveThumbnailEncoderQueue> liveThumbnailEncoderQueue;		// Foreign object
        private List<VideoView> videoView;		// Foreign object

        Database db;
        /// <summary>
        /// DB identifier for the Video
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string WebVideoID
        {
            get { return _webVideoID; }
            set { _webVideoID = value; }
        }

        /// <summary>
        /// The MemberID of the member who posted the video
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int LiveBroadcastID
        {
            get { return _liveBroadcastID; }
            set { _liveBroadcastID = value; }
        }

        /// <summary>
        /// The display title of the video
        /// </summary>
        public string Title
        {
            get { return _title; }
            set { _title = value; }
        }

        /// <summary>
        /// The text display description of the video
        /// </summary>
        public string Description
        {
            get { return _description; }
            set { _description = value; }
        }

        /// <summary>
        /// The ResourceFileID for the Video
        /// </summary>
        public int VideoResourceFileID
        {
            get { return _videoResourceFileID; }
            set { _videoResourceFileID = value; }
        }

        /// <summary>
        /// The ResourceFileID for the video thumbnail
        /// </summary>
        public int ThumbnailResourceFileID
        {
            get { return _thumbnailResourceFileID; }
            set { _thumbnailResourceFileID = value; }
        }

        /// <summary>
        /// The length in minues and seconds of the video
        /// </summary>
        public decimal Duration
        {
            get { return _duration; }
            set { _duration = value; }
        }

        /// <summary>
        /// How many times the video has been viewed
        /// </summary>
        public int NumberOfViews
        {
            get { return _numberOfViews; }
            set { _numberOfViews = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NumberOfComments
        {
            get { return _numberOfComments; }
            set { _numberOfComments = value; }
        }

        /// <summary>
        /// Comma delimited list of tag strings
        /// </summary>
        public string TagWords
        {
            get { return _tagWords; }
            set { _tagWords = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Rating
        {
            get { return _rating; }
            set { _rating = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Category
        {
            get { return _category; }
            set { _category = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Tags
        {
            get { return _tags; }
            set { _tags = value; }
        }

        /// <summary>
        /// The average rating of the Video
        /// </summary>
        public int TotalVoteScore
        {
            get { return _totalVoteScore; }
            set { _totalVoteScore = value; }
        }

        /// <summary>
        /// The Date and Time that the Video was Posted
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PrivacyFlag
        {
            get { return _privacyFlag; }
            set { _privacyFlag = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Video()
        {

        }

        /// <summary>
        /// Instanciates a Video object from the database via the VideoID
        /// </summary>
        public Video(int VideoID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("WebVideoID")) { this._webVideoID = (string)dr["WebVideoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("LiveBroadcastID")) { this._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                    if (list.IsColumnPresent("Title")) { this._title = (string)dr["Title"]; }
                    if (list.IsColumnPresent("Description")) { this._description = (string)dr["Description"]; }
                    if (list.IsColumnPresent("VideoResourceFileID")) { this._videoResourceFileID = (int)dr["VideoResourceFileID"]; }
                    if (list.IsColumnPresent("ThumbnailResourceFileID")) { this._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                    if (list.IsColumnPresent("Duration")) { this._duration = (decimal)dr["Duration"]; }
                    if (list.IsColumnPresent("NumberOfViews")) { this._numberOfViews = (int)dr["NumberOfViews"]; }
                    if (list.IsColumnPresent("NumberOfComments")) { this._numberOfComments = (int)dr["NumberOfComments"]; }
                    if (list.IsColumnPresent("TagWords")) { this._tagWords = (string)dr["TagWords"]; }
                    if (list.IsColumnPresent("Rating")) { this._rating = (int)dr["Rating"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }
                    if (list.IsColumnPresent("Category")) { this._category = (int)dr["Category"]; }
                    if (list.IsColumnPresent("Tags")) { this._tags = (string)dr["Tags"]; }
                    if (list.IsColumnPresent("TotalVoteScore")) { this._totalVoteScore = (int)dr["TotalVoteScore"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }
                    if (list.IsColumnPresent("PrivacyFlag")) { this._privacyFlag = (int)dr["PrivacyFlag"]; }

                }
                else
                {
                    throw new Exception("There is no Video in the database with the ID " + VideoID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Video in the database 
        /// </summary>
        public static List<Video> GetAllVideo()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideo");

            List<Video> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }


        public ResourceFile VideoResourceFile { get; set; }
        public ResourceFile ThumbnailResourceFile { get; set; }
        public Member Member { get; set; }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Videos
        /// </summary>
        public static List<Video> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Video> arr = new List<Video>();

            Video obj;

            while (dr.Read())
            {
                obj = new Video();
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("WebVideoID")) { obj._webVideoID = (string)dr["WebVideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("VideoResourceFileID")) { obj._videoResourceFileID = (int)dr["VideoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (decimal)dr["Duration"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("TagWords")) { obj._tagWords = (string)dr["TagWords"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Category")) { obj._category = (int)dr["Category"]; }
                if (list.IsColumnPresent("Tags")) { obj._tags = (string)dr["Tags"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("PrivacyFlag")) { obj._privacyFlag = (int)dr["PrivacyFlag"]; }

                obj.VideoResourceFile = new ResourceFile();
                if (list.IsColumnPresent("VideoResourceFileResourceFileID")) { obj.VideoResourceFile.ResourceFileID = (int)dr["VideoResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("VideoResourceFileWebResourceFileID")) { obj.VideoResourceFile.WebResourceFileID = (string)dr["VideoResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("VideoResourceFileResourceType")) { obj.VideoResourceFile.ResourceType = (int)dr["VideoResourceFileResourceType"]; }
                if (list.IsColumnPresent("VideoResourceFileStorageLocation")) { obj.VideoResourceFile.StorageLocation = (int)dr["VideoResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("VideoResourceFileServer")) { obj.VideoResourceFile.Server = (int)dr["VideoResourceFileServer"]; }
                if (list.IsColumnPresent("VideoResourceFilePath")) { obj.VideoResourceFile.Path = (string)dr["VideoResourceFilePath"]; }
                if (list.IsColumnPresent("VideoResourceFileFileName")) { obj.VideoResourceFile.FileName = (string)dr["VideoResourceFileFileName"]; }
                if (list.IsColumnPresent("VideoResourceFileCreatedDT")) { obj.VideoResourceFile.CreatedDT = (DateTime)dr["VideoResourceFileCreatedDT"]; }

                obj.ThumbnailResourceFile = new ResourceFile();
                if (list.IsColumnPresent("ThumbnailResourceFileResourceFileID")) { obj.ThumbnailResourceFile.ResourceFileID = (int)dr["ThumbnailResourceFileResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileWebResourceFileID")) { obj.ThumbnailResourceFile.WebResourceFileID = (string)dr["ThumbnailResourceFileWebResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileResourceType")) { obj.ThumbnailResourceFile.ResourceType = (int)dr["ThumbnailResourceFileResourceType"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileStorageLocation")) { obj.ThumbnailResourceFile.StorageLocation = (int)dr["ThumbnailResourceFileStorageLocation"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileServer")) { obj.ThumbnailResourceFile.Server = (int)dr["ThumbnailResourceFileServer"]; }
                if (list.IsColumnPresent("ThumbnailResourceFilePath")) { obj.ThumbnailResourceFile.Path = (string)dr["ThumbnailResourceFilePath"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileFileName")) { obj.ThumbnailResourceFile.FileName = (string)dr["ThumbnailResourceFileFileName"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileCreatedDT")) { obj.ThumbnailResourceFile.CreatedDT = (DateTime)dr["ThumbnailResourceFileCreatedDT"]; }

                obj.Member = new Member();
                if (list.IsColumnPresent("MemberMemberID")) { obj.Member.MemberID = (int)dr["MemberMemberID"]; }
                if (list.IsColumnPresent("MemberWebMemberID")) { obj.Member.WebMemberID = (string)dr["MemberWebMemberID"]; }
                if (list.IsColumnPresent("MemberAdminStatusID")) { obj.Member.AdminStatusID = (int)dr["MemberAdminStatusID"]; }
                if (list.IsColumnPresent("MemberNickName")) { obj.Member.NickName = (string)dr["MemberNickName"]; }
                if (list.IsColumnPresent("MemberChannelID")) { obj.Member.ChannelID = (int)dr["MemberChannelID"]; }
                if (list.IsColumnPresent("MemberPassword")) { obj.Member.Password = (string)dr["MemberPassword"]; }
                if (list.IsColumnPresent("MemberEmail")) { obj.Member.Email = (string)dr["MemberEmail"]; }
                if (list.IsColumnPresent("MemberGender")) { obj.Member.Gender = (int)dr["MemberGender"]; }
                if (list.IsColumnPresent("MemberFirstName")) { obj.Member.FirstName = (string)dr["MemberFirstName"]; }
                if (list.IsColumnPresent("MemberLastName")) { obj.Member.LastName = (string)dr["MemberLastName"]; }
                if (list.IsColumnPresent("MemberProfilePhotoResourceFileID")) { obj.Member.ProfilePhotoResourceFileID = (int)dr["MemberProfilePhotoResourceFileID"]; }
                if (list.IsColumnPresent("MemberDOB")) { obj.Member.DOB = (DateTime)dr["MemberDOB"]; }
                if (list.IsColumnPresent("MemberISOCountry")) { obj.Member.ISOCountry = (string)dr["MemberISOCountry"]; }
                if (list.IsColumnPresent("MemberAccountType")) { obj.Member.AccountType = (int)dr["MemberAccountType"]; }
                if (list.IsColumnPresent("MemberZipPostcode")) { obj.Member.ZipPostcode = (string)dr["MemberZipPostcode"]; }
                if (list.IsColumnPresent("MemberPhoneNumber")) { obj.Member.PhoneNumber = (string)dr["MemberPhoneNumber"]; }
                if (list.IsColumnPresent("MemberMobilePhoneID")) { obj.Member.MobilePhoneID = (int)dr["MemberMobilePhoneID"]; }
                if (list.IsColumnPresent("MemberIPLocationID")) { obj.Member.IPLocationID = (int)dr["MemberIPLocationID"]; }
                if (list.IsColumnPresent("MemberCreatedDT")) { obj.Member.CreatedDT = (DateTime)dr["MemberCreatedDT"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Videos
        /// </summary>
        public static List<Video> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Video> arr = new List<Video>();

            Video obj;

            while (dr.Read())
            {
                obj = new Video();
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("WebVideoID")) { obj._webVideoID = (string)dr["WebVideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("LiveBroadcastID")) { obj._liveBroadcastID = (int)dr["LiveBroadcastID"]; }
                if (list.IsColumnPresent("Title")) { obj._title = (string)dr["Title"]; }
                if (list.IsColumnPresent("Description")) { obj._description = (string)dr["Description"]; }
                if (list.IsColumnPresent("VideoResourceFileID")) { obj._videoResourceFileID = (int)dr["VideoResourceFileID"]; }
                if (list.IsColumnPresent("ThumbnailResourceFileID")) { obj._thumbnailResourceFileID = (int)dr["ThumbnailResourceFileID"]; }
                if (list.IsColumnPresent("Duration")) { obj._duration = (decimal)dr["Duration"]; }
                if (list.IsColumnPresent("NumberOfViews")) { obj._numberOfViews = (int)dr["NumberOfViews"]; }
                if (list.IsColumnPresent("NumberOfComments")) { obj._numberOfComments = (int)dr["NumberOfComments"]; }
                if (list.IsColumnPresent("TagWords")) { obj._tagWords = (string)dr["TagWords"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Category")) { obj._category = (int)dr["Category"]; }
                if (list.IsColumnPresent("Tags")) { obj._tags = (string)dr["Tags"]; }
                if (list.IsColumnPresent("TotalVoteScore")) { obj._totalVoteScore = (int)dr["TotalVoteScore"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }
                if (list.IsColumnPresent("PrivacyFlag")) { obj._privacyFlag = (int)dr["PrivacyFlag"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Video object or in the case of a zero VideoID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideo");

            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "WebVideoID", DbType.String, WebVideoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "LiveBroadcastID", DbType.Int32, LiveBroadcastID);
            db.AddInParameter(dbCommand, "Title", DbType.String, Title);
            db.AddInParameter(dbCommand, "Description", DbType.String, Description);
            db.AddInParameter(dbCommand, "VideoResourceFileID", DbType.Int32, VideoResourceFileID);
            db.AddInParameter(dbCommand, "ThumbnailResourceFileID", DbType.Int32, ThumbnailResourceFileID);
            db.AddInParameter(dbCommand, "Duration", DbType.Decimal, Duration);
            db.AddInParameter(dbCommand, "NumberOfViews", DbType.Int32, NumberOfViews);
            db.AddInParameter(dbCommand, "NumberOfComments", DbType.Int32, NumberOfComments);
            db.AddInParameter(dbCommand, "TagWords", DbType.String, TagWords);
            db.AddInParameter(dbCommand, "Rating", DbType.Int32, Rating);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);
            db.AddInParameter(dbCommand, "Category", DbType.Int32, Category);
            db.AddInParameter(dbCommand, "Tags", DbType.String, Tags);
            db.AddInParameter(dbCommand, "TotalVoteScore", DbType.Int32, TotalVoteScore);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);
            db.AddInParameter(dbCommand, "PrivacyFlag", DbType.Int32, PrivacyFlag);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        /// <summary>
        /// Calls the database and gets all the BlogVideo objects for this Video
        /// </summary>
        private List<BlogVideo> GetBlogVideoByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetBlogVideoByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<BlogVideo> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.BlogVideo.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoComment objects for this Video
        /// </summary>
        private List<VideoComment> GetVideoCommentByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoCommentByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoWatch objects for this Video
        /// </summary>
        private List<VideoWatch> GetVideoWatchByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoWatchByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoWatch> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoWatch.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoRating objects for this Video
        /// </summary>
        private List<VideoRating> GetVideoRatingByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoRatingByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoRating> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoRating.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoEncoderQueue objects for this Video
        /// </summary>
        private List<VideoEncoderQueue> GetVideoEncoderQueueByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoEncoderQueueByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoEncoderQueue> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoEncoderQueue.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoTag objects for this Video
        /// </summary>
        private List<VideoTag> GetVideoTagByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoTagByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoTag> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoTag.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopVideosComment objects for this Video
        /// </summary>
        private List<TopVideosComment> GetTopVideosCommentByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosCommentByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<TopVideosComment> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopVideosComment.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopVideosFeatured objects for this Video
        /// </summary>
        private List<TopVideosFeatured> GetTopVideosFeaturedByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosFeaturedByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<TopVideosFeatured> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopVideosFeatured.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LatestVideos objects for this Video
        /// </summary>
        private List<LatestVideos> GetLatestVideosByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLatestVideosByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<LatestVideos> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LatestVideos.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopVideosViewed objects for this Video
        /// </summary>
        private List<TopVideosViewed> GetTopVideosViewedByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosViewedByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<TopVideosViewed> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopVideosViewed.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the TopVideosRated objects for this Video
        /// </summary>
        private List<TopVideosRated> GetTopVideosRatedByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetTopVideosRatedByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<TopVideosRated> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.TopVideosRated.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the Vote objects for this Video
        /// </summary>
        private List<Vote> GetVoteByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVoteByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<Vote> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.Vote.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the LiveThumbnailEncoderQueue objects for this Video
        /// </summary>
        private List<LiveThumbnailEncoderQueue> GetLiveThumbnailEncoderQueueByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetLiveThumbnailEncoderQueueByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<LiveThumbnailEncoderQueue> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.LiveThumbnailEncoderQueue.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Calls the database and gets all the VideoView objects for this Video
        /// </summary>
        private List<VideoView> GetVideoViewByVideoID()
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoViewByVideoID");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<VideoView> arr = null;

            // Populate the datareader
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                // Call the PopulateObject method passing the datareader to return the object array
                arr = Next2Friends.Data.VideoView.PopulateObject(dr);
                dr.Close();
            }

            return arr;
        }


        /// <summary>
        /// Gets all the Video in the database With a full join with all the manually specified tables in SP code 
        /// </summary>
        public static Video GetVideoByVideoIDWithJoin(int VideoID)
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoByVideoIDWithJoin");
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);

            List<Video> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                arr = PopulateObjectWithJoin(dr);
                dr.Close();

            }

            if (arr[0] != null)
                return arr[0];
            else
                return null;
        }


        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoComment in the system
    /// </summary>
    public partial class VideoComment
    {
        #region Fields and Properties

        private int _videoCommentID;		//DB identifier for the VideoComment
        private int _memberID;		//The memberID of the Comment Poster
        private int _videoID;		//The VideoID that the comment relates to
        private string _text = "";		//The text contents of the Comment
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//The Date and Time that the Comment was Posted

        Database db;
        /// <summary>
        /// DB identifier for the VideoComment
        /// </summary>
        public int VideoCommentID
        {
            get { return _videoCommentID; }
            set { _videoCommentID = value; }
        }

        /// <summary>
        /// The memberID of the Comment Poster
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The VideoID that the comment relates to
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// The text contents of the Comment
        /// </summary>
        public string Text
        {
            get { return _text; }
            set { _text = value; }
        }

        /// <summary>
        /// The Date and Time that the Comment was Posted
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoComment()
        {

        }

        /// <summary>
        /// Instanciates a VideoComment object from the database via the VideoCommentID
        /// </summary>
        public VideoComment(int VideoCommentID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoCommentByVideoCommentID");
            db.AddInParameter(dbCommand, "VideoCommentID", DbType.Int32, VideoCommentID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoCommentID")) { this._videoCommentID = (int)dr["VideoCommentID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("Text")) { this._text = (string)dr["Text"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no VideoComment in the database with the ID " + VideoCommentID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoComment in the database 
        /// </summary>
        public static List<VideoComment> GetAllVideoComment()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoComment");

            List<VideoComment> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoComments
        /// </summary>
        public static List<VideoComment> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoComment> arr = new List<VideoComment>();

            VideoComment obj;

            while (dr.Read())
            {
                obj = new VideoComment();
                if (list.IsColumnPresent("VideoCommentID")) { obj._videoCommentID = (int)dr["VideoCommentID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoComments
        /// </summary>
        public static List<VideoComment> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoComment> arr = new List<VideoComment>();

            VideoComment obj;

            while (dr.Read())
            {
                obj = new VideoComment();
                if (list.IsColumnPresent("VideoCommentID")) { obj._videoCommentID = (int)dr["VideoCommentID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("Text")) { obj._text = (string)dr["Text"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoComment object or in the case of a zero VideoCommentID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoComment");

            db.AddInParameter(dbCommand, "VideoCommentID", DbType.Int32, VideoCommentID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "Text", DbType.String, Text);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoCommentID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoEncoderQueue in the system
    /// </summary>
    public partial class VideoEncoderQueue
    {
        #region Fields and Properties

        private int _videoEncoderQueueID;		//
        private int _videoID;		//
        private string _videoInputFile = "";		//
        private string _videoOutputFile = "";		//
        private string _thumbnailOutputFile = "";		//
        private int _status;		//
        private string _error = "";		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int VideoEncoderQueueID
        {
            get { return _videoEncoderQueueID; }
            set { _videoEncoderQueueID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string VideoInputFile
        {
            get { return _videoInputFile; }
            set { _videoInputFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string VideoOutputFile
        {
            get { return _videoOutputFile; }
            set { _videoOutputFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string ThumbnailOutputFile
        {
            get { return _thumbnailOutputFile; }
            set { _thumbnailOutputFile = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Status
        {
            get { return _status; }
            set { _status = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Error
        {
            get { return _error; }
            set { _error = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoEncoderQueue()
        {

        }

        /// <summary>
        /// Instanciates a VideoEncoderQueue object from the database via the VideoEncoderQueueID
        /// </summary>
        public VideoEncoderQueue(int VideoEncoderQueueID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoEncoderQueueByVideoEncoderQueueID");
            db.AddInParameter(dbCommand, "VideoEncoderQueueID", DbType.Int32, VideoEncoderQueueID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoEncoderQueueID")) { this._videoEncoderQueueID = (int)dr["VideoEncoderQueueID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("VideoInputFile")) { this._videoInputFile = (string)dr["VideoInputFile"]; }
                    if (list.IsColumnPresent("VideoOutputFile")) { this._videoOutputFile = (string)dr["VideoOutputFile"]; }
                    if (list.IsColumnPresent("ThumbnailOutputFile")) { this._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                    if (list.IsColumnPresent("Status")) { this._status = (int)dr["Status"]; }
                    if (list.IsColumnPresent("Error")) { this._error = (string)dr["Error"]; }

                }
                else
                {
                    throw new Exception("There is no VideoEncoderQueue in the database with the ID " + VideoEncoderQueueID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoEncoderQueue in the database 
        /// </summary>
        public static List<VideoEncoderQueue> GetAllVideoEncoderQueue()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoEncoderQueue");

            List<VideoEncoderQueue> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoEncoderQueues
        /// </summary>
        public static List<VideoEncoderQueue> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoEncoderQueue> arr = new List<VideoEncoderQueue>();

            VideoEncoderQueue obj;

            while (dr.Read())
            {
                obj = new VideoEncoderQueue();
                if (list.IsColumnPresent("VideoEncoderQueueID")) { obj._videoEncoderQueueID = (int)dr["VideoEncoderQueueID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("VideoInputFile")) { obj._videoInputFile = (string)dr["VideoInputFile"]; }
                if (list.IsColumnPresent("VideoOutputFile")) { obj._videoOutputFile = (string)dr["VideoOutputFile"]; }
                if (list.IsColumnPresent("ThumbnailOutputFile")) { obj._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Error")) { obj._error = (string)dr["Error"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoEncoderQueues
        /// </summary>
        public static List<VideoEncoderQueue> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoEncoderQueue> arr = new List<VideoEncoderQueue>();

            VideoEncoderQueue obj;

            while (dr.Read())
            {
                obj = new VideoEncoderQueue();
                if (list.IsColumnPresent("VideoEncoderQueueID")) { obj._videoEncoderQueueID = (int)dr["VideoEncoderQueueID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("VideoInputFile")) { obj._videoInputFile = (string)dr["VideoInputFile"]; }
                if (list.IsColumnPresent("VideoOutputFile")) { obj._videoOutputFile = (string)dr["VideoOutputFile"]; }
                if (list.IsColumnPresent("ThumbnailOutputFile")) { obj._thumbnailOutputFile = (string)dr["ThumbnailOutputFile"]; }
                if (list.IsColumnPresent("Status")) { obj._status = (int)dr["Status"]; }
                if (list.IsColumnPresent("Error")) { obj._error = (string)dr["Error"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoEncoderQueue object or in the case of a zero VideoEncoderQueueID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoEncoderQueue");

            db.AddInParameter(dbCommand, "VideoEncoderQueueID", DbType.Int32, VideoEncoderQueueID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "VideoInputFile", DbType.String, VideoInputFile);
            db.AddInParameter(dbCommand, "VideoOutputFile", DbType.String, VideoOutputFile);
            db.AddInParameter(dbCommand, "ThumbnailOutputFile", DbType.String, ThumbnailOutputFile);
            db.AddInParameter(dbCommand, "Status", DbType.Int32, Status);
            db.AddInParameter(dbCommand, "Error", DbType.String, Error);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoEncoderQueueID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoRating in the system
    /// </summary>
    public partial class VideoRating
    {
        #region Fields and Properties

        private int _videoRatingID;		//Primary db key of the VideoRating
        private int _videoID;		//VideoID of the rated Video
        private int _memberID;		//MemberID of the member who rated it
        private int _rating;		//The value that the Member rated

        Database db;
        /// <summary>
        /// Primary db key of the VideoRating
        /// </summary>
        public int VideoRatingID
        {
            get { return _videoRatingID; }
            set { _videoRatingID = value; }
        }

        /// <summary>
        /// VideoID of the rated Video
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// MemberID of the member who rated it
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// The value that the Member rated
        /// </summary>
        public int Rating
        {
            get { return _rating; }
            set { _rating = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoRating()
        {

        }

        /// <summary>
        /// Instanciates a VideoRating object from the database via the VideoRatingID
        /// </summary>
        public VideoRating(int VideoRatingID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoRatingByVideoRatingID");
            db.AddInParameter(dbCommand, "VideoRatingID", DbType.Int32, VideoRatingID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoRatingID")) { this._videoRatingID = (int)dr["VideoRatingID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("Rating")) { this._rating = (int)dr["Rating"]; }

                }
                else
                {
                    throw new Exception("There is no VideoRating in the database with the ID " + VideoRatingID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoRating in the database 
        /// </summary>
        public static List<VideoRating> GetAllVideoRating()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoRating");

            List<VideoRating> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoRatings
        /// </summary>
        public static List<VideoRating> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoRating> arr = new List<VideoRating>();

            VideoRating obj;

            while (dr.Read())
            {
                obj = new VideoRating();
                if (list.IsColumnPresent("VideoRatingID")) { obj._videoRatingID = (int)dr["VideoRatingID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoRatings
        /// </summary>
        public static List<VideoRating> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoRating> arr = new List<VideoRating>();

            VideoRating obj;

            while (dr.Read())
            {
                obj = new VideoRating();
                if (list.IsColumnPresent("VideoRatingID")) { obj._videoRatingID = (int)dr["VideoRatingID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("Rating")) { obj._rating = (int)dr["Rating"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoRating object or in the case of a zero VideoRatingID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoRating");

            db.AddInParameter(dbCommand, "VideoRatingID", DbType.Int32, VideoRatingID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "Rating", DbType.Int32, Rating);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoRatingID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoTag in the system
    /// </summary>
    public partial class VideoTag
    {
        #region Fields and Properties

        private int _videoTagID;		//
        private int _videoID;		//
        private string _tag = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int VideoTagID
        {
            get { return _videoTagID; }
            set { _videoTagID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Tag
        {
            get { return _tag; }
            set { _tag = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoTag()
        {

        }

        /// <summary>
        /// Instanciates a VideoTag object from the database via the VideoTagID
        /// </summary>
        public VideoTag(int VideoTagID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoTagByVideoTagID");
            db.AddInParameter(dbCommand, "VideoTagID", DbType.Int32, VideoTagID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoTagID")) { this._videoTagID = (int)dr["VideoTagID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("Tag")) { this._tag = (string)dr["Tag"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no VideoTag in the database with the ID " + VideoTagID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoTag in the database 
        /// </summary>
        public static List<VideoTag> GetAllVideoTag()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoTag");

            List<VideoTag> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoTags
        /// </summary>
        public static List<VideoTag> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoTag> arr = new List<VideoTag>();

            VideoTag obj;

            while (dr.Read())
            {
                obj = new VideoTag();
                if (list.IsColumnPresent("VideoTagID")) { obj._videoTagID = (int)dr["VideoTagID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("Tag")) { obj._tag = (string)dr["Tag"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoTags
        /// </summary>
        public static List<VideoTag> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoTag> arr = new List<VideoTag>();

            VideoTag obj;

            while (dr.Read())
            {
                obj = new VideoTag();
                if (list.IsColumnPresent("VideoTagID")) { obj._videoTagID = (int)dr["VideoTagID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("Tag")) { obj._tag = (string)dr["Tag"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoTag object or in the case of a zero VideoTagID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoTag");

            db.AddInParameter(dbCommand, "VideoTagID", DbType.Int32, VideoTagID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "Tag", DbType.String, Tag);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoTagID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoView in the system
    /// </summary>
    public partial class VideoView
    {
        #region Fields and Properties

        private int _videoViewID;		//
        private int _memberID;		//
        private Guid _sessionID;		//
        private int _videoID;		//
        private Guid _referrerID;		//
        private int _searchTermID;		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int VideoViewID
        {
            get { return _videoViewID; }
            set { _videoViewID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Guid SessionID
        {
            get { return _sessionID; }
            set { _sessionID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public Guid ReferrerID
        {
            get { return _referrerID; }
            set { _referrerID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int SearchTermID
        {
            get { return _searchTermID; }
            set { _searchTermID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoView()
        {

        }

        /// <summary>
        /// Instanciates a VideoView object from the database via the VideoViewID
        /// </summary>
        public VideoView(int VideoViewID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoViewByVideoViewID");
            db.AddInParameter(dbCommand, "VideoViewID", DbType.Int32, VideoViewID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoViewID")) { this._videoViewID = (int)dr["VideoViewID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("SessionID")) { this._sessionID = (Guid)dr["SessionID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("ReferrerID")) { this._referrerID = (Guid)dr["ReferrerID"]; }
                    if (list.IsColumnPresent("SearchTermID")) { this._searchTermID = (int)dr["SearchTermID"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no VideoView in the database with the ID " + VideoViewID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoView in the database 
        /// </summary>
        public static List<VideoView> GetAllVideoView()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoView");

            List<VideoView> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoViews
        /// </summary>
        public static List<VideoView> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoView> arr = new List<VideoView>();

            VideoView obj;

            while (dr.Read())
            {
                obj = new VideoView();
                if (list.IsColumnPresent("VideoViewID")) { obj._videoViewID = (int)dr["VideoViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SessionID")) { obj._sessionID = (Guid)dr["SessionID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("ReferrerID")) { obj._referrerID = (Guid)dr["ReferrerID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoViews
        /// </summary>
        public static List<VideoView> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoView> arr = new List<VideoView>();

            VideoView obj;

            while (dr.Read())
            {
                obj = new VideoView();
                if (list.IsColumnPresent("VideoViewID")) { obj._videoViewID = (int)dr["VideoViewID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("SessionID")) { obj._sessionID = (Guid)dr["SessionID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("ReferrerID")) { obj._referrerID = (Guid)dr["ReferrerID"]; }
                if (list.IsColumnPresent("SearchTermID")) { obj._searchTermID = (int)dr["SearchTermID"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoView object or in the case of a zero VideoViewID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoView");

            db.AddInParameter(dbCommand, "VideoViewID", DbType.Int32, VideoViewID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "SessionID", DbType.Guid, SessionID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "ReferrerID", DbType.Guid, ReferrerID);
            db.AddInParameter(dbCommand, "SearchTermID", DbType.Int32, SearchTermID);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoViewID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a VideoWatch in the system
    /// </summary>
    public partial class VideoWatch
    {
        #region Fields and Properties

        private int _videoWatchID;		//
        private int _memberID;		//
        private int _videoID;		//
        private string _iPAddress = "";		//
        private DateTime _dTCreated = new DateTime(1900, 1, 1);		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int VideoWatchID
        {
            get { return _videoWatchID; }
            set { _videoWatchID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public string IPAddress
        {
            get { return _iPAddress; }
            set { _iPAddress = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime DTCreated
        {
            get { return _dTCreated; }
            set { _dTCreated = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public VideoWatch()
        {

        }

        /// <summary>
        /// Instanciates a VideoWatch object from the database via the VideoWatchID
        /// </summary>
        public VideoWatch(int VideoWatchID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVideoWatchByVideoWatchID");
            db.AddInParameter(dbCommand, "VideoWatchID", DbType.Int32, VideoWatchID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VideoWatchID")) { this._videoWatchID = (int)dr["VideoWatchID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("IPAddress")) { this._iPAddress = (string)dr["IPAddress"]; }
                    if (list.IsColumnPresent("DTCreated")) { this._dTCreated = (DateTime)dr["DTCreated"]; }

                }
                else
                {
                    throw new Exception("There is no VideoWatch in the database with the ID " + VideoWatchID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the VideoWatch in the database 
        /// </summary>
        public static List<VideoWatch> GetAllVideoWatch()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVideoWatch");

            List<VideoWatch> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoWatchs
        /// </summary>
        public static List<VideoWatch> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoWatch> arr = new List<VideoWatch>();

            VideoWatch obj;

            while (dr.Read())
            {
                obj = new VideoWatch();
                if (list.IsColumnPresent("VideoWatchID")) { obj._videoWatchID = (int)dr["VideoWatchID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of VideoWatchs
        /// </summary>
        public static List<VideoWatch> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<VideoWatch> arr = new List<VideoWatch>();

            VideoWatch obj;

            while (dr.Read())
            {
                obj = new VideoWatch();
                if (list.IsColumnPresent("VideoWatchID")) { obj._videoWatchID = (int)dr["VideoWatchID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("IPAddress")) { obj._iPAddress = (string)dr["IPAddress"]; }
                if (list.IsColumnPresent("DTCreated")) { obj._dTCreated = (DateTime)dr["DTCreated"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the VideoWatch object or in the case of a zero VideoWatchID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVideoWatch");

            db.AddInParameter(dbCommand, "VideoWatchID", DbType.Int32, VideoWatchID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "IPAddress", DbType.String, IPAddress);
            db.AddInParameter(dbCommand, "DTCreated", DbType.DateTime, DTCreated);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VideoWatchID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}

namespace Next2Friends.Data
{
    /// <summary>
    /// Represents a Vote in the system
    /// </summary>
    public partial class Vote
    {
        #region Fields and Properties

        private int _voteID;		//
        private int _memberID;		//
        private int _photoID;		//
        private int _videoID;		//
        private int _nSpotID;		//
        private int _groupID;		//
        private int _value;		//

        Database db;
        /// <summary>
        /// 
        /// </summary>
        public int VoteID
        {
            get { return _voteID; }
            set { _voteID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int MemberID
        {
            get { return _memberID; }
            set { _memberID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int PhotoID
        {
            get { return _photoID; }
            set { _photoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int VideoID
        {
            get { return _videoID; }
            set { _videoID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int NSpotID
        {
            get { return _nSpotID; }
            set { _nSpotID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int GroupID
        {
            get { return _groupID; }
            set { _groupID = value; }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Value
        {
            get { return _value; }
            set { _value = value; }
        }






        #endregion

        /// <summary>
        /// Blank constructor
        /// </summary>
        public Vote()
        {

        }

        /// <summary>
        /// Instanciates a Vote object from the database via the VoteID
        /// </summary>
        public Vote(int VoteID)
        {
            db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetVoteByVoteID");
            db.AddInParameter(dbCommand, "VoteID", DbType.Int32, VoteID);

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                ColumnFieldList list = new ColumnFieldList(dr);

                if (dr.Read())
                {
                    if (list.IsColumnPresent("VoteID")) { this._voteID = (int)dr["VoteID"]; }
                    if (list.IsColumnPresent("MemberID")) { this._memberID = (int)dr["MemberID"]; }
                    if (list.IsColumnPresent("PhotoID")) { this._photoID = (int)dr["PhotoID"]; }
                    if (list.IsColumnPresent("VideoID")) { this._videoID = (int)dr["VideoID"]; }
                    if (list.IsColumnPresent("NSpotID")) { this._nSpotID = (int)dr["NSpotID"]; }
                    if (list.IsColumnPresent("GroupID")) { this._groupID = (int)dr["GroupID"]; }
                    if (list.IsColumnPresent("Value")) { this._value = (int)dr["Value"]; }

                }
                else
                {
                    throw new Exception("There is no Vote in the database with the ID " + VoteID);
                }

                dr.Close();
            }
        }

        /// <summary>
        /// Gets all the Vote in the database 
        /// </summary>
        public static List<Vote> GetAllVote()
        {
            Database db = DatabaseFactory.CreateDatabase();
            DbCommand dbCommand = db.GetStoredProcCommand("AG_GetAllVote");

            List<Vote> arr = null;

            //execute the stored procedure
            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {
                arr = PopulateObject(dr);
                dr.Close();
            }

            // Create the object array from the datareader
            return arr;
        }




        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Votes
        /// </summary>
        public static List<Vote> PopulateObjectWithJoin(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Vote> arr = new List<Vote>();

            Vote obj;

            while (dr.Read())
            {
                obj = new Vote();
                if (list.IsColumnPresent("VoteID")) { obj._voteID = (int)dr["VoteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("GroupID")) { obj._groupID = (int)dr["GroupID"]; }
                if (list.IsColumnPresent("Value")) { obj._value = (int)dr["Value"]; }


                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }


        /// <summary>
        /// Takes an prepopulated IDataReader and creates an array of Votes
        /// </summary>
        public static List<Vote> PopulateObject(IDataReader dr)
        {
            ColumnFieldList list = new ColumnFieldList(dr);

            List<Vote> arr = new List<Vote>();

            Vote obj;

            while (dr.Read())
            {
                obj = new Vote();
                if (list.IsColumnPresent("VoteID")) { obj._voteID = (int)dr["VoteID"]; }
                if (list.IsColumnPresent("MemberID")) { obj._memberID = (int)dr["MemberID"]; }
                if (list.IsColumnPresent("PhotoID")) { obj._photoID = (int)dr["PhotoID"]; }
                if (list.IsColumnPresent("VideoID")) { obj._videoID = (int)dr["VideoID"]; }
                if (list.IsColumnPresent("NSpotID")) { obj._nSpotID = (int)dr["NSpotID"]; }
                if (list.IsColumnPresent("GroupID")) { obj._groupID = (int)dr["GroupID"]; }
                if (list.IsColumnPresent("Value")) { obj._value = (int)dr["Value"]; }

                arr.Add(obj);
            }

            dr.Close();

            return arr;
        }

        /// <summary>
        /// ToString
        /// </summary>
        public override string ToString()
        {
            string toString = string.Empty;
            return toString;


        }

        /// <summary>
        /// Saves the Vote object or in the case of a zero VoteID the @ObjName is created in the database
        /// </summary>
        public void Save()
        {
            Save(DatabaseFactory.CreateDatabase());
        }

        public void Save(Database db)
        {
            DbCommand dbCommand = db.GetStoredProcCommand("AG_SaveVote");

            db.AddInParameter(dbCommand, "VoteID", DbType.Int32, VoteID);
            db.AddInParameter(dbCommand, "MemberID", DbType.Int32, MemberID);
            db.AddInParameter(dbCommand, "PhotoID", DbType.Int32, PhotoID);
            db.AddInParameter(dbCommand, "VideoID", DbType.Int32, VideoID);
            db.AddInParameter(dbCommand, "NSpotID", DbType.Int32, NSpotID);
            db.AddInParameter(dbCommand, "GroupID", DbType.Int32, GroupID);
            db.AddInParameter(dbCommand, "Value", DbType.Int32, Value);

            using (IDataReader dr = db.ExecuteReader(dbCommand))
            {

                // get the returned ID
                if (dr.Read())
                {
                    int ID = Int32.Parse(dr[0].ToString());
                    //if the ID is NOT zero then the query was an insert
                    if (ID != 0)
                        this.VoteID = ID;
                }

                dr.Close();
            }

        }

        #region Get Object Array methods
        #endregion

    }
}
