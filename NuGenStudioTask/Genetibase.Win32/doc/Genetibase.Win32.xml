<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Genetibase.Win32</name>
    </assembly>
    <members>
        <member name="T:Genetibase.WinApi.WinGdi">
            <summary>
            Defines constants declared in WinGDI.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.AC_SRC_OVER">
            <summary>
            Currently defined blend function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.AC_SRC_ALPHA">
            <summary>
            Alpha format flags.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_SOLID">
            <summary>
            Solid brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_NULL">
            <summary>
            Same as BS_HOLLOW.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_HOLLOW">
            <summary>
            Hollow brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_HATCHED">
            <summary>
            Hatched brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_PATTERN">
            <summary>
            Pattern brush defined by a memory bitmap.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_DIBPATTERN">
            <summary>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is 
            BS_DIBPATTERN, the lbHatch member contains a handle to a packed DIB.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_DIBPATTERNPT">
            <summary>
            A pattern brush defined by a device-independent bitmap (DIB) specification. If lbStyle is 
            BS_DIBPATTERNPT, the lbHatch member contains a pointer to a packed DIB.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_PATTERN8X8">
            <summary>
            Same as BS_PATTERN.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BS_DIBPATTERN8X8">
            <summary>
            Same as BS_DIBPATTERN.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_HORIZONTAL">
            <summary>
            Horizontal hatch.
            </summary>
            <remarks>-----</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_VERTICAL">
            <summary>
            Vertical hatch.
            </summary>
            <remarks>|||||</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_FDIAGONAL">
            <summary>
            A 45-degree downward, left-to-right hatch.
            </summary>
            <remarks>\\\\\</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_BDIAGONAL">
            <summary>
            A 45-degree upward, left-to-right hatch.
            </summary>
            <remarks>/////</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_CROSS">
            <summary>
            Horizontal and vertical cross-hatch.
            </summary>
            <remarks>+++++</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HS_DIAGCROSS">
            <summary>
            45-degree crosshatch.
            </summary>
            <remarks>xxxxx</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_SOLID">
            <summary>
            The pen is solid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_DASH">
            <summary>
            The pen is dashed. This style is valid only when the pen width is one or less in device units.
            </summary>
            <remarks>-------</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_DOT">
            <summary>
            The pen is dotted. This style is valid only when the pen width is one or less in device units.
            </summary>
            <remarks>.......</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_DASHDOT">
            <summary>
            The pen has alternating dashes and dots. This style is valid only when the pen width is one or 
            less in device units.
            </summary>
            <remarks>_._._._</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_DASHDOTDOT">
            <summary>
            The pen has alternating dashes and double dots. This style is valid only when the pen width is one 
            or less in device units.
            </summary>
            <remarks>_.._.._</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_NULL">
            <summary>
            The pen is invisible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_INSIDEFRAME">
            <summary>
            The pen is solid. When this pen is used in any GDI drawing function that takes a bounding 
            rectangle, the dimensions of the figure are shrunk so that it fits entirely in the bounding 
            rectangle, taking into account the width of the pen. This applies only to geometric pens.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_USERSTYLE">
            <summary>
            Windows NT/2000/XP: The pen uses a styling array supplied by the user.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_ALTERNATE">
            <summary>
            Windows NT/2000/XP: The pen sets every other pixel.
            (This style is applicable only for cosmetic pens.)
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_ENDCAP_ROUND">
            <summary>
            End caps are round.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_ENDCAP_SQUARE">
            <summary>
            End caps are square.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_ENDCAP_FLAT">
            <summary>
            End caps are flat.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_JOIN_ROUND">
            <summary>
            Joins are round.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_JOIN_BEVEL">
            <summary>
            Joins are beveled.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_JOIN_MITER">
            <summary>
            Joins are mitered when they are within the current limit set by the SetMiterLimit function. 
            If it exceeds this limit, the join is beveled.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_COSMETIC">
            <summary>
            The pen is cosmetic.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PS_GEOMETRIC">
            <summary>
            The pen is geometric.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_BLACK">
            <summary>
            Pixel is always 0.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOTMERGEPEN">
            <summary>
            Pixel is the inverse of the R2_MERGEPEN color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MASKNOTPEN">
            <summary>
            Pixel is a combination of the colors common to both the screen and the inverse of the pen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOTCOPYPEN">
            <summary>
            Pixel is the inverse of the pen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MASKPENNOT">
            <summary>
            Pixel is a combination of the colors common to both the pen and the inverse of the screen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOT">
            <summary>
            Pixel is the inverse of the screen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_XORPEN">
            <summary>
            Pixel is a combination of the colors in the pen and in the screen, but not in both.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOTMASKPEN">
            <summary>
            Pixel is the inverse of the R2_MASKPEN color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MASKPEN">
            <summary>
            Pixel is a combination of the colors common to both the pen and the screen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOTXORPEN">
            <summary>
            Pixel is the inverse of the R2_XORPEN color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_NOP">
            <summary>
            Pixel remains unchanged.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MERGENOTPEN">
            <summary>
            Pixel is a combination of the screen color and the inverse of the pen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_COPYPEN">
            <summary>
            Pixel is the pen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MERGEPENNOT">
            <summary>
            Pixel is a combination of the pen color and the inverse of the screen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_MERGEPEN">
            <summary>
            Pixel is a combination of the pen color and the screen color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.R2_WHITE">
            <summary>
            Pixel is always 1.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SRCCOPY">
            <summary>
            Copies the source rectangle directly to the destination rectangle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SRCPAINT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SRCAND">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SRCINVERT">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SRCERASE">
            <summary>
            Combines the inverted colors of the destination rectangle with the colors of the source rectangle by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.NOTSRCCOPY">
            <summary>
            Copies the inverted source rectangle to the destination.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.NOTSRCERASE">
            <summary>
            Combines the colors of the source and destination rectangles by using the Boolean OR operator and then inverts the resultant color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.MERGECOPY">
            <summary>
            Merges the colors of the source rectangle with the specified pattern by using the Boolean AND operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.MERGEPAINT">
            <summary>
            Merges the colors of the inverted source rectangle with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PATCOPY">
            <summary>
            Copies the specified pattern into the destination bitmap.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PATPAINT">
            <summary>
            Combines the colors of the pattern with the colors of the inverted source rectangle by using the Boolean OR operator. The result of this operation is combined with the colors of the destination rectangle by using the Boolean OR operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.PATINVERT">
            <summary>
            Combines the colors of the specified pattern with the colors of the destination rectangle by using the Boolean XOR operator.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DSTINVERT">
            <summary>
            Inverts the destination rectangle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BLACKNESS">
            <summary>
            Fills the destination rectangle using the color associated with index 0 in the physical palette. (This color is black for the default physical palette.)
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.WHITENESS">
            <summary>
            Fills the destination rectangle using the color associated with index 1 in the physical palette. (This color is white for the default physical palette.)
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.WHITE_BRUSH">
            <summary>
            White brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.LTGRAY_BRUSH">
            <summary>
            Light gray brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.GRAY_BRUSH">
            <summary>
            Gray brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DKGRAY_BRUSH">
            <summary>
            Dark gray brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BLACK_BRUSH">
            <summary>
            Black brush.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.NULL_BRUSH">
            <summary>
            Null brush (equivalent to HOLLOW_BRUSH).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.HOLLOW_BRUSH">
            <summary>
            Hollow brush (equivalent to NULL_BRUSH).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.WHITE_PEN">
            <summary>
            White pen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.BLACK_PEN">
            <summary>
            Black pen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.NULL_PEN">
            <summary>
            Null pen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.OEM_FIXED_FONT">
            <summary>
            Original equipment manufacturer (OEM) dependent fixed-pitch (monospace) font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.ANSI_FIXED_FONT">
            <summary>
            Windows fixed-pitch (monospace) system font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.ANSI_VAR_FONT">
            <summary>
            Windows variable-pitch (proportional space) system font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SYSTEM_FONT">
            <summary>
            System font. By default, the system uses the system font to 
            draw menus, dialog box controls, and text.
            </summary>
            <remarks>Windows 95/98 and Windows NT: The system font is MS Sans Serif.
            Windows 2000/XP: The system font is Tahoma.</remarks>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DEVICE_DEFAULT_FONT">
            <summary>
            Windows NT/2000/XP: Device-dependent font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DEFAULT_PALETTE">
            <summary>
            Default palette. This palette consists of the static colors in the system palette.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.SYSTEM_FIXED_FONT">
            <summary>
            Fixed-pitch (monospace) system font. This stock object is provided only for 
            compatibility with 16-bit Windows versions earlier than 3.0. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DEFAULT_GUI_FONT">
            <summary>
            Default font for user interface objects such as menus and dialog boxes. 
            This is MS Sans Serif. Compare this with SYSTEM_FONT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DC_BRUSH">
            <summary>
            Windows 2000/XP: Solid color brush. The default color is white. The color can be 
            changed by using the SetDCBrushColor function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinGdi.DC_PEN">
            <summary>
            Windows 2000/XP: Solid pen color. The default color is white. The color can be 
            changed by using the SetDCPenColor function.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.Window">
            <summary>
            Provides functionality to process window parameters.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.Window.GetBorderStyle(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="M:Genetibase.WinApi.Window.GetBounds(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            Specified <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="M:Genetibase.WinApi.Window.GetExStyle(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="M:Genetibase.WinApi.Window.GetState(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="M:Genetibase.WinApi.Window.GetStyle(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="M:Genetibase.WinApi.Window.IsRightToLeft(System.IntPtr)">
            <summary>
            </summary>
            <param name="hWnd"></param>
            <exception cref="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <paramref name="hWnd"/> does not represent a window.
            </exception>
        </member>
        <member name="T:Genetibase.WinApi.WINDOWPOS">
            <summary>
            Contains information about the size and position of a window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.hwnd">
            <summary>
            Handle to the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.hwndInsertAfter">
            <summary>
            Handle to the window to precede the positioned window in the Z order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.x">
            <summary>
            Specifies the position of the left edge of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.y">
            <summary>
            Specifies the position of the top edge of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.width">
            <summary>
            Specifies the window width, in pixels.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.height">
            <summary>
            Specifies the window height, in pixels.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WINDOWPOS.flags">
            <summary>
            Specifies the window position.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.WINDOWPOS.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="T:Genetibase.WinApi.NCCALCSIZE_PARAMS">
            <summary>
            Contains information that an application can use while processing the WM_NCCALCSIZE message to
            calculate the size, position, and valid contents of the client area of a window.
            </summary>
            <remarks>
            If the window is a child window, the coordinates are relative to the client area of the parent window.
            If the window is a top-level window, the coordinates are relative to the screen origin.
            </remarks>
        </member>
        <member name="F:Genetibase.WinApi.NCCALCSIZE_PARAMS.rectProposed">
            <summary>
            Contains the new coordinates of a window that has been moved or resized, that is, it is the
            proposed new window coordinates. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NCCALCSIZE_PARAMS.rectBeforeMove">
            <summary>
            Contains the coordinates of the window before it was moved or resized.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NCCALCSIZE_PARAMS.rectClientBeforeMove">
            <summary>
            Contains the coordinates of the window's client area before the window was moved or resized.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NCCALCSIZE_PARAMS.lppos">
            <summary>
            Pointer to a WINDOWPOS structure that contains the size and position values specified in the
            operation that moved or resized the window.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.Gdi32">
            <summary>
            Imports Gdi32.dll functions.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.Gdi32.TRANSPARENT">
            <summary>
            Background remains untouched.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.Gdi32.OPAQUE">
            <summary>
            Background is filled with the current background color before the text, hatched brush, or pen is drawn.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.AlphaBlend(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Genetibase.WinApi.BLENDFUNCTION)">
            <summary>
            Displays bitmaps that have transparent or semitransparent pixels.
            </summary>
            <param name="hdcDest">Handle to the destination device context.</param>
            <param name="nXOriginDest">Specifies the x-coordinate, in logical units, of the upper-left
            corner of the destination rectangle.</param>
            <param name="nYOriginDest">Specifies the y-coordinate, in logical units, of the upper-left
            corner of the destination rectangle.</param>
            <param name="nWdithDest">Specifies the width, in logical units, of the destination rectangle.</param>
            <param name="nHeightDest">Specifies the height, in logical units, of the destination rectangle.</param>
            <param name="hdcSrc">Handle to the source device context.</param>
            <param name="nXOriginSrc">Specifies the x-coordinate, in logical units, of the upper-left corner
            of the source rectangle.</param>
            <param name="nYOriginSrc">Specifies the y-coordinate, in logical units, of the upper-left corner
            of the source rectangle.</param>
            <param name="nWidthSrc">Specifies the width, in logical units, of the source rectangle.</param>
            <param name="nHeightSrc">Specifies the height, in logical units, of the source rectangle.</param>
            <param name="blendFunction">Specifies the alpha-blending function for source and destination
            bitmaps, a global alpha value to be applied to the entire source bitmap, and format information
            for the source bitmap. The source and destination blend functions are currently limited to
            AC_SRC_OVER.</param>
            <returns></returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Performs a bit-block transfer of the color data corresponding to a rectangle of pixels from the specified source device context into a destination device context. 
            </summary>
            <param name="hdcDest">dentifies the destination device context.</param>
            <param name="nXDest">Specifies the logical x-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="nYDest">Specifies the logical y-coordinate of the upper-left corner of the destination rectangle.</param>
            <param name="nWidth">Specifies the logical width of the source and destination rectangles.</param>
            <param name="nHeight">Specifies the logical height of the source and the destination rectangles.</param>
            <param name="hdcSrc">Identifies the source device context.</param>
            <param name="nXSrc">Specifies the logical x-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="nYSrc">Specifies the logical y-coordinate of the upper-left corner of the source rectangle.</param>
            <param name="dwRop">Specifies a raster-operation code. These codes define how the color data for the source rectangle is to be combined with the color data for the destination rectangle to achieve the final color.</param>
            <returns>If the function succeeds, the return value is <c>true</c>, otherwise - false.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreateSolidBrush(System.Int32)">
            <summary>
            Creates a logical brush that has the specified solid color.
            </summary>
            <param name="crColor">Specifies the color of the brush. To create a COLORREF color value, use <see cref="T:System.Drawing.ColorTranslator"/>.</param>
            <returns>If the function succeeds, the return value identifies a logical brush; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreateSolidBrush(System.Drawing.Color)">
            <summary>
            Creates a logical brush that has the specified solid color.
            </summary>
            <param name="crColor">Specifies the color of the brush.</param>
            <returns>If the function succeeds, the return value identifies a logical brush; otherwise, IntPtr.Zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreateCompatibleDC(System.IntPtr)">
            <summary>
            Creates a memory device context (DC) compatible with the specified device.
            </summary>
            <param name="hdc">Identifies the device context. If this handle is <c>IntPtr.Zero</c>, 
            the function creates a memory device context compatible with the application's current screen.</param>
            <returns>If the function succeeds, the return value is the handle to a memory device context, 
            otherwise - <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Creates a bitmap compatible with the device that is associated with the specified device context.
            </summary>
            <param name="hdc"></param>
            <param name="nWidth"></param>
            <param name="nHeight"></param>
            <returns>If the function succeeds, the return value is a handle to the bitmap,
            otherwise - <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreatePen(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a logical pen that has the specified style, width, and color. The pen can subsequently 
            be selected into a device context and used to draw lines and curves.
            </summary>
            <param name="fnPenStyle">Specifies the pen style.</param>
            <param name="nWidth">Specifies the width of the pen, in logical units. If nWidth is zero, the 
            pen is a single pixel wide, regardless of the current transformation. 
            CreatePen returns a pen with the specified width bit with the PS_SOLID style if you specify a 
            width greater than one for the following styles: PS_DASH, PS_DOT, PS_DASHDOT, PS_DASHDOTDOT.</param>
            <param name="crColor">Specifies a color reference for the pen color.</param>
            <returns>If the function succeeds, the return value is a handle that identifies a logical pen.
            If the function fails, the return value is <c>IntPtr.Zero</c>. Windows NT/2000/XP: To get 
            extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.CreatePen(System.Drawing.Pen)">
            <summary>
            Creates a logical pen from the specified <see cref="T:System.Drawing.Pen"/>.
            </summary>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> to convert.</param>
            <returns>If the function succeeds, the return value is a handle that identifies a logical pen.
            If the function fails, the return value is <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.DeleteDC(System.IntPtr)">
            <summary>
            Deletes the specified device context (DC). 
            </summary>
            <param name="hdc">Identifies the device context.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.DeleteObject(System.IntPtr)">
            <summary>
            Deletes a logical pen, brush, font, bitmap, region, or palette, freeing all system resources associated with the object. After the object is deleted, the specified handle is no longer valid. 
            </summary>
            <param name="hObject">Identifies a logical pen, brush, font, bitmap, region, or palette.</param>
            <returns>If the function succeeds, the return value is <c>true</c>, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.ExtCreatePen(System.UInt32,System.UInt32,Genetibase.WinApi.LOGBRUSH@,System.UInt32,System.UInt32[])">
            <summary>
            Creates a logical cosmetic or geometric pen that has the specified style, width, and brush 
            attributes.
            </summary>
            <param name="dwPenStyle">Specifies a combination of type, style, end cap, and join attributes. 
            The values from each category are combined by using the bitwise OR operator (|).</param>
            <param name="dwWidth">Specifies the width of the pen. If the dwPenStyle parameter is 
            PS_GEOMETRIC, the width is given in logical units.
            If dwPenStyle is PS_COSMETIC, the width must be set to 1.</param>
            <param name="lplb">Pointer to a LOGBRUSH structure. If dwPenStyle is PS_COSMETIC, the lbColor 
            member specifies the color of the pen and the lbStyle member must be set to BS_SOLID. 
            If dwPenStyle is PS_GEOMETRIC, all members must be used to specify the brush attributes of 
            the pen.</param>
            <param name="dwStyleCount">Specifies the length, in DWORD units, of the lpStyle array. 
            This value must be zero if dwPenStyle is not PS_USERSTYLE.</param>
            <param name="lpStyle">Pointer to an array. The first value specifies the length of the first 
            dash in a user-defined style, the second value specifies the length of the first space, and so 
            on. This pointer must be <c>null</c> if dwPenStyle is not PS_USERSTYLE.</param>
            <returns>If the function succeeds, the return value is a handle that identifies a logical pen;
            otherwise, the return value is <c>IntPtr.Zero</c>. Windows NT/2000/XP: To get extended error 
            information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.ExtCreatePen(System.Drawing.Pen)">
            <summary>
            Creates a logical cosmetic or geometric pen that has the specified style, width, and brush 
            attributes.
            </summary>
            <param name="pen">The <see cref="T:System.Drawing.Pen"/> to convert.</param>
            <returns>If the function succeeds, the return value is a handle that identifies a logical pen;
            otherwise, the return value is <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.GetStockObject(System.Int32)">
            <summary>
            Retrieves a handle to one of the stock pens, brushes, fonts, or palettes.
            </summary>
            <param name="fnObject">Specifies the type of stock object.</param>
            <returns>If the function succeeds, the return value is a handle to the requested logical object; 
            otherwise, <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.GetTextMetrics(System.IntPtr,Genetibase.WinApi.TEXTMETRIC)">
            <summary>
            Fills the specified buffer with the metrics for the currently selected font.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="tm"><see cref="T:Genetibase.WinApi.TEXTMETRIC"/> structure that receives the text metrics.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.IntersectClipRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle. 
            </summary>
            <remarks>The lower and right-most edges of the given rectangle are excluded from the clipping region.</remarks>
            <param name="hdc">Handle to the device context.</param>
            <param name="nLeftRect">Specifies the x-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="nTopRect">Specifies the y-coordinate, in logical units, of the upper-left corner of the rectangle.</param>
            <param name="nRightRect">Specifies the x-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <param name="nBottomRect">Specifies the y-coordinate, in logical units, of the lower-right corner of the rectangle.</param>
            <returns>The return value specifies the new clipping region's type and can be one of the following
            values: NULLREGION: Region is empty. -or- SIMPLEREGION: Region is a single rectangle. -or- COMPLEXREGION: 
            Region is more than one rectangle. -or- ERROR: An error occured. (The current clipping region is unaffected.)</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.IntersectClipRect(System.IntPtr,System.Drawing.Rectangle)">
            <summary>
            Creates a new clipping region from the intersection of the current clipping region and the specified rectangle. 
            </summary>
            <remarks>The lower and right-most edges of the given rectangle are excluded from the clipping region.</remarks>
            <param name="hdc">Handle to the device context.</param>
            <param name="rect">Specifies the <see cref="T:System.Drawing.Rectangle"/> to use for intersection.</param>
            <returns>The return value specifies the new clipping region's type and can be one of the following
            values: NULLREGION: Region is empty. -or- SIMPLEREGION: Region is a single rectangle. -or- COMPLEXREGION: 
            Region is more than one rectangle. -or- ERROR: An error occured. (The current clipping region is unaffected.)</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.LineTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Draws a line from the current position up to, but not including, the specified point.
            </summary>
            <param name="hdc">Identifies a device context.</param>
            <param name="nXEnd">Specifies the x-coordinate of the line's ending point.</param>
            <param name="nYEnd">Specifies the y-coordinate of the line's ending point.</param>
            <returns>If the function succeeds, the return value is <c>true</c>, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.MoveTo(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Updates the current position to the specified point.
            </summary>
            <param name="hdc">Identifies a device context.</param>
            <param name="x">Specifies the x-coordinate of the new position, in logical units.</param>
            <param name="y">Specifies the y-coordinate of the new position, in logical units.</param>
            <returns>If the function succeeds, the return value is <c>true</c>, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.MoveToEx(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            Updates the current position to the specified point and optionally returns the previous position. 
            </summary>
            <param name="hdc">Identifies a device context.</param>
            <param name="x">Specifies the x-coordinate of the new position, in logical units.</param>
            <param name="y">Specifies the y-coordinate of the new position, in logical units.</param>
            <param name="lpPoint">Points to a POINT structure in which the previous current position is stored. If this parameter is a <c>null</c> pointer, the previous position is not returned.</param>
            <returns>If the function succeeds, the return value is <c>true</c>, otherwise - <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.Rectangle(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle. The rectangle is outlined by using the current pen and filled by using the current brush.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="nLeftRect">Specifies the x-coordinate, in logical coordinates, of the upper-left corner of the
            rectangle.</param>
            <param name="nTopRect">Specifies the y-coordinate, in logical coordinates, of the upper-left corner of the rectangle.</param>
            <param name="nRightRect">Specifies the x-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <param name="nBottomRect">Specifies the y-coordinate, in logical coordinates, of the lower-right corner of the rectangle.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>;otherwise,
            the return value is <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.RoundRect(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a rectangle with rounded corners. The rectangle is outlined by using the current pen 
            and filled by using the current brush.
            </summary>
            <param name="hdc">Identifies the device context.</param>
            <param name="nLeftRect">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="nTopRect">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="nRightRect">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="nBottomRect">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
            <param name="nWidth">Specifies the width of the ellipse used to draw the rounded corners.</param>
            <param name="nHeight">Specifies the height of the ellipse used to draw the rounded corners.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>.
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            Selects an object into the specified device context. The new object replaces the previous object of the same type. 
            </summary>
            <param name="hdc">Identifies the device context.</param>
            <param name="hgdiobj">Identifies the object to be selected.</param>
            <returns>If the selected object is not a region and the function succeeds, the return value 
            is the handle of the object being replaced. If the selected object is a region and the 
            function succeeds, the return value is one of the following values: SIMPLEREGION
            (region consists of a single rectangle), COMPLEXREGION (region consists of more than one 
            rectangle), NULLREGION (region is empty). If an error occurs and the selected object is not 
            a region, the return value is <c>IntPtr.Zero</c>. Otherwise, it is GDI_ERROR.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetBkColor(System.IntPtr,System.Int32)">
            <summary>
            Sets the current background color to the specified color value, or to the nearest physical color 
            if the device cannot represent the specified color value.
            </summary>
            <param name="hdc">Identifies the device context.</param>
            <param name="crColor">Specifies the new background color.</param>
            <returns>If the function succeeds, the return value specifies the previous background color 
            as a COLORREF value. If the function fails, the return value is CLR_INVALID.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetBkMode(System.IntPtr,System.Int32)">
            <summary>
            Sets the background mix mode of the specified device context. The background mix mode is used with text, hatched brushes, and pen styles that are not solid lines. 
            </summary>
            <param name="hdc">Handle to the device context. </param>
            <param name="iBkMode">Specifies the background mode. This parameter can be one of the following values.
            OPAQUE: Background is filled with the current background color before the text, hatched brush, or pen is drawn.
            -or-
            TRANSPARENT: Background remains untouched.</param>
            <returns>If the function succeeds, the return value specifies the previous background mode; otherwise, zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetROP2(System.IntPtr,System.Int32)">
            <summary>
            Sets the current foreground mix mode. GDI uses the foreground mix mode 
            to combine pens and interiors of filled objects with the colors already 
            on the screen. The foreground mix mode defines how colors from the brush 
            or pen and the colors in the existing image are to be combined.
            </summary>
            <param name="hdc">Identifies the device context.</param>
            <param name="fnDrawMode">Specifies the new mix mode.</param>
            <returns>If the function succeeds, the return value specifies the previous mix mode,
            otherwise the return value is zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetPixel(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the pixel at the specified coordinates to the specified color. 
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the point to be set.</param>
            <param name="crColor">Specifies the color to be used to paint the point.
            Use <see cref="M:System.Drawing.ColorTranslator.ToWin32"/> method to create a COLORREF color value.
            </param>
            <returns>If the function succeeds, the return value is the RGB value that the function sets
            the pixel to. This value may differ from the color specified by crColor; that occurs when an
            exact match for the specified color cannot be found. If the function fails, the return value is –1.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetPixel(System.IntPtr,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the pixel at the specified coordinates to the specified color.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the point to be set.</param>
            <param name="color">Specifies the color to be used to paint the point.</param>
            <returns>If the function succeeds, the return value is the <see cref="T:Color"/> that the function
            sets the pixel to. This value may differ from the color specified by color; that occurs when an
            exact match for the specified color cannot be found. If the function fails, the return value is -1.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetPixelV(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the pixel at the specified coordinates to the closest approximation of the specified color.
            The point must be in the clipping region and the visible part of the device surface.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the point to be set.</param>
            <param name="crColor">Specifies the color to be used to paint the point.
            Use <see cref="M:System.Drawing.ColorTranslator.ToWin32"/> method to create a COLORREF color value.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.Gdi32.SetPixelV(System.IntPtr,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Sets the pixel at the specified coordinates to the closest approximation of the specified color.
            The point must be in the clipping region and the visible part of the device surface.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="x">Specifies the x-coordinate, in logical units, of the point to be set.</param>
            <param name="y">Specifies the y-coordinate, in logical units, of the point to be set.</param>
            <param name="color">Specifies the color to be used to paint the point.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Genetibase.WinApi.BLENDFUNCTION">
            <summary>
            Controls blending by specifying the blending functions for source and destination bitmaps.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.BLENDFUNCTION.BlendOp">
            <summary>
            Specifies the source blend operation. Currently, the only source and destination blend 
            operation that has been defined is AC_SRC_OVER. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.BLENDFUNCTION.BlendFlags">
            <summary>
            Must be zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.BLENDFUNCTION.SourceConstantAlpha">
            <summary>
            Specifies an alpha transparency value to be used on the entire source bitmap. The 
            SourceConstantAlpha value is combined with any per-pixel alpha values in the source bitmap. 
            If you set SourceConstantAlpha to 0, it is assumed that your image is transparent. Set the 
            SourceConstantAlpha value to 255 (opaque) when you only want to use per-pixel alpha values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.BLENDFUNCTION.AlphaFormat">
            <summary>
            This member controls the way the source and destination bitmaps are interpreted.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.WinUser">
            <summary>
            Defines constants declared in WinUser.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.BS_OWNERDRAW">
            <summary>
            Creates an owner-drawn button. The owner window receives a WM_MEASUREITEM message when the button is created and a WM_DRAWITEM message when a visual aspect of the button has changed. Do not combine the BS_OWNERDRAW style with any other button styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_VREDRAW">
            <summary>
            The CS_VREDRAW style causes a window to be completely redrawn whenever its vertical size (height) 
            changes.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_HREDRAW">
            <summary>
            The CS_HREDRAW style causes a window to be completely redrawn whenever its horizontal size (width) 
            changes.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_DBLCLKS">
            <summary>
            The CS_DBLCLKS style causes Windows to detect a double-click (the user clicking the left mouse 
            button twice in quick succession) for an application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_OWNDC">
            <summary>
            Allocates a unique device context for each window in the class.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_CLASSDC">
            <summary>
            Allocates one device context to be shared by all windows in the class. Because window classes 
            are process specific, it is possible for multiple threads of an application to create a window 
            of the same class. It is also possible for the threads to attempt to use the device context 
            simultaneously. When this happens, the system allows only one thread to successfully finish its 
            drawing operation.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_PARENTDC">
            <summary>
            Sets the clipping rectangle of the child window to that of the parent window so that the child 
            can draw on the parent. A window with the CS_PARENTDC style bit receives a regular device 
            context from the system's cache of device contexts. It does not give the child the parent's 
            device context or device context settings. Specifying CS_PARENTDC enhances an application's 
            performance.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_NOCLOSE">
            <summary>
            A window that belongs to a class with the CS_NOCLOSE style does not have the Close command in its 
            System menu.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_SAVEBITS">
            <summary>
            Menus, dialog boxes, and combo list boxes have the CS_SAVEBITS style. When you use this style for 
            a window, Windows saves a bitmap copy of the screen image that the window obscures.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_BYTEALIGNCLIENT">
            <summary>
            Aligns the window's client area on a byte boundary (in the x direction).
            This style affects the width of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_BYTEALIGNWINDOW">
            <summary>
            Aligns the window on a byte boundary (in the x direction). This style affects the width 
            of the window and its horizontal placement on the display.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_GLOBALCLASS">
            <summary>
            Specifies that the window class is an application global class.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_IME">
            <summary>
            The UI class should be registered with CS_IME specified in the style field so every
            application can use it through the IME class.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CS_DROPSHADOW">
            <summary>
            Enables the drop shadow effect on a window. The effect is turned on and off through 
            SPI_SETDROPSHADOW. Typically, this is enabled for small, short-lived windows such as menus to 
            emphasize their Z order relationship to other windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CWP_ALL">
            <summary>
            Does not skip any child windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CWP_SKIPINVISIBLE">
            <summary>
            Skips invisible child windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CWP_SKIPDISABLED">
            <summary>
            Skips disabled child windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.CWP_SKIPTRANSPARENT">
            <summary>
            Skips transparent child windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETSEL">
            <summary>
            Retrieves the starting and ending character positions of the current selection in an edit control. 
            You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETSEL">
            <summary>
            Selects a range of characters in an edit control. You can send this message to either an edit 
            control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETRECT">
            <summary>
            Retrieves the formatting rectangle of an edit control. The formatting rectangle is the limiting 
            rectangle into which the control draws the text. The limiting rectangle is independent of the 
            size of the edit-control window. You can send this message to either an edit control or a rich 
            edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETRECT">
            <summary>
            Sets the formatting rectangle of a multiline edit control. The formatting rectangle is the 
            limiting rectangle into which the control draws the text. The limiting rectangle is independent 
            of the size of the edit control window. This message is processed only by multiline edit controls. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETRECTNP">
            <summary>
            Sets the formatting rectangle of a multiline edit control. The EM_SETRECTNP message is identical
            to the EM_SETRECT message, except that EM_SETRECTNP does not redraw the edit control window.
            The formatting rectangle is the limiting rectangle into which the control draws the text. The 
            limiting rectangle is independent of the size of the edit control window. This message is 
            processed only by multiline edit controls. You can send this message to either an edit control 
            or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SCROLL">
            <summary>
            Scrolls the text vertically in a multiline edit control. This message is equivalent to sending a 
            WM_VSCROLL message to the edit control. You can send this message to either an edit control or a 
            rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_LINESCROLL">
            <summary>
            Scrolls the text in a multiline edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SCROLLCARET">
            <summary>
            Scrolls the caret into view in an edit control. You can send this message to either an edit
            control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETMODIFY">
            <summary>
            Retrieves the state of an edit control's modification flag. The flag indicates whether the 
            contents of the edit control have been modified. You can send this message to either an edit 
            control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETMODIFY">
            <summary>
            Sets or clears the modification flag for an edit control. The modification flag indicates 
            whether the text within the edit control has been modified. You can send this message to 
            either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETLINECOUNT">
            <summary>
            Retrieves the number of lines in a multiline edit control. You can send this message to either 
            an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_LINEINDEX">
            <summary>
            Retrieves the character index of the first character of a specified line in a multiline edit 
            control. A character index is the zero-based index of the character from the beginning of the 
            edit control. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETHANDLE">
            <summary>
            Sets the handle of the memory that will be used by a multiline edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETHANDLE">
            <summary>
            Retrieves a handle of the memory currently allocated for a multiline edit control's text.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETTHUMB">
            <summary>
            Retrieves the position of the scroll box (thumb) in the vertical scroll bar of a multiline edit 
            control. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_LINELENGTH">
            <summary>
            Retrieves the length, in characters, of a line in an edit control. You can send this message to 
            either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_REPLACESEL">
            <summary>
            Replaces the current selection in an edit control with the specified text. You can send this 
            message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETLINE">
            <summary>
            Copies a line of text from an edit control and places it in a specified buffer. You can send 
            this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_LIMITTEXT">
            <summary>
            Sets the text limit of an edit control. The text limit is the maximum amount of text, in TCHARs, 
            that the user can type into the edit control. You can send this message to either an edit control 
            or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_CANUNDO">
            <summary>
            Determines whether there are any actions in an edit control's undo queue. You can send this 
            message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_UNDO">
            <summary>
            Undoes the last edit control operation in the control's undo queue. You can send this message 
            to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_FMTLINES">
            <summary>
            Sets a flag that determines whether a multiline edit control includes soft line-break 
            characters. A soft line break consists of two carriage returns and a line feed and is inserted 
            at the end of a line that is broken because of wordwrapping.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_LINEFROMCHAR">
            <summary>
            Retrieves the index of the line that contains the specified character index in a multiline edit 
            control. A character index is the zero-based index of the character from the beginning of the 
            edit control. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETTABSTOPS">
            <summary>
            Sets the tab stops in a multiline edit control. When text is copied to the control, any tab 
            character in the text causes space to be generated up to the next tab stop.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETPASSWORDCHAR">
            <summary>
            Sets or removes the password character for an edit control. When a password character is set,
            that character is displayed in place of the characters typed by the user. You can send this
            message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_EMPTYUNDOBUFFER">
            <summary>
            Resets the undo flag of an edit control. The undo flag is set whenever an operation within 
            the edit control can be undone. You can send this message to either an edit control or a rich 
            edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETFIRSTVISIBLELINE">
            <summary>
            Retrieves the zero-based index of the uppermost visible line in a multiline edit control. 
            You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETREADONLY">
            <summary>
            Sets or removes the read-only style (ES_READONLY) of an edit control. You can send this 
            message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETWORDBREAKPROC">
            <summary>
            Replaces an edit control's default Wordwrap function with an application-defined Wordwrap 
            function. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETWORDBREAKPROC">
            <summary>
            Retrieves the address of the current Wordwrap function. You can send this message to either 
            an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETPASSWORDCHAR">
            <summary>
            Retrieves the password character that an edit control displays when the user enters text. 
            You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETMARGINS">
            <summary>
            Sets the widths of the left and right margins for an edit control. The message redraws the 
            control to reflect the new margins. You can send this message to either an edit control or a 
            rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETMARGINS">
            <summary>
            Retrieves the widths of the left and right margins for an edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETLIMITTEXT">
            <summary>
            sets the text limit of an edit control. The text limit is the maximum amount of text, in 
            TCHARs, that the user can type into the edit control. You can send this message to either an 
            edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETLIMITTEXT">
            <summary>
            Retrieves the current text limit for an edit control. You can send this message to either an 
            edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_POSFROMCHAR">
            <summary>
            Retrieves the client area coordinates of a specified character in an edit control. You can 
            send this message to either an edit control or a rich edit control. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_CHARFROMPOS">
            <summary>
            Retrieves information about the character closest to a specified point in the client area of 
            an edit control. You can send this message to either an edit control or a rich edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_SETIMESTATUS">
            <summary>
            Sets the status flags that determine how an edit control interacts with the IME.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.EM_GETIMESTATUS">
            <summary>
            Retrieves a set of status flags that indicate how the edit control interacts with the Input 
            Method Editor (IME).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_ACCEPTFILES">
            <summary>
            Windows that can accept dragged objects must be created with this style so that Windows can determine
            that the window will accept objects and can change the drag/drop cursor as the user drags an
            object over the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using
            double-buffering.
            This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark,
            the cursor changes to a question mark with a pointer. If the user then clicks a child window, the
            child receives a WM_HELP message. The child window should pass the message to the parent window
            procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help
            application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation.
            If this style is specified, the dialog manager recurses into children of this window when
            performing navigation operations such as handling the TAB key, an arrow key, or a keyboard
            mnemonic.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_DLGMODALFRAME">
            <summary>
            When this style is enabled, Windows uses a dialog border on a window that has a caption.
            When used, the WS_EX_DLGMODALFRAME style overrides the WS_BORDER and WS_THICKFRAME styles,
            producing a window with a dialog frame. This extended style is normally used on dialog boxes,
            but it can be used for any window to get a dialog frame.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows.
            Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal
            origin is on the right edge. Increasing horizontal values advance to the left.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order
            alignment, the vertical scroll bar (if present) is to the left of the client area. For other
            languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window
            when the user clicks it. The system does not bring this window to the foreground when the user
            minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the
            taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its
            child windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_NOPARENTNOTIFY">
            <summary>
            This style is used for child windows. When this style is enabled, Windows does not send
            WM_NOTIFY messages to the child window's parent. By default, Windows sends WM_NOTIFY messages
            to a child window's parent when a child window is created or destroyed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style
            has an effect only if the shell language is Hebrew, Arabic, or another language that supports
            reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT
            or ES_RIGHT style, respectively. Using this style with button controls has the same effect as
            using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order
            alignment, the window text is displayed using right-to-left reading-order properties. For other
            languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that
            do not accept user input.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool
            window has a title bar that is shorter than a normal title bar, and the window title is drawn
            using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears
            when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on
            the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_TOPMOST">
            <summary>
            This style applies only to top-level windows; it is ignored for child windows. When this style
            is enabled, Windows places the window above any windows that do not have the WS_EX_TOPMOST style.
            Beginning with Windows version 3.1, there are two classes of top-level windows: topmost top-level
            windows and top-level windows. Topmost top-level windows always appear above top-level windows in
            the Z order. Top-level windows can be made topmost top-level windows by calling the SetWindowPos
            function with the handle to the window and –1 for the hwndInsertAfter parameter.
            Topmost top-level windows can become regular top-level windows by calling SetWindowPos with the
            window handle and 1 for the hwndInsertAfter parameter.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_TRANSPARENT">
            <summary>
            The WS_EX_TRANSPARENT style makes a window transparent; that is, the window can be seen through,
            and anything under the window is still visible. Transparent windows are not transparent to mouse
            or keyboard events. A transparent window receives paint messages when anything under it changes.
            Transparent windows are useful for drawing drag handles on top of other windows or for
            implementing "hot-spot" areas without having to hit test because the transparent window receives
            click messages.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_WINDOW">
            <summary>
            Returns a device context corresponding to the window rectangle rather than the client rectangle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_CACHE">
            <summary>
            Returns a device context from the cache, rather than the OWNDC or CLASSDC window. 
            Essentially overrides CS_OWNDC and CS_CLASSDC.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_NORESETATTRS">
            <summary>
            Does not reset the attributes of this device context to the default attributes when 
            this device context is released.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_CLIPCHILDREN">
            <summary>
            Excludes the visible regions of all child windows below the window identified by hWnd.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_CLIPSIBLINGS">
            <summary>
            Excludes the visible regions of all sibling windows above the window identified by hWnd.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_PARENTCLIP">
            <summary>
            Uses the visible region of the parent window. The parent's WS_CLIPCHILDREN and CS_PARENTDC 
            style bits are ignored. The device context origin is set to the upper-left corner of the window
            identified by hWnd.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_VALIDATE">
            <summary>
            When specified with DCX_INTERSECTUPDATE, causes the device context to be completely validated. 
            Using this function with both DCX_INTERSECTUPDATE and DCX_VALIDATE is identical to using the 
            BeginPaint function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_EXCLUDERGN">
            <summary>
            The clipping region identified by hrgnClip is excluded from the visible region of the 
            returned device context.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_INTERSECTRGN">
            <summary>
            The clipping region identified by hrgnClip is intersected with the visible region of the 
            returned device context.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_EXCLUDEUPDATE">
            <summary>
            Returns a region that excludes the window's update region.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_INTERSECTUPDATE">
            <summary>
            Returns a region that includes the window's update region.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.DCX_LOCKWINDOWUPDATE">
            <summary>
            Allows drawing even if there is a LockWindowUpdate call in effect that would otherwise exclude 
            this window. Used for drawing during tracking.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_LBUTTON">
            <summary>
            The left mouse button is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_RBUTTON">
            <summary>
            The right mouse button is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_SHIFT">
            <summary>
            The SHIFT key is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_CONTROL">
            <summary>
            The CTRL key is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_MBUTTON">
            <summary>
            The middle mouse button is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_XBUTTON1">
            <summary>
            Windows 2000/Windows XP: the first X button is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MK_XBUTTON2">
            <summary>
            Windows 2000/Windows XP: the second X button is down.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.ULW_COLORKEY">
            <summary>
            Use crKey as the transparency color.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.ULW_ALPHA">
            <summary>
            Use pblend as the blend function. If the display mode is 256 colors or less, the effect of 
            this value is the same as the effect of ULW_OPAQUE.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.ULW_OPAQUE">
            <summary>
            Draw an opaque layered window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTERROR">
            <summary>
            Location of the mouse:
            On the screen background or on a dividing line between windows (same as HTNOWHERE except that
            the DefWndProc Windows function produces a system beep to indicate an error).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTTRANSPARENT">
            <summary>
            Location of the mouse:
            In a window currently covered by another window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTNOWHERE">
            <summary>
            Location of the mouse:
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTCLIENT">
            <summary>
            Location of the mouse:
            In a client area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTCAPTION">
            <summary>
            Location of the mouse:
            In a title-bar area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTSYSMENU">
            <summary>
            Location of the mouse:
            In a Control menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTGROWBOX">
            <summary>
            Location of the mouse:
            In a size box.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTSIZE">
            <summary>
            Location of the mouse:
            In a size box (same as HTGROWBOX).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTMENU">
            <summary>
            Location of the mouse:
            In a menu area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTHSCROLL">
            <summary>
            Location of the mouse:
            In the horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTVSCROLL">
            <summary>
            Location of the mouse:
            In the vertical scroll bar
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTMINBUTTON">
            <summary>
            Location of the mouse:
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTMAXBUTTON">
            <summary>
            Location of the mouse:
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTLEFT">
            <summary>
            Location of the mouse:
            In the left border of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTRIGHT">
            <summary>
            Location of the mouse:
            In the right border of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTTOP">
            <summary>
            Location of the mouse:
            In the upper horizontal border of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTTOPLEFT">
            <summary>
            Location of the mouse:
            In the upper-left corner of the window border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTTOPRIGHT">
            <summary>
            Location of the mouse:
            In the upper-right corner of the window border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTBOTTOM">
            <summary>
            Location of the mouse:
            In the lower horizontal border of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTBOTTOMLEFT">
            <summary>
            Location of the mouse:
            In the lower-left corner of the window border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTBOTTOMRIGHT">
            <summary>
            Location of the mouse:
            In the lower-right corner of the window border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTBORDER">
            <summary>
            Location of the mouse:
            In the border of a window that does not have a sizing border. Use to disallow moving or sizing.
            Can still be used to activate app.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTREDUCE">
            <summary>
            Location of the mouse:
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTZOOM">
            <summary>
            Location of the mouse:
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTSIZEFIRST">
            <summary>
            Location of the mouse:
            In the left border of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTSIZELAST">
            <summary>
            Location of the mouse:
            In the lower-right corner of the window border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTOBJECT">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTCLOSE">
            <summary>
            Location of the mouse:
            In a Close button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HTHELP">
            <summary>
            Location of the mouse:
            In a Help button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_HORZ">
            <summary>
            Horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_VERT">
            <summary>
            Vertical scroll bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_CTL">
            <summary>
            Scroll bar control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_BOTH">
            <summary>
            Horizontal and vertical scroll bars.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_LINEUP">
            <summary>
            The user clicks the top scroll arrow. Decrements the scroll box position; scrolls toward the 
            top of the data by one unit.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_LINELEFT">
            <summary>
            The user clicks the left scroll arrow. Decrements the scroll box position;
            scrolls toward the left end of the data by one unit.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_LINEDOWN">
            <summary>
            The user clicks the bottom scroll arrow. Increments the scroll box position;
            scrolls toward the bottom of the data by one unit.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_LINERIGHT">
            <summary>
            The user clicks the right scroll arrow. Increments the scroll box position;
            scrolls toward the right end of the data by one unit.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_PAGEUP">
            <summary>
            The user clicks the scroll bar shaft above the scroll box. Decrements the scroll
            box position by the number of data units in the window; scrolls toward the top of
            the data by the same number of units.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_PAGELEFT">
            <summary>
            The user clicks the scroll bar shaft to the left of the scroll box. Decrements the
            scroll box position by the number of data units in the window; scrolls toward the left
            end of the data by the same number of units.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_PAGEDOWN">
            <summary>
            The user clicks the scroll bar shaft below the scroll box. Increments the scroll box
            position by the number of data units in the window; scrolls toward the bottom of the data
            by the same number of units.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_PAGERIGHT">
            <summary>
            The user clicks the scroll bar shaft to the right of the scroll box. Increments the scroll
            box position by the number of data units in the window; scrolls toward the right end of the
            data by the same number of units.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_THUMBPOSITION">
            <summary>
            The user releases the scroll box after dragging it. Sets the scroll box to the position specified
            in the message; scrolls the data by the same number of units the scroll box has moved.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_THUMBTRACK">
            <summary>
            The user drags the scroll box. Sets the scroll box to the position specified in the message and
            scrolls the data by the same number of units the scroll box has moved for applications that draw
            data quickly. Applications that cannot draw data quickly must wait for the SB_THUMBPOSITION
            request code before moving the scroll box and scrolling the data.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_TOP">
            <summary>
            Scrolls to the upper left.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_LEFT">
            <summary>
            Scroll to far left.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_BOTTOM">
            <summary>
            Scrolls to the lower right.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_RIGHT">
            <summary>
            Scroll to far right.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SB_ENDSCROLL">
            <summary>
            The user releases the mouse after holding it on an arrow or in the scroll bar shaft.
            No response is needed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOSIZE">
            <summary>
            Retains the current size (ignores the cx and cy parameters).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOMOVE">
            <summary>
            Retains the current position (ignores X and Y parameters).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOZORDER">
            <summary>
            Retains the current Z order (ignores the hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOREDRAW">
            <summary>
            Does not redraw changes. If this flag is set, no repainting of any kind occurs. This applies to 
            the client area, the nonclient area (including the title bar and scroll bars), and any part of 
            the parent window uncovered as a result of the window being moved. When this flag is set, the 
            application must explicitly invalidate or redraw any parts of the window and parent window that 
            need redrawing.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOACTIVATE">
            <summary>
            Does not activate the window. If this flag is not set, the window is activated and moved to 
            the top of either the topmost or non-topmost group (depending on the setting of the 
            hWndInsertAfter parameter).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_FRAMECHANGED">
            <summary>
            Applies new frame styles set using the SetWindowLong function. Sends a WM_NCCALCSIZE message 
            to the window, even if the window's size is not being changed. If this flag is not specified, 
            WM_NCCALCSIZE is sent only when the window's size is being changed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_SHOWWINDOW">
            <summary>
            Displays the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_HIDEWINDOW">
            <summary>
            Hides the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOCOPYBITS">
            <summary>
            Discards the entire contents of the client area. If this flag is not specified, the valid 
            contents of the client area are saved and copied back into the client area after the window is 
            sized or repositioned.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOOWNERZORDER">
            <summary>
            Does not change the owner window's position in the Z order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOSENDCHANGING">
            <summary>
            Prevents the window from receiving the WM_WINDOWPOSCHANGING message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_DRAWFRAME">
            <summary>
            Draws a frame (defined in the window's class description) around the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_NOREPOSITION">
            <summary>
            Same as the SWP_NOOWNERZORDER flag.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_DEFERERASE">
            <summary>
            Prevents generation of the WM_SYNCPAINT message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SWP_ASYNCWINDOWPOS">
            <summary>
            If the calling thread and the thread that owns the window are attached to different input 
            queues, the system posts the request to the thread that owns the window. This prevents the 
            calling thread from blocking its execution while other threads process the request.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HWND_TOP">
            <summary>
            Places the window at the top of the Z order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HWND_BOTTOM">
            <summary>
            Places the window at the bottom of the Z order. If the hWnd parameter identifies a topmost 
            window, the window loses its topmost status and is placed at the bottom of all other windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HWND_TOPMOST">
            <summary>
            Places the window above all non-topmost windows. The window maintains its topmost position 
            even when it is deactivated.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.HWND_NOTOPMOST">
            <summary>
            Places the window above all non-topmost windows (that is, behind all topmost windows). This 
            flag has no effect if the window is already a non-topmost window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_HIDE">
            <summary>
            Hides the window and activates another window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWNORMAL">
            <summary>
            Activates and displays a window. If the window is minimized or maximized, the system restores
            it to its original size and position. An application should specify this flag when displaying
            the window for the first time.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWMINIMIZED">
            <summary>
            Activates the window and displays it as a minimized window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWMAXIMIZED">
            <summary>
            Activates the window and displays it as a maximized window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_MAXIMIZE">
            <summary>
            Maximizes the specified window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWNOACTIVATE">
            <summary>
            Displays a window in its most recent size and position. This value is similar to SW_SHOWNORMAL, 
            except the window is not actived.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOW">
            <summary>
            Activates the window and displays it in its current size and position.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_MINIMIZE">
            <summary>
            Minimizes the specified window and activates the next top-level window in the Z order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWMINNOACTIVE">
            <summary>
            Displays the window as a minimized window. 
            This value is similar to SW_SHOWMINIMIZED, except the window is not activated.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWNA">
            <summary>
            Displays the window in its current size and position. 
            This value is similar to SW_SHOW, except the window is not activated.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_RESTORE">
            <summary>
            Activates and displays the window. If the window is minimized or maximized, the system 
            restores it to its original size and position. An application should specify this flag 
            when restoring a minimized window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_SHOWDEFAULT">
            <summary>
            Sets the show state based on the SW_ value specified in the STARTUPINFO structure 
            passed to the CreateProcess function by the program that started the application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.SW_FORCEMINIMIZE">
            <summary>
            Windows 2000/XP: Minimizes a window, even if the thread that owns the window is hung. 
            This flag should only be used when minimizing windows from a different thread.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_WNDPROC">
            <summary>
            Sets a new address for the window procedure. Windows NT/2000/XP: You cannot change this 
            attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_HINSTANCE">
            <summary>
            Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_HWNDPARENT">
            <summary>
            Retrieves a handle to the parent window, if any.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style. For more information, see CreateWindowEx.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_USERDATA">
            <summary>
            Sets the user data associated with the window. This data is intended for use by the application 
            that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWL_ID">
            <summary>
            Sets a new identifier of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWLP_WNDPROC">
            <summary>
            Retrieves the pointer to the window procedure, or a handle representing the pointer to the window
            procedure. You must use the CallWindowProc function to call the window procedure.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWLP_HINSTANCE">
            <summary>
            Retrieves a handle to the application instance.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWLP_HWNDPARENT">
            <summary>
            Retrieves a handle to the parent window, if there is one.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWLP_USERDATA">
            <summary>
            Retrieves the user data associated with the window. This data is intended for use by the
            application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.GWLP_ID">
            <summary>
            Retrieves the identifier of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it
            wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event.
            Examples of theme change events are the activation of a theme, the deactivation of a theme,
            or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the
            CreateWindowEx or CreateWindow function. (The message is sent before the function returns.)
            The window procedure of the new window receives this message after the window is created,
            but before the window becomes visible. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window
            procedure of the window being destroyed after the window is removed from the screen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being
            deactivated. If the windows use the same input queue, the message is sent synchronously, first
            to the window procedure of the top-level window being deactivated, then to the window procedure
            of the top-level window being activated. If the windows use different input queues, the message
            is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window.
            It is sent to the window whose enabled state is changing. This message is sent before the
            EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the
            window has changed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to
            be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that
            corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length,
            in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to
            paint a portion of an application's window. The message is sent when the UpdateWindow or
            RedrawWindow function is called, or by the DispatchMessage function when the application
            obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an
            application calls the ExitWindows function. If any application returns zero, the session is not
            ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns
            zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam
            parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when
            the application calls the PostQuitMessage function. It causes the GetMessage function to
            return zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be
            restored to its previous size and position.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example,
            when a window is resized). The message is sent to prepare an invalidated portion of a window
            for painting.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSCOLORCHANGE">
            <summary>
            The WM_SYSCOLORCHANGE message is sent to all top-level windows when
            a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results
            of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether
            the session is ending.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change
            to the WIN.INI file. The SystemParametersInfo function sends this message after an application
            uses the function to change a setting in WIN.INI.
            <remarks>The WM_WININICHANGE message is provided only for compatibility with earlier versions
            of the system. Applications should use the WM_SETTINGCHANGE message.</remarks>
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETTINGCHANGE">
            <summary>
            The system sends the WM_SETTINGCHANGE message to all top-level windows when the
            SystemParametersInfo function changes a system-wide setting or when policy settings have changed.
            Applications should send WM_SETTINGCHANGE to all top-level windows when they make changes to
            system parameters. (This message cannot be sent directly to a window.) To send the
            WM_SETTINGCHANGE message to all top-level windows, use the SendMessageTimeout function with
            the hwnd parameter set to HWND_BROADCAST.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the
            user changes device-mode settings.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than
            the active window is about to be activated. The message is sent to the application whose
            window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the
            system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_TIMECHANGE">
            <summary>
            An application sends the WM_TIMECHANGE message whenever it updates the system time.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For
            example, the system sends this message to the active window when a dialog box or message box
            is displayed. Certain functions also send this message explicitly to the specified window
            regardless of whether it is the active window. For example, the EnableWindow function sends
            this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a
            window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button.
            The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the
            window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate
            user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window
            is about to change. An application can use this message to override the window's default
            maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the
            icon is to be painted. This message is not sent by newer versions of Microsoft Windows,
            except in unusual circumstances explained in the Remarks.
            <remarks>Windows 95/98/Me, Windows NT 4.0 and later: This message is sent only to 16-bit
            windows (note that this is with a lowercase "W"), and only for compatibility reasons. Under
            such conditions, the value of wParam is TRUE (the value carries no significance). 
            On Microsoft Windows NT 3.51 and earlier, or on newer versions of Windows when the unusual
            circumstances above are met, the window receives this message only if a class icon is defined
            for the window; otherwise, WM_PAINT is sent instead.
            Windows NT 3.51 and earlier: The DefWindowProc function draws the class icon. On newer versions
            of Windows, the DefWindowProc function ignores the message.
            </remarks>
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when
            the background of the icon must be filled before painting the icon. A window receives this
            message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent.
            This message is not sent by newer versions of Windows.
            <remarks>Windows NT 3.51 and earlier: The DefWindowProc function fills the icon background with
            the class background brush of the parent window. On newer versions of Windows, the DefWindowProc
            function ignores the message.</remarks>
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a
            different control in the dialog box. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed
            from the Print Manager queue.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box,
            list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control,
            or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DELETEITEM">
            <summary>
            The WM_DELETEITEM message is sent to the owner of a list box or combo box when the list box
            or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT,
            CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each
            deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box
            item with nonzero item data.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_VKEYTOITEM">
            <summary>
            The WM_VKEYTOITEM message is sent by a list box with the LBS_WANTKEYBOARDINPUT style
            to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CHARTOITEM">
            <summary>
            The WM_CHARTOITEM message is sent by a list box with the LBS_WANTKEYBOARDINPUT style to
            its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control
            is to use when drawing text.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which
            the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window.
            When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to
            be dragged by the user but does not have an icon defined for its class. An application can
            return a handle to an icon or cursor. The system displays this cursor or icon while the user
            drags the icon.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item
            in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a
            new item, the system sends this message to the owner of a combo box or list box created with
            the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an
            accessible object contained in a server application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more
            than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting
            memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COMMNOTIFY">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z
            order is about to change as a result of a call to the SetWindowPos function or another
            window-management function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the
            Z order has changed as a result of a call to the SetWindowPos function or another
            window-management function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_POWER">
            <summary>
            The WM_POWER message is broadcast when the system, typically a battery-powered
            personal computer, is about to enter suspended mode.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's
            journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NOTIFY">
            <summary>
            The WM_NOTIFY message is sent by a common control to its parent window when an event has occurred
            or the control requires some information.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user
            chooses a new input language, either with the hotkey (specified in the Keyboard control panel
            application) or from the indicator on the system taskbar. An application can accept the change
            by passing the message to the DefWindowProc function or reject the change (and prevent it from
            taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's
            input language has been changed. You should make any application-specific settings and pass the
            message to the DefWindowProc function, which passes the message to all first-level child windows.
            These child windows can pass the message to DefWindowProc to have it pass the message to their
            child windows, and so on.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help.
            The message informs the application when the user clicks an authorable button. An application
            initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP
            is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that
            has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently
            active window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off.
            When the user logs on or off, the system updates the user-specific settings. The system sends
            this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NOTIFYFORMAT">
            <summary>
            Used to determine if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification
            message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and
            from the parent window to the common control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button
            (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is
            about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has
            changed one or more of the window's styles.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon
            associated with a window. The system displays the large icon in the ALT+TAB dialog, and the
            small icon in the window caption.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window.
            The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window
            caption.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed.
            The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY
            message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast,
            WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be
            calculated. By processing this message, an application can control the content of the window's
            client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is
            pressed or released. If the mouse is not captured, the message is sent to the window beneath
            the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to
            indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default,
            the system handles all keyboard input to the control; the system interprets certain types of
            keyboard input as dialog box navigation keys. To override this default behavior, the control
            can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process
            itself.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while
            avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient
            area of the window. This message is posted to the window that contains the cursor. If a window
            has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button
            while the cursor is within the nonclient area of a window. This message is posted to the window
            that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button
            while the cursor is within the nonclient area of a window. This message is posted to the window
            that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the
            cursor is within the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button
            while the cursor is within the nonclient area of a window. This message is posted to the window
            that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button
            while the cursor is in the nonclient area of a window. This message is posted to the window
            that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while
            the cursor is in the nonclient area of a window. This message is posted to the window that
            contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is
            pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is
            released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a
            keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is
            translated by the TranslateMessage function. The WM_CHAR message contains the character code of
            the key that was pressed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message
            is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated
            by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot),
            that is combined with another character to form a composite character. For example, the umlaut-O
            character (O) is generated by typing the dead key for the umlaut character, and then typing the
            O key.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses
            the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key.
            It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN
            message is sent to the active window. The window that receives the message can distinguish
            between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases
            a key that was pressed while the ALT key was held down. It also occurs when no window currently
            has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window.
            The window that receives the message can distinguish between these two contexts by checking
            the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN
            message is translated by the TranslateMessage function. It specifies the character code of a
            system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN
            message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character
            code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_STARTCOMPOSITION">
            <summary>
            The WM_IME_STARTCOMPOSITION message is sent immediately before the IME generates the
            composition string as a result of a keystroke. The message is a notification to an IME window
            to open its composition window. An application should process this message if it displays
            composition characters itself.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_ENDCOMPOSITION">
            <summary>
            The WM_IME_ENDCOMPOSITION message is sent to an application when the IME ends composition.
            An application should process this message if it displays composition characters itself.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_COMPOSITION">
            <summary>
            The WM_IME_COMPOSITION message is sent to an application when the IME changes composition
            status as a result of a keystroke. An application should process this message if it displays
            composition characters itself. Otherwise, it should send the message to the IME window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_KEYLAST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box
            is displayed. Dialog box procedures typically use this message to initialize controls and carry
            out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a
            control sends a notification message to its parent window, or when an accelerator keystroke
            is translated.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu
            (formerly known as the system or control menu) or when the user chooses the maximize button,
            minimize button, restore button, or close button.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires.
            The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard
            horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control
            when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard
            vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control
            when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user
            clicks an item on the menu bar or presses a menu key. This allows the application to modify the
            menu before it is displayed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active.
            This allows an application to modify the menu before it is displayed, without changing the
            entire menu. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that
            does not correspond to any mnemonic or accelerator key. This message is sent to the window
            that owns the menu.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is
            entering an idle state. A modal dialog box or menu enters an idle state when no messages are
            waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse
            button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the
            user drags a menu item. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse
            cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORMSGBOX">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its
            parent window when the control is about to be drawn. By responding to this message, the parent
            window can use the specified device context handle to set the text and background colors of
            the edit control. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORLISTBOX">
            <summary>
            The WM_CTLCOLORLISTBOX message is sent to the parent window of a list box before the system
            draws the list box. By responding to this message, the parent window can set the text and
            background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button.
            The parent window can change the button's text and background colors. However, only owner-drawn
            buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box.
            By responding to this message, the dialog box can set its text and background colors using
            the specified display device context handle. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when
            the control is about to be drawn. By responding to this message, the parent window can use
            the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC
            message to its parent window when the control is about to be drawn. By responding to this
            message, the parent window can use the specified device context handle to set the text and
            background colors of the static control. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not
            captured, the message is posted to the window that contains the cursor. Otherwise, the message
            is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted
            to the window beneath the cursor. Otherwise, the message is posted to the window that has
            captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted
            to the window beneath the cursor. Otherwise, the message is posted to the window that has
            captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button
            while the cursor is in the client area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the message is posted to the window
            that has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted
            to the window beneath the cursor. Otherwise, the message is posted to the window that has
            captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted
            to the window beneath the cursor. Otherwise, the message is posted to the window that has
            captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button
            while the cursor is in the client area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the message is posted to the window that
            has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted to
            the window beneath the cursor. Otherwise, the message is posted to the window that has captured
            the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the
            cursor is in the client area of a window. If the mouse is not captured, the message is posted
            to the window beneath the cursor. Otherwise, the message is posted to the window that has
            captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button
            while the cursor is in the client area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the message is posted to the window
            that has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The
            DefWindowProc function propagates the message to the window's parent. There should be no
            internal forwarding of the message, since DefWindowProc propagates it up the parent chainuntil
            it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button
            while the cursor is in the client area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the message is posted to the window that
            has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while
            the cursor is in the client area of a window. If the mouse is not captured, the message is
            posted to the window beneath the cursor. Otherwise, the message is posted to the window that
            has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button
            while the cursor is in the client area of a window. If the mouse is not captured, the message
            is posted to the window beneath the cursor. Otherwise, the message is posted to the window that
            has captured the mouse.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window
            is created or destroyed, or when the user clicks a mouse button while the cursor is over the
            child window. When the child window is being created, the system sends WM_PARENTNOTIFY just
            before the CreateWindow or CreateWindowEx function that creates the window returns. When the
            child window is being destroyed, the system sends the message before any processing to destroy
            the window takes place.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window
            procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure
            that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used 
            to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this
            message, an application can monitor the size and position of the drag rectangle and, if needed,
            change its size or position.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message,
            an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DEVICECHANGE">
            <summary>
            The WM_DEVICECHANGE device message notifies an application of a change to
            the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI)
            client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client
            window to close an MDI child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window
            to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window
            to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client
            window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client
            window to maximize an MDI child window. The system resizes the child window to make its client
            area fill the client window. The system places the child window's window menu icon in the
            rightmost position of the frame window's menu bar, and places the child window's restore icon
            in the leftmost position. The system also appends the title bar text of the child window to that
            of the frame window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client
            window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI)
            client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI)
            client window to arrange all minimized MDI child windows. It does not affect child windows
            that are not minimized.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI)
            client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client
            window to replace the entire menu of an MDI frame window, to replace the window menu of the
            frame window, or both.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or
            sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the
            window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the
            DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE
            value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or
            sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the
            window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the
            DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE
            value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered
            itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI)
            client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_SETCONTEXT">
            <summary>
            The WM_IME_SETCONTEXT message is sent to an application when a window of the application is
            activated. If the application has created an IME window, it should call the ImmIsUIMessage
            function. Otherwise, it should pass this message to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_NOTIFY">
            <summary>
            The WM_IME_NOTIFY message is sent to an application to notify it of changes to the IME window.
            An application processes this message if it is responsible for managing the IME window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_CONTROL">
            <summary>
            The WM_IME_CONTROL message directs the IME window to carry out the requested command.
            An application uses this message to control the IME window created by the application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_COMPOSITIONFULL">
            <summary>
            The WM_IME_COMPOSITIONFULL message is sent to an application when the IME window finds no
            space to extend the area for the composition window. The application should use the
            IMC_SETCOMPOSITIONWINDOW command to specify how the window should be displayed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_SELECT">
            <summary>
            The WM_IME_SELECT message is sent to an application when the system is about to change the
            current IME. An application that has created an IME window should pass this message to that
            window so that it can retrieve the keyboard layout handle for the newly selected IME.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_CHAR">
            <summary>
            The WM_IME_CHAR message is sent to an application when the IME gets a character of the
            conversion result. Unlike the WM_CHAR message for a non-Unicode window, this message can include
            double-byte as well as single-byte character values. For a Unicode window, this message is the
            same as WM_CHAR.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_REQUEST">
            <summary>
            The WM_IME_REQUEST message provides a group of commands to request information
            from an application.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_KEYDOWN">
            <summary>
            The WM_IME_KEYDOWN message is sent to an application by the IME to notify the application of
            a key press. An application can process this message or pass it to the DefWindowProc function
            to generate a matching WM_KEYDOWN message. This message is usually generated by the IME to keep
            message order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_IME_KEYUP">
            <summary>
            The WM_IME_KEYUP message is sent to an application by the IME to notify the application of a key
            release. An application can process this message or pass it to the DefWindowProc function to
            generate a matching WM_KEYUP message. This message is usually generated by the IME to keep
            message order.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client
            area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of
            the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the
            current selection, if any, in the edit control and copy the deleted text to the clipboard in
            CF_TEXT format.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current
            selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current
            content of the clipboard to the edit control at the current caret position. Data is inserted
            only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear)
            the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation.
            When this message is sent to an edit control, the previously deleted text is restored or the
            previously added text is deleted. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific
            clipboard format and if an application has requested data in that format. The clipboard owner
            must render data in the specified format and place it on the clipboard by calling the
            SetClipboardData function.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the
            clipboard owner has delayed rendering one or more clipboard formats. For the content of the
            clipboard to remain available to other applications, the clipboard owner must render data in
            all the formats it is capable of generating, and place the data on the clipboard by calling the
            SetClipboardData function. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the
            EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the
            content of the clipboard changes. This enables a clipboard viewer window to display the new
            content of the clipboard.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when
            the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area
            needs repainting.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window
            when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the
            clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update
            the scroll bar values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window
            when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's
            client area has changed size.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window
            to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when
            a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window.
            This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs
            in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image
            and update the scroll bar values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_QUERYNEWPALETTE">
            <summary>
            The WM_QUERYNEWPALETTE message informs a window that it is about to receive the keyboard focus,
            giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize
            its logical palette.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PALETTECHANGED">
            <summary>
            The WM_PALETTECHANGED message is sent to all top-level and overlapped windows after the window
            with the keyboard focus has realized its logical palette, thereby changing the system palette.
            This message enables a window that uses a color palette but does not have the keyboard focus to
            realize its logical palette and update its client area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey
            function. The message is placed at the top of the message queue associated with the thread that
            registered the hot key.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device
            context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the
            specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HANDHELDFIRST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_HANDHELDLAST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_AFXFIRST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_AFXLAST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PENWINFIRST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_PENWINLAST">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the
            form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private
            window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the
            window specified in a prior call to TrackMouseEvent.
            <paramref name="wParam"/> Not used, must be zero.
            <paramref name="lParam"/> Not used, must be zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WM_NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the
            window for the period of time specified in a prior call to TrackMouseEvent.
            <paramref name="wParam"/> Specifies the hit-test value returned by the DefWindowProc function as a result
            of processing the WM_NCHITTEST message. For a list of hit-test values, see WM_NCHITTEST.
            <paramref name="lParam"/> Specifies a POINTS structure that contains the x- and y-coordinates of the cursor.
            The coordinates are relative to the upper-left corner of the screen.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_BORDER">
            <summary>
            Creates a window that has a thin-line border.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_CAPTION">
            <summary>
            Creates a window that has a title bar (includes the WS_BORDER style).
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_CHILD">
            <summary>
            Creates a child window. A window with this style cannot have a menu bar.
            This style cannot be used with the WS_POPUP style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_CHILDWINDOW">
            <summary>
            Same as the WS_CHILD style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_CLIPCHILDREN">
            <summary>
            Excludes the area occupied by child windows when drawing occurs
            within the parent window. This style is used when creating the parent window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a
            WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the
            region of the child window to be updated. If WS_CLIPSIBLINGS is not specified and child windows
            overlap, it is possible, when drawing within the client area of a child window, to draw within
            the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_DISABLED">
            <summary>
            Creates a window that is initially disabled. A disabled window cannot receive input from the user.
            To change this after a window has been created, use EnableWindow.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_DLGFRAME">
            <summary>
            Creates a window that has a border of a style typically used with dialog boxes.
            A window with this style cannot have a title bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_GROUP">
            <summary>
            Specifies the first control of a group of controls. The group consists of this first control and
            all controls defined after it, up to the next control with the WS_GROUP style. The first control
            in each group usually has the WS_TABSTOP style so that the user can move from group to group.
            The user can subsequently change the keyboard focus from one control in the group to the next
            control in the group by using the direction keys.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_HSCROLL">
            <summary>
            Creates a window that has a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_ICONIC">
            <summary>
            Creates a window that is initially minimized. Same as the WS_MINIMIZE style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_MAXIMIZE">
            <summary>
            Creates a window that is initially maximized.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_MAXIMIZEBOX">
            <summary>
            Creates a window that has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP
            style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_MINIMIZE">
            <summary>
            Creates a window that is initially minimized. Same as the WS_ICONIC style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_MINIMIZEBOX">
            <summary>
            Creates a window that has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP
            style. The WS_SYSMENU style must also be specified.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_OVERLAPPED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border.
            Same as the WS_TILED style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_OVERLAPPEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME,
            WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_TILEDWINDOW style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_POPUP">
            <summary>
            Creates a pop-up window. This style cannot be used with the WS_CHILD style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_POPUPWINDOW">
            <summary>
            Creates a pop-up window with WS_BORDER, WS_POPUP, and WS_SYSMENU styles. The WS_CAPTION and
            WS_POPUPWINDOW styles must be combined to make the window menu visible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_SIZEBOX">
            <summary>
            Creates a window that has a sizing border. Same as the WS_THICKFRAME style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_SYSMENU">
            <summary>
            Creates a window that has a window menu on its title bar.
            The WS_CAPTION style must also be specified.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_TABSTOP">
            <summary>
            Specifies a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_THICKFRAME">
            <summary>
            Creates a window that has a sizing border. Same as the WS_SIZEBOX style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_TILED">
            <summary>
            Creates an overlapped window. An overlapped window has a title bar and a border.
            Same as the WS_OVERLAPPED style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_TILEDWINDOW">
            <summary>
            Creates an overlapped window with the WS_OVERLAPPED, WS_CAPTION, WS_SYSMENU, WS_THICKFRAME,
            WS_MINIMIZEBOX, and WS_MAXIMIZEBOX styles. Same as the WS_OVERLAPPEDWINDOW style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_VISIBLE">
            <summary>
            Creates a window that is initially visible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WS_VSCROLL">
            <summary>
            Creates a window that has a vertical scroll bar.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MA_ACTIVATE">
            <summary>
            Activates the window, and does not discard the mouse message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MA_ACTIVATEANDEAT">
            <summary>
            Activates the window, and discards the mouse message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MA_NOACTIVATE">
            <summary>
            Does not activate the window, and does not discard the mouse message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.MA_NOACTIVATEANDEAT">
            <summary>
            Does not activate the window, but discards the mouse message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_ALIGNTOP">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the top of the 
            new position of the window. For example, to align the client area to the upper-left corner, 
            return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_ALIGNLEFT">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the left side 
            of the new position of the window. For example, to align the client area to the lower-left 
            corner, return the WVR_ALIGNLEFT and WVR_ALIGNBOTTOM values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_ALIGNBOTTOM">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the bottom of 
            the new position of the window. For example, to align the client area to the top-left corner, 
            return the WVR_ALIGNTOP and WVR_ALIGNLEFT values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_ALIGNRIGHT">
            <summary>
            Specifies that the client area of the window is to be preserved and aligned with the right side
            of the new position of the window. For example, to align the client area to the lower-right
            corner, return the WVR_ALIGNRIGHT and WVR_ALIGNBOTTOM values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_HREDRAW">
            <summary>
            Used in combination with any other values, causes the window to be completely redrawn if the 
            client rectangle changes size horizontally. This value is similar to CS_HREDRAW class style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_VREDRAW">
            <summary>
            Used in combination with any other values, causes the window to be completely redrawn if the 
            client rectangle changes size vertically. This value is similar to CS_VREDRAW class style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_REDRAW">
            <summary>
            This value causes the entire window to be redrawn. 
            It is a combination of WVR_HREDRAW and WVR_VREDRAW values.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.WVR_VALIDRECTS">
            <summary>
            This value indicates that, upon return from WM_NCCALCSIZE, the rectangles specified by the 
            rgrc[1] and rgrc[2] members of the NCCALCSIZE_PARAMS structure contain valid destination and 
            source area rectangles, respectively. The system combines these rectangles to calculate the
            area of the window to be preserved. The system copies any part of the window image that is 
            within the source rectangle and clips the image to the destination rectangle. Both rectangles 
            are in parent-relative or screen-relative coordinates. This return value allows an application 
            to implement more elaborate client-area preservation strategies, such as centering or preserving
            a subset of the client area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_CHECKVISIBLE">
            <summary>
            Draws the window only if it is visible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_NONCLIENT">
            <summary>
            Draws the nonclient area of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_CLIENT">
            <summary>
            Draws the client area of the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_ERASEBKGND">
            <summary>
            Erases the background before drawing the window.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_CHILDREN">
            <summary>
            Draws all visible children windows.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinUser.PRF_OWNED">
            <summary>
            Draws all owned windows.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.NuGenInvalidHWndException">
            <summary>
            Thrown if the specified handle does not represent a window.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.NuGenInvalidHWndException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.NuGenInvalidHWndException"/> class.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.NuGenInvalidHWndException.#ctor(System.IntPtr)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.NuGenInvalidHWndException"/> class.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.NuGenInvalidHWndException.#ctor(System.IntPtr,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.NuGenInvalidHWndException"/> class.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.NuGenInvalidHWndException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.NuGenInvalidHWndException"/> class.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.Common">
            <summary>
            Defines helper methods and constants to interact with Win32 API.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.Common.FALSE">
            <summary>
            Zero value.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.Common.TRUE">
            <summary>
            Non-zero value.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.Common.MakeLong(System.Int32,System.Int32)">
            <summary>
            Creates an unsigned 32-bit value.
            </summary>
            <param name="wLow">Specifies the low-order word of the new long value.</param>
            <param name="wHigh">Specifies the high-order word of the new long value.</param>
        </member>
        <member name="M:Genetibase.WinApi.Common.MakeLParam(System.Int32,System.Int32)">
            <summary>
            Creates an unsigned 32-bit value for use as an lParam parameter in a message.  
            </summary>
            <param name="wLow">Specifies the low-order word of the new long value.</param>
            <param name="wHigh">Specifies the high-order word of the new long value.</param>
        </member>
        <member name="M:Genetibase.WinApi.Common.HiWord(System.Int32)">
            <summary>
            Retrieves the high-order word from the given 32-bit value.
            </summary>
            <param name="dwValue">Specifies the value to be converted.</param>
        </member>
        <member name="M:Genetibase.WinApi.Common.LoWord(System.Int32)">
            <summary>
            Retrieves the low-order word from the given 32-bit value.
            </summary>
            <param name="dwValue">Specifies the value to be converted.</param>
        </member>
        <member name="T:Genetibase.WinApi.UxTheme">
            <summary>
            Imports UxTheme.dll functions.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.UxTheme.SetWindowTheme(System.IntPtr,System.String,System.String)">
            <summary>
            Causes a window to use a different set of visual style information than its class normally uses.
            </summary>
            <param name="hWnd">Handle to the window whose visual style information is to be changed.</param>
            <param name="pszSubAppName">String that contains the application name to use in place of the
            calling application's name. If this parameter is <see langword="null"/>, the calling
            application's name is used.</param>
            <param name="pszSubIdList">String that contains a semicolon-separated list of class
            identifier (CLSID) names to use in place of the actual list passed by the window's class. If this
            parameter is <see langword="null"/>, the identifier (ID) list from the calling class is used.</param>
            <returns>Returns S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="T:Genetibase.WinApi.TVITEM">
            <summary>
            Specifies or receives attributes of a tree-view item. This structure is identical to the TV_ITEM structure, but it has been renamed to follow current naming conventions.
            New applications should use this structure.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.mask">
            <summary>
            Array of flags that indicate which of the other structure members contain valid data.
            When this structure is used with the TVM_GETITEM message, the mask member indicates the item
            attributes to retrieve.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.hItem">
            <summary>
            Item to which this structure refers.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.state">
            <summary>
            Set of bit flags and image list indexes that indicate the item's state. When setting the state
            of an item, the stateMask member indicates the bits of this member that are valid.
            When retrieving the state of an item, this member returns the current state for the bits
            indicated in the stateMask member. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.stateMask">
            <summary>
            Bits of the state member that are valid. If you are retrieving an item's state, set the bits
            of the stateMask member to indicate the bits to be returned in the state member. If you are
            setting an item's state, set the bits of the stateMask member to indicate the bits of the state
            member that you want to set. To set or retrieve an item's overlay image index, set the
            TVIS_OVERLAYMASK bits. To set or retrieve an item's state image index, set the
            TVIS_STATEIMAGEMASK bits.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.pszText">
            <summary>
            Pointer to a null-terminated string that contains the item text if the structure specifies item
            attributes. If this member is the LPSTR_TEXTCALLBACK value, the parent window is responsible for
            storing the name. In this case, the tree-view control sends the parent window a TVN_GETDISPINFO
            notification message when it needs the item text for displaying, sorting, or editing and a
            TVN_SETDISPINFO notification message when the item text changes. If the structure is receiving
            item attributes, this member is the address of the buffer that receives the item text. Note that
            although the tree-view control allows any length string to be stored as item text, only the
            first 260 characters are displayed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.cchTextMax">
            <summary>
            Size of the buffer pointed to by the pszText member, in characters.
            If this structure is being used to set item attributes, this member is ignored.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.iImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the
            nonselected state. If this member is the I_IMAGECALLBACK value, the parent window is responsible
            for storing the index. In this case, the tree-view control sends the parent a TVN_GETDISPINFO
            notification message to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.iSelectedImage">
            <summary>
            Index in the tree-view control's image list of the icon image to use when the item is in the
            selected state. If this member is the I_IMAGECALLBACK value, the parent window is responsible
            for storing the index. In this case, the tree-view control sends the parent a TVN_GETDISPINFO
            notification message to retrieve the index when it needs to display the image.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.cChildren">
            <summary>
            Flag that indicates whether the item has associated child items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TVITEM.lParam">
            <summary>
            A value to associate with the item.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.NetApi32">
            <summary>
            Imports NetApi32.dll functions.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.NetApi32.NetApiBufferFree(System.IntPtr)">
            <summary>
            Frees the memory that the <c>NetApiBufferAllocate</c> function allocates.
            Call <c>NetApiBufferFree</c> to free the memory that other network management 
            functions return.
            </summary>
            <param name="buffer">Pointer to a buffer returned previously by another network 
            management function.</param>
        </member>
        <member name="M:Genetibase.WinApi.NetApi32.NetServerEnum(System.IntPtr,System.UInt32,System.IntPtr@,System.UInt32,System.UInt32@,System.UInt32@,System.UInt32,System.String,System.IntPtr)">
            <summary>
            Lists all servers of the specified type that are visible in a domain. 
            </summary>
            <example>An application can call <c>NetServerEnum to list all domain controllers only or
            all SQL servers only.</c></example>
            <param name="serverName">Reserved; must be <c>System.IntPtr.Zero</c>.</param>
            <param name="level">Specifies the information level of the data. 
            This parameter can be one of the following values.
            <list type="table">
            <item><term>100</term>
            <description>Return server names and platform information. The <c>buffer</c> parameter 
            points to an array of <c>SERVER_INFO_100</c> structures.</description></item>
            <item><term>101</term>
            <description>Return server names, types, and associated software. The <c>buffer</c> 
            parameter points to an array of <c>SERVER_INFO_101</c> structures.</description></item>
            </list>
            </param>
            <param name="buffer">Pointer to the buffer that receives the data. The format of this data 
            depends on the value of the <c>level</c> parameter. This buffer is allocated by the system 
            and must be freed using the <c>NetApiBufferFree</c> function. Note that you must free the 
            buffer even if the function fails with <c>ERROR_MORE_DATA</c>.</param>
            <param name="prefMaxLen">Specifies the preferred maximum length of returned data, in bytes. 
            If you specify <c>MAX_PREFERRED_LENGTH</c>, the function allocates the amount of memory 
            required for the data. If you specify another value in this parameter, it can restrict 
            the number of bytes that the function returns. If the buffer size is insufficient to hold 
            all entries, the function returns <c>ERROR_MORE_DATA</c>.</param>
            <param name="entriesRead">Pointer to a value that receives the count of elements actually 
            enumerated.</param>
            <param name="totalEntries">Pointer to a value that receives the total number of visible servers 
            and workstations on the network. Note that applications should consider this value only as a hint.</param>
            <param name="servertype">Specifies a value that filters the server entries to return from the enumeration.</param>
            <param name="domain">Pointer to a constant string that specifies the name of the domain for 
            which a list of servers is to be returned. The domain name must be a NetBIOS domain 
            name (for example, microsoft). NetServerEnum does not support DNS-style names 
            (for example, microsoft.com). If this parameter is <c>null</c>, the primary domain is implied.</param>
            <param name="resumeHandle">Reserved; must be set to <c>System.IntPtr.Zero</c>.</param>
            <returns>
            If the function succeeds, the return value is <c>NERR_Success</c>. If the function fails, the 
            return value can be one of the following error codes.
            <list type="table">
            <item>
            <term>
            ERROR_NO_BROWSER_SERVERS_FOUND
            </term>
            <description>
            No browser servers found.
            </description>
            </item>
            <item>
            <term>
            ERROR_MORE_DATA
            </term>
            <description>
            More entries are available. Specify a large enough buffer to receive all entries.
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.NetApi32.NetServerGetInfo(System.String,System.Int32,System.IntPtr@)">
            <summary>
            Retrieves current configuration information for the specified server.
            </summary>
            <param name="serverName">Pointer to a string that specifies the name of the remote server 
            on which the function is to execute. If this parameter is <c>null</c>, the local computer 
            is used. In Windows NT this string must begin with \\.</param>
            <param name="level">Specifies the information level of the data. This parameter can be one of the following values. 
            <list type="table">
            <item>
            <term>
            100
            </term>
            <description>
            Return the server name and platform information. The <c>buffer</c> parameter points to a 
            <c>SERVER_INFO_100</c> structure.
            </description>
            </item>
            <item>
            <term>
            101
            </term>
            <description>
            Return the server name, type, and associated software. The <c>buffer</c> parameter points to a 
            <c>SERVER_INFO_101</c> structure.
            </description>
            </item>
            <item>
            <term>
            102
            </term>
            <description>
            Return the server name, type, associated software, and other attributes. The <c>buffer</c> 
            parameter points to a <c>SERVER_INFO_102 structure</c>.
            </description>
            </item>
            </list>
            </param>
            <param name="buffer">Pointer to the buffer that receives the data. The format of this 
            data depends on the value of the level parameter. This buffer is allocated by the system 
            and must be freed using the <c>NetApiBufferFree</c> function.</param>
            <returns>If the function succeeds, the return value is <c>NERR_Success</c>. 
            If the function fails, the return value can be one of the following error codes. 
            <list type="table">
            <item>
            <term>
            ERROR_ACCESS_DENIED
            </term>
            <description>
            The user does not have access to the requested information.
            </description>
            </item>
            <item>
            <term>
            ERROR_INVALID_LEVEL
            </term>
            <description>
            The value specified for the level parameter is invalid.
            </description>
            </item>
            <term>
            ERROR_INVALID_PARAMETER
            </term>
            <description>
            The specified parameter is invalid.
            </description>
            <item>
            <term>
            ERROR_NOT_ENOUGH_MEMORY
            </term>
            <description>
            Insufficient memory is available.
            </description>
            </item>
            </list>
            </returns>
        </member>
        <member name="T:Genetibase.WinApi.SIZE">
            <summary>
            Specifies the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SIZE.cx">
            <summary>
            Specifies the rectangle's width.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SIZE.cy">
            <summary>
            Specifies the rectangle's height.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.op_Implicit(System.Drawing.Size)~Genetibase.WinApi.SIZE">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.op_Implicit(Genetibase.WinApi.SIZE)~System.Drawing.Size">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.SIZE.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.SIZE"/> structure.
            </summary>
            <param name="cx">Specifies the rectangle's width.</param>
            <param name="cy">Specifies the rectangle's height.</param>
        </member>
        <member name="T:Genetibase.WinApi.RECT">
            <summary>
            Defines the coordinates of the upper-left and lower-right corners of a rectangle.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.RECT.left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.RECT.top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.RECT.right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.RECT.bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle. 
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.RECT.Equals(System.Object)">
            <summary>
            Indicates whether this <see cref="T:Genetibase.WinApi.RECT"/> and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.RECT.GetHashCode">
            <summary>
            Calculates hash code for this <see cref="T:Genetibase.WinApi.RECT"/> structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genetibase.WinApi.RECT.ToString">
            <summary>
            Returns string representation of this <see cref="T:Genetibase.WinApi.RECT"/> structure.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Genetibase.WinApi.RECT.op_Implicit(System.Drawing.Rectangle)~Genetibase.WinApi.RECT">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.RECT.op_Implicit(Genetibase.WinApi.RECT)~System.Drawing.Rectangle">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.RECT.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.RECT"/> structure.
            </summary>
            <param name="left">Specifies the x-coordinate of the upper-left corner of the rectangle.</param>
            <param name="top">Specifies the y-coordinate of the upper-left corner of the rectangle.</param>
            <param name="right">Specifies the x-coordinate of the lower-right corner of the rectangle.</param>
            <param name="bottom">Specifies the y-coordinate of the lower-right corner of the rectangle.</param>
        </member>
        <member name="P:Genetibase.WinApi.RECT.Height">
            <summary>
            Gets the height of this rectangle.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.RECT.Location">
            <summary>
            Gets the location of this rectangle.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.RECT.Size">
            <summary>
            Gets the size of this rectangle.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.RECT.Width">
            <summary>
            Gets the width of this rectangle.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.User32">
            <summary>
            Imports User32.dll functions.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.User32.AdjustWindowRectEx(Genetibase.WinApi.RECT@,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired size of the client rectangle.
            </summary>
            <param name="rect">Pointer to a <see cref="T:Genetibase.WinApi.RECT"/> structure that contains the coordinates of the top-left and
            bottom-right corners of the desired client area. When the function returns, the structure contains
            the coordinates of the top-left and bottom-right corners of the window to accommodate the desired
            client area.</param>
            <param name="dwStyle">Specifies the window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">Specifies whether the window has a menu.</param>
            <param name="dwExStyle">Specifies the extended window style of the window whose required size is to be calculated.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ChildWindowFromPointEx(System.IntPtr,Genetibase.WinApi.POINT,System.UInt32)">
            <summary>
            Determines which, if any, of the child windows belonging to the specified parent window
            contains the specified point. The function can ignore invisible, disabled, and transparent
            child windows.
            </summary>
            <param name="hwndParent">Identifies the parent window.</param>
            <param name="pt">Specifies a POINT structure that defines the client coordinates of the point to be checked.</param>
            <param name="flags">Specifies which child windows to skip.</param>
            <returns>If the function succeeds, the return value is the handle to the first child window that
            contains the point and meets the criteria specified by uFlags. If the point is within the parent
            window but not within any child window that meets the criteria, the return value is the handle to
            the parent window. If the point lies outside the parent window or if the function fails, the
            return value is <c>IntPtr.Zero</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.FillRect(System.IntPtr,Genetibase.WinApi.RECT@,System.IntPtr)">
            <summary>
            Fills a rectangle by using the specified brush. This function includes the left and top borders,
            but excludes the right and bottom borders of the rectangle.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="lprc">Pointer to a RECT structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="hbr">Handle to the brush used to fill the rectangle.</param>
            <returns></returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.FillSolidRect(System.IntPtr,Genetibase.WinApi.RECT@,System.Drawing.Color)">
            <summary>
            Fills a rectangle by using a brush of the specified color. This function includes the left and
            top borders, but excludes the right and bottom borders of the rectangle.
            </summary>
            <param name="hdc">Handle to the device context.</param>
            <param name="lprc">Pointer to a RECT structure that contains the logical coordinates of the rectangle to be filled.</param>
            <param name="crColor">Specifies the color to fill the rectangle with.</param>
            <returns></returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetCaretPos(Genetibase.WinApi.POINT@)">
            <summary>
            Copies the caret's position, in client coordinates, to the specified POINT structure.
            </summary>
            <param name="lpPoint">Points to the POINT structure that is to receive the client coordinates of the caret.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>.
            If the function fails, the return value is <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetDC(System.IntPtr)">
            <summary>
            Retrieves a handle of a display device context (DC) for the client area of the specified window. 
            The display device context can be used in subsequent GDI functions to draw in the client area 
            of the window.
            </summary>
            <param name="hWnd">Identifies the window whose device context is to be retrieved.</param>
            <returns>If the function succeeds, the return value identifies the device context for the 
            given window's client area; otherwise, the return value is <c>null</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetDCEx(System.IntPtr,System.IntPtr,System.UInt32)">
            <summary>
            Retrieves the handle of a display device (DC) context for the specified window. The display 
            device context can be used in subsequent GDI functions to draw in the client area.
            </summary>
            <param name="hWnd">Identifies the window where drawing will occur.</param>
            <param name="hrgnClip">Specifies a clipping region that may be combined with the visible region 
            of the client window.</param>
            <param name="flags">Specifies how the device context is created.</param>
            <returns>If the function succeeds, the return value is the handle of the device context for the 
            given window; otherwise, the return value is <c>IntPtr.Zero</c>. An invalid value for the 
            hWnd parameter will cause the function to fail.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetScrollPos(System.IntPtr,System.Int32)">
            <summary>
            Retrieves the current position of the scroll box (thumb) in the specified scroll bar.
            The current position is a relative value that depends on the current scrolling range.
            For example, if the scrolling range is 0 through 100 and the scroll box is in the middle 
            of the bar, the current position is 50.
            </summary>
            <param name="hWnd">Handle to a scroll bar control or a window with a standard scroll bar,
            depending on the value of the nBar parameter.</param>
            <param name="nBar">Specifies the scroll bar to be examined.</param>
            <returns>If the function succeeds, the return value is the current position of the scroll box;
            otherwise, the return value is zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetWindowDC(System.IntPtr)">
            <summary>
            Retrieves the device context (DC) for the entire window, including title bar, menus, and scroll
            bars. A window device context permits painting anywhere in a window, because the origin of the
            device context is the upper-left corner of the window instead of the client area.
            </summary>
            <param name="hWnd">Identifies the window with a device context that is to be retrieved.</param>
            <returns>If the function succeeds, the return value is the handle of a device context for the
            specified window; otherwise, the return value is <c>IntPtr.Zero</c>, indicating an error or an
            invalid hWnd parameter.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (long) value at the specified offset into the extra window memory.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be retrieved. Valid values 
            are in the range zero through the number of bytes of extra window memory, minus four; for 
            example, if you specified 12 or more bytes of extra memory, a value of 8 would be an index to 
            the third 32-bit integer.</param>
            <returns>If the function succeeds, the return value is the requested 32-bit value. Otherwise, 
            the return value is zero. To get extended error information, call GetLastError. If SetWindowLong 
            has not been called previously, GetWindowLong returns zero for values in the extra window or 
            class memory.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetWindowLongEx(System.IntPtr,System.Int32)">
            <summary>
            Calls <see cref="M:Genetibase.WinApi.User32.GetWindowLong"/> or <see cref="M:Genetibase.WinApi.User32.GetWindowLongPtr"/>
            depending on the <see cref="P:System.IntPtr.Size"/>.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be retrieved. Valid values
            are in the range zero through the number of bytes of extra window memory, minus the size of an
            integer.</param>
            <returns>If the function succeeds, the return value is the requested value. Otherwise, 
            the return value is zero. To get extended error information, call GetLastError. If SetWindowLong 
            has not been called previously, GetWindowLong returns zero for values in the extra window or 
            class memory.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.
            If you are retrieving a pointer or a handle, this function supersedes the GetWindowLong function.
            (Pointers and handles are 32 bits on 32-bit Windows and 64 bits on 64-bit Windows.) To write code
            that is compatible with both 32-bit and 64-bit versions of Windows, use GetWindowLongPtr.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be retrieved. Valid values
            are in the range zero through the number of bytes of extra window memory, minus the size of an
            integer.</param>
            <returns>If the function succeeds, the return value is the requested value. Otherwise, 
            the return value is zero. To get extended error information, call GetLastError. If SetWindowLong 
            has not been called previously, GetWindowLong returns zero for values in the extra window or 
            class memory.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.GetWindowRect(System.IntPtr,Genetibase.WinApi.RECT@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions 
            are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="lpRect">Pointer to a structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>. 
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.InvalidateRect(System.IntPtr,Genetibase.WinApi.RECT@,System.Boolean)">
            <summary>
            Adds a rectangle to the specified window's update region. The update region 
            represents the portion of the window's client area that must be redrawn. 
            </summary>
            <param name="hWnd">
            Identifies the window whose update region has changed. 
            If this parameter is <c>null</c>, Windows invalidates and redraws all windows, 
            and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure 
            before the function returns.
            </param>
            <param name="lpRect">
            Points to a RECT structure that contains the client coordinates 
            of the rectangle to be added to the update region. If this parameter is <c>null</c>,
            the entire client area is added to the update region.
            </param>
            <param name="bErase">
            Specifies whether the background within the update region is to 
            be erased when the update region is processed. If this parameter is <c>true</c>, 
            the background is erased when the BeginPaint function is called. If this parameter 
            is <c>false</c>, the background remains unchanged.
            </param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.InvalidateRect(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            Adds a rectangle to the specified window's update region. The update region 
            represents the portion of the window's client area that must be redrawn. 
            </summary>
            <param name="hWnd">
            Identifies the window whose update region has changed. 
            If this parameter is <c>null</c>, Windows invalidates and redraws all windows, 
            and sends the WM_ERASEBKGND and WM_NCPAINT messages to the window procedure 
            before the function returns.
            </param>
            <param name="lpRect">
            Points to a RECT structure that contains the client coordinates 
            of the rectangle to be added to the update region. If this parameter is <c>null</c>,
            the entire client area is added to the update region.
            </param>
            <param name="bErase">
            Specifies whether the background within the update region is to 
            be erased when the update region is processed. If this parameter is <c>true</c>, 
            the background is erased when the BeginPaint function is called. If this parameter 
            is <c>false</c>, the background remains unchanged.
            </param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.IsWindow(System.IntPtr)">
            <summary>
            Determines whether the specified window handle identifies an existing window.
            </summary>
            <param name="hWnd">Handle to the window to test.</param>
            <returns>If the window handle identifies an existing window, the return value is <c>true</c>;
            otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.MoveWindow(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Changes the position and dimensions of the specified window. For a top-level window, the 
            position and dimensions are relative to the upper-left corner of the screen. For a child 
            window, they are relative to the upper-left corner of the parent window's client area.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="X">Specifies the new position of the left side of the window.</param>
            <param name="Y">Specifies the new position of the top of the window.</param>
            <param name="nWidth">Specifies the new width of the window.</param>
            <param name="nHeight">Specifies the new height of the window.</param>
            <param name="bRepaint">Specifies whether the window is to be repainted. If this parameter is 
            <c>true</c>, the window receives a message; otherwise, no repainting 
            of any kind occurs. This applies to the client area, the nonclient area (including the title 
            bar and scroll bars), and any part of the parent window uncovered as a result of moving a 
            child window.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>. 
            To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ReleaseCapture">
            <summary>
            Releases the mouse capture from a window in the current thread and restores normal 
            mouse input processing. A window that has captured the mouse receives all mouse input, 
            regardless of the position of the cursor, except when a mouse button is clicked while the 
            cursor hot spot is in the window of another thread.
            </summary>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, <c>false</c>. 
            To get extended error information, call <c>GetLastError</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            Releases a device context (DC), freeing it for use by other applications. The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">Handle to the window whose DC is to be released.</param>
            <param name="hDC">Handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ScreenToClient(System.IntPtr,Genetibase.WinApi.POINT@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="lpPoint">Pointer to a <see cref="T:Genetibase.WinApi.POINT"/> structure that specifies the screen coordinates to be converted.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ScreenToClient(System.IntPtr,System.Drawing.Point@)">
            <summary>
            Converts the screen coordinates of a specified point on the screen to client-area coordinates.
            </summary>
            <param name="hWnd">Handle to the window whose client area will be used for the conversion.</param>
            <param name="lpPoint">Pointer to a <see cref="T:Genetibase.WinApi.POINT"/> structure that specifies the screen coordinates to be converted.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">Handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="Msg">Specifies the message to be sent.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Genetibase.WinApi.TVITEM@)">
            <summary>
            Sends the specified message to a window or windows. It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">Handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="Msg">Specifies the message to be sent.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies TVITEM structure that contains additional message information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SendMessage(System.IntPtr,System.Int32,System.IntPtr,Genetibase.WinApi.RECT@)">
            <summary>
            Sends the specified message to a window or windows. It calls the window procedure for the specified window and does not return until the window procedure has processed the message. 
            </summary>
            <param name="hWnd">Handle to the window whose window procedure will receive the message. If this parameter is HWND_BROADCAST, the message is sent to all top-level windows in the system, including disabled or invisible unowned windows, overlapped windows, and pop-up windows; but the message is not sent to child windows.</param>
            <param name="Msg">Specifies the message to be sent.</param>
            <param name="wParam">Specifies additional message-specific information.</param>
            <param name="lParam">Specifies RECT structure that contains additional message information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SetParent(System.IntPtr,System.IntPtr)">
            <summary>
            Changes the parent window of the specified child window.
            </summary>
            <param name="hWndChild">Handle to the child window.</param>
            <param name="hWndNewParent">Handle to the new parent window. If this parameter is <c>null</c>, 
            the desktop window becomes the new parent window. Windows 2000/XP: If this parameter is 
            HWND_MESSAGE, the child window becomes a message-only window.</param>
            <returns>If the function succeeds, the return value is a handle to the previous parent window;
            otherwise, <c>null</c>. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SetWindowLong(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value 
            at the specified offset into the extra window memory.
            </summary>
            <remarks>This function has been superseded by the SetWindowLongPtr function. To write code
            that is compatible with both 32-bit and 64-bit versions of Microsoft Windows, use the 
            SetWindowLongPtr function.</remarks>
            <param name="hWnd">Handle to the window and, indirectly, the class to which the window belongs.
            Windows 95/98/Me: The SetWindowLong function may fail if the window specified by the hWnd parameter 
            does not belong to the same process as the calling thread.</param>
            <param name="nIndex">Specifies the zero-based offset to the value to be set. Valid values are 
            in the range zero through the number of bytes of extra window memory, minus the size of an 
            integer.</param>
            <param name="dwNewLong">Specifies the replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 
            32-bit integer; otherwise, the return value is zero. To get extended error information, 
            call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.UInt32)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. 
            Child, pop-up, and top-level windows are ordered according to their appearance on the screen. 
            The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="hWndInsertAfter">Handle to the window to precede the positioned window in the Z order.</param>
            <param name="X">Specifies the new position of the left side of the window, in client coordinates.</param>
            <param name="Y">Specifies the new position of the top of the window, in client coordinates.</param>
            <param name="cx">Specifies the new width of the window, in pixels.</param>
            <param name="cy">Specifies the new height of the window, in pixels.</param>
            <param name="uFlags">Specifies the window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, the return 
            value is <c>false</c>. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.ShowWindow(System.IntPtr,System.Int32)">
            <summary>
            Sets the specified window's show state.
            </summary>
            <param name="hWnd">Handle to the window.</param>
            <param name="nCmdShow">Specifies how the window is to be shown. This parameter is ignored 
            the first time an application calls ShowWindow, if the program that launched the application 
            provides a STARTUPINFO structure. Otherwise, the first time ShowWindow is called, the value 
            should be the value obtained by the WinMain function in its nCmdShow parameter.</param>
            <returns>If the window was previously visible, the return value is <c>true</c>.
            If the window was previously hidden, the return value is <c>false</c>.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.UpdateLayeredWindow(System.IntPtr,System.IntPtr,Genetibase.WinApi.POINT@,Genetibase.WinApi.SIZE@,System.IntPtr,Genetibase.WinApi.POINT@,System.Int32,Genetibase.WinApi.BLENDFUNCTION@,System.Int32)">
            <summary>
            Updates the position, size, shape, content, and translucency of a layered window.
            </summary>
            <param name="hWnd">Handle to a layered window. A layered window is created by specifying 
            WS_EX_LAYERED when creating the window with the CreateWindowEx function.</param>
            <param name="hdcDst">Handle to a device context (DC) for the screen. This handle is obtained 
            by specifying <c>IntPtr.Zero</c> when calling the function. It is used for palette color matching 
            when the window contents are updated. If hdcDst is <c>IntPtr.Zero</c>, the default palette will 
            be used. If hdcSrc is <c>IntPtr.Zero</c>, hdcDst must be <c>IntPtr.Zero</c>.</param>
            <param name="pptDst">Pointer to a POINT structure that specifies the new screen position of the 
            layered window. If the current position is not changing, pptDst can be <c>null</c>.</param>
            <param name="psize">Pointer to a SIZE structure that specifies the new size of the layered 
            window. If the size of the window is not changing, psize can be <c>null</c>. If hdcSrc is 
            <c>null</c>, psize must be <c>null</c>.</param>
            <param name="hdcSrc">Handle to a DC for the surface that defines the layered window. This handle 
            can be obtained by calling the CreateCompatibleDC function. If the shape and visual context of 
            the window are not changing, hdcSrc can be <c>null</c>.</param>
            <param name="pptSrc">Pointer to a POINT structure that specifies the location of the layer in 
            the device context. If hdcSrc is <c>null</c>, pptSrc should be <c>null</c>.</param>
            <param name="crKey">Specifies the color key to be used when composing the layered window.</param>
            <param name="pblend">Pointer to a BLENDFUNCTION structure that specifies the transparency value to be used when composing the layered window.</param>
            <param name="dwFlags">If hdcSrc is <c>null</c>, dwFlags should be zero.</param>
            <returns>If the function succeeds, the return value is <c>true</c>; otherwise, the return 
            value is <c>false</c>. To get extended error information, call GetLastError.</returns>
        </member>
        <member name="M:Genetibase.WinApi.User32.WindowFromPoint(Genetibase.WinApi.POINT)">
            <summary>
            Retrieves the handle of the window that contains the specified <see cref="T:POINT"/>.
            </summary>
            <param name="p">Specifies the point to be checked.</param>
            <returns></returns>
        </member>
        <member name="T:Genetibase.WinApi.LMServer">
            <summary>
            Defines constants declared in LMServer.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_WORKSTATION">
            <summary>
            All workstations.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER">
            <summary>
            All computers that have the server service running.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SQLSERVER">
            <summary>
            Any server running with Microsoft SQL Server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DOMAIN_CTRL">
            <summary>
            Primary domain controller.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DOMAIN_BAKCTRL">
            <summary>
            Backup domain controller.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_TIME_SOURCE">
            <summary>
            Server running the Timesource service.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_AFP">
            <summary>
            Apple File Protocol servers.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_NOVELL">
            <summary>
            Novell servers.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DOMAIN_MEMBER">
            <summary>
            LAN Manager 2.x domain member.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_PRINTQ_SERVER">
            <summary>
            Server sharing print queue.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DIALIN_SERVER">
            <summary>
            Server running dial-in service.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_XENIX_SERVER">
            <summary>
            Xenix server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER_UNIX">
            <summary>
            Unix server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_NT">
            <summary>
            Windows NT workstation or server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_WFW">
            <summary>
            Server running Windows for Workgroups.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER_MFPN">
            <summary>
            Microsoft File and Print for NetWare.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER_NT">
            <summary>
            Server that is not a domain controller.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_POTENTIAL_BROWSER">
            <summary>
            Server that can run the browser service.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_BACKUP_BROWSER">
            <summary>
            Server running a browser service as backup.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_MASTER_BROWSER">
            <summary>
            Server running the master browser service.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DOMAIN_MASTER">
            <summary>
            Server running the domain master browser.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER_OSF">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_SERVER_VMS">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_WINDOWS">
            <summary>
            Windows 95 or later.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DFS">
            <summary>
            Root of a DFS tree.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_CLUSTER_NT">
            <summary>
            Server clusters available in the domain.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_TERMINALSERVER">
            <summary>
            Terminal Server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_CLUSTER_VS_NT">
            <summary>
            Cluster virtual servers available in the domain.
            </summary>
            <remarks>This value is not supported in Windows 2000/NT.</remarks>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DCE">
            <summary>
            IBM DSS (Directory and Security Services) or equivalent.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_ALTERNATE_XPORT">
            <summary>
            Return list for alternate transport.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_LOCAL_LIST_ONLY">
            <summary>
            Servers maintained by the browser. See the following Remarks section.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_DOMAIN_ENUM">
            <summary>
            Primary domain.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMServer.SV_TYPE_ALL">
            <summary>
            All workstations.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.LMErr">
            <summary>
            Defines constants declared in LMErr.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LMErr.NERR_Success">
            <summary>
            Succss.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.WinError">
            <summary>
            Defines constants declared in WinError.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_NO_BROWSER_SERVERS_FOUND">
            <summary>
            No browser servers found.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_MORE_DATA">
            <summary>
            More data is available. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_ACCESS_DENIED">
            <summary>
            The user does not have access to the requested information.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_INVALID_LEVEL">
            <summary>
            The system call level is not correct.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_INVALID_PARAMETER">
            <summary>
            The specified parameter is invalid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.WinError.ERROR_NOT_ENOUGH_MEMORY">
            <summary>
            Insufficient memory is available.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.NMCUSTOMDRAW">
            <summary>
            Contains information specific to an NM_CUSTOMDRAW notification message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.hdr">
            <summary>
            NMHDR structure that contains information about this notification message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.dwDrawStage">
            <summary>
            Current drawing stage.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.hdc">
            <summary>
            Handle to the control's device context. Use this HDC to perform any GDI functions.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.rc">
            <summary>
            RECT structure that describes the bounding rectangle of the area being drawn. This member is
            initialized by the CDDS_ITEMPREPAINT and CDDS_PREPAINT notifications. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.dwItemSpec">
            <summary>
            Item number. What is contained in this member will depend on the type of control that is
            sending the notification. See the NM_CUSTOMDRAW notification reference for the specific control
            to determine what, if anything, is contained in this member.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.uItemState">
            <summary>
            Current item state.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMCUSTOMDRAW.lItemlParam">
            <summary>
            Application-defined item data.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.CommCtrl">
            <summary>
            Defines constants declared in CommCtrl.h.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_DODEFAULT">
            <summary>
            The control will draw itself. It will not send any additional NM_CUSTOMDRAW messages for this
            paint cycle. This occurs when dwDrawState equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_NEWFONT">
            <summary>
            The application specified a new font for the item; the control will use the new font. For more
            information about changing fonts, see Changing fonts and colors. This occurs when dwDrawState
            equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_SKIPDEFAULT">
            <summary>
            The application drew the item manually. The control will not draw the item. This occurs when
            dwDrawState equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_NOTIFYPOSTPAINT">
            <summary>
            The control will notify the parent after painting an item.
            This occurs when dwDrawState equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_NOTIFYITEMDRAW">
            <summary>
            The control will notify the parent of any item-related drawing operations. It will send
            NM_CUSTOMDRAW notification messages before and after drawing items. This occurs when dwDrawState
            equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_NOTIFYSUBITEMDRAW">
            <summary>
            Your application will receive an NM_CUSTOMDRAW message with dwDrawState set to
            CDDS_ITEMPREPAINT | CDDS_SUBITEM before each list-view subitem is drawn. You can then specify
            font and color for each subitem separately or return CDRF_DODEFAULT for default processing.
            This occurs when dwDrawState equals CDDS_ITEMPREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDRF_NOTIFYPOSTERASE">
            <summary>
            The control will notify the parent after erasing an item. This occurs when dwDrawState equals CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_PREPAINT">
            <summary>
            Before the paint cycle begins.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_POSTPAINT">
            <summary>
            After the paint cycle is complete.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_PREERASE">
            <summary>
            Before the erase cycle begins. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_POSTERASE">
            <summary>
            After the erase cycle is complete.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_ITEM">
            <summary>
            Indicates that the dwItemSpec, uItemState, and lItemlParam members are valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_ITEMPREPAINT">
            <summary>
            Before an item is drawn.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_ITEMPOSTPAINT">
            <summary>
            After an item has been drawn.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_ITEMPREERASE">
            <summary>
            Before an item is erased.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_ITEMPOSTERASE">
            <summary>
            After an item has been erased.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDDS_SUBITEM">
            <summary>
            Flag combined with CDDS_ITEMPREPAINT or CDDS_ITEMPOSTPAINT if a subitem is being drawn.
            This will only be set if CDRF_NOTIFYITEMDRAW is returned from CDDS_PREPAINT.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_SELECTED">
            <summary>
            The item is selected.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_GRAYED">
            <summary>
            The item is grayed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_DISABLED">
            <summary>
            The item is disabled.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_CHECKED">
            <summary>
            The item is checked.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_FOCUS">
            <summary>
            The item is in focus.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_DEFAULT">
            <summary>
            The item is in its default state.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_HOT">
            <summary>
            The item is currently under the pointer ("hot").
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_MARKED">
            <summary>
            The item is marked. The meaning of this is up to the implementation.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_INDETERMINATE">
            <summary>
            The item is in an indeterminate state.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.CDIS_SHOWKEYBOARDCUES">
            <summary>
            The item is a keyboard cue.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_OUTOFMEMORY">
            <summary>
            Notifies a control's parent window that the control could not complete an operation because
            there was not enough memory available. NM_OUTOFMEMORY is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_CLICK">
            <summary>
            Notifies a control's parent window that the user has clicked the left mouse button within the
            control. NM_CLICK is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_DBLCLK">
            <summary>
            Notifies a control's parent window that the user has double-clicked the left mouse button within
            the control. NM_DBLCLK is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_RETURN">
            <summary>
            Notifies a control's parent window that the control has the input focus and that the user has
            pressed the ENTER key. NM_RETURN is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_RCLICK">
            <summary>
            Notifies a control's parent window that the user has clicked the right mouse button within the
            control. NM_RCLICK is sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_RDBLCLK">
            <summary>
            Notifies a control's parent window that the user has double-clicked the right mouse button
            within the control. NM_RDBLCLK is sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_SETFOCUS">
            <summary>
            Notifies a control's parent window that the control has received the input focus. NM_SETFOCUS
            is sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_KILLFOCUS">
            <summary>
            Notifies a control's parent window that the control has lost the input focus. NM_KILLFOCUS is
            sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_CUSTOMDRAW">
            <summary>
            Sent by some common controls to notify their parent windows about drawing operations. This
            notification is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_HOVER">
            <summary>
            Sent by a control when the mouse hovers over an item. This notification message is sent in
            the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_NCHITTEST">
            <summary>
            Sent by a control when the control receives a WM_NCHITTEST message. This notification message
            is sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_KEYDOWN">
            <summary>
            Sent by a control when the control has the keyboard focus and the user presses a key. This
            notification message is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_RELEASEDCAPTURE">
            <summary>
            Notifies a control's parent window that the control is releasing mouse capture. This
            notification is sent in the form of a WM_NOTIFY message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_SETCURSOR">
            <summary>
            Notifies a control's parent window that the control is setting the cursor in response to a
            NM_SETCURSOR message. This notification is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_CHAR">
            <summary>
            The NM_CHAR notification message is sent by a control when a character key is processed.
            This notification message is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_TOOLTIPSCREATED">
            <summary>
            Notifies a control's parent window that the control has created a ToolTip control.
            This notification is sent in the form of a WM_NOTIFY message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_LDOWN">
            <summary>
            Notifies a toolbar's parent window that the left mouse button has been pressed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_RDOWN">
            <summary>
            Notifies a toolbar's parent window that the right mouse button has been pressed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.NM_THEMECHANGED">
            <summary>
            No documentation available.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETIMAGELIST">
            <summary>
            Retrieves the image list associated with a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETIMAGELIST">
            <summary>
            Assigns an image list to a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETITEMCOUNT">
            <summary>
            Retrieves the number of tabs in the tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETITEM">
            <summary>
            Retrieves information about a tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETITEM">
            <summary>
            Sets some or all of a tab's attributes.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_INSERTITEM">
            <summary>
            Inserts a new tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_DELETEITEM">
            <summary>
            Removes an item from a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_DELETEALLITEMS">
            <summary>
            Removes all items from a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETITEMRECT">
            <summary>
            Retrieves the bounding rectangle for a tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETCURSEL">
            <summary>
            Determines the currently selected tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETCURSEL">
            <summary>
            Selects a tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_HITTEST">
            <summary>
            Determines which tab, if any, is at a specified screen position.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETITEMEXTRA">
            <summary>
            Sets the number of bytes per tab reserved for application-defined data in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_ADJUSTRECT">
            <summary>
            Calculates a tab control's display area given a window rectangle, or calculates the
            window rectangle that would correspond to a specified display area.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETITEMSIZE">
            <summary>
            Sets the width and height of tabs in a fixed-width or owner-drawn tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_REMOVEIMAGE">
            <summary>
            Removes an image from a tab control's image list.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETPADDING">
            <summary>
            Sets the amount of space (padding) around each tab's icon and label in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETROWCOUNT">
            <summary>
            Retrieves the current number of rows of tabs in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETTOOLTIPS">
            <summary>
            Retrieves the handle to the ToolTip control associated with a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETTOOLTIPS">
            <summary>
            Assigns a ToolTip control to a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETCURFOCUS">
            <summary>
            Returns the index of the item that has the focus in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETCURFOCUS">
            <summary>
            Sets the focus to a specified tab in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETMINTABWIDTH">
            <summary>
            Sets the minimum width of items in a tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_DESELECTALL">
            <summary>
            Resets items in a tab control, clearing any that were set to the TCIS_BUTTONPRESSED state.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_HIGHLIGHTITEM">
            <summary>
            Sets the highlight state of a tab item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_SETEXTENDEDSTYLE">
            <summary>
            Sets the extended styles that the tab control will use.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TCM_GETEXTENDEDSTYLE">
            <summary>
            Retrieves the extended styles that are currently in use for the tab control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_TEXT">
            <summary>
            The pszText and cchTextMax members are valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_IMAGE">
            <summary>
            The iImage member is valid
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_PARAM">
            <summary>
            The lParam member is valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_STATE">
            <summary>
            The state and stateMask members are valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_HANDLE">
            <summary>
            The hItem member is valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_SELECTEDIMAGE">
            <summary>
            The iSelectedImage member is valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIF_CHILDREN">
            <summary>
            The cChildren member is valid.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_SELECTED">
            <summary>
            The item is selected. Its appearance depends on whether it has the focus.
            The item will be drawn using the system colors for selection.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_CUT">
            <summary>
            The item is selected as part of a cut-and-paste operation.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_DROPHILITED">
            <summary>
            The item is selected as a drag-and-drop target.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_BOLD">
            <summary>
            The item is bold.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_EXPANDED">
            <summary>
            The item's list of child items is currently expanded; that is, the child items are visible.
            This value applies only to parent items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_EXPANDEDONCE">
            <summary>
            The item's list of child items has been expanded at least once. The TVN_ITEMEXPANDING and
            TVN_ITEMEXPANDED notification messages are not generated for parent items that have this state
            set in response to a TVM_EXPAND message. Using TVE_COLLAPSE and TVE_COLLAPSERESET with
            TVM_EXPAND will cause this state to be reset. This value applies only to parent items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_EXPANDPARTIAL">
            <summary>
            A partially expanded tree-view item. In this state, some, but not all, of the child items are
            visible and the parent item's plus symbol is displayed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_OVERLAYMASK">
            <summary>
            Mask for the bits used to specify the item's overlay image index.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_STATEIMAGEMASK">
            <summary>
            Mask for the bits used to specify the item's state image index.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVIS_USERMASK">
            <summary>
            Same as TVIS_STATEIMAGEMASK.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_INSERTITEM">
            <summary>
            This message inserts a new item in a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_DELETEITEM">
            <summary>
            This message removes an item from a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_EXPAND">
            <summary>
            This message expands or collapses the list of child items, if any, associated with the specified
            parent item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETITEMRECT">
            <summary>
            This message retrieves the bounding rectangle for a tree view item and indicates whether the item is visible.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETCOUNT">
            <summary>
            This message retrieves a count of the items in a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETINDENT">
            <summary>
            This message retrieves the amount, in pixels, that child items are indented relative to their parent items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETINDENT">
            <summary>
            This message sets the width of indentation for a tree view control and redraws the control to reflect the new width.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETITEMAGELIST">
            <summary>
            This message retrieves the handle of the normal or state image list associated with a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETITEMAGELIST">
            <summary>
            This message sets the normal or state image list for a tree view
            control and redraws the control using the new images.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETNEXTITEM">
            <summary>
            This message retrieves the tree view item that bears the specified relationship to a specified item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SELECTITEM">
            <summary>
            Selects the specified tree-view item, scrolls the item into view, or redraws the item in the
            style used to indicate the target of a drag-and-drop operation.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETITEM">
            <summary>
            This message retrieves some or all of the attributes for a tree view item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETITEM">
            <summary>
            This message sets some or all of the attributes of a tree view item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_EDITLABEL">
            <summary>
            This message begins in-place editing of the text of the specified item, replacing the text of
            the item with a single-line edit control containing the text. This message implicitly selects
            and focuses the specified item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETEDITCONTROL">
            <summary>
            This message retrieves the handle of the edit control being used to edit the text of a tree view item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETVISIBLECOUNT">
            <summary>
            This message retrieves the number of items that can be fully visible in the client window of the tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_HITTEST">
            <summary>
            This message determines the location of the specified point relative to the client area of a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_CREATEDRAGIMAGE">
            <summary>
            This message creates a dragging bitmap for the specified item in a tree view control, creates
            an image list for the bitmap, and adds the bitmap to the image list. An application can display
            the image when dragging the item by using the image list functions.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SORTCHILDREN">
            <summary>
            This message sorts the child items of the specified parent item in a tree view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_ENSUREVISIBLE">
            <summary>
            This message ensures that a tree view item is visible, expanding the parent item or scrolling
            the tree view control, if necessary.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SORTCHILDRENCB">
            <summary>
            This message sorts tree view items using an application-defined callback function that compares the items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_ENDEDITLABLENOW">
            <summary>
            This message ends the editing of a label for a tree view item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETISEARCHSTRING">
            <summary>
            This message retrieves the incremental search string for a tree view control. The tree view
            control uses the incremental search string to select an item based on characters entered by the
            user.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETTOOLTIPS">
            <summary>
            Sets a tree-view control's child ToolTip control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETTOOLTIPS">
            <summary>
            Retrieves the handle to the child ToolTip control used by a tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETINSERTMARK">
            <summary>
            Sets the insertion mark in a tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETITEMHEIGHT">
            <summary>
            Sets the height of the tree-view items.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETITEMHEIGHT">
            <summary>
            Retrieves the current height of the each tree-view item.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETBKCOLOR">
            <summary>
            Sets the background color of the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETTEXTCOLOR">
            <summary>
            Sets the text color of the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETBKCOLOR">
            <summary>
            Retrieves the current background color of the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETTEXTCOLOR">
            <summary>
            Retrieves the current text color of the control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETSCROLLTIME">
            <summary>
            Sets the maximum scroll time for the tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETSCROLLTIME">
            <summary>
            Retrieves the maximum scroll time for the tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETINSERTMARKCOLOR">
            <summary>
            Sets the color used to draw the insertion mark for the tree view.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETINSERTMARKCOLOR">
            <summary>
            Retrieves the color used to draw the insertion mark for the tree view.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETITEMSTATE">
            <summary>
            Retrieves some or all of a tree-view item's state attributes.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_SETLINECOLOR">
            <summary>
            Sets the current line color. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_GETLINECOLOR">
            <summary>
            The TVM_GETLINECOLOR message gets the current line color. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_MAPACCIDTOHTREEITEM">
            <summary>
            Maps an accessibility identifier (ID) to an HTREEITEM.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.CommCtrl.TVM_MAPHTREEITEMTOACCID">
            <summary>
            Maps an HTREEITEM to an accessibility identifier (ID).
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.Kernel32">
            <summary>
            Imports Kernel32.dll functions.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.Kernel32.QueryPerformanceCounter(System.Int64@)">
            <summary>
            Retrieves the current value of the high-resolution performance counter. 
            </summary>
            <param name="x">Specifies the variable to receive the current performance-counter value, in counts.</param>
            <returns>If the function succeeds, the return value is <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="T:Genetibase.WinApi.TEXTMETRIC">
            <summary>
            Contains basic information about a physical font. All sizes are specified in logical units; that is,
            they depend on the current mapping mode of the display context.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmHeight">
            <summary>
            Specifies the height (ascent + descent) of characters.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmAscent">
            <summary>
            Specifies the ascent (units above the base line) of characters.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmDescent">
            <summary>
            Specifies the descent (units below the base line) of characters.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmInternalLeading">
            <summary>
            Specifies the amount of leading (space) inside the bounds set by the tmHeight member. Accent
            marks and other diacritical characters may occur in this area. The designer may set this member
            to zero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmExternalLeading">
            <summary>
            Specifies the amount of extra leading (space) that the application adds between rows. Since this
            area is outside the font, it contains no marks and is not altered by text output calls in either
            OPAQUE or TRANSPARENT mode. The designer may set this member to zero. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmAveCharWidth">
            <summary>
            Specifies the average width of characters in the font (generally defined as the width of the
            letter x). This value does not include the overhang required for bold or italic characters.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmMaxCharWidth">
            <summary>
            Specifies the width of the widest character in the font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmWeight">
            <summary>
            Specifies the weight of the font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmOverhang">
            <summary>
            Specifies the extra width per string that may be added to some synthesized fonts. When
            synthesizing some attributes, such as bold or italic, graphics device interface (GDI) or a device
            may have to add width to a string on both a per-character and per-string basis. For example, GDI
            makes a string bold by expanding the spacing of each character and overstriking by an offset
            value; it italicizes a font by shearing the string. In either case, there is an overhang past the
            basic string. For bold strings, the overhang is the distance by which the overstrike is offset.
            For italic strings, the overhang is the amount the top of the font is sheared past the bottom of
            the font. 
            The tmOverhang member enables the application to determine how much of the character width
            returned by a GetTextExtentPoint32 function call on a single character is the actual character
            width and how much is the per-string extra width. The actual width is the extent minus the
            overhang.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmDigitizedAspectX">
            <summary>
            Specifies the horizontal aspect of the device for which the font was designed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmDigitizedAspectY">
            <summary>
            Specifies the vertical aspect of the device for which the font was designed. The ratio of the
            tmDigitizedAspectX and tmDigitizedAspectY members is the aspect ratio of the device for which the
            font was designed.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmFirstChar">
            <summary>
            Specifies the value of the first character defined in the font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmLastChar">
            <summary>
            Specifies the value of the last character defined in the font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmDefaultChar">
            <summary>
            Specifies the value of the character to be substituted for characters not in the font.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmBreakChar">
            <summary>
            Specifies the value of the character that will be used to define word breaks for text
            justification.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmItalic">
            <summary>
            Specifies an italic font if it is nonzero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmUnderlined">
            <summary>
            Specifies an underlined font if it is nonzero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmStruckOut">
            <summary>
            Specifies a strikeout font if it is nonzero.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmPitchAndFamily">
            <summary>
            Specifies information about the pitch, the technology, and the family of a physical font. 
            The four low-order bits of this member specify information about the pitch and the technology of
            the font. A constant is defined for each of the four bits.
            TMPF_FIXED_PITCH - If this bit is set the font is a variable pitch font. If this bit is clear the font is a fixed pitch font. Note very carefully that those meanings are the opposite of what the constant name implies. 
            -or-
            TMPF_VECTOR - If this bit is set the font is a vector font. 
            -or-
            TMPF_TRUETYPE - If this bit is set the font is a TrueType font. 
            -or-
            TMPF_DEVICE - If this bit is set the font is a device font.
            An application should carefully test for qualities encoded in these low-order bits, making no
            arbitrary assumptions. For example, besides having their own bits set, TrueType and PostScript
            fonts set the TMPF_VECTOR bit. A monospace bitmap font has all of these low-order bits clear; a
            proportional bitmap font sets the TMPF_FIXED_PITCH bit. A Postscript printer device font sets the
            TMPF_DEVICE, TMPF_VECTOR, and TMPF_FIXED_PITCH bits. 
            The four high-order bits of tmPitchAndFamily designate the font's font family. An application can
            use the value 0xF0 and the bitwise AND operator to mask out the four low-order bits of
            <paramref name="tmPitchAndFamily"/>, thus obtaining a value that can be directly compared with
            font family names to find an identical match. For information about font families, see the
            description of the LOGFONT structure.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.TEXTMETRIC.tmCharSet">
            <summary>
            Specifies the character set of the font. The character set can be one of the following values. 
            ANSI_CHARSET
            -or-
            BALTIC_CHARSET
            -or-
            CHINESEBIG5_CHARSET
            -or-
            DEFAULT_CHARSET
            -or-
            EASTEUROPE_CHARSET
            -or-
            GB2312_CHARSET
            -or-
            GREEK_CHARSET
            -or-
            HANGUL_CHARSET
            -or-
            MAC_CHARSET
            -or-
            OEM_CHARSET
            -or-
            RUSSIAN_CHARSET
            -or-
            SHIFTJIS_CHARSET
            -or-
            SYMBOL_CHARSET
            -or-
            TURKISH_CHARSET
            -or-
            VIETNAMESE_CHARSET 
            -Korean language edition of Windows-
            JOHAB_CHARSET 
            -Middle East language edition of Windows-
            ARABIC_CHARSET
            -or-
            HEBREW_CHARSET 
            -Thai language edition of Windows- 
            THAI_CHARSET 
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.LOGBRUSH">
            <summary>
            Defines the style, color, and pattern of a physical brush. It is used by the CreateBrushIndirect 
            and ExtCreatePen functions.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LOGBRUSH.lbStyle">
            <summary>
            Specifies the brush style.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LOGBRUSH.lbColor">
            <summary>
            Specifies the color in which the brush is to be drawn.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.LOGBRUSH.lbHatch">
            <summary>
            Specifies a hatch style.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Genetibase.WinApi.Properties.Resources.Message_InvalidHWnd">
            <summary>
              Looks up a localized string similar to Specified handle 0x{0:X8} does not represent a window..
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.NMHDR">
            <summary>
            Contains information about a notification message. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMHDR.hwndFrom">
            <summary>
            Window handle to the control sending a message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMHDR.idFrom">
            <summary>
            Identifier of the control sending a message.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMHDR.code">
            <summary>
            Notification code. This member can be a control-specific notification code or it can be one of the common notification codes. 
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.SERVER_INFO_101">
            <summary>
            Contains information about the specified server, including name, platform, type of server, 
            and associated software.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_platform_id">
            <summary>
            Specifies the information level to use for platform-specific information. This member can 
            be one of the following values, defined in the lmcons.h file: 
            PLATFORM_ID_DOS, PLATFORM_ID_OS2, PLATFORM_ID_NT, PLATFORM_ID_OSF, or PLATFORM_ID_VMS.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_name">
            <summary>
            Pointer to a Unicode string specifying the name of a server.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_version_major">
            <summary>
            Specifies, in the least significant 4 bits of the byte, the major release version number of the operating system. The most significant 4 bits of the byte specifies the server type. 
            The mask MAJOR_VERSION_MASK should be used to ensure correct results.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_version_minor">
            <summary>
            Specifies the minor release version number of the operating system.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_type">
            <summary>
            Specifies the type of software the computer is running.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.SERVER_INFO_101.sv101_comment">
            <summary>
            Pointer to a Unicode string specifying a comment describing the server.
            The comment can be <see langword="null"/>.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.DwmApi">
            <summary>
            Imports DwmApi.dll functions.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.DwmApi.DwmGetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current value of the specified DWMWINDOWATTRIBUTE that is applied to the window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute data is retrieved.</param>
            <param name="dwAttribute">The DWMWINDOWATTRIBUTE to retrieve.</param>
            <param name="pvAttribute">The pointer that receives the current value of the dwAttribute.
            The type is dependent on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size of the DWMWINDOWATTRIBUTE value being retrieved. The size is
            dependent on the type of the pvAttribute parameter.</param>
            <returns>S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="M:Genetibase.WinApi.DwmApi.DwmIsCompositionEnabled">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            Applications can listen for composition state changes by handling the WM_DWMCOMPOSITIONCHANGED
            notification.
            </summary>
            <returns>S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="M:Genetibase.WinApi.DwmApi.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Sets the value of the specified DWMWINDOWATTRIBUTE to apply to the window.
            </summary>
            <param name="hWnd">The window handle to apply the given attribute.</param>
            <param name="dwAttribute">The DWMWINDOWATTRIBUTE to apply to the window.</param>
            <param name="pvAttribute">The pointer to the DWMWINDOWATTRIBUTE value to apply.
            The type is dependent on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size of the DWMWINDOWATTRIBUTE value being retrieved.
            The size is dependent on the type of the pvAttribute parameter.</param>
            <returns>S_OK if successful, or an error value otherwise.</returns>
        </member>
        <member name="T:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE">
            <summary>
            Specifies window attributes for non-client rendering.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_ENABLED">
            <summary>
            The attribute to determine non-client rendering.
            When calling DwmGetWindowAttribute, the value type is BOOL.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_POLICY">
            <summary>
            The attribute to retrieve or set non-client rendering policy.
            When calling DwmSetWindowAttribute, the value type is DWMNCRENDERINGPOLICY.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            The attribute to enable or forcibly disable Desktop Window Manager (DWM)
            transitions. When calling DwmSetWindowAttribute, the value type is BOOL.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE.DWMWA_ALLOW_NCPAINT">
            <summary>
            The attribute to allow content rendered in the non-client area to be visible
            on the DWM drawn frame.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.DwmApi.DWMWINDOWATTRIBUTE.DWMWA_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.POINT">
            <summary>
            Defines the x- and y- coordinates of a point. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.POINT.x">
            <summary>
            Specifies the point's x-coordinate.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.POINT.y">
            <summary>
            Specifies the point's y-coordinate.
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.POINT.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            true if obj and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.POINT.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.POINT.ToString">
            <summary>
            Returns the fully qualified type name of this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> containing a fully qualified type name.
            </returns>
        </member>
        <member name="M:Genetibase.WinApi.POINT.op_Implicit(System.Drawing.Point)~Genetibase.WinApi.POINT">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.POINT.op_Implicit(Genetibase.WinApi.POINT)~System.Drawing.Point">
            <summary>
            </summary>
        </member>
        <member name="M:Genetibase.WinApi.POINT.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Genetibase.WinApi.POINT"/> structure.
            </summary>
        </member>
        <member name="T:Genetibase.WinApi.NMTVCUSTOMDRAW">
            <summary>
            Contains information specific to an NM_CUSTOMDRAW (tree view) notification message sent by a tree-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMTVCUSTOMDRAW.nmcd">
            <summary>
            NMCUSTOMDRAW structure that contains general custom draw information.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMTVCUSTOMDRAW.clrText">
            <summary>
            COLORREF value representing the color that will be used to display text foreground in the list-view control.
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMTVCUSTOMDRAW.clrTextBk">
            <summary>
            COLORREF value representing the color that will be used to display text background in the list-view control. 
            </summary>
        </member>
        <member name="F:Genetibase.WinApi.NMTVCUSTOMDRAW.iSubItem">
            <summary>
            Zero-based level of the item being drawn. The root item is at level zero, a child of the root item is at level one, and so on.
            </summary>
        </member>
    </members>
</doc>
